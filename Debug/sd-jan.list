
sd-jan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012650  08000200  08000200  00010200  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000165c  08012850  08012850  00022850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013eac  08013eac  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08013eac  08013eac  00023eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013eb4  08013eb4  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08013eb4  08013eb4  00023eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08013ed4  08013ed4  00023ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08013ee0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  200000a8  08013f88  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000123c  08013f88  0003123c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000496a0  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009a85  00000000  00000000  00079778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027a8  00000000  00000000  00083200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024f0  00000000  00000000  000859a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000333af  00000000  00000000  00087e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003892a  00000000  00000000  000bb247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d2c9  00000000  00000000  000f3b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00220e3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b60c  00000000  00000000  00220e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000a8 	.word	0x200000a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08012838 	.word	0x08012838

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000ac 	.word	0x200000ac
 800023c:	08012838 	.word	0x08012838

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr

08000304 <__aeabi_uldivmod>:
 8000304:	b953      	cbnz	r3, 800031c <__aeabi_uldivmod+0x18>
 8000306:	b94a      	cbnz	r2, 800031c <__aeabi_uldivmod+0x18>
 8000308:	2900      	cmp	r1, #0
 800030a:	bf08      	it	eq
 800030c:	2800      	cmpeq	r0, #0
 800030e:	bf1c      	itt	ne
 8000310:	f04f 31ff 	movne.w	r1, #4294967295
 8000314:	f04f 30ff 	movne.w	r0, #4294967295
 8000318:	f000 b974 	b.w	8000604 <__aeabi_idiv0>
 800031c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000320:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000324:	f000 f806 	bl	8000334 <__udivmoddi4>
 8000328:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000330:	b004      	add	sp, #16
 8000332:	4770      	bx	lr

08000334 <__udivmoddi4>:
 8000334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000338:	9d08      	ldr	r5, [sp, #32]
 800033a:	4604      	mov	r4, r0
 800033c:	468e      	mov	lr, r1
 800033e:	2b00      	cmp	r3, #0
 8000340:	d14d      	bne.n	80003de <__udivmoddi4+0xaa>
 8000342:	428a      	cmp	r2, r1
 8000344:	4694      	mov	ip, r2
 8000346:	d969      	bls.n	800041c <__udivmoddi4+0xe8>
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	b152      	cbz	r2, 8000364 <__udivmoddi4+0x30>
 800034e:	fa01 f302 	lsl.w	r3, r1, r2
 8000352:	f1c2 0120 	rsb	r1, r2, #32
 8000356:	fa20 f101 	lsr.w	r1, r0, r1
 800035a:	fa0c fc02 	lsl.w	ip, ip, r2
 800035e:	ea41 0e03 	orr.w	lr, r1, r3
 8000362:	4094      	lsls	r4, r2
 8000364:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000368:	0c21      	lsrs	r1, r4, #16
 800036a:	fbbe f6f8 	udiv	r6, lr, r8
 800036e:	fa1f f78c 	uxth.w	r7, ip
 8000372:	fb08 e316 	mls	r3, r8, r6, lr
 8000376:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800037a:	fb06 f107 	mul.w	r1, r6, r7
 800037e:	4299      	cmp	r1, r3
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x64>
 8000382:	eb1c 0303 	adds.w	r3, ip, r3
 8000386:	f106 30ff 	add.w	r0, r6, #4294967295
 800038a:	f080 811f 	bcs.w	80005cc <__udivmoddi4+0x298>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 811c 	bls.w	80005cc <__udivmoddi4+0x298>
 8000394:	3e02      	subs	r6, #2
 8000396:	4463      	add	r3, ip
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b2a4      	uxth	r4, r4
 800039c:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a0:	fb08 3310 	mls	r3, r8, r0, r3
 80003a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003a8:	fb00 f707 	mul.w	r7, r0, r7
 80003ac:	42a7      	cmp	r7, r4
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x92>
 80003b0:	eb1c 0404 	adds.w	r4, ip, r4
 80003b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b8:	f080 810a 	bcs.w	80005d0 <__udivmoddi4+0x29c>
 80003bc:	42a7      	cmp	r7, r4
 80003be:	f240 8107 	bls.w	80005d0 <__udivmoddi4+0x29c>
 80003c2:	4464      	add	r4, ip
 80003c4:	3802      	subs	r0, #2
 80003c6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ca:	1be4      	subs	r4, r4, r7
 80003cc:	2600      	movs	r6, #0
 80003ce:	b11d      	cbz	r5, 80003d8 <__udivmoddi4+0xa4>
 80003d0:	40d4      	lsrs	r4, r2
 80003d2:	2300      	movs	r3, #0
 80003d4:	e9c5 4300 	strd	r4, r3, [r5]
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	428b      	cmp	r3, r1
 80003e0:	d909      	bls.n	80003f6 <__udivmoddi4+0xc2>
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	f000 80ef 	beq.w	80005c6 <__udivmoddi4+0x292>
 80003e8:	2600      	movs	r6, #0
 80003ea:	e9c5 0100 	strd	r0, r1, [r5]
 80003ee:	4630      	mov	r0, r6
 80003f0:	4631      	mov	r1, r6
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	fab3 f683 	clz	r6, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d14a      	bne.n	8000494 <__udivmoddi4+0x160>
 80003fe:	428b      	cmp	r3, r1
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xd4>
 8000402:	4282      	cmp	r2, r0
 8000404:	f200 80f9 	bhi.w	80005fa <__udivmoddi4+0x2c6>
 8000408:	1a84      	subs	r4, r0, r2
 800040a:	eb61 0303 	sbc.w	r3, r1, r3
 800040e:	2001      	movs	r0, #1
 8000410:	469e      	mov	lr, r3
 8000412:	2d00      	cmp	r5, #0
 8000414:	d0e0      	beq.n	80003d8 <__udivmoddi4+0xa4>
 8000416:	e9c5 4e00 	strd	r4, lr, [r5]
 800041a:	e7dd      	b.n	80003d8 <__udivmoddi4+0xa4>
 800041c:	b902      	cbnz	r2, 8000420 <__udivmoddi4+0xec>
 800041e:	deff      	udf	#255	; 0xff
 8000420:	fab2 f282 	clz	r2, r2
 8000424:	2a00      	cmp	r2, #0
 8000426:	f040 8092 	bne.w	800054e <__udivmoddi4+0x21a>
 800042a:	eba1 010c 	sub.w	r1, r1, ip
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2601      	movs	r6, #1
 8000438:	0c20      	lsrs	r0, r4, #16
 800043a:	fbb1 f3f7 	udiv	r3, r1, r7
 800043e:	fb07 1113 	mls	r1, r7, r3, r1
 8000442:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000446:	fb0e f003 	mul.w	r0, lr, r3
 800044a:	4288      	cmp	r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x12c>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f103 38ff 	add.w	r8, r3, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x12a>
 8000458:	4288      	cmp	r0, r1
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2c0>
 800045e:	4643      	mov	r3, r8
 8000460:	1a09      	subs	r1, r1, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1110 	mls	r1, r7, r0, r1
 800046c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x156>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x154>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2ca>
 8000488:	4608      	mov	r0, r1
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000492:	e79c      	b.n	80003ce <__udivmoddi4+0x9a>
 8000494:	f1c6 0720 	rsb	r7, r6, #32
 8000498:	40b3      	lsls	r3, r6
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa20 f407 	lsr.w	r4, r0, r7
 80004a6:	fa01 f306 	lsl.w	r3, r1, r6
 80004aa:	431c      	orrs	r4, r3
 80004ac:	40f9      	lsrs	r1, r7
 80004ae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b2:	fa00 f306 	lsl.w	r3, r0, r6
 80004b6:	fbb1 f8f9 	udiv	r8, r1, r9
 80004ba:	0c20      	lsrs	r0, r4, #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fb09 1118 	mls	r1, r9, r8, r1
 80004c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c8:	fb08 f00e 	mul.w	r0, r8, lr
 80004cc:	4288      	cmp	r0, r1
 80004ce:	fa02 f206 	lsl.w	r2, r2, r6
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b8>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2bc>
 80004e0:	4288      	cmp	r0, r1
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2bc>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004f4:	fb09 1110 	mls	r1, r9, r0, r1
 80004f8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000500:	458e      	cmp	lr, r1
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1e2>
 8000504:	eb1c 0101 	adds.w	r1, ip, r1
 8000508:	f100 34ff 	add.w	r4, r0, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2b4>
 800050e:	458e      	cmp	lr, r1
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2b4>
 8000512:	3802      	subs	r0, #2
 8000514:	4461      	add	r1, ip
 8000516:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800051a:	fba0 9402 	umull	r9, r4, r0, r2
 800051e:	eba1 010e 	sub.w	r1, r1, lr
 8000522:	42a1      	cmp	r1, r4
 8000524:	46c8      	mov	r8, r9
 8000526:	46a6      	mov	lr, r4
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x2a4>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x2a0>
 800052c:	b15d      	cbz	r5, 8000546 <__udivmoddi4+0x212>
 800052e:	ebb3 0208 	subs.w	r2, r3, r8
 8000532:	eb61 010e 	sbc.w	r1, r1, lr
 8000536:	fa01 f707 	lsl.w	r7, r1, r7
 800053a:	fa22 f306 	lsr.w	r3, r2, r6
 800053e:	40f1      	lsrs	r1, r6
 8000540:	431f      	orrs	r7, r3
 8000542:	e9c5 7100 	strd	r7, r1, [r5]
 8000546:	2600      	movs	r6, #0
 8000548:	4631      	mov	r1, r6
 800054a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	40d8      	lsrs	r0, r3
 8000554:	fa0c fc02 	lsl.w	ip, ip, r2
 8000558:	fa21 f303 	lsr.w	r3, r1, r3
 800055c:	4091      	lsls	r1, r2
 800055e:	4301      	orrs	r1, r0
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb3 f0f7 	udiv	r0, r3, r7
 800056c:	fb07 3610 	mls	r6, r7, r0, r3
 8000570:	0c0b      	lsrs	r3, r1, #16
 8000572:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000576:	fb00 f60e 	mul.w	r6, r0, lr
 800057a:	429e      	cmp	r6, r3
 800057c:	fa04 f402 	lsl.w	r4, r4, r2
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x260>
 8000582:	eb1c 0303 	adds.w	r3, ip, r3
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b8>
 800058c:	429e      	cmp	r6, r3
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b8>
 8000590:	3802      	subs	r0, #2
 8000592:	4463      	add	r3, ip
 8000594:	1b9b      	subs	r3, r3, r6
 8000596:	b289      	uxth	r1, r1
 8000598:	fbb3 f6f7 	udiv	r6, r3, r7
 800059c:	fb07 3316 	mls	r3, r7, r6, r3
 80005a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a4:	fb06 f30e 	mul.w	r3, r6, lr
 80005a8:	428b      	cmp	r3, r1
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x28a>
 80005ac:	eb1c 0101 	adds.w	r1, ip, r1
 80005b0:	f106 38ff 	add.w	r8, r6, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2b0>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2b0>
 80005ba:	3e02      	subs	r6, #2
 80005bc:	4461      	add	r1, ip
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0x104>
 80005c6:	462e      	mov	r6, r5
 80005c8:	4628      	mov	r0, r5
 80005ca:	e705      	b.n	80003d8 <__udivmoddi4+0xa4>
 80005cc:	4606      	mov	r6, r0
 80005ce:	e6e3      	b.n	8000398 <__udivmoddi4+0x64>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6f8      	b.n	80003c6 <__udivmoddi4+0x92>
 80005d4:	454b      	cmp	r3, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f8>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005e0:	3801      	subs	r0, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f8>
 80005e4:	4646      	mov	r6, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x28a>
 80005e8:	4620      	mov	r0, r4
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1e2>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x260>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b8>
 80005f4:	3b02      	subs	r3, #2
 80005f6:	4461      	add	r1, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x12c>
 80005fa:	4630      	mov	r0, r6
 80005fc:	e709      	b.n	8000412 <__udivmoddi4+0xde>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x156>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b092      	sub	sp, #72	; 0x48
 800060c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f001 f887 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f93b 	bl	800088c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  portNVIC_SYSTICK_CTRL_REG = 0; // Systick interrupt causes Hard Fault without OS running.
 8000616:	4b8a      	ldr	r3, [pc, #552]	; (8000840 <main+0x238>)
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
     // will be reenabled by OS
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 fbac 	bl	8000d78 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000620:	f000 fb7a 	bl	8000d18 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000624:	f000 f9c6 	bl	80009b4 <MX_RTC_Init>
  MX_TIM8_Init();
 8000628:	f000 fab8 	bl	8000b9c <MX_TIM8_Init>
  MX_TIM5_Init();
 800062c:	f000 fa66 	bl	8000afc <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8000630:	f000 fb42 	bl	8000cb8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000634:	f005 fde4 	bl	8006200 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000638:	f000 fa22 	bl	8000a80 <MX_SPI2_Init>
  MX_SPI1_Init();
 800063c:	f000 f9e2 	bl	8000a04 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000640:	f000 f978 	bl	8000934 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#if defined HAL_RTC_MODULE_ENABLED
  {
   const char* date = __DATE__;
 8000644:	4b7f      	ldr	r3, [pc, #508]	; (8000844 <main+0x23c>)
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
   const char* time = __TIME__;
 8000648:	4b7f      	ldr	r3, [pc, #508]	; (8000848 <main+0x240>)
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
    * with:  MMM: Three Letters for month
    *        dd two numbers for day (01 ... 31)
    *        yyyy four number for year
    */
   char     month[4];
   uint32_t day   = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t year  = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
   uint8_t monthNum = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   sscanf(date,"%3s %" SCNu32 "%" SCNu32, month, &day, &year);
 800065a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800065e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	460b      	mov	r3, r1
 800066a:	4978      	ldr	r1, [pc, #480]	; (800084c <main+0x244>)
 800066c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800066e:	f011 f803 	bl	8011678 <siscanf>
   if (0 == strcmp(month, "Jan") ) monthNum = RTC_MONTH_JANUARY;
 8000672:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000676:	4976      	ldr	r1, [pc, #472]	; (8000850 <main+0x248>)
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fe31 	bl	80002e0 <strcmp>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d103      	bne.n	800068c <main+0x84>
 8000684:	2301      	movs	r3, #1
 8000686:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800068a:	e091      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Feb") ) monthNum = RTC_MONTH_FEBRUARY;
 800068c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000690:	4970      	ldr	r1, [pc, #448]	; (8000854 <main+0x24c>)
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fe24 	bl	80002e0 <strcmp>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <main+0x9e>
 800069e:	2302      	movs	r3, #2
 80006a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80006a4:	e084      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Mar") ) monthNum = RTC_MONTH_MARCH;
 80006a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006aa:	496b      	ldr	r1, [pc, #428]	; (8000858 <main+0x250>)
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fe17 	bl	80002e0 <strcmp>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d103      	bne.n	80006c0 <main+0xb8>
 80006b8:	2303      	movs	r3, #3
 80006ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80006be:	e077      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Apr") ) monthNum = RTC_MONTH_APRIL;
 80006c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006c4:	4965      	ldr	r1, [pc, #404]	; (800085c <main+0x254>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fe0a 	bl	80002e0 <strcmp>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d103      	bne.n	80006da <main+0xd2>
 80006d2:	2304      	movs	r3, #4
 80006d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80006d8:	e06a      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "May") ) monthNum = RTC_MONTH_MAY;
 80006da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006de:	4960      	ldr	r1, [pc, #384]	; (8000860 <main+0x258>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fdfd 	bl	80002e0 <strcmp>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <main+0xec>
 80006ec:	2305      	movs	r3, #5
 80006ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80006f2:	e05d      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Jun") ) monthNum = RTC_MONTH_JUNE;
 80006f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006f8:	495a      	ldr	r1, [pc, #360]	; (8000864 <main+0x25c>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f7ff fdf0 	bl	80002e0 <strcmp>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d103      	bne.n	800070e <main+0x106>
 8000706:	2306      	movs	r3, #6
 8000708:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800070c:	e050      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Jul") ) monthNum = RTC_MONTH_JULY;
 800070e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000712:	4955      	ldr	r1, [pc, #340]	; (8000868 <main+0x260>)
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fde3 	bl	80002e0 <strcmp>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d103      	bne.n	8000728 <main+0x120>
 8000720:	2307      	movs	r3, #7
 8000722:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000726:	e043      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Aug") ) monthNum = RTC_MONTH_AUGUST;
 8000728:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800072c:	494f      	ldr	r1, [pc, #316]	; (800086c <main+0x264>)
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fdd6 	bl	80002e0 <strcmp>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d103      	bne.n	8000742 <main+0x13a>
 800073a:	2308      	movs	r3, #8
 800073c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000740:	e036      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Sep") ) monthNum = RTC_MONTH_SEPTEMBER;
 8000742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000746:	494a      	ldr	r1, [pc, #296]	; (8000870 <main+0x268>)
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fdc9 	bl	80002e0 <strcmp>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d103      	bne.n	800075c <main+0x154>
 8000754:	2309      	movs	r3, #9
 8000756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800075a:	e029      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Oct") ) monthNum = 10;
 800075c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000760:	4944      	ldr	r1, [pc, #272]	; (8000874 <main+0x26c>)
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff fdbc 	bl	80002e0 <strcmp>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d103      	bne.n	8000776 <main+0x16e>
 800076e:	230a      	movs	r3, #10
 8000770:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8000774:	e01c      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Nov") ) monthNum = 11;
 8000776:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077a:	493f      	ldr	r1, [pc, #252]	; (8000878 <main+0x270>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fdaf 	bl	80002e0 <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d103      	bne.n	8000790 <main+0x188>
 8000788:	230b      	movs	r3, #11
 800078a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800078e:	e00f      	b.n	80007b0 <main+0x1a8>
   else if (0 == strcmp(month, "Dec") ) monthNum = 12;
 8000790:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000794:	4939      	ldr	r1, [pc, #228]	; (800087c <main+0x274>)
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fda2 	bl	80002e0 <strcmp>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d103      	bne.n	80007aa <main+0x1a2>
 80007a2:	230c      	movs	r3, #12
 80007a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007a8:	e002      	b.n	80007b0 <main+0x1a8>
   else monthNum = RTC_MONTH_DECEMBER; // error!!!
 80007aa:	2312      	movs	r3, #18
 80007ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

   RTC_DateTypeDef rtcDate;
   rtcDate.WeekDay =  RTC_WEEKDAY_MONDAY;  // We don:t know it!
 80007b0:	2301      	movs	r3, #1
 80007b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   rtcDate.Month   = monthNum;
 80007b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   rtcDate.Date    = day;
 80007be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   rtcDate.Year    = year%100;   // must be between 0 .. 99
 80007c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c8:	4b2d      	ldr	r3, [pc, #180]	; (8000880 <main+0x278>)
 80007ca:	fba3 1302 	umull	r1, r3, r3, r2
 80007ce:	095b      	lsrs	r3, r3, #5
 80007d0:	2164      	movs	r1, #100	; 0x64
 80007d2:	fb01 f303 	mul.w	r3, r1, r3
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN );
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	4827      	ldr	r0, [pc, #156]	; (8000884 <main+0x27c>)
 80007e8:	f003 f84c 	bl	8003884 <HAL_RTC_SetDate>
    *
    * with:  hh: two numbers for hours
    *        mm: two numbers for minutes
    *        ss: two numbers for seconds
    */
   uint32_t hours   = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
   uint32_t minutes = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
   uint32_t seconds = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
   sscanf(time,"%" SCNu32 ":%" SCNu32 ":%" SCNu32, &hours, &minutes, &seconds);
 80007f8:	f107 011c 	add.w	r1, r7, #28
 80007fc:	f107 0220 	add.w	r2, r7, #32
 8000800:	f107 0318 	add.w	r3, r7, #24
 8000804:	9300      	str	r3, [sp, #0]
 8000806:	460b      	mov	r3, r1
 8000808:	491f      	ldr	r1, [pc, #124]	; (8000888 <main+0x280>)
 800080a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800080c:	f010 ff34 	bl	8011678 <siscanf>
   RTC_TimeTypeDef rtcTime;

   rtcTime.Hours          = hours;
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	713b      	strb	r3, [r7, #4]
   rtcTime.Minutes        = minutes;
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	717b      	strb	r3, [r7, #5]
   rtcTime.Seconds        = seconds;
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	71bb      	strb	r3, [r7, #6]
   rtcTime.TimeFormat     = RTC_HOURFORMAT12_AM;
 8000822:	2300      	movs	r3, #0
 8000824:	71fb      	strb	r3, [r7, #7]
   rtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
   rtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]

   HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN );
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4813      	ldr	r0, [pc, #76]	; (8000884 <main+0x27c>)
 8000836:	f002 ff88 	bl	800374a <HAL_RTC_SetTime>
  }
#endif
  startApplication();
 800083a:	f00c fee9 	bl	800d610 <startApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083e:	e7fe      	b.n	800083e <main+0x236>
 8000840:	e000e010 	.word	0xe000e010
 8000844:	08012850 	.word	0x08012850
 8000848:	0801285c 	.word	0x0801285c
 800084c:	08012868 	.word	0x08012868
 8000850:	08012874 	.word	0x08012874
 8000854:	08012878 	.word	0x08012878
 8000858:	0801287c 	.word	0x0801287c
 800085c:	08012880 	.word	0x08012880
 8000860:	08012884 	.word	0x08012884
 8000864:	08012888 	.word	0x08012888
 8000868:	0801288c 	.word	0x0801288c
 800086c:	08012890 	.word	0x08012890
 8000870:	08012894 	.word	0x08012894
 8000874:	08012898 	.word	0x08012898
 8000878:	0801289c 	.word	0x0801289c
 800087c:	080128a0 	.word	0x080128a0
 8000880:	51eb851f 	.word	0x51eb851f
 8000884:	20000118 	.word	0x20000118
 8000888:	080128a4 	.word	0x080128a4

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b096      	sub	sp, #88	; 0x58
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2244      	movs	r2, #68	; 0x44
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f010 fa34 	bl	8010d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	463b      	mov	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b2:	f001 fbbd 	bl	8002030 <HAL_PWREx_ControlVoltageScaling>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008bc:	f000 face 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80008c0:	230a      	movs	r3, #10
 80008c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ca:	2310      	movs	r3, #16
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008ce:	2301      	movs	r3, #1
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d6:	2302      	movs	r3, #2
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008de:	230a      	movs	r3, #10
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e2:	2307      	movs	r3, #7
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 fbf2 	bl	80020dc <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80008fe:	f000 faad 	bl	8000e5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2303      	movs	r3, #3
 8000908:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f001 ffba 	bl	8002894 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000926:	f000 fa99 	bl	8000e5c <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3758      	adds	r7, #88	; 0x58
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_I2C1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000970:	f001 fa2a 	bl	8001dc8 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 fa6f 	bl	8000e5c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000982:	f001 fab0 	bl	8001ee6 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 fa66 	bl	8000e5c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000994:	f001 faf2 	bl	8001f7c <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fa5d 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000c4 	.word	0x200000c4
 80009ac:	40005400 	.word	0x40005400
 80009b0:	10909cec 	.word	0x10909cec

080009b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <MX_RTC_Init+0x48>)
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <MX_RTC_Init+0x4c>)
 80009bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <MX_RTC_Init+0x48>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_RTC_Init+0x48>)
 80009c6:	227f      	movs	r2, #127	; 0x7f
 80009c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <MX_RTC_Init+0x48>)
 80009cc:	22ff      	movs	r2, #255	; 0xff
 80009ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_RTC_Init+0x48>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009d6:	4b09      	ldr	r3, [pc, #36]	; (80009fc <MX_RTC_Init+0x48>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_RTC_Init+0x48>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <MX_RTC_Init+0x48>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_RTC_Init+0x48>)
 80009ea:	f002 fe33 	bl	8003654 <HAL_RTC_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80009f4:	f000 fa32 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000118 	.word	0x20000118
 8000a00:	40002800 	.word	0x40002800

08000a04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a08:	4b1b      	ldr	r3, [pc, #108]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a0a:	4a1c      	ldr	r2, [pc, #112]	; (8000a7c <MX_SPI1_Init+0x78>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a1e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a3a:	2238      	movs	r2, #56	; 0x38
 8000a3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a52:	2207      	movs	r2, #7
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a5e:	2208      	movs	r2, #8
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_SPI1_Init+0x74>)
 8000a64:	f003 f84c 	bl	8003b00 <HAL_SPI_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a6e:	f000 f9f5 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	2000013c 	.word	0x2000013c
 8000a7c:	40013000 	.word	0x40013000

08000a80 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <MX_SPI2_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a90:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000a9a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a9e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000aae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ace:	2207      	movs	r2, #7
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_SPI2_Init+0x74>)
 8000ae0:	f003 f80e 	bl	8003b00 <HAL_SPI_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 f9b7 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200001a0 	.word	0x200001a0
 8000af8:	40003800 	.word	0x40003800

08000afc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]
 8000b0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b1a:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b1c:	4a1e      	ldr	r2, [pc, #120]	; (8000b98 <MX_TIM5_Init+0x9c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 800;
 8000b20:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b22:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000b26:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000b2e:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b42:	4814      	ldr	r0, [pc, #80]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b44:	f003 fbf6 	bl	8004334 <HAL_TIM_Base_Init>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8000b4e:	f000 f985 	bl	8000e5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	480d      	ldr	r0, [pc, #52]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b60:	f003 ff08 	bl	8004974 <HAL_TIM_ConfigClockSource>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8000b6a:	f000 f977 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_TIM5_Init+0x98>)
 8000b7c:	f004 fc00 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8000b86:	f000 f969 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3720      	adds	r7, #32
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000204 	.word	0x20000204
 8000b98:	40000c00 	.word	0x40000c00

08000b9c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b096      	sub	sp, #88	; 0x58
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]
 8000bbe:	615a      	str	r2, [r3, #20]
 8000bc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	222c      	movs	r2, #44	; 0x2c
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f010 f89d 	bl	8010d08 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000bce:	4b38      	ldr	r3, [pc, #224]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bd0:	4a38      	ldr	r2, [pc, #224]	; (8000cb4 <MX_TIM8_Init+0x118>)
 8000bd2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b35      	ldr	r3, [pc, #212]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000be8:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000bf0:	4b2f      	ldr	r3, [pc, #188]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8000bfc:	482c      	ldr	r0, [pc, #176]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000bfe:	f003 fcc9 	bl	8004594 <HAL_TIM_OC_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8000c08:	f000 f928 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c10:	2300      	movs	r3, #0
 8000c12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000c18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4824      	ldr	r0, [pc, #144]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000c20:	f004 fbae 	bl	8005380 <HAL_TIMEx_MasterConfigSynchronization>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8000c2a:	f000 f917 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c4e:	2208      	movs	r2, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	4817      	ldr	r0, [pc, #92]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000c54:	f003 fe14 	bl	8004880 <HAL_TIM_OC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8000c5e:	f000 f8fd 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_TIM8_Init+0x114>)
 8000c98:	f004 fbfa 	bl	8005490 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8000ca2:	f000 f8db 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	3758      	adds	r7, #88	; 0x58
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000250 	.word	0x20000250
 8000cb4:	40013400 	.word	0x40013400

08000cb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cbc:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <MX_USART2_UART_Init+0x5c>)
 8000cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cc2:	4b13      	ldr	r3, [pc, #76]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cca:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cdc:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cde:	220c      	movs	r2, #12
 8000ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ce2:	4b0b      	ldr	r3, [pc, #44]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce8:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_USART2_UART_Init+0x58>)
 8000cfc:	f004 fc64 	bl	80055c8 <HAL_UART_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d06:	f000 f8a9 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000029c 	.word	0x2000029c
 8000d14:	40004400 	.word	0x40004400

08000d18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MX_USART3_UART_Init+0x5c>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART3_UART_Init+0x58>)
 8000d5c:	f004 fc34 	bl	80055c8 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d66:	f000 f879 	bl	8000e5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000320 	.word	0x20000320
 8000d74:	40004800 	.word	0x40004800

08000d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b31      	ldr	r3, [pc, #196]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a30      	ldr	r2, [pc, #192]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b2e      	ldr	r3, [pc, #184]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da6:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a2a      	ldr	r2, [pc, #168]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b28      	ldr	r3, [pc, #160]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dda:	4a1e      	ldr	r2, [pc, #120]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_GPIO_Init+0xdc>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|SD_CS_Pin|SPI1_SC_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2164      	movs	r1, #100	; 0x64
 8000df2:	4819      	ldr	r0, [pc, #100]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000df4:	f000 ffd0 	bl	8001d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f000 fe19 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e12:	2304      	movs	r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	480b      	ldr	r0, [pc, #44]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000e2a:	f000 fe0b 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin SPI1_SC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SPI1_SC_Pin;
 8000e2e:	2360      	movs	r3, #96	; 0x60
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e36:	2301      	movs	r3, #1
 8000e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_GPIO_Init+0xe0>)
 8000e46:	f000 fdfd 	bl	8001a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40021000 	.word	0x40021000
 8000e58:	48000400 	.word	0x48000400

08000e5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <Error_Handler+0x8>
	...

08000e68 <_write>:

#define WRITEFUNC _write
#define READFUNC _read

int WRITEFUNC(int iFileHandle, char *pcBuffer, int iLength)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]

    HAL_UART_Transmit (stdio, (uint8_t *)pcBuffer, iLength, 0xFFFF);
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <_write+0x28>)
 8000e76:	6818      	ldr	r0, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	f004 fbef 	bl	8005664 <HAL_UART_Transmit>
    return iLength;
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000000 	.word	0x20000000

08000e94 <_read>:


int READFUNC (int iFileHandle, char *pcBuffer, int iLength)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
    HAL_UART_Receive (stdio, (uint8_t *)pcBuffer, iLength, 0xFFFF);
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <_read+0x28>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	f004 fc6d 	bl	800578c <HAL_UART_Receive>
    return iLength;
 8000eb2:	687b      	ldr	r3, [r7, #4]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	; (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ac      	sub	sp, #176	; 0xb0
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2288      	movs	r2, #136	; 0x88
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f00f feed 	bl	8010d08 <memset>
  if(hi2c->Instance==I2C1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <HAL_I2C_MspInit+0xc8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d147      	bne.n	8000fc8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f38:	2340      	movs	r3, #64	; 0x40
 8000f3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fec9 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f50:	f7ff ff84 	bl	8000e5c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <HAL_I2C_MspInit+0xcc>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <HAL_I2C_MspInit+0xcc>)
 8000f5a:	f043 0302 	orr.w	r3, r3, #2
 8000f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_I2C_MspInit+0xcc>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|HW_I2C_SDA_Pin;
 8000f6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f86:	2304      	movs	r3, #4
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f90:	4619      	mov	r1, r3
 8000f92:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <HAL_I2C_MspInit+0xd0>)
 8000f94:	f000 fd56 	bl	8001a44 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_PB8);
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_I2C_MspInit+0xd4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	; (8000fdc <HAL_I2C_MspInit+0xd4>)
 8000f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa2:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_PB9);
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_I2C_MspInit+0xd4>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <HAL_I2C_MspInit+0xd4>)
 8000faa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000fae:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_I2C_MspInit+0xcc>)
 8000fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_I2C_MspInit+0xcc>)
 8000fb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fba:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_I2C_MspInit+0xcc>)
 8000fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fc8:	bf00      	nop
 8000fca:	37b0      	adds	r7, #176	; 0xb0
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	40010000 	.word	0x40010000

08000fe0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0a4      	sub	sp, #144	; 0x90
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2288      	movs	r2, #136	; 0x88
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f00f fe89 	bl	8010d08 <memset>
  if(hrtc->Instance==RTC)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a10      	ldr	r2, [pc, #64]	; (800103c <HAL_RTC_MspInit+0x5c>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d118      	bne.n	8001032 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800100a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100e:	f107 0308 	add.w	r3, r7, #8
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fe62 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800101e:	f7ff ff1d 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001022:	4b07      	ldr	r3, [pc, #28]	; (8001040 <HAL_RTC_MspInit+0x60>)
 8001024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <HAL_RTC_MspInit+0x60>)
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001032:	bf00      	nop
 8001034:	3790      	adds	r7, #144	; 0x90
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40002800 	.word	0x40002800
 8001040:	40021000 	.word	0x40021000

08001044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 031c 	add.w	r3, r7, #28
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_SPI_MspInit+0xdc>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d129      	bne.n	80010ba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001066:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	4a2e      	ldr	r2, [pc, #184]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 800106c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001070:	6613      	str	r3, [r2, #96]	; 0x60
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 8001074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001076:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	4b29      	ldr	r3, [pc, #164]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	4a28      	ldr	r2, [pc, #160]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001096:	23e0      	movs	r3, #224	; 0xe0
 8001098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109a:	2302      	movs	r3, #2
 800109c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010a6:	2305      	movs	r3, #5
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f000 fcc6 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010b8:	e02d      	b.n	8001116 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a1a      	ldr	r2, [pc, #104]	; (8001128 <HAL_SPI_MspInit+0xe4>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d128      	bne.n	8001116 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 80010c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c8:	4a16      	ldr	r2, [pc, #88]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 80010ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ce:	6593      	str	r3, [r2, #88]	; 0x58
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 80010d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 80010de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_SPI_MspInit+0xe0>)
 80010ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80010f4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001106:	2305      	movs	r3, #5
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <HAL_SPI_MspInit+0xe8>)
 8001112:	f000 fc97 	bl	8001a44 <HAL_GPIO_Init>
}
 8001116:	bf00      	nop
 8001118:	3730      	adds	r7, #48	; 0x30
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40013000 	.word	0x40013000
 8001124:	40021000 	.word	0x40021000
 8001128:	40003800 	.word	0x40003800
 800112c:	48000400 	.word	0x48000400

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <HAL_TIM_Base_MspInit+0x38>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10b      	bne.n	800115a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 8001144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6593      	str	r3, [r2, #88]	; 0x58
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_TIM_Base_MspInit+0x3c>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40000c00 	.word	0x40000c00
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_TIM_OC_MspInit+0x44>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d113      	bne.n	80011aa <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_TIM_OC_MspInit+0x48>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_TIM_OC_MspInit+0x48>)
 8001188:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_TIM_OC_MspInit+0x48>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2105      	movs	r1, #5
 800119e:	202e      	movs	r0, #46	; 0x2e
 80011a0:	f000 fc19 	bl	80019d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80011a4:	202e      	movs	r0, #46	; 0x2e
 80011a6:	f000 fc32 	bl	8001a0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40013400 	.word	0x40013400
 80011b8:	40021000 	.word	0x40021000

080011bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b0ae      	sub	sp, #184	; 0xb8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	2288      	movs	r2, #136	; 0x88
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00f fd93 	bl	8010d08 <memset>
  if(huart->Instance==USART2)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <HAL_UART_MspInit+0x134>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d13c      	bne.n	8001266 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4618      	mov	r0, r3
 80011fa:	f001 fd6f 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001204:	f7ff fe2a 	bl	8000e5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001208:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <HAL_UART_MspInit+0x138>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a39      	ldr	r2, [pc, #228]	; (80012f4 <HAL_UART_MspInit+0x138>)
 800120e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_UART_MspInit+0x138>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	4b34      	ldr	r3, [pc, #208]	; (80012f4 <HAL_UART_MspInit+0x138>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_UART_MspInit+0x138>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <HAL_UART_MspInit+0x138>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	617b      	str	r3, [r7, #20]
 8001236:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001238:	230c      	movs	r3, #12
 800123a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124a:	2303      	movs	r3, #3
 800124c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001250:	2307      	movs	r3, #7
 8001252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f000 fbf0 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001264:	e040      	b.n	80012e8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_UART_MspInit+0x13c>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13b      	bne.n	80012e8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001270:	2304      	movs	r3, #4
 8001272:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001274:	2300      	movs	r3, #0
 8001276:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4618      	mov	r0, r3
 800127e:	f001 fd2d 	bl	8002cdc <HAL_RCCEx_PeriphCLKConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001288:	f7ff fde8 	bl	8000e5c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_UART_MspInit+0x138>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001290:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_UART_MspInit+0x138>)
 8001292:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001296:	6593      	str	r3, [r2, #88]	; 0x58
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <HAL_UART_MspInit+0x138>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_UART_MspInit+0x138>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <HAL_UART_MspInit+0x138>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b0:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <HAL_UART_MspInit+0x138>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012d6:	2307      	movs	r3, #7
 80012d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <HAL_UART_MspInit+0x140>)
 80012e4:	f000 fbae 	bl	8001a44 <HAL_GPIO_Init>
}
 80012e8:	bf00      	nop
 80012ea:	37b8      	adds	r7, #184	; 0xb8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40004800 	.word	0x40004800
 80012fc:	48000800 	.word	0x48000800

08001300 <prvGetRegistersFromStack>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void prvGetRegistersFromStack( uint32_t *pulFaultStackAddress )
{
 8001300:	b480      	push	{r7}
 8001302:	b08b      	sub	sp, #44	; 0x2c
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
volatile uint32_t r12;
volatile uint32_t lr; /* Link register. */
volatile uint32_t pc; /* Program counter. */
volatile uint32_t psr;/* Program status register. */

    r0 = pulFaultStackAddress[ 0 ];
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    r1 = pulFaultStackAddress[ 1 ];
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	623b      	str	r3, [r7, #32]
    r2 = pulFaultStackAddress[ 2 ];
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	61fb      	str	r3, [r7, #28]
    r3 = pulFaultStackAddress[ 3 ];
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	61bb      	str	r3, [r7, #24]

    r12 = pulFaultStackAddress[ 4 ];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	617b      	str	r3, [r7, #20]
    lr = pulFaultStackAddress[ 5 ];
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	613b      	str	r3, [r7, #16]
    pc = pulFaultStackAddress[ 6 ];
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	60fb      	str	r3, [r7, #12]
    psr = pulFaultStackAddress[ 7 ];
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	60bb      	str	r3, [r7, #8]

    // prevent compiler warnings unused variable [-Wunused-but-set-variable]
    (void)r0;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    (void)r1;
 800133a:	6a3b      	ldr	r3, [r7, #32]
    (void)r2;
 800133c:	69fb      	ldr	r3, [r7, #28]
    (void)r3;
 800133e:	69bb      	ldr	r3, [r7, #24]
    (void)r12;
 8001340:	697b      	ldr	r3, [r7, #20]
    (void)lr;
 8001342:	693b      	ldr	r3, [r7, #16]
    (void)pc;
 8001344:	68fb      	ldr	r3, [r7, #12]
    (void)psr;
 8001346:	68bb      	ldr	r3, [r7, #8]

    /* When the following line is hit, the variables contain the register values. */
    for( ;; );
 8001348:	e7fe      	b.n	8001348 <prvGetRegistersFromStack+0x48>

0800134a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134e:	e7fe      	b.n	800134e <NMI_Handler+0x4>
	...

08001400 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
 8001404:	f3af 8000 	nop.w
 8001408:	f3af 8000 	nop.w
 800140c:	f3af 8000 	nop.w
 8001410:	f3af 8000 	nop.w
 8001414:	f3af 8000 	nop.w
 8001418:	f3af 8000 	nop.w
 800141c:	f3af 8000 	nop.w
 8001420:	f3af 8000 	nop.w
 8001424:	f3af 8000 	nop.w
 8001428:	f3af 8000 	nop.w
 800142c:	f3af 8000 	nop.w
 8001430:	f3af 8000 	nop.w
 8001434:	f3af 8000 	nop.w
 8001438:	f3af 8000 	nop.w
 800143c:	f3af 8000 	nop.w
	...
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm volatile
 8001500:	f01e 0f04 	tst.w	lr, #4
 8001504:	bf0c      	ite	eq
 8001506:	f3ef 8008 	mrseq	r0, MSP
 800150a:	f3ef 8009 	mrsne	r0, PSP
 800150e:	6981      	ldr	r1, [r0, #24]
 8001510:	4a00      	ldr	r2, [pc, #0]	; (8001514 <handler2_address_const>)
 8001512:	4710      	bx	r2

08001514 <handler2_address_const>:
 8001514:	08001301 	.word	0x08001301
	        " ldr r2, handler2_address_const                            \n"
	        " bx r2                                                     \n"
	        " handler2_address_const: .word prvGetRegistersFromStack    \n"
	    );
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <handler2_address_const+0x4>
 800151a:	bf00      	nop

0800151c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <MemManage_Handler+0x4>

08001522 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <BusFault_Handler+0x4>

08001528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <UsageFault_Handler+0x4>

0800152e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001540:	4802      	ldr	r0, [pc, #8]	; (800154c <TIM8_CC_IRQHandler+0x10>)
 8001542:	f003 f87e 	bl	8004642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000250 	.word	0x20000250

08001550 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
	return 1;
 8001554:	2301      	movs	r3, #1
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <_kill>:

int _kill(int pid, int sig)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800156a:	f00f fb01 	bl	8010b70 <__errno>
 800156e:	4603      	mov	r3, r0
 8001570:	2216      	movs	r2, #22
 8001572:	601a      	str	r2, [r3, #0]
	return -1;
 8001574:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <_exit>:

void _exit (int status)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001588:	f04f 31ff 	mov.w	r1, #4294967295
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe7 	bl	8001560 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001592:	e7fe      	b.n	8001592 <_exit+0x12>

08001594 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
	return -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015bc:	605a      	str	r2, [r3, #4]
	return 0;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_isatty>:

int _isatty(int file)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
	return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	; (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	; (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f00f faa0 	bl	8010b70 <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	; (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20018000 	.word	0x20018000
 800165c:	00000400 	.word	0x00000400
 8001660:	200003a4 	.word	0x200003a4
 8001664:	20001240 	.word	0x20001240

08001668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <SystemInit+0x5c>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <SystemInit+0x5c>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <SystemInit+0x60>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a11      	ldr	r2, [pc, #68]	; (80016c8 <SystemInit+0x60>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <SystemInit+0x60>)
 800168a:	2200      	movs	r2, #0
 800168c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <SystemInit+0x60>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <SystemInit+0x60>)
 8001694:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001698:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800169c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <SystemInit+0x60>)
 80016a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <SystemInit+0x60>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <SystemInit+0x60>)
 80016ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80016b2:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SystemInit+0x60>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00
 80016c8:	40021000 	.word	0x40021000

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001704 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff ffca 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80016d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80016d6:	e003      	b.n	80016e0 <LoopCopyDataInit>

080016d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80016da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80016dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80016de:	3104      	adds	r1, #4

080016e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80016e0:	480a      	ldr	r0, [pc, #40]	; (800170c <LoopForever+0xa>)
	ldr	r3, =_edata
 80016e2:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <LoopForever+0xe>)
	adds	r2, r0, r1
 80016e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80016e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80016e8:	d3f6      	bcc.n	80016d8 <CopyDataInit>
	ldr	r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <LoopForever+0x12>)
	b	LoopFillZerobss
 80016ec:	e002      	b.n	80016f4 <LoopFillZerobss>

080016ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80016ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80016f0:	f842 3b04 	str.w	r3, [r2], #4

080016f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <LoopForever+0x16>)
	cmp	r2, r3
 80016f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80016f8:	d3f9      	bcc.n	80016ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f00f fabf 	bl	8010c7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7fe ff83 	bl	8000608 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001704:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001708:	08013ee0 	.word	0x08013ee0
	ldr	r0, =_sdata
 800170c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001710:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8001714:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8001718:	2000123c 	.word	0x2000123c

0800171c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_2_IRQHandler>
	...

08001720 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001726:	2300      	movs	r3, #0
 8001728:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172a:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_Init+0x3c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_Init+0x3c>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001736:	2003      	movs	r0, #3
 8001738:	f000 f942 	bl	80019c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800173c:	2000      	movs	r0, #0
 800173e:	f000 f80f 	bl	8001760 <HAL_InitTick>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d002      	beq.n	800174e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	e001      	b.n	8001752 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800174e:	f7ff fbb7 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001752:	79fb      	ldrb	r3, [r7, #7]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40022000 	.word	0x40022000

08001760 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_InitTick+0x6c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d023      	beq.n	80017bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <HAL_InitTick+0x70>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <HAL_InitTick+0x6c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f94d 	bl	8001a2a <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10f      	bne.n	80017b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d809      	bhi.n	80017b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f917 	bl	80019d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a8:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_InitTick+0x74>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
 80017b4:	e004      	b.n	80017c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
 80017ba:	e001      	b.n	80017c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000000c 	.word	0x2000000c
 80017d0:	20000004 	.word	0x20000004
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e0:	f00b ff0e 	bl	800d600 <HAL_GetTick>
 80017e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f0:	d005      	beq.n	80017fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017f2:	4b0a      	ldr	r3, [pc, #40]	; (800181c <HAL_Delay+0x44>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4413      	add	r3, r2
 80017fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017fe:	bf00      	nop
 8001800:	f00b fefe 	bl	800d600 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	429a      	cmp	r2, r3
 800180e:	d8f7      	bhi.n	8001800 <HAL_Delay+0x28>
  {
  }
}
 8001810:	bf00      	nop
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	2000000c 	.word	0x2000000c

08001820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800183c:	4013      	ands	r3, r2
 800183e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800184c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001852:	4a04      	ldr	r2, [pc, #16]	; (8001864 <__NVIC_SetPriorityGrouping+0x44>)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	60d3      	str	r3, [r2, #12]
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <__NVIC_GetPriorityGrouping+0x18>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	f003 0307 	and.w	r3, r3, #7
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	2b00      	cmp	r3, #0
 8001894:	db0b      	blt.n	80018ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 021f 	and.w	r2, r3, #31
 800189c:	4907      	ldr	r1, [pc, #28]	; (80018bc <__NVIC_EnableIRQ+0x38>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	095b      	lsrs	r3, r3, #5
 80018a4:	2001      	movs	r0, #1
 80018a6:	fa00 f202 	lsl.w	r2, r0, r2
 80018aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
	...

0800197c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3b01      	subs	r3, #1
 8001988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800198c:	d301      	bcc.n	8001992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198e:	2301      	movs	r3, #1
 8001990:	e00f      	b.n	80019b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001992:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <SysTick_Config+0x40>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800199a:	210f      	movs	r1, #15
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f7ff ff8e 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SysTick_Config+0x40>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <SysTick_Config+0x40>)
 80019ac:	2207      	movs	r2, #7
 80019ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	e000e010 	.word	0xe000e010

080019c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff29 	bl	8001820 <__NVIC_SetPriorityGrouping>
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019e8:	f7ff ff3e 	bl	8001868 <__NVIC_GetPriorityGrouping>
 80019ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	6978      	ldr	r0, [r7, #20]
 80019f4:	f7ff ff8e 	bl	8001914 <NVIC_EncodePriority>
 80019f8:	4602      	mov	r2, r0
 80019fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5d 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a06:	bf00      	nop
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b082      	sub	sp, #8
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff31 	bl	8001884 <__NVIC_EnableIRQ>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffa2 	bl	800197c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a52:	e17f      	b.n	8001d54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8171 	beq.w	8001d4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d118      	bne.n	8001b24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001af8:	2201      	movs	r2, #1
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	f003 0201 	and.w	r2, r3, #1
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d017      	beq.n	8001b60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d123      	bne.n	8001bb4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	08da      	lsrs	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3208      	adds	r2, #8
 8001b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	08da      	lsrs	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	3208      	adds	r2, #8
 8001bae:	6939      	ldr	r1, [r7, #16]
 8001bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0203 	and.w	r2, r3, #3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80ac 	beq.w	8001d4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b5f      	ldr	r3, [pc, #380]	; (8001d74 <HAL_GPIO_Init+0x330>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	4a5e      	ldr	r2, [pc, #376]	; (8001d74 <HAL_GPIO_Init+0x330>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6613      	str	r3, [r2, #96]	; 0x60
 8001c02:	4b5c      	ldr	r3, [pc, #368]	; (8001d74 <HAL_GPIO_Init+0x330>)
 8001c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
 8001c0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	089b      	lsrs	r3, r3, #2
 8001c14:	3302      	adds	r3, #2
 8001c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	220f      	movs	r2, #15
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c38:	d025      	beq.n	8001c86 <HAL_GPIO_Init+0x242>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	; (8001d7c <HAL_GPIO_Init+0x338>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d01f      	beq.n	8001c82 <HAL_GPIO_Init+0x23e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	; (8001d80 <HAL_GPIO_Init+0x33c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d019      	beq.n	8001c7e <HAL_GPIO_Init+0x23a>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	; (8001d84 <HAL_GPIO_Init+0x340>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d013      	beq.n	8001c7a <HAL_GPIO_Init+0x236>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	; (8001d88 <HAL_GPIO_Init+0x344>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d00d      	beq.n	8001c76 <HAL_GPIO_Init+0x232>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	; (8001d8c <HAL_GPIO_Init+0x348>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d007      	beq.n	8001c72 <HAL_GPIO_Init+0x22e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4a      	ldr	r2, [pc, #296]	; (8001d90 <HAL_GPIO_Init+0x34c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_GPIO_Init+0x22a>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00c      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c6e:	2307      	movs	r3, #7
 8001c70:	e00a      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c72:	2305      	movs	r3, #5
 8001c74:	e008      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c76:	2304      	movs	r3, #4
 8001c78:	e006      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e004      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e002      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_GPIO_Init+0x244>
 8001c86:	2300      	movs	r3, #0
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	f002 0203 	and.w	r2, r2, #3
 8001c8e:	0092      	lsls	r2, r2, #2
 8001c90:	4093      	lsls	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c98:	4937      	ldr	r1, [pc, #220]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ca6:	4b3b      	ldr	r3, [pc, #236]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cca:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cd0:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cf4:	4a27      	ldr	r2, [pc, #156]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d1e:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d24:	4b1b      	ldr	r3, [pc, #108]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_GPIO_Init+0x350>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f47f ae78 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	48001000 	.word	0x48001000
 8001d8c:	48001400 	.word	0x48001400
 8001d90:	48001800 	.word	0x48001800
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e081      	b.n	8001ede <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f7ff f88a 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2224      	movs	r2, #36	; 0x24
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e18:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e28:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	e006      	b.n	8001e50 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e4e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d104      	bne.n	8001e62 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e60:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69d9      	ldr	r1, [r3, #28]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a1a      	ldr	r2, [r3, #32]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	d138      	bne.n	8001f6e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d101      	bne.n	8001f0a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f06:	2302      	movs	r3, #2
 8001f08:	e032      	b.n	8001f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2224      	movs	r2, #36	; 0x24
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f38:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
  }
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d139      	bne.n	8002006 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e033      	b.n	8002008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2224      	movs	r2, #36	; 0x24
 8001fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0201 	bic.w	r2, r2, #1
 8001fbe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	021b      	lsls	r3, r3, #8
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e000      	b.n	8002008 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002006:	2302      	movs	r3, #2
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002018:	4b04      	ldr	r3, [pc, #16]	; (800202c <HAL_PWREx_GetVoltageRange+0x18>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40007000 	.word	0x40007000

08002030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203e:	d130      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002040:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800204c:	d038      	beq.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800204e:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002056:	4a1e      	ldr	r2, [pc, #120]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2232      	movs	r2, #50	; 0x32
 8002064:	fb02 f303 	mul.w	r3, r2, r3
 8002068:	4a1b      	ldr	r2, [pc, #108]	; (80020d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9b      	lsrs	r3, r3, #18
 8002070:	3301      	adds	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002074:	e002      	b.n	800207c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	3b01      	subs	r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002088:	d102      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x60>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f2      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209c:	d110      	bne.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e00f      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ae:	d007      	beq.n	80020c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000
 80020d4:	20000004 	.word	0x20000004
 80020d8:	431bde83 	.word	0x431bde83

080020dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e3ca      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ee:	4b97      	ldr	r3, [pc, #604]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020f8:	4b94      	ldr	r3, [pc, #592]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 80e4 	beq.w	80022d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <HAL_RCC_OscConfig+0x4a>
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	f040 808b 	bne.w	8002234 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b01      	cmp	r3, #1
 8002122:	f040 8087 	bne.w	8002234 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002126:	4b89      	ldr	r3, [pc, #548]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x62>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e3a2      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a1a      	ldr	r2, [r3, #32]
 8002142:	4b82      	ldr	r3, [pc, #520]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_RCC_OscConfig+0x7c>
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002156:	e005      	b.n	8002164 <HAL_RCC_OscConfig+0x88>
 8002158:	4b7c      	ldr	r3, [pc, #496]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002164:	4293      	cmp	r3, r2
 8002166:	d223      	bcs.n	80021b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fd55 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e383      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800217c:	4b73      	ldr	r3, [pc, #460]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a72      	ldr	r2, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b70      	ldr	r3, [pc, #448]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	496d      	ldr	r1, [pc, #436]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800219a:	4b6c      	ldr	r3, [pc, #432]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	4968      	ldr	r1, [pc, #416]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
 80021ae:	e025      	b.n	80021fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a65      	ldr	r2, [pc, #404]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4960      	ldr	r1, [pc, #384]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	495b      	ldr	r1, [pc, #364]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 fd15 	bl	8002c1c <RCC_SetFlashLatencyFromMSIRange>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e343      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021fc:	f000 fc4a 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002200:	4602      	mov	r2, r0
 8002202:	4b52      	ldr	r3, [pc, #328]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	091b      	lsrs	r3, r3, #4
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	4950      	ldr	r1, [pc, #320]	; (8002350 <HAL_RCC_OscConfig+0x274>)
 800220e:	5ccb      	ldrb	r3, [r1, r3]
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	4a4e      	ldr	r2, [pc, #312]	; (8002354 <HAL_RCC_OscConfig+0x278>)
 800221a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800221c:	4b4e      	ldr	r3, [pc, #312]	; (8002358 <HAL_RCC_OscConfig+0x27c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff fa9d 	bl	8001760 <HAL_InitTick>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d052      	beq.n	80022d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	e327      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d032      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800223c:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a42      	ldr	r2, [pc, #264]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002248:	f00b f9da 	bl	800d600 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002250:	f00b f9d6 	bl	800d600 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e310      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002262:	4b3a      	ldr	r3, [pc, #232]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226e:	4b37      	ldr	r3, [pc, #220]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a36      	ldr	r2, [pc, #216]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b34      	ldr	r3, [pc, #208]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4931      	ldr	r1, [pc, #196]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002288:	4313      	orrs	r3, r2
 800228a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228c:	4b2f      	ldr	r3, [pc, #188]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69db      	ldr	r3, [r3, #28]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	492c      	ldr	r1, [pc, #176]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
 80022a0:	e01a      	b.n	80022d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a29      	ldr	r2, [pc, #164]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022ae:	f00b f9a7 	bl	800d600 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022b6:	f00b f9a3 	bl	800d600 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e2dd      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c8:	4b20      	ldr	r3, [pc, #128]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f0      	bne.n	80022b6 <HAL_RCC_OscConfig+0x1da>
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d074      	beq.n	80023ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x21a>
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	2b0c      	cmp	r3, #12
 80022ee:	d10e      	bne.n	800230e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d10b      	bne.n	800230e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <HAL_RCC_OscConfig+0x270>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d064      	beq.n	80023cc <HAL_RCC_OscConfig+0x2f0>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d160      	bne.n	80023cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e2ba      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d106      	bne.n	8002326 <HAL_RCC_OscConfig+0x24a>
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a0b      	ldr	r2, [pc, #44]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800231e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002322:	6013      	str	r3, [r2, #0]
 8002324:	e026      	b.n	8002374 <HAL_RCC_OscConfig+0x298>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232e:	d115      	bne.n	800235c <HAL_RCC_OscConfig+0x280>
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a05      	ldr	r2, [pc, #20]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002336:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a02      	ldr	r2, [pc, #8]	; (800234c <HAL_RCC_OscConfig+0x270>)
 8002342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	e014      	b.n	8002374 <HAL_RCC_OscConfig+0x298>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	08013bf4 	.word	0x08013bf4
 8002354:	20000004 	.word	0x20000004
 8002358:	20000008 	.word	0x20000008
 800235c:	4ba0      	ldr	r3, [pc, #640]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a9f      	ldr	r2, [pc, #636]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b9d      	ldr	r3, [pc, #628]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a9c      	ldr	r2, [pc, #624]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f00b f940 	bl	800d600 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f00b f93c 	bl	800d600 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e276      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002396:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0x2a8>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f00b f92c 	bl	800d600 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f00b f928 	bl	800d600 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	; 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e262      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x2d0>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d060      	beq.n	800249c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d005      	beq.n	80023ec <HAL_RCC_OscConfig+0x310>
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	2b0c      	cmp	r3, #12
 80023e4:	d119      	bne.n	800241a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d116      	bne.n	800241a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_OscConfig+0x328>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e23f      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	4973      	ldr	r1, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002418:	e040      	b.n	800249c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d023      	beq.n	800246a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002422:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242e:	f00b f8e7 	bl	800d600 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002436:	f00b f8e3 	bl	800d600 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e21d      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002448:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	061b      	lsls	r3, r3, #24
 8002462:	495f      	ldr	r1, [pc, #380]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002464:	4313      	orrs	r3, r2
 8002466:	604b      	str	r3, [r1, #4]
 8002468:	e018      	b.n	800249c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246a:	4b5d      	ldr	r3, [pc, #372]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a5c      	ldr	r2, [pc, #368]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f00b f8c3 	bl	800d600 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247e:	f00b f8bf 	bl	800d600 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e1f9      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002490:	4b53      	ldr	r3, [pc, #332]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1f0      	bne.n	800247e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d03c      	beq.n	8002522 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01c      	beq.n	80024ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80024b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024b6:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80024b8:	f043 0301 	orr.w	r3, r3, #1
 80024bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c0:	f00b f89e 	bl	800d600 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c8:	f00b f89a 	bl	800d600 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1d4      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80024dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ef      	beq.n	80024c8 <HAL_RCC_OscConfig+0x3ec>
 80024e8:	e01b      	b.n	8002522 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ea:	4b3d      	ldr	r3, [pc, #244]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80024ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f0:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f00b f881 	bl	800d600 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002502:	f00b f87d 	bl	800d600 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e1b7      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002514:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1ef      	bne.n	8002502 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80a6 	beq.w	800267c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002534:	4b2a      	ldr	r3, [pc, #168]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10d      	bne.n	800255c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002540:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002544:	4a26      	ldr	r2, [pc, #152]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 8002546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254a:	6593      	str	r3, [r2, #88]	; 0x58
 800254c:	4b24      	ldr	r3, [pc, #144]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 800254e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002558:	2301      	movs	r3, #1
 800255a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCC_OscConfig+0x508>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d118      	bne.n	800259a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <HAL_RCC_OscConfig+0x508>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1d      	ldr	r2, [pc, #116]	; (80025e4 <HAL_RCC_OscConfig+0x508>)
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002574:	f00b f844 	bl	800d600 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257c:	f00b f840 	bl	800d600 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e17a      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_OscConfig+0x508>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d0f0      	beq.n	800257c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d108      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4d8>
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b2:	e029      	b.n	8002608 <HAL_RCC_OscConfig+0x52c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b05      	cmp	r3, #5
 80025ba:	d115      	bne.n	80025e8 <HAL_RCC_OscConfig+0x50c>
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80025be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <HAL_RCC_OscConfig+0x504>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025dc:	e014      	b.n	8002608 <HAL_RCC_OscConfig+0x52c>
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40007000 	.word	0x40007000
 80025e8:	4b9c      	ldr	r3, [pc, #624]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a9b      	ldr	r2, [pc, #620]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80025f0:	f023 0301 	bic.w	r3, r3, #1
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f8:	4b98      	ldr	r3, [pc, #608]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a97      	ldr	r2, [pc, #604]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d016      	beq.n	800263e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f00a fff6 	bl	800d600 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f00a fff2 	bl	800d600 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e12a      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800262e:	4b8b      	ldr	r3, [pc, #556]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0ed      	beq.n	8002618 <HAL_RCC_OscConfig+0x53c>
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263e:	f00a ffdf 	bl	800d600 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002644:	e00a      	b.n	800265c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002646:	f00a ffdb 	bl	800d600 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	f241 3288 	movw	r2, #5000	; 0x1388
 8002654:	4293      	cmp	r3, r2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e113      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800265c:	4b7f      	ldr	r3, [pc, #508]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800265e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1ed      	bne.n	8002646 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266a:	7ffb      	ldrb	r3, [r7, #31]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002670:	4b7a      	ldr	r3, [pc, #488]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a79      	ldr	r2, [pc, #484]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80fe 	beq.w	8002882 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	2b02      	cmp	r3, #2
 800268c:	f040 80d0 	bne.w	8002830 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002690:	4b72      	ldr	r3, [pc, #456]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f003 0203 	and.w	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d130      	bne.n	8002706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	3b01      	subs	r3, #1
 80026b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d127      	bne.n	8002706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d11f      	bne.n	8002706 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026d0:	2a07      	cmp	r2, #7
 80026d2:	bf14      	ite	ne
 80026d4:	2201      	movne	r2, #1
 80026d6:	2200      	moveq	r2, #0
 80026d8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026da:	4293      	cmp	r3, r2
 80026dc:	d113      	bne.n	8002706 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e8:	085b      	lsrs	r3, r3, #1
 80026ea:	3b01      	subs	r3, #1
 80026ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d109      	bne.n	8002706 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	3b01      	subs	r3, #1
 8002700:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d06e      	beq.n	80027e4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d069      	beq.n	80027e0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800270c:	4b53      	ldr	r3, [pc, #332]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d105      	bne.n	8002724 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002718:	4b50      	ldr	r3, [pc, #320]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0ad      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002728:	4b4c      	ldr	r3, [pc, #304]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4b      	ldr	r2, [pc, #300]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800272e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002732:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002734:	f00a ff64 	bl	800d600 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f00a ff60 	bl	800d600 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e09a      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800275a:	4b40      	ldr	r3, [pc, #256]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	4b40      	ldr	r3, [pc, #256]	; (8002860 <HAL_RCC_OscConfig+0x784>)
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800276a:	3a01      	subs	r2, #1
 800276c:	0112      	lsls	r2, r2, #4
 800276e:	4311      	orrs	r1, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002774:	0212      	lsls	r2, r2, #8
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800277c:	0852      	lsrs	r2, r2, #1
 800277e:	3a01      	subs	r2, #1
 8002780:	0552      	lsls	r2, r2, #21
 8002782:	4311      	orrs	r1, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002788:	0852      	lsrs	r2, r2, #1
 800278a:	3a01      	subs	r2, #1
 800278c:	0652      	lsls	r2, r2, #25
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002794:	0912      	lsrs	r2, r2, #4
 8002796:	0452      	lsls	r2, r2, #17
 8002798:	430a      	orrs	r2, r1
 800279a:	4930      	ldr	r1, [pc, #192]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800279c:	4313      	orrs	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a2d      	ldr	r2, [pc, #180]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a2a      	ldr	r2, [pc, #168]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027b8:	f00a ff22 	bl	800d600 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f00a ff1e 	bl	800d600 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e058      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027de:	e050      	b.n	8002882 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e04f      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d148      	bne.n	8002882 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027f0:	4b1a      	ldr	r3, [pc, #104]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_RCC_OscConfig+0x780>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	4a16      	ldr	r2, [pc, #88]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002806:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002808:	f00a fefa 	bl	800d600 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800280e:	e008      	b.n	8002822 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002810:	f00a fef6 	bl	800d600 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e030      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0f0      	beq.n	8002810 <HAL_RCC_OscConfig+0x734>
 800282e:	e028      	b.n	8002882 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b0c      	cmp	r3, #12
 8002834:	d023      	beq.n	800287e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_OscConfig+0x780>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a08      	ldr	r2, [pc, #32]	; (800285c <HAL_RCC_OscConfig+0x780>)
 800283c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002842:	f00a fedd 	bl	800d600 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002848:	e00c      	b.n	8002864 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f00a fed9 	bl	800d600 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d905      	bls.n	8002864 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e013      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
 800285c:	40021000 	.word	0x40021000
 8002860:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_RCC_OscConfig+0x7b0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ec      	bne.n	800284a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_RCC_OscConfig+0x7b0>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4905      	ldr	r1, [pc, #20]	; (800288c <HAL_RCC_OscConfig+0x7b0>)
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_OscConfig+0x7b4>)
 8002878:	4013      	ands	r3, r2
 800287a:	60cb      	str	r3, [r1, #12]
 800287c:	e001      	b.n	8002882 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3720      	adds	r7, #32
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	feeefffc 	.word	0xfeeefffc

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0e7      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b75      	ldr	r3, [pc, #468]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d910      	bls.n	80028d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b72      	ldr	r3, [pc, #456]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 0207 	bic.w	r2, r3, #7
 80028be:	4970      	ldr	r1, [pc, #448]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c6:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cf      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	4b66      	ldr	r3, [pc, #408]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d908      	bls.n	8002906 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f4:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4960      	ldr	r1, [pc, #384]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d04c      	beq.n	80029ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291a:	4b5a      	ldr	r3, [pc, #360]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d121      	bne.n	800296a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0a6      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002932:	4b54      	ldr	r3, [pc, #336]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d115      	bne.n	800296a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e09a      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d107      	bne.n	800295a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294a:	4b4e      	ldr	r3, [pc, #312]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d109      	bne.n	800296a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e08e      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295a:	4b4a      	ldr	r3, [pc, #296]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e086      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800296a:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f023 0203 	bic.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4943      	ldr	r1, [pc, #268]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	4313      	orrs	r3, r2
 800297a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800297c:	f00a fe40 	bl	800d600 <HAL_GetTick>
 8002980:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002982:	e00a      	b.n	800299a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002984:	f00a fe3c 	bl	800d600 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e06e      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299a:	4b3a      	ldr	r3, [pc, #232]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 020c 	and.w	r2, r3, #12
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d1eb      	bne.n	8002984 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d010      	beq.n	80029da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d208      	bcs.n	80029da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c8:	4b2e      	ldr	r3, [pc, #184]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	492b      	ldr	r1, [pc, #172]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029da:	4b29      	ldr	r3, [pc, #164]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d210      	bcs.n	8002a0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f023 0207 	bic.w	r2, r3, #7
 80029f0:	4923      	ldr	r1, [pc, #140]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f8:	4b21      	ldr	r3, [pc, #132]	; (8002a80 <HAL_RCC_ClockConfig+0x1ec>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e036      	b.n	8002a78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d008      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a16:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	4918      	ldr	r1, [pc, #96]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0308 	and.w	r3, r3, #8
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a34:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4910      	ldr	r1, [pc, #64]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a48:	f000 f824 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	; (8002a84 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	091b      	lsrs	r3, r3, #4
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	490b      	ldr	r1, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1f4>)
 8002a5a:	5ccb      	ldrb	r3, [r1, r3]
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1f8>)
 8002a66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1fc>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7fe fe77 	bl	8001760 <HAL_InitTick>
 8002a72:	4603      	mov	r3, r0
 8002a74:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a76:	7afb      	ldrb	r3, [r7, #11]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08013bf4 	.word	0x08013bf4
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	20000008 	.word	0x20000008

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aa2:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aac:	4b3b      	ldr	r3, [pc, #236]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	2b0c      	cmp	r3, #12
 8002ac0:	d121      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d11e      	bne.n	8002b06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ad4:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ada:	0a1b      	lsrs	r3, r3, #8
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e005      	b.n	8002af0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10d      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b04:	e00a      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b04      	cmp	r3, #4
 8002b0a:	d102      	bne.n	8002b12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b0c:	4b25      	ldr	r3, [pc, #148]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b0e:	61bb      	str	r3, [r7, #24]
 8002b10:	e004      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b18:	4b23      	ldr	r3, [pc, #140]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0c      	cmp	r3, #12
 8002b20:	d134      	bne.n	8002b8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b22:	4b1e      	ldr	r3, [pc, #120]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d003      	beq.n	8002b3a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d003      	beq.n	8002b40 <HAL_RCC_GetSysClockFreq+0xac>
 8002b38:	e005      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3c:	617b      	str	r3, [r7, #20]
      break;
 8002b3e:	e005      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b42:	617b      	str	r3, [r7, #20]
      break;
 8002b44:	e002      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	617b      	str	r3, [r7, #20]
      break;
 8002b4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b4c:	4b13      	ldr	r3, [pc, #76]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	3301      	adds	r3, #1
 8002b58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b5a:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	fb03 f202 	mul.w	r2, r3, r2
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	0e5b      	lsrs	r3, r3, #25
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b8c:	69bb      	ldr	r3, [r7, #24]
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	08013c0c 	.word	0x08013c0c
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	02dc6c00 	.word	0x02dc6c00

08002bac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4904      	ldr	r1, [pc, #16]	; (8002bec <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	08013c04 	.word	0x08013c04

08002bf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002bf4:	f7ff ffda 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0adb      	lsrs	r3, r3, #11
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08013c04 	.word	0x08013c04

08002c1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c24:	2300      	movs	r3, #0
 8002c26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c34:	f7ff f9ee 	bl	8002014 <HAL_PWREx_GetVoltageRange>
 8002c38:	6178      	str	r0, [r7, #20]
 8002c3a:	e014      	b.n	8002c66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	4a24      	ldr	r2, [pc, #144]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	; 0x58
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c54:	f7ff f9de 	bl	8002014 <HAL_PWREx_GetVoltageRange>
 8002c58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d10b      	bne.n	8002c86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d919      	bls.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2ba0      	cmp	r3, #160	; 0xa0
 8002c78:	d902      	bls.n	8002c80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e013      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c80:	2301      	movs	r3, #1
 8002c82:	613b      	str	r3, [r7, #16]
 8002c84:	e010      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b80      	cmp	r3, #128	; 0x80
 8002c8a:	d902      	bls.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	e00a      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b80      	cmp	r3, #128	; 0x80
 8002c96:	d102      	bne.n	8002c9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c98:	2302      	movs	r3, #2
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	e004      	b.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d101      	bne.n	8002ca8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 0207 	bic.w	r2, r3, #7
 8002cb0:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cb8:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d001      	beq.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e000      	b.n	8002ccc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ce8:	2300      	movs	r3, #0
 8002cea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d041      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d00:	d02a      	beq.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d02:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d06:	d824      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d0c:	d008      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d12:	d81e      	bhi.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d1c:	d010      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d1e:	e018      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d20:	4b86      	ldr	r3, [pc, #536]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a85      	ldr	r2, [pc, #532]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d2c:	e015      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2100      	movs	r1, #0
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fabb 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3e:	e00c      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3320      	adds	r3, #32
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fba6 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d50:	e003      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	74fb      	strb	r3, [r7, #19]
      break;
 8002d56:	e000      	b.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10b      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d60:	4b76      	ldr	r3, [pc, #472]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d6e:	4973      	ldr	r1, [pc, #460]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7cfb      	ldrb	r3, [r7, #19]
 8002d7a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d041      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d90:	d02a      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002d92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002d96:	d824      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002da2:	d81e      	bhi.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dae:	e018      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a61      	ldr	r2, [pc, #388]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dbc:	e015      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fa73 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dce:	e00c      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3320      	adds	r3, #32
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 fb5e 	bl	8003498 <RCCEx_PLLSAI2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002de0:	e003      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	74fb      	strb	r3, [r7, #19]
      break;
 8002de6:	e000      	b.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10b      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002df0:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfe:	494f      	ldr	r1, [pc, #316]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e06:	e001      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e08:	7cfb      	ldrb	r3, [r7, #19]
 8002e0a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a0 	beq.w	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e1e:	4b47      	ldr	r3, [pc, #284]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e34:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e38:	4a40      	ldr	r2, [pc, #256]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e40:	4b3e      	ldr	r3, [pc, #248]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e50:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a3a      	ldr	r2, [pc, #232]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e5c:	f00a fbd0 	bl	800d600 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e62:	e009      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e64:	f00a fbcc 	bl	800d600 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d902      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	74fb      	strb	r3, [r7, #19]
        break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e78:	4b31      	ldr	r3, [pc, #196]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ef      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d15c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e94:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d01f      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d019      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002eb4:	4b21      	ldr	r3, [pc, #132]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eba:	4a20      	ldr	r2, [pc, #128]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ed4:	4a19      	ldr	r2, [pc, #100]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f00a fb8b 	bl	800d600 <HAL_GetTick>
 8002eea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eec:	e00b      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f00a fb87 	bl	800d600 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d902      	bls.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	74fb      	strb	r3, [r7, #19]
            break;
 8002f04:	e006      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0ec      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f14:	7cfb      	ldrb	r3, [r7, #19]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f1a:	4b08      	ldr	r3, [pc, #32]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2a:	4904      	ldr	r1, [pc, #16]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f32:	e009      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f34:	7cfb      	ldrb	r3, [r7, #19]
 8002f36:	74bb      	strb	r3, [r7, #18]
 8002f38:	e006      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f3a:	bf00      	nop
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f48:	7c7b      	ldrb	r3, [r7, #17]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d105      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4e:	4b9e      	ldr	r3, [pc, #632]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a9d      	ldr	r2, [pc, #628]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f66:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6c:	f023 0203 	bic.w	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	4994      	ldr	r1, [pc, #592]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f88:	4b8f      	ldr	r3, [pc, #572]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8e:	f023 020c 	bic.w	r2, r3, #12
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	498c      	ldr	r1, [pc, #560]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002faa:	4b87      	ldr	r3, [pc, #540]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4983      	ldr	r1, [pc, #524]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fcc:	4b7e      	ldr	r3, [pc, #504]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	497b      	ldr	r1, [pc, #492]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fee:	4b76      	ldr	r3, [pc, #472]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffc:	4972      	ldr	r1, [pc, #456]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00a      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003010:	4b6d      	ldr	r3, [pc, #436]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	496a      	ldr	r1, [pc, #424]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003032:	4b65      	ldr	r3, [pc, #404]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003038:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003040:	4961      	ldr	r1, [pc, #388]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003054:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003062:	4959      	ldr	r1, [pc, #356]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003076:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	4950      	ldr	r1, [pc, #320]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003098:	4b4b      	ldr	r3, [pc, #300]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a6:	4948      	ldr	r1, [pc, #288]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	493f      	ldr	r1, [pc, #252]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d028      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030dc:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ea:	4937      	ldr	r1, [pc, #220]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030fa:	d106      	bne.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003106:	60d3      	str	r3, [r2, #12]
 8003108:	e011      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800310e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003112:	d10c      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2101      	movs	r1, #1
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f8c8 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800312a:	7cfb      	ldrb	r3, [r7, #19]
 800312c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d028      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800313c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003140:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	491f      	ldr	r1, [pc, #124]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800314a:	4313      	orrs	r3, r2
 800314c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003158:	d106      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800315a:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003164:	60d3      	str	r3, [r2, #12]
 8003166:	e011      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003170:	d10c      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 f899 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003182:	7cfb      	ldrb	r3, [r7, #19]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003188:	7cfb      	ldrb	r3, [r7, #19]
 800318a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d02b      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b6:	d109      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a02      	ldr	r2, [pc, #8]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031c2:	60d3      	str	r3, [r2, #12]
 80031c4:	e014      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f867 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d02f      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031fc:	4b2b      	ldr	r3, [pc, #172]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320a:	4928      	ldr	r1, [pc, #160]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800321a:	d10d      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3304      	adds	r3, #4
 8003220:	2102      	movs	r1, #2
 8003222:	4618      	mov	r0, r3
 8003224:	f000 f844 	bl	80032b0 <RCCEx_PLLSAI1_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800322c:	7cfb      	ldrb	r3, [r7, #19]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d014      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	74bb      	strb	r3, [r7, #18]
 8003236:	e011      	b.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800323c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003240:	d10c      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	3320      	adds	r3, #32
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f925 	bl	8003498 <RCCEx_PLLSAI2_Config>
 800324e:	4603      	mov	r3, r0
 8003250:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003252:	7cfb      	ldrb	r3, [r7, #19]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003268:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003276:	490d      	ldr	r1, [pc, #52]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00b      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	4904      	ldr	r1, [pc, #16]	; (80032ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800329c:	4313      	orrs	r3, r2
 800329e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	40021000 	.word	0x40021000

080032b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032be:	4b75      	ldr	r3, [pc, #468]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032c0:	68db      	ldr	r3, [r3, #12]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d018      	beq.n	80032fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032ca:	4b72      	ldr	r3, [pc, #456]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0203 	and.w	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d10d      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
       ||
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d009      	beq.n	80032f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80032e2:	4b6c      	ldr	r3, [pc, #432]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
       ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d047      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
 80032fa:	e044      	b.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b03      	cmp	r3, #3
 8003302:	d018      	beq.n	8003336 <RCCEx_PLLSAI1_Config+0x86>
 8003304:	2b03      	cmp	r3, #3
 8003306:	d825      	bhi.n	8003354 <RCCEx_PLLSAI1_Config+0xa4>
 8003308:	2b01      	cmp	r3, #1
 800330a:	d002      	beq.n	8003312 <RCCEx_PLLSAI1_Config+0x62>
 800330c:	2b02      	cmp	r3, #2
 800330e:	d009      	beq.n	8003324 <RCCEx_PLLSAI1_Config+0x74>
 8003310:	e020      	b.n	8003354 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003312:	4b60      	ldr	r3, [pc, #384]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11d      	bne.n	800335a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e01a      	b.n	800335a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003324:	4b5b      	ldr	r3, [pc, #364]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332c:	2b00      	cmp	r3, #0
 800332e:	d116      	bne.n	800335e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003334:	e013      	b.n	800335e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003336:	4b57      	ldr	r3, [pc, #348]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003342:	4b54      	ldr	r3, [pc, #336]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003352:	e006      	b.n	8003362 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      break;
 8003358:	e004      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003362:	bf00      	nop
    }

    if(status == HAL_OK)
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800336a:	4b4a      	ldr	r3, [pc, #296]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	430b      	orrs	r3, r1
 8003380:	4944      	ldr	r1, [pc, #272]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003382:	4313      	orrs	r3, r2
 8003384:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d17d      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800338c:	4b41      	ldr	r3, [pc, #260]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a40      	ldr	r2, [pc, #256]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003392:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003398:	f00a f932 	bl	800d600 <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800339e:	e009      	b.n	80033b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a0:	f00a f92e 	bl	800d600 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	73fb      	strb	r3, [r7, #15]
        break;
 80033b2:	e005      	b.n	80033c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033b4:	4b37      	ldr	r3, [pc, #220]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1ef      	bne.n	80033a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d160      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033cc:	4b31      	ldr	r3, [pc, #196]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6892      	ldr	r2, [r2, #8]
 80033dc:	0211      	lsls	r1, r2, #8
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68d2      	ldr	r2, [r2, #12]
 80033e2:	0912      	lsrs	r2, r2, #4
 80033e4:	0452      	lsls	r2, r2, #17
 80033e6:	430a      	orrs	r2, r1
 80033e8:	492a      	ldr	r1, [pc, #168]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	610b      	str	r3, [r1, #16]
 80033ee:	e027      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d112      	bne.n	800341c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f6:	4b27      	ldr	r3, [pc, #156]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80033fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	0211      	lsls	r1, r2, #8
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	6912      	ldr	r2, [r2, #16]
 800340c:	0852      	lsrs	r2, r2, #1
 800340e:	3a01      	subs	r2, #1
 8003410:	0552      	lsls	r2, r2, #21
 8003412:	430a      	orrs	r2, r1
 8003414:	491f      	ldr	r1, [pc, #124]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	610b      	str	r3, [r1, #16]
 800341a:	e011      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800341c:	4b1d      	ldr	r3, [pc, #116]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6892      	ldr	r2, [r2, #8]
 800342c:	0211      	lsls	r1, r2, #8
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6952      	ldr	r2, [r2, #20]
 8003432:	0852      	lsrs	r2, r2, #1
 8003434:	3a01      	subs	r2, #1
 8003436:	0652      	lsls	r2, r2, #25
 8003438:	430a      	orrs	r2, r1
 800343a:	4916      	ldr	r1, [pc, #88]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800343c:	4313      	orrs	r3, r2
 800343e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a13      	ldr	r2, [pc, #76]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800344a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f00a f8d8 	bl	800d600 <HAL_GetTick>
 8003450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003452:	e009      	b.n	8003468 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003454:	f00a f8d4 	bl	800d600 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d902      	bls.n	8003468 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	73fb      	strb	r3, [r7, #15]
          break;
 8003466:	e005      	b.n	8003474 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0ef      	beq.n	8003454 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800347a:	4b06      	ldr	r3, [pc, #24]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	4904      	ldr	r1, [pc, #16]	; (8003494 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	40021000 	.word	0x40021000

08003498 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034a6:	4b6a      	ldr	r3, [pc, #424]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d018      	beq.n	80034e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034b2:	4b67      	ldr	r3, [pc, #412]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10d      	bne.n	80034de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
       ||
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	1c5a      	adds	r2, r3, #1
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
       ||
 80034da:	429a      	cmp	r2, r3
 80034dc:	d047      	beq.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	73fb      	strb	r3, [r7, #15]
 80034e2:	e044      	b.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b03      	cmp	r3, #3
 80034ea:	d018      	beq.n	800351e <RCCEx_PLLSAI2_Config+0x86>
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d825      	bhi.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d002      	beq.n	80034fa <RCCEx_PLLSAI2_Config+0x62>
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d009      	beq.n	800350c <RCCEx_PLLSAI2_Config+0x74>
 80034f8:	e020      	b.n	800353c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034fa:	4b55      	ldr	r3, [pc, #340]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11d      	bne.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350a:	e01a      	b.n	8003542 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d116      	bne.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800351c:	e013      	b.n	8003546 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800351e:	4b4c      	ldr	r3, [pc, #304]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10f      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800352a:	4b49      	ldr	r3, [pc, #292]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d109      	bne.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800353a:	e006      	b.n	800354a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e004      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003542:	bf00      	nop
 8003544:	e002      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003546:	bf00      	nop
 8003548:	e000      	b.n	800354c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800354a:	bf00      	nop
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003552:	4b3f      	ldr	r3, [pc, #252]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	430b      	orrs	r3, r1
 8003568:	4939      	ldr	r1, [pc, #228]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d167      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003574:	4b36      	ldr	r3, [pc, #216]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003580:	f00a f83e 	bl	800d600 <HAL_GetTick>
 8003584:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003586:	e009      	b.n	800359c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003588:	f00a f83a 	bl	800d600 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d902      	bls.n	800359c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	73fb      	strb	r3, [r7, #15]
        break;
 800359a:	e005      	b.n	80035a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800359c:	4b2c      	ldr	r3, [pc, #176]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ef      	bne.n	8003588 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035a8:	7bfb      	ldrb	r3, [r7, #15]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d14a      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d111      	bne.n	80035d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035b4:	4b26      	ldr	r3, [pc, #152]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6892      	ldr	r2, [r2, #8]
 80035c4:	0211      	lsls	r1, r2, #8
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68d2      	ldr	r2, [r2, #12]
 80035ca:	0912      	lsrs	r2, r2, #4
 80035cc:	0452      	lsls	r2, r2, #17
 80035ce:	430a      	orrs	r2, r1
 80035d0:	491f      	ldr	r1, [pc, #124]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035d2:	4313      	orrs	r3, r2
 80035d4:	614b      	str	r3, [r1, #20]
 80035d6:	e011      	b.n	80035fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6892      	ldr	r2, [r2, #8]
 80035e8:	0211      	lsls	r1, r2, #8
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6912      	ldr	r2, [r2, #16]
 80035ee:	0852      	lsrs	r2, r2, #1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	0652      	lsls	r2, r2, #25
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4916      	ldr	r1, [pc, #88]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80035fc:	4b14      	ldr	r3, [pc, #80]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a13      	ldr	r2, [pc, #76]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f009 fffa 	bl	800d600 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f009 fff6 	bl	800d600 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
          break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003624:	4b0a      	ldr	r3, [pc, #40]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0ef      	beq.n	8003610 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	4904      	ldr	r1, [pc, #16]	; (8003650 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	4313      	orrs	r3, r2
 8003642:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003644:	7bfb      	ldrb	r3, [r7, #15]
}
 8003646:	4618      	mov	r0, r3
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d06c      	beq.n	8003740 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fcb0 	bl	8000fe0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ca      	movs	r2, #202	; 0xca
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2253      	movs	r2, #83	; 0x53
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f9a0 	bl	80039de <RTC_EnterInitMode>
 800369e:	4603      	mov	r3, r0
 80036a0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d14b      	bne.n	8003740 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6812      	ldr	r2, [r2, #0]
 80036b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80036b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036ba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6899      	ldr	r1, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6919      	ldr	r1, [r3, #16]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	041a      	lsls	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f9a3 	bl	8003a44 <RTC_ExitInitMode>
 80036fe:	4603      	mov	r3, r0
 8003700:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d11b      	bne.n	8003740 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0203 	bic.w	r2, r2, #3
 8003716:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69da      	ldr	r2, [r3, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	22ff      	movs	r2, #255	; 0xff
 8003736:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b087      	sub	sp, #28
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_RTC_SetTime+0x1a>
 8003760:	2302      	movs	r3, #2
 8003762:	e08b      	b.n	800387c <HAL_RTC_SetTime+0x132>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	22ca      	movs	r2, #202	; 0xca
 800377a:	625a      	str	r2, [r3, #36]	; 0x24
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2253      	movs	r2, #83	; 0x53
 8003782:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f92a 	bl	80039de <RTC_EnterInitMode>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d163      	bne.n	800385c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d126      	bne.n	80037e8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2200      	movs	r2, #0
 80037ac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f984 	bl	8003ac0 <RTC_ByteToBcd2>
 80037b8:	4603      	mov	r3, r0
 80037ba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f97d 	bl	8003ac0 <RTC_ByteToBcd2>
 80037c6:	4603      	mov	r3, r0
 80037c8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037ca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	789b      	ldrb	r3, [r3, #2]
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f975 	bl	8003ac0 <RTC_ByteToBcd2>
 80037d6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80037d8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	78db      	ldrb	r3, [r3, #3]
 80037e0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e018      	b.n	800381a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2200      	movs	r2, #0
 80037fa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	785b      	ldrb	r3, [r3, #1]
 8003806:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003808:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800380e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	78db      	ldrb	r3, [r3, #3]
 8003814:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003824:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003828:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003838:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6899      	ldr	r1, [r3, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	431a      	orrs	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8f6 	bl	8003a44 <RTC_ExitInitMode>
 8003858:	4603      	mov	r3, r0
 800385a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	22ff      	movs	r2, #255	; 0xff
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800387a:	7cfb      	ldrb	r3, [r7, #19]
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd90      	pop	{r4, r7, pc}

08003884 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_RTC_SetDate+0x1a>
 800389a:	2302      	movs	r3, #2
 800389c:	e075      	b.n	800398a <HAL_RTC_SetDate+0x106>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10e      	bne.n	80038d2 <HAL_RTC_SetDate+0x4e>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	785b      	ldrb	r3, [r3, #1]
 80038b8:	f003 0310 	and.w	r3, r3, #16
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	785b      	ldrb	r3, [r3, #1]
 80038c4:	f023 0310 	bic.w	r3, r3, #16
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	330a      	adds	r3, #10
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d11c      	bne.n	8003912 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	78db      	ldrb	r3, [r3, #3]
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 f8ef 	bl	8003ac0 <RTC_ByteToBcd2>
 80038e2:	4603      	mov	r3, r0
 80038e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f8e8 	bl	8003ac0 <RTC_ByteToBcd2>
 80038f0:	4603      	mov	r3, r0
 80038f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80038f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	789b      	ldrb	r3, [r3, #2]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f8e0 	bl	8003ac0 <RTC_ByteToBcd2>
 8003900:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003902:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e00e      	b.n	8003930 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	78db      	ldrb	r3, [r3, #3]
 8003916:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800391e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003924:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800392c:	4313      	orrs	r3, r2
 800392e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	22ca      	movs	r2, #202	; 0xca
 8003936:	625a      	str	r2, [r3, #36]	; 0x24
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2253      	movs	r2, #83	; 0x53
 800393e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f84c 	bl	80039de <RTC_EnterInitMode>
 8003946:	4603      	mov	r3, r0
 8003948:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800394a:	7cfb      	ldrb	r3, [r7, #19]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10c      	bne.n	800396a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800395a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800395e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f86f 	bl	8003a44 <RTC_ExitInitMode>
 8003966:	4603      	mov	r3, r0
 8003968:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	22ff      	movs	r2, #255	; 0xff
 8003970:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003988:	7cfb      	ldrb	r3, [r7, #19]
}
 800398a:	4618      	mov	r0, r3
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd90      	pop	{r4, r7, pc}

08003992 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b084      	sub	sp, #16
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039a8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80039aa:	f009 fe29 	bl	800d600 <HAL_GetTick>
 80039ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039b0:	e009      	b.n	80039c6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80039b2:	f009 fe25 	bl	800d600 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c0:	d901      	bls.n	80039c6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e007      	b.n	80039d6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0320 	and.w	r3, r3, #32
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ee      	beq.n	80039b2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d120      	bne.n	8003a3a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003a02:	f009 fdfd 	bl	800d600 <HAL_GetTick>
 8003a06:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a08:	e00d      	b.n	8003a26 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003a0a:	f009 fdf9 	bl	800d600 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a18:	d905      	bls.n	8003a26 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2203      	movs	r2, #3
 8003a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <RTC_EnterInitMode+0x5c>
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d1e7      	bne.n	8003a0a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003a50:	4b1a      	ldr	r3, [pc, #104]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10c      	bne.n	8003a82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f7ff ff92 	bl	8003992 <HAL_RTC_WaitForSynchro>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01e      	beq.n	8003ab2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2203      	movs	r2, #3
 8003a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	e017      	b.n	8003ab2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003a82:	4b0e      	ldr	r3, [pc, #56]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4a0d      	ldr	r2, [pc, #52]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003a88:	f023 0320 	bic.w	r3, r3, #32
 8003a8c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff ff7f 	bl	8003992 <HAL_RTC_WaitForSynchro>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d005      	beq.n	8003aa6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	4a04      	ldr	r2, [pc, #16]	; (8003abc <RTC_ExitInitMode+0x78>)
 8003aac:	f043 0320 	orr.w	r3, r3, #32
 8003ab0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	40002800 	.word	0x40002800

08003ac0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003ad2:	e005      	b.n	8003ae0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003ada:	7afb      	ldrb	r3, [r7, #11]
 8003adc:	3b0a      	subs	r3, #10
 8003ade:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
 8003ae2:	2b09      	cmp	r3, #9
 8003ae4:	d8f6      	bhi.n	8003ad4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	7afb      	ldrb	r3, [r7, #11]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	b2db      	uxtb	r3, r3
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e095      	b.n	8003c3e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b22:	d009      	beq.n	8003b38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	61da      	str	r2, [r3, #28]
 8003b2a:	e005      	b.n	8003b38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7fd fa76 	bl	8001044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b78:	d902      	bls.n	8003b80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
 8003b7e:	e002      	b.n	8003b86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003b8e:	d007      	beq.n	8003ba0 <HAL_SPI_Init+0xa0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b98:	d002      	beq.n	8003ba0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be2:	ea42 0103 	orr.w	r1, r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	0c1b      	lsrs	r3, r3, #16
 8003bfc:	f003 0204 	and.w	r2, r3, #4
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003c1c:	ea42 0103 	orr.w	r1, r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b08a      	sub	sp, #40	; 0x28
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c54:	2301      	movs	r3, #1
 8003c56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_SPI_TransmitReceive+0x26>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e1fb      	b.n	8004064 <HAL_SPI_TransmitReceive+0x41e>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c74:	f009 fcc4 	bl	800d600 <HAL_GetTick>
 8003c78:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c80:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c90:	7efb      	ldrb	r3, [r7, #27]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d00e      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x6e>
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c9c:	d106      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x66>
 8003ca6:	7efb      	ldrb	r3, [r7, #27]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d003      	beq.n	8003cb4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003cb2:	e1cd      	b.n	8004050 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d005      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x80>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_SPI_TransmitReceive+0x80>
 8003cc0:	887b      	ldrh	r3, [r7, #2]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d103      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ccc:	e1c0      	b.n	8004050 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d003      	beq.n	8003ce2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2205      	movs	r2, #5
 8003cde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	887a      	ldrh	r2, [r7, #2]
 8003cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	887a      	ldrh	r2, [r7, #2]
 8003cfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	887a      	ldrh	r2, [r7, #2]
 8003d08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	887a      	ldrh	r2, [r7, #2]
 8003d0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d24:	d802      	bhi.n	8003d2c <HAL_SPI_TransmitReceive+0xe6>
 8003d26:	8a3b      	ldrh	r3, [r7, #16]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d908      	bls.n	8003d3e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	e007      	b.n	8003d4e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d007      	beq.n	8003d6c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003d74:	d97c      	bls.n	8003e70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_TransmitReceive+0x13e>
 8003d7e:	8a7b      	ldrh	r3, [r7, #18]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d169      	bne.n	8003e58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	1c9a      	adds	r2, r3, #2
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003da8:	e056      	b.n	8003e58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d11b      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x1aa>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x1aa>
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d113      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d11c      	bne.n	8003e38 <HAL_SPI_TransmitReceive+0x1f2>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d016      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e14:	b292      	uxth	r2, r2
 8003e16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	1c9a      	adds	r2, r3, #2
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e34:	2301      	movs	r3, #1
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e38:	f009 fbe2 	bl	800d600 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d807      	bhi.n	8003e58 <HAL_SPI_TransmitReceive+0x212>
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d003      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e56:	e0fb      	b.n	8004050 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1a3      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x164>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d19d      	bne.n	8003daa <HAL_SPI_TransmitReceive+0x164>
 8003e6e:	e0df      	b.n	8004030 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <HAL_SPI_TransmitReceive+0x23a>
 8003e78:	8a7b      	ldrh	r3, [r7, #18]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	f040 80cb 	bne.w	8004016 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d912      	bls.n	8003eb0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	881a      	ldrh	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	1c9a      	adds	r2, r3, #2
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	3b02      	subs	r3, #2
 8003ea8:	b29a      	uxth	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eae:	e0b2      	b.n	8004016 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	7812      	ldrb	r2, [r2, #0]
 8003ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ed6:	e09e      	b.n	8004016 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d134      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x30a>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d02f      	beq.n	8003f50 <HAL_SPI_TransmitReceive+0x30a>
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d12c      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d912      	bls.n	8003f26 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	1c9a      	adds	r2, r3, #2
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b02      	subs	r3, #2
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f24:	e012      	b.n	8003f4c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	330c      	adds	r3, #12
 8003f30:	7812      	ldrb	r2, [r2, #0]
 8003f32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d148      	bne.n	8003ff0 <HAL_SPI_TransmitReceive+0x3aa>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d042      	beq.n	8003ff0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d923      	bls.n	8003fbe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	b292      	uxth	r2, r2
 8003f82:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b02      	subs	r3, #2
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d81f      	bhi.n	8003fec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	e016      	b.n	8003fec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f103 020c 	add.w	r2, r3, #12
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	7812      	ldrb	r2, [r2, #0]
 8003fcc:	b2d2      	uxtb	r2, r2
 8003fce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003ff0:	f009 fb06 	bl	800d600 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d803      	bhi.n	8004008 <HAL_SPI_TransmitReceive+0x3c2>
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004006:	d102      	bne.n	800400e <HAL_SPI_TransmitReceive+0x3c8>
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004014:	e01c      	b.n	8004050 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	f47f af5b 	bne.w	8003ed8 <HAL_SPI_TransmitReceive+0x292>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	f47f af54 	bne.w	8003ed8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f937 	bl	80042a8 <SPI_EndRxTxTransaction>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	661a      	str	r2, [r3, #96]	; 0x60
 800404c:	e000      	b.n	8004050 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800404e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004060:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004064:	4618      	mov	r0, r3
 8004066:	3728      	adds	r7, #40	; 0x28
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b088      	sub	sp, #32
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	603b      	str	r3, [r7, #0]
 8004078:	4613      	mov	r3, r2
 800407a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800407c:	f009 fac0 	bl	800d600 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	4413      	add	r3, r2
 800408a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800408c:	f009 fab8 	bl	800d600 <HAL_GetTick>
 8004090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	015b      	lsls	r3, r3, #5
 8004098:	0d1b      	lsrs	r3, r3, #20
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	fb02 f303 	mul.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a2:	e054      	b.n	800414e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d050      	beq.n	800414e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80040ac:	f009 faa8 	bl	800d600 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d902      	bls.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d13d      	bne.n	800413e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040da:	d111      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e4:	d004      	beq.n	80040f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ee:	d107      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004108:	d10f      	bne.n	800412a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e017      	b.n	800416e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	3b01      	subs	r3, #1
 800414c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4013      	ands	r3, r2
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	bf0c      	ite	eq
 800415e:	2301      	moveq	r3, #1
 8004160:	2300      	movne	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	461a      	mov	r2, r3
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	429a      	cmp	r2, r3
 800416a:	d19b      	bne.n	80040a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20000004 	.word	0x20000004

0800417c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08a      	sub	sp, #40	; 0x28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800418e:	f009 fa37 	bl	800d600 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	4413      	add	r3, r2
 800419c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800419e:	f009 fa2f 	bl	800d600 <HAL_GetTick>
 80041a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80041ac:	4b3d      	ldr	r3, [pc, #244]	; (80042a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00da      	lsls	r2, r3, #3
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	0d1b      	lsrs	r3, r3, #20
 80041bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041be:	fb02 f303 	mul.w	r3, r2, r3
 80041c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80041c4:	e060      	b.n	8004288 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80041cc:	d107      	bne.n	80041de <SPI_WaitFifoStateUntilTimeout+0x62>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80041dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d050      	beq.n	8004288 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041e6:	f009 fa0b 	bl	800d600 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d902      	bls.n	80041fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d13d      	bne.n	8004278 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800420a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004214:	d111      	bne.n	800423a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d004      	beq.n	800422a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d107      	bne.n	800423a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004238:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004242:	d10f      	bne.n	8004264 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004252:	601a      	str	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004262:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e010      	b.n	800429a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3b01      	subs	r3, #1
 8004286:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	429a      	cmp	r2, r3
 8004296:	d196      	bne.n	80041c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3728      	adds	r7, #40	; 0x28
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	20000004 	.word	0x20000004

080042a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af02      	add	r7, sp, #8
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f7ff ff5b 	bl	800417c <SPI_WaitFifoStateUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e027      	b.n	800432c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2180      	movs	r1, #128	; 0x80
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fec0 	bl	800406c <SPI_WaitFlagStateUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d007      	beq.n	8004302 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e014      	b.n	800432c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2200      	movs	r2, #0
 800430a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f7ff ff34 	bl	800417c <SPI_WaitFifoStateUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800431e:	f043 0220 	orr.w	r2, r3, #32
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e000      	b.n	800432c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800432a:	2300      	movs	r3, #0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e049      	b.n	80043da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc fee8 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f000 fbfa 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d001      	beq.n	80043fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e047      	b.n	800448c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a23      	ldr	r2, [pc, #140]	; (8004498 <HAL_TIM_Base_Start+0xb4>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <HAL_TIM_Base_Start+0x66>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d018      	beq.n	800444a <HAL_TIM_Base_Start+0x66>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1f      	ldr	r2, [pc, #124]	; (800449c <HAL_TIM_Base_Start+0xb8>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_TIM_Base_Start+0x66>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <HAL_TIM_Base_Start+0xbc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_TIM_Base_Start+0x66>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <HAL_TIM_Base_Start+0xc0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_TIM_Base_Start+0x66>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <HAL_TIM_Base_Start+0xc4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_TIM_Base_Start+0x66>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a19      	ldr	r2, [pc, #100]	; (80044ac <HAL_TIM_Base_Start+0xc8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d115      	bne.n	8004476 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <HAL_TIM_Base_Start+0xcc>)
 8004452:	4013      	ands	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b06      	cmp	r3, #6
 800445a:	d015      	beq.n	8004488 <HAL_TIM_Base_Start+0xa4>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004462:	d011      	beq.n	8004488 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	e008      	b.n	8004488 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e000      	b.n	800448a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004488:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40012c00 	.word	0x40012c00
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	00010007 	.word	0x00010007

080044b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d001      	beq.n	80044cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e04f      	b.n	800456c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a23      	ldr	r2, [pc, #140]	; (8004578 <HAL_TIM_Base_Start_IT+0xc4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x76>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f6:	d018      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x76>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1f      	ldr	r2, [pc, #124]	; (800457c <HAL_TIM_Base_Start_IT+0xc8>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x76>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <HAL_TIM_Base_Start_IT+0xcc>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x76>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <HAL_TIM_Base_Start_IT+0xd0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x76>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_TIM_Base_Start_IT+0xd4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_TIM_Base_Start_IT+0x76>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a19      	ldr	r2, [pc, #100]	; (800458c <HAL_TIM_Base_Start_IT+0xd8>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d115      	bne.n	8004556 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	4b17      	ldr	r3, [pc, #92]	; (8004590 <HAL_TIM_Base_Start_IT+0xdc>)
 8004532:	4013      	ands	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2b06      	cmp	r3, #6
 800453a:	d015      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d011      	beq.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004554:	e008      	b.n	8004568 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	e000      	b.n	800456a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40000400 	.word	0x40000400
 8004580:	40000800 	.word	0x40000800
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40014000 	.word	0x40014000
 8004590:	00010007 	.word	0x00010007

08004594 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e049      	b.n	800463a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc fdd8 	bl	8001170 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f000 faca 	bl	8004b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f003 0302 	and.w	r3, r3, #2
 8004654:	2b02      	cmp	r3, #2
 8004656:	d122      	bne.n	800469e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d11b      	bne.n	800469e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f06f 0202 	mvn.w	r2, #2
 800466e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa52 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 800468a:	e005      	b.n	8004698 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fa44 	bl	8004b1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fa55 	bl	8004b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d122      	bne.n	80046f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b04      	cmp	r3, #4
 80046b8:	d11b      	bne.n	80046f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f06f 0204 	mvn.w	r2, #4
 80046c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fa28 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 80046de:	e005      	b.n	80046ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fa1a 	bl	8004b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa2b 	bl	8004b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d122      	bne.n	8004746 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b08      	cmp	r3, #8
 800470c:	d11b      	bne.n	8004746 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f06f 0208 	mvn.w	r2, #8
 8004716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2204      	movs	r2, #4
 800471c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f9fe 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 8004732:	e005      	b.n	8004740 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f9f0 	bl	8004b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fa01 	bl	8004b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0310 	and.w	r3, r3, #16
 8004750:	2b10      	cmp	r3, #16
 8004752:	d122      	bne.n	800479a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b10      	cmp	r3, #16
 8004760:	d11b      	bne.n	800479a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0210 	mvn.w	r2, #16
 800476a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2208      	movs	r2, #8
 8004770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f9d4 	bl	8004b2e <HAL_TIM_IC_CaptureCallback>
 8004786:	e005      	b.n	8004794 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f9c6 	bl	8004b1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9d7 	bl	8004b42 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d10e      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f06f 0201 	mvn.w	r2, #1
 80047be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f9a0 	bl	8004b06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d0:	2b80      	cmp	r3, #128	; 0x80
 80047d2:	d10e      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fed7 	bl	80055a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480c:	2b80      	cmp	r3, #128	; 0x80
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 feca 	bl	80055b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482a:	2b40      	cmp	r3, #64	; 0x40
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f985 	bl	8004b56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b20      	cmp	r3, #32
 8004858:	d10e      	bne.n	8004878 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	2b20      	cmp	r3, #32
 8004866:	d107      	bne.n	8004878 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f06f 0220 	mvn.w	r2, #32
 8004870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fe8a 	bl	800558c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_TIM_OC_ConfigChannel+0x1e>
 800489a:	2302      	movs	r3, #2
 800489c:	e066      	b.n	800496c <HAL_TIM_OC_ConfigChannel+0xec>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b14      	cmp	r3, #20
 80048aa:	d857      	bhi.n	800495c <HAL_TIM_OC_ConfigChannel+0xdc>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <HAL_TIM_OC_ConfigChannel+0x34>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	08004909 	.word	0x08004909
 80048b8:	0800495d 	.word	0x0800495d
 80048bc:	0800495d 	.word	0x0800495d
 80048c0:	0800495d 	.word	0x0800495d
 80048c4:	08004917 	.word	0x08004917
 80048c8:	0800495d 	.word	0x0800495d
 80048cc:	0800495d 	.word	0x0800495d
 80048d0:	0800495d 	.word	0x0800495d
 80048d4:	08004925 	.word	0x08004925
 80048d8:	0800495d 	.word	0x0800495d
 80048dc:	0800495d 	.word	0x0800495d
 80048e0:	0800495d 	.word	0x0800495d
 80048e4:	08004933 	.word	0x08004933
 80048e8:	0800495d 	.word	0x0800495d
 80048ec:	0800495d 	.word	0x0800495d
 80048f0:	0800495d 	.word	0x0800495d
 80048f4:	08004941 	.word	0x08004941
 80048f8:	0800495d 	.word	0x0800495d
 80048fc:	0800495d 	.word	0x0800495d
 8004900:	0800495d 	.word	0x0800495d
 8004904:	0800494f 	.word	0x0800494f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f9c6 	bl	8004ca0 <TIM_OC1_SetConfig>
      break;
 8004914:	e025      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	4618      	mov	r0, r3
 800491e:	f000 fa4f 	bl	8004dc0 <TIM_OC2_SetConfig>
      break;
 8004922:	e01e      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fad2 	bl	8004ed4 <TIM_OC3_SetConfig>
      break;
 8004930:	e017      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 fb53 	bl	8004fe4 <TIM_OC4_SetConfig>
      break;
 800493e:	e010      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fbb6 	bl	80050b8 <TIM_OC5_SetConfig>
      break;
 800494c:	e009      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68b9      	ldr	r1, [r7, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f000 fc13 	bl	8005180 <TIM_OC6_SetConfig>
      break;
 800495a:	e002      	b.n	8004962 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	75fb      	strb	r3, [r7, #23]
      break;
 8004960:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800496a:	7dfb      	ldrb	r3, [r7, #23]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_TIM_ConfigClockSource+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e0b6      	b.n	8004afe <HAL_TIM_ConfigClockSource+0x18a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049cc:	d03e      	beq.n	8004a4c <HAL_TIM_ConfigClockSource+0xd8>
 80049ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d2:	f200 8087 	bhi.w	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049da:	f000 8086 	beq.w	8004aea <HAL_TIM_ConfigClockSource+0x176>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	d87f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 80049e4:	2b70      	cmp	r3, #112	; 0x70
 80049e6:	d01a      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0xaa>
 80049e8:	2b70      	cmp	r3, #112	; 0x70
 80049ea:	d87b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 80049ec:	2b60      	cmp	r3, #96	; 0x60
 80049ee:	d050      	beq.n	8004a92 <HAL_TIM_ConfigClockSource+0x11e>
 80049f0:	2b60      	cmp	r3, #96	; 0x60
 80049f2:	d877      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 80049f4:	2b50      	cmp	r3, #80	; 0x50
 80049f6:	d03c      	beq.n	8004a72 <HAL_TIM_ConfigClockSource+0xfe>
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d873      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 80049fc:	2b40      	cmp	r3, #64	; 0x40
 80049fe:	d058      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x13e>
 8004a00:	2b40      	cmp	r3, #64	; 0x40
 8004a02:	d86f      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 8004a04:	2b30      	cmp	r3, #48	; 0x30
 8004a06:	d064      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a08:	2b30      	cmp	r3, #48	; 0x30
 8004a0a:	d86b      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 8004a0c:	2b20      	cmp	r3, #32
 8004a0e:	d060      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d867      	bhi.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d05c      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a18:	2b10      	cmp	r3, #16
 8004a1a:	d05a      	beq.n	8004ad2 <HAL_TIM_ConfigClockSource+0x15e>
 8004a1c:	e062      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6899      	ldr	r1, [r3, #8]
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f000 fc87 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	609a      	str	r2, [r3, #8]
      break;
 8004a4a:	e04f      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6818      	ldr	r0, [r3, #0]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	6899      	ldr	r1, [r3, #8]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f000 fc70 	bl	8005340 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689a      	ldr	r2, [r3, #8]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6e:	609a      	str	r2, [r3, #8]
      break;
 8004a70:	e03c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6818      	ldr	r0, [r3, #0]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6859      	ldr	r1, [r3, #4]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f000 fbe4 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2150      	movs	r1, #80	; 0x50
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f000 fc3d 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004a90:	e02c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6859      	ldr	r1, [r3, #4]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	f000 fc03 	bl	80052aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2160      	movs	r1, #96	; 0x60
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fc2d 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004ab0:	e01c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f000 fbc4 	bl	800524c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 fc1d 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004ad0:	e00c      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	4610      	mov	r0, r2
 8004ade:	f000 fc14 	bl	800530a <TIM_ITRx_SetConfig>
      break;
 8004ae2:	e003      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ae8:	e000      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004aea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a40      	ldr	r2, [pc, #256]	; (8004c80 <TIM_Base_SetConfig+0x114>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d013      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8a:	d00f      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	; (8004c84 <TIM_Base_SetConfig+0x118>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00b      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3c      	ldr	r2, [pc, #240]	; (8004c88 <TIM_Base_SetConfig+0x11c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d007      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3b      	ldr	r2, [pc, #236]	; (8004c8c <TIM_Base_SetConfig+0x120>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d003      	beq.n	8004bac <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3a      	ldr	r2, [pc, #232]	; (8004c90 <TIM_Base_SetConfig+0x124>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d108      	bne.n	8004bbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2f      	ldr	r2, [pc, #188]	; (8004c80 <TIM_Base_SetConfig+0x114>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01f      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bcc:	d01b      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a2c      	ldr	r2, [pc, #176]	; (8004c84 <TIM_Base_SetConfig+0x118>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2b      	ldr	r2, [pc, #172]	; (8004c88 <TIM_Base_SetConfig+0x11c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2a      	ldr	r2, [pc, #168]	; (8004c8c <TIM_Base_SetConfig+0x120>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a29      	ldr	r2, [pc, #164]	; (8004c90 <TIM_Base_SetConfig+0x124>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	; (8004c94 <TIM_Base_SetConfig+0x128>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	; (8004c98 <TIM_Base_SetConfig+0x12c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_Base_SetConfig+0x9a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a26      	ldr	r2, [pc, #152]	; (8004c9c <TIM_Base_SetConfig+0x130>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <TIM_Base_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a12      	ldr	r2, [pc, #72]	; (8004c90 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d00b      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a11      	ldr	r2, [pc, #68]	; (8004c94 <TIM_Base_SetConfig+0x128>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a10      	ldr	r2, [pc, #64]	; (8004c98 <TIM_Base_SetConfig+0x12c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0xf8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0f      	ldr	r2, [pc, #60]	; (8004c9c <TIM_Base_SetConfig+0x130>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d103      	bne.n	8004c6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	615a      	str	r2, [r3, #20]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40013400 	.word	0x40013400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40014400 	.word	0x40014400
 8004c9c:	40014800 	.word	0x40014800

08004ca0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b087      	sub	sp, #28
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0201 	bic.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f023 0302 	bic.w	r3, r3, #2
 8004cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <TIM_OC1_SetConfig+0x10c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00f      	beq.n	8004d20 <TIM_OC1_SetConfig+0x80>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a2b      	ldr	r2, [pc, #172]	; (8004db0 <TIM_OC1_SetConfig+0x110>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d00b      	beq.n	8004d20 <TIM_OC1_SetConfig+0x80>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a2a      	ldr	r2, [pc, #168]	; (8004db4 <TIM_OC1_SetConfig+0x114>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d007      	beq.n	8004d20 <TIM_OC1_SetConfig+0x80>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <TIM_OC1_SetConfig+0x118>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d003      	beq.n	8004d20 <TIM_OC1_SetConfig+0x80>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <TIM_OC1_SetConfig+0x11c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d10c      	bne.n	8004d3a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0308 	bic.w	r3, r3, #8
 8004d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	; (8004dac <TIM_OC1_SetConfig+0x10c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00f      	beq.n	8004d62 <TIM_OC1_SetConfig+0xc2>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a1a      	ldr	r2, [pc, #104]	; (8004db0 <TIM_OC1_SetConfig+0x110>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00b      	beq.n	8004d62 <TIM_OC1_SetConfig+0xc2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <TIM_OC1_SetConfig+0x114>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d007      	beq.n	8004d62 <TIM_OC1_SetConfig+0xc2>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a18      	ldr	r2, [pc, #96]	; (8004db8 <TIM_OC1_SetConfig+0x118>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d003      	beq.n	8004d62 <TIM_OC1_SetConfig+0xc2>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a17      	ldr	r2, [pc, #92]	; (8004dbc <TIM_OC1_SetConfig+0x11c>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d111      	bne.n	8004d86 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	621a      	str	r2, [r3, #32]
}
 8004da0:	bf00      	nop
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40013400 	.word	0x40013400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	f023 0210 	bic.w	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0320 	bic.w	r3, r3, #32
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a28      	ldr	r2, [pc, #160]	; (8004ec0 <TIM_OC2_SetConfig+0x100>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d003      	beq.n	8004e2c <TIM_OC2_SetConfig+0x6c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a27      	ldr	r2, [pc, #156]	; (8004ec4 <TIM_OC2_SetConfig+0x104>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d10d      	bne.n	8004e48 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <TIM_OC2_SetConfig+0x100>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00f      	beq.n	8004e70 <TIM_OC2_SetConfig+0xb0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <TIM_OC2_SetConfig+0x104>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_OC2_SetConfig+0xb0>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a1b      	ldr	r2, [pc, #108]	; (8004ec8 <TIM_OC2_SetConfig+0x108>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_OC2_SetConfig+0xb0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a1a      	ldr	r2, [pc, #104]	; (8004ecc <TIM_OC2_SetConfig+0x10c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0xb0>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a19      	ldr	r2, [pc, #100]	; (8004ed0 <TIM_OC2_SetConfig+0x110>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d113      	bne.n	8004e98 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	693a      	ldr	r2, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	693a      	ldr	r2, [r7, #16]
 8004e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	621a      	str	r2, [r3, #32]
}
 8004eb2:	bf00      	nop
 8004eb4:	371c      	adds	r7, #28
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40013400 	.word	0x40013400
 8004ec8:	40014000 	.word	0x40014000
 8004ecc:	40014400 	.word	0x40014400
 8004ed0:	40014800 	.word	0x40014800

08004ed4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b087      	sub	sp, #28
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0303 	bic.w	r3, r3, #3
 8004f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	021b      	lsls	r3, r3, #8
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a27      	ldr	r2, [pc, #156]	; (8004fd0 <TIM_OC3_SetConfig+0xfc>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d003      	beq.n	8004f3e <TIM_OC3_SetConfig+0x6a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a26      	ldr	r2, [pc, #152]	; (8004fd4 <TIM_OC3_SetConfig+0x100>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d10d      	bne.n	8004f5a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <TIM_OC3_SetConfig+0xfc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <TIM_OC3_SetConfig+0xae>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <TIM_OC3_SetConfig+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <TIM_OC3_SetConfig+0xae>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <TIM_OC3_SetConfig+0x104>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <TIM_OC3_SetConfig+0xae>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <TIM_OC3_SetConfig+0x108>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC3_SetConfig+0xae>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <TIM_OC3_SetConfig+0x10c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d113      	bne.n	8004faa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	011b      	lsls	r3, r3, #4
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	621a      	str	r2, [r3, #32]
}
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40013400 	.word	0x40013400
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	031b      	lsls	r3, r3, #12
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <TIM_OC4_SetConfig+0xc0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00f      	beq.n	8005068 <TIM_OC4_SetConfig+0x84>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a17      	ldr	r2, [pc, #92]	; (80050a8 <TIM_OC4_SetConfig+0xc4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d00b      	beq.n	8005068 <TIM_OC4_SetConfig+0x84>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a16      	ldr	r2, [pc, #88]	; (80050ac <TIM_OC4_SetConfig+0xc8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d007      	beq.n	8005068 <TIM_OC4_SetConfig+0x84>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <TIM_OC4_SetConfig+0xcc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d003      	beq.n	8005068 <TIM_OC4_SetConfig+0x84>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a14      	ldr	r2, [pc, #80]	; (80050b4 <TIM_OC4_SetConfig+0xd0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d109      	bne.n	800507c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40013400 	.word	0x40013400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800

080050b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a17      	ldr	r2, [pc, #92]	; (800516c <TIM_OC5_SetConfig+0xb4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00f      	beq.n	8005132 <TIM_OC5_SetConfig+0x7a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <TIM_OC5_SetConfig+0xb8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00b      	beq.n	8005132 <TIM_OC5_SetConfig+0x7a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a15      	ldr	r2, [pc, #84]	; (8005174 <TIM_OC5_SetConfig+0xbc>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <TIM_OC5_SetConfig+0x7a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a14      	ldr	r2, [pc, #80]	; (8005178 <TIM_OC5_SetConfig+0xc0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_OC5_SetConfig+0x7a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <TIM_OC5_SetConfig+0xc4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d109      	bne.n	8005146 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	021b      	lsls	r3, r3, #8
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	621a      	str	r2, [r3, #32]
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40013400 	.word	0x40013400
 8005174:	40014000 	.word	0x40014000
 8005178:	40014400 	.word	0x40014400
 800517c:	40014800 	.word	0x40014800

08005180 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	051b      	lsls	r3, r3, #20
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a18      	ldr	r2, [pc, #96]	; (8005238 <TIM_OC6_SetConfig+0xb8>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00f      	beq.n	80051fc <TIM_OC6_SetConfig+0x7c>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a17      	ldr	r2, [pc, #92]	; (800523c <TIM_OC6_SetConfig+0xbc>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_OC6_SetConfig+0x7c>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a16      	ldr	r2, [pc, #88]	; (8005240 <TIM_OC6_SetConfig+0xc0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_OC6_SetConfig+0x7c>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a15      	ldr	r2, [pc, #84]	; (8005244 <TIM_OC6_SetConfig+0xc4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_OC6_SetConfig+0x7c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a14      	ldr	r2, [pc, #80]	; (8005248 <TIM_OC6_SetConfig+0xc8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d109      	bne.n	8005210 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	695b      	ldr	r3, [r3, #20]
 8005208:	029b      	lsls	r3, r3, #10
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	621a      	str	r2, [r3, #32]
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40013400 	.word	0x40013400
 8005240:	40014000 	.word	0x40014000
 8005244:	40014400 	.word	0x40014400
 8005248:	40014800 	.word	0x40014800

0800524c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0201 	bic.w	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 030a 	bic.w	r3, r3, #10
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b087      	sub	sp, #28
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	60f8      	str	r0, [r7, #12]
 80052b2:	60b9      	str	r1, [r7, #8]
 80052b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	031b      	lsls	r3, r3, #12
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4313      	orrs	r3, r2
 8005328:	f043 0307 	orr.w	r3, r3, #7
 800532c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	021a      	lsls	r2, r3, #8
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	431a      	orrs	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	4313      	orrs	r3, r2
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	371c      	adds	r7, #28
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005380:	b480      	push	{r7}
 8005382:	b085      	sub	sp, #20
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005394:	2302      	movs	r3, #2
 8005396:	e068      	b.n	800546a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a2e      	ldr	r2, [pc, #184]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a2d      	ldr	r2, [pc, #180]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d108      	bne.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1e      	ldr	r2, [pc, #120]	; (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d01d      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800540a:	d018      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1b      	ldr	r2, [pc, #108]	; (8005480 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d013      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1a      	ldr	r2, [pc, #104]	; (8005484 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a18      	ldr	r2, [pc, #96]	; (8005488 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d009      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a13      	ldr	r2, [pc, #76]	; (800547c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10c      	bne.n	8005458 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005444:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4313      	orrs	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40012c00 	.word	0x40012c00
 800547c:	40013400 	.word	0x40013400
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800
 8005488:	40000c00 	.word	0x40000c00
 800548c:	40014000 	.word	0x40014000

08005490 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800549a:	2300      	movs	r3, #0
 800549c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e065      	b.n	8005578 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	041b      	lsls	r3, r3, #16
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d004      	beq.n	800553a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d115      	bne.n	8005566 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	051b      	lsls	r3, r3, #20
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	69db      	ldr	r3, [r3, #28]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	4313      	orrs	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40013400 	.word	0x40013400

0800558c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e040      	b.n	800565c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fb fde6 	bl	80011bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2224      	movs	r2, #36	; 0x24
 80055f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f992 	bl	8005930 <UART_SetConfig>
 800560c:	4603      	mov	r3, r0
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e022      	b.n	800565c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fc3e 	bl	8005ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 fcc5 	bl	8005fe4 <UART_CheckIdleState>
 800565a:	4603      	mov	r3, r0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b08a      	sub	sp, #40	; 0x28
 8005668:	af02      	add	r7, sp, #8
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	603b      	str	r3, [r7, #0]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 8082 	bne.w	8005782 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <HAL_UART_Transmit+0x26>
 8005684:	88fb      	ldrh	r3, [r7, #6]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e07a      	b.n	8005784 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_UART_Transmit+0x38>
 8005698:	2302      	movs	r3, #2
 800569a:	e073      	b.n	8005784 <HAL_UART_Transmit+0x120>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2221      	movs	r2, #33	; 0x21
 80056b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056b2:	f007 ffa5 	bl	800d600 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d0:	d108      	bne.n	80056e4 <HAL_UART_Transmit+0x80>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d104      	bne.n	80056e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	61bb      	str	r3, [r7, #24]
 80056e2:	e003      	b.n	80056ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056f4:	e02d      	b.n	8005752 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	2200      	movs	r2, #0
 80056fe:	2180      	movs	r1, #128	; 0x80
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fcb8 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e039      	b.n	8005784 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	881a      	ldrh	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005722:	b292      	uxth	r2, r2
 8005724:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	3302      	adds	r3, #2
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e008      	b.n	8005740 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	781a      	ldrb	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b292      	uxth	r2, r2
 8005738:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	3301      	adds	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005746:	b29b      	uxth	r3, r3
 8005748:	3b01      	subs	r3, #1
 800574a:	b29a      	uxth	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1cb      	bne.n	80056f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	2140      	movs	r1, #64	; 0x40
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fc84 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e005      	b.n	8005784 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2220      	movs	r2, #32
 800577c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800577e:	2300      	movs	r3, #0
 8005780:	e000      	b.n	8005784 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005782:	2302      	movs	r3, #2
  }
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af02      	add	r7, sp, #8
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	f040 80bf 	bne.w	8005924 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_UART_Receive+0x26>
 80057ac:	88fb      	ldrh	r3, [r7, #6]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0b7      	b.n	8005926 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_UART_Receive+0x38>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0b0      	b.n	8005926 <HAL_UART_Receive+0x19a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2222      	movs	r2, #34	; 0x22
 80057d8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057e0:	f007 ff0e 	bl	800d600 <HAL_GetTick>
 80057e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	88fa      	ldrh	r2, [r7, #6]
 80057f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d10e      	bne.n	800581e <HAL_UART_Receive+0x92>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <HAL_UART_Receive+0x88>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800580e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005812:	e02d      	b.n	8005870 <HAL_UART_Receive+0xe4>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	22ff      	movs	r2, #255	; 0xff
 8005818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800581c:	e028      	b.n	8005870 <HAL_UART_Receive+0xe4>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10d      	bne.n	8005842 <HAL_UART_Receive+0xb6>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d104      	bne.n	8005838 <HAL_UART_Receive+0xac>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	22ff      	movs	r2, #255	; 0xff
 8005832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005836:	e01b      	b.n	8005870 <HAL_UART_Receive+0xe4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	227f      	movs	r2, #127	; 0x7f
 800583c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005840:	e016      	b.n	8005870 <HAL_UART_Receive+0xe4>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800584a:	d10d      	bne.n	8005868 <HAL_UART_Receive+0xdc>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d104      	bne.n	800585e <HAL_UART_Receive+0xd2>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	227f      	movs	r2, #127	; 0x7f
 8005858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800585c:	e008      	b.n	8005870 <HAL_UART_Receive+0xe4>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	223f      	movs	r2, #63	; 0x3f
 8005862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005866:	e003      	b.n	8005870 <HAL_UART_Receive+0xe4>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005876:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d108      	bne.n	8005894 <HAL_UART_Receive+0x108>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e003      	b.n	800589c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80058a4:	e033      	b.n	800590e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2120      	movs	r1, #32
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fbe0 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e032      	b.n	8005926 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10c      	bne.n	80058e0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	8a7b      	ldrh	r3, [r7, #18]
 80058d0:	4013      	ands	r3, r2
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	3302      	adds	r3, #2
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	e00d      	b.n	80058fc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	8a7b      	ldrh	r3, [r7, #18]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	4013      	ands	r3, r2
 80058f0:	b2da      	uxtb	r2, r3
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1c5      	bne.n	80058a6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005934:	b08a      	sub	sp, #40	; 0x28
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689a      	ldr	r2, [r3, #8]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	431a      	orrs	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	431a      	orrs	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	4313      	orrs	r3, r2
 8005956:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	4ba4      	ldr	r3, [pc, #656]	; (8005bf0 <UART_SetConfig+0x2c0>)
 8005960:	4013      	ands	r3, r2
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	6812      	ldr	r2, [r2, #0]
 8005966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005968:	430b      	orrs	r3, r1
 800596a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a99      	ldr	r2, [pc, #612]	; (8005bf4 <UART_SetConfig+0x2c4>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d004      	beq.n	800599c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005998:	4313      	orrs	r3, r2
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ac:	430a      	orrs	r2, r1
 80059ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a90      	ldr	r2, [pc, #576]	; (8005bf8 <UART_SetConfig+0x2c8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d126      	bne.n	8005a08 <UART_SetConfig+0xd8>
 80059ba:	4b90      	ldr	r3, [pc, #576]	; (8005bfc <UART_SetConfig+0x2cc>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f003 0303 	and.w	r3, r3, #3
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d81b      	bhi.n	8005a00 <UART_SetConfig+0xd0>
 80059c8:	a201      	add	r2, pc, #4	; (adr r2, 80059d0 <UART_SetConfig+0xa0>)
 80059ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ce:	bf00      	nop
 80059d0:	080059e1 	.word	0x080059e1
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	080059f9 	.word	0x080059f9
 80059e0:	2301      	movs	r3, #1
 80059e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059e6:	e116      	b.n	8005c16 <UART_SetConfig+0x2e6>
 80059e8:	2302      	movs	r3, #2
 80059ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059ee:	e112      	b.n	8005c16 <UART_SetConfig+0x2e6>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059f6:	e10e      	b.n	8005c16 <UART_SetConfig+0x2e6>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80059fe:	e10a      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a06:	e106      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a7c      	ldr	r2, [pc, #496]	; (8005c00 <UART_SetConfig+0x2d0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d138      	bne.n	8005a84 <UART_SetConfig+0x154>
 8005a12:	4b7a      	ldr	r3, [pc, #488]	; (8005bfc <UART_SetConfig+0x2cc>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f003 030c 	and.w	r3, r3, #12
 8005a1c:	2b0c      	cmp	r3, #12
 8005a1e:	d82d      	bhi.n	8005a7c <UART_SetConfig+0x14c>
 8005a20:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <UART_SetConfig+0xf8>)
 8005a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a26:	bf00      	nop
 8005a28:	08005a5d 	.word	0x08005a5d
 8005a2c:	08005a7d 	.word	0x08005a7d
 8005a30:	08005a7d 	.word	0x08005a7d
 8005a34:	08005a7d 	.word	0x08005a7d
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005a7d 	.word	0x08005a7d
 8005a40:	08005a7d 	.word	0x08005a7d
 8005a44:	08005a7d 	.word	0x08005a7d
 8005a48:	08005a65 	.word	0x08005a65
 8005a4c:	08005a7d 	.word	0x08005a7d
 8005a50:	08005a7d 	.word	0x08005a7d
 8005a54:	08005a7d 	.word	0x08005a7d
 8005a58:	08005a75 	.word	0x08005a75
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a62:	e0d8      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a64:	2302      	movs	r3, #2
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a6a:	e0d4      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a6c:	2304      	movs	r3, #4
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a72:	e0d0      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a74:	2308      	movs	r3, #8
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a7a:	e0cc      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a7c:	2310      	movs	r3, #16
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005a82:	e0c8      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a5e      	ldr	r2, [pc, #376]	; (8005c04 <UART_SetConfig+0x2d4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d125      	bne.n	8005ada <UART_SetConfig+0x1aa>
 8005a8e:	4b5b      	ldr	r3, [pc, #364]	; (8005bfc <UART_SetConfig+0x2cc>)
 8005a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a98:	2b30      	cmp	r3, #48	; 0x30
 8005a9a:	d016      	beq.n	8005aca <UART_SetConfig+0x19a>
 8005a9c:	2b30      	cmp	r3, #48	; 0x30
 8005a9e:	d818      	bhi.n	8005ad2 <UART_SetConfig+0x1a2>
 8005aa0:	2b20      	cmp	r3, #32
 8005aa2:	d00a      	beq.n	8005aba <UART_SetConfig+0x18a>
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d814      	bhi.n	8005ad2 <UART_SetConfig+0x1a2>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <UART_SetConfig+0x182>
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d008      	beq.n	8005ac2 <UART_SetConfig+0x192>
 8005ab0:	e00f      	b.n	8005ad2 <UART_SetConfig+0x1a2>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ab8:	e0ad      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005aba:	2302      	movs	r3, #2
 8005abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac0:	e0a9      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ac8:	e0a5      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005aca:	2308      	movs	r3, #8
 8005acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad0:	e0a1      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005ad2:	2310      	movs	r3, #16
 8005ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ad8:	e09d      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a4a      	ldr	r2, [pc, #296]	; (8005c08 <UART_SetConfig+0x2d8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d125      	bne.n	8005b30 <UART_SetConfig+0x200>
 8005ae4:	4b45      	ldr	r3, [pc, #276]	; (8005bfc <UART_SetConfig+0x2cc>)
 8005ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005aee:	2bc0      	cmp	r3, #192	; 0xc0
 8005af0:	d016      	beq.n	8005b20 <UART_SetConfig+0x1f0>
 8005af2:	2bc0      	cmp	r3, #192	; 0xc0
 8005af4:	d818      	bhi.n	8005b28 <UART_SetConfig+0x1f8>
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d00a      	beq.n	8005b10 <UART_SetConfig+0x1e0>
 8005afa:	2b80      	cmp	r3, #128	; 0x80
 8005afc:	d814      	bhi.n	8005b28 <UART_SetConfig+0x1f8>
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <UART_SetConfig+0x1d8>
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d008      	beq.n	8005b18 <UART_SetConfig+0x1e8>
 8005b06:	e00f      	b.n	8005b28 <UART_SetConfig+0x1f8>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b0e:	e082      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b10:	2302      	movs	r3, #2
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b16:	e07e      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b18:	2304      	movs	r3, #4
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b1e:	e07a      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b20:	2308      	movs	r3, #8
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b26:	e076      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b2e:	e072      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a35      	ldr	r2, [pc, #212]	; (8005c0c <UART_SetConfig+0x2dc>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d12a      	bne.n	8005b90 <UART_SetConfig+0x260>
 8005b3a:	4b30      	ldr	r3, [pc, #192]	; (8005bfc <UART_SetConfig+0x2cc>)
 8005b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b48:	d01a      	beq.n	8005b80 <UART_SetConfig+0x250>
 8005b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4e:	d81b      	bhi.n	8005b88 <UART_SetConfig+0x258>
 8005b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b54:	d00c      	beq.n	8005b70 <UART_SetConfig+0x240>
 8005b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b5a:	d815      	bhi.n	8005b88 <UART_SetConfig+0x258>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <UART_SetConfig+0x238>
 8005b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b64:	d008      	beq.n	8005b78 <UART_SetConfig+0x248>
 8005b66:	e00f      	b.n	8005b88 <UART_SetConfig+0x258>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b6e:	e052      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b70:	2302      	movs	r3, #2
 8005b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b76:	e04e      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b7e:	e04a      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b80:	2308      	movs	r3, #8
 8005b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b86:	e046      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005b8e:	e042      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <UART_SetConfig+0x2c4>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d13a      	bne.n	8005c10 <UART_SetConfig+0x2e0>
 8005b9a:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <UART_SetConfig+0x2cc>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba8:	d01a      	beq.n	8005be0 <UART_SetConfig+0x2b0>
 8005baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bae:	d81b      	bhi.n	8005be8 <UART_SetConfig+0x2b8>
 8005bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bb4:	d00c      	beq.n	8005bd0 <UART_SetConfig+0x2a0>
 8005bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bba:	d815      	bhi.n	8005be8 <UART_SetConfig+0x2b8>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <UART_SetConfig+0x298>
 8005bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bc4:	d008      	beq.n	8005bd8 <UART_SetConfig+0x2a8>
 8005bc6:	e00f      	b.n	8005be8 <UART_SetConfig+0x2b8>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bce:	e022      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bd6:	e01e      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bde:	e01a      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005be6:	e016      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005bee:	e012      	b.n	8005c16 <UART_SetConfig+0x2e6>
 8005bf0:	efff69f3 	.word	0xefff69f3
 8005bf4:	40008000 	.word	0x40008000
 8005bf8:	40013800 	.word	0x40013800
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	40004400 	.word	0x40004400
 8005c04:	40004800 	.word	0x40004800
 8005c08:	40004c00 	.word	0x40004c00
 8005c0c:	40005000 	.word	0x40005000
 8005c10:	2310      	movs	r3, #16
 8005c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a9f      	ldr	r2, [pc, #636]	; (8005e98 <UART_SetConfig+0x568>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d17a      	bne.n	8005d16 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d824      	bhi.n	8005c72 <UART_SetConfig+0x342>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x300>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c55 	.word	0x08005c55
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c63 	.word	0x08005c63
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c73 	.word	0x08005c73
 8005c4c:	08005c73 	.word	0x08005c73
 8005c50:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c54:	f7fc ffb6 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8005c58:	61f8      	str	r0, [r7, #28]
        break;
 8005c5a:	e010      	b.n	8005c7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b8f      	ldr	r3, [pc, #572]	; (8005e9c <UART_SetConfig+0x56c>)
 8005c5e:	61fb      	str	r3, [r7, #28]
        break;
 8005c60:	e00d      	b.n	8005c7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fc ff17 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8005c66:	61f8      	str	r0, [r7, #28]
        break;
 8005c68:	e009      	b.n	8005c7e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	61fb      	str	r3, [r7, #28]
        break;
 8005c70:	e005      	b.n	8005c7e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 80fb 	beq.w	8005e7c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	005b      	lsls	r3, r3, #1
 8005c8e:	4413      	add	r3, r2
 8005c90:	69fa      	ldr	r2, [r7, #28]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d305      	bcc.n	8005ca2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d903      	bls.n	8005caa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ca8:	e0e8      	b.n	8005e7c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	2200      	movs	r2, #0
 8005cae:	461c      	mov	r4, r3
 8005cb0:	4615      	mov	r5, r2
 8005cb2:	f04f 0200 	mov.w	r2, #0
 8005cb6:	f04f 0300 	mov.w	r3, #0
 8005cba:	022b      	lsls	r3, r5, #8
 8005cbc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005cc0:	0222      	lsls	r2, r4, #8
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	6849      	ldr	r1, [r1, #4]
 8005cc6:	0849      	lsrs	r1, r1, #1
 8005cc8:	2000      	movs	r0, #0
 8005cca:	4688      	mov	r8, r1
 8005ccc:	4681      	mov	r9, r0
 8005cce:	eb12 0a08 	adds.w	sl, r2, r8
 8005cd2:	eb43 0b09 	adc.w	fp, r3, r9
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ce4:	4650      	mov	r0, sl
 8005ce6:	4659      	mov	r1, fp
 8005ce8:	f7fa fb0c 	bl	8000304 <__aeabi_uldivmod>
 8005cec:	4602      	mov	r2, r0
 8005cee:	460b      	mov	r3, r1
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cf4:	69bb      	ldr	r3, [r7, #24]
 8005cf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cfa:	d308      	bcc.n	8005d0e <UART_SetConfig+0x3de>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d02:	d204      	bcs.n	8005d0e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	60da      	str	r2, [r3, #12]
 8005d0c:	e0b6      	b.n	8005e7c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005d14:	e0b2      	b.n	8005e7c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1e:	d15e      	bne.n	8005dde <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005d20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d828      	bhi.n	8005d7a <UART_SetConfig+0x44a>
 8005d28:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <UART_SetConfig+0x400>)
 8005d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d2e:	bf00      	nop
 8005d30:	08005d55 	.word	0x08005d55
 8005d34:	08005d5d 	.word	0x08005d5d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	08005d7b 	.word	0x08005d7b
 8005d40:	08005d6b 	.word	0x08005d6b
 8005d44:	08005d7b 	.word	0x08005d7b
 8005d48:	08005d7b 	.word	0x08005d7b
 8005d4c:	08005d7b 	.word	0x08005d7b
 8005d50:	08005d73 	.word	0x08005d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fc ff36 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8005d58:	61f8      	str	r0, [r7, #28]
        break;
 8005d5a:	e014      	b.n	8005d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d5c:	f7fc ff48 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8005d60:	61f8      	str	r0, [r7, #28]
        break;
 8005d62:	e010      	b.n	8005d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d64:	4b4d      	ldr	r3, [pc, #308]	; (8005e9c <UART_SetConfig+0x56c>)
 8005d66:	61fb      	str	r3, [r7, #28]
        break;
 8005d68:	e00d      	b.n	8005d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6a:	f7fc fe93 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8005d6e:	61f8      	str	r0, [r7, #28]
        break;
 8005d70:	e009      	b.n	8005d86 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d76:	61fb      	str	r3, [r7, #28]
        break;
 8005d78:	e005      	b.n	8005d86 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005d84:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d077      	beq.n	8005e7c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	005a      	lsls	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	085b      	lsrs	r3, r3, #1
 8005d96:	441a      	add	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b0f      	cmp	r3, #15
 8005da6:	d916      	bls.n	8005dd6 <UART_SetConfig+0x4a6>
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dae:	d212      	bcs.n	8005dd6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	f023 030f 	bic.w	r3, r3, #15
 8005db8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	085b      	lsrs	r3, r3, #1
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	f003 0307 	and.w	r3, r3, #7
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	8afb      	ldrh	r3, [r7, #22]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	8afa      	ldrh	r2, [r7, #22]
 8005dd2:	60da      	str	r2, [r3, #12]
 8005dd4:	e052      	b.n	8005e7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005ddc:	e04e      	b.n	8005e7c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dde:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de2:	2b08      	cmp	r3, #8
 8005de4:	d827      	bhi.n	8005e36 <UART_SetConfig+0x506>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x4bc>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005e11 	.word	0x08005e11
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	08005e37 	.word	0x08005e37
 8005dfc:	08005e27 	.word	0x08005e27
 8005e00:	08005e37 	.word	0x08005e37
 8005e04:	08005e37 	.word	0x08005e37
 8005e08:	08005e37 	.word	0x08005e37
 8005e0c:	08005e2f 	.word	0x08005e2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e10:	f7fc fed8 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8005e14:	61f8      	str	r0, [r7, #28]
        break;
 8005e16:	e014      	b.n	8005e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e18:	f7fc feea 	bl	8002bf0 <HAL_RCC_GetPCLK2Freq>
 8005e1c:	61f8      	str	r0, [r7, #28]
        break;
 8005e1e:	e010      	b.n	8005e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e20:	4b1e      	ldr	r3, [pc, #120]	; (8005e9c <UART_SetConfig+0x56c>)
 8005e22:	61fb      	str	r3, [r7, #28]
        break;
 8005e24:	e00d      	b.n	8005e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e26:	f7fc fe35 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8005e2a:	61f8      	str	r0, [r7, #28]
        break;
 8005e2c:	e009      	b.n	8005e42 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e32:	61fb      	str	r3, [r7, #28]
        break;
 8005e34:	e005      	b.n	8005e42 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005e40:	bf00      	nop
    }

    if (pclk != 0U)
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d019      	beq.n	8005e7c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	085a      	lsrs	r2, r3, #1
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	441a      	add	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b0f      	cmp	r3, #15
 8005e60:	d909      	bls.n	8005e76 <UART_SetConfig+0x546>
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d205      	bcs.n	8005e76 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	60da      	str	r2, [r3, #12]
 8005e74:	e002      	b.n	8005e7c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2200      	movs	r2, #0
 8005e86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e88:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3728      	adds	r7, #40	; 0x28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e96:	bf00      	nop
 8005e98:	40008000 	.word	0x40008000
 8005e9c:	00f42400 	.word	0x00f42400

08005ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef0:	f003 0304 	and.w	r3, r3, #4
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f34:	f003 0310 	and.w	r3, r3, #16
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	430a      	orrs	r2, r1
 8005f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d01a      	beq.n	8005fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9e:	d10a      	bne.n	8005fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	605a      	str	r2, [r3, #4]
  }
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff4:	f007 fb04 	bl	800d600 <HAL_GetTick>
 8005ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d10e      	bne.n	8006026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f82d 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d001      	beq.n	8006026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e023      	b.n	800606e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0304 	and.w	r3, r3, #4
 8006030:	2b04      	cmp	r3, #4
 8006032:	d10e      	bne.n	8006052 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f817 	bl	8006076 <UART_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e00d      	b.n	800606e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2220      	movs	r2, #32
 8006056:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b09c      	sub	sp, #112	; 0x70
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	603b      	str	r3, [r7, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006086:	e0a5      	b.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800608a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608e:	f000 80a1 	beq.w	80061d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006092:	f007 fab5 	bl	800d600 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	1ad3      	subs	r3, r2, r3
 800609c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800609e:	429a      	cmp	r2, r3
 80060a0:	d302      	bcc.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80060a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d13e      	bne.n	8006126 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060b0:	e853 3f00 	ldrex	r3, [r3]
 80060b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060bc:	667b      	str	r3, [r7, #100]	; 0x64
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060ce:	e841 2300 	strex	r3, r2, [r1]
 80060d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1e6      	bne.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3308      	adds	r3, #8
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	663b      	str	r3, [r7, #96]	; 0x60
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3308      	adds	r3, #8
 80060f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80060fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e5      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e067      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d04f      	beq.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800613e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006142:	d147      	bne.n	80061d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800614c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006162:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	637b      	str	r3, [r7, #52]	; 0x34
 800616e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006172:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e6      	bne.n	800614e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3308      	adds	r3, #8
 8006186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	e853 3f00 	ldrex	r3, [r3]
 800618e:	613b      	str	r3, [r7, #16]
   return(result);
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f023 0301 	bic.w	r3, r3, #1
 8006196:	66bb      	str	r3, [r7, #104]	; 0x68
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3308      	adds	r3, #8
 800619e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80061a0:	623a      	str	r2, [r7, #32]
 80061a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a4:	69f9      	ldr	r1, [r7, #28]
 80061a6:	6a3a      	ldr	r2, [r7, #32]
 80061a8:	e841 2300 	strex	r3, r2, [r1]
 80061ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e5      	bne.n	8006180 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2220      	movs	r2, #32
 80061be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80061d0:	2303      	movs	r3, #3
 80061d2:	e010      	b.n	80061f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69da      	ldr	r2, [r3, #28]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4013      	ands	r3, r2
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	bf0c      	ite	eq
 80061e4:	2301      	moveq	r3, #1
 80061e6:	2300      	movne	r3, #0
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	461a      	mov	r2, r3
 80061ec:	79fb      	ldrb	r3, [r7, #7]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	f43f af4a 	beq.w	8006088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3770      	adds	r7, #112	; 0x70
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006204:	4904      	ldr	r1, [pc, #16]	; (8006218 <MX_FATFS_Init+0x18>)
 8006206:	4805      	ldr	r0, [pc, #20]	; (800621c <MX_FATFS_Init+0x1c>)
 8006208:	f003 f924 	bl	8009454 <FATFS_LinkDriver>
 800620c:	4603      	mov	r3, r0
 800620e:	461a      	mov	r2, r3
 8006210:	4b03      	ldr	r3, [pc, #12]	; (8006220 <MX_FATFS_Init+0x20>)
 8006212:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006214:	bf00      	nop
 8006216:	bd80      	pop	{r7, pc}
 8006218:	200003ac 	.word	0x200003ac
 800621c:	20000010 	.word	0x20000010
 8006220:	200003a8 	.word	0x200003a8

08006224 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006228:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800622a:	4618      	mov	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	4603      	mov	r3, r0
 800623c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return USER_SPI_initialize(pdrv);
 800623e:	79fb      	ldrb	r3, [r7, #7]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f9d9 	bl	80065f8 <USER_SPI_initialize>
 8006246:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006248:	4618      	mov	r0, r3
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b082      	sub	sp, #8
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fab5 	bl	80067cc <USER_SPI_status>
 8006262:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006264:	4618      	mov	r0, r3
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	60b9      	str	r1, [r7, #8]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	4603      	mov	r3, r0
 800627a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 800627c:	7bf8      	ldrb	r0, [r7, #15]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	687a      	ldr	r2, [r7, #4]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	f000 fab8 	bl	80067f8 <USER_SPI_read>
 8006288:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	603b      	str	r3, [r7, #0]
 800629e:	4603      	mov	r3, r0
 80062a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count);
 80062a2:	7bf8      	ldrb	r0, [r7, #15]
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	f000 fb0b 	bl	80068c4 <USER_SPI_write>
 80062ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	603a      	str	r2, [r7, #0]
 80062c2:	71fb      	strb	r3, [r7, #7]
 80062c4:	460b      	mov	r3, r1
 80062c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 80062c8:	79b9      	ldrb	r1, [r7, #6]
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 fb74 	bl	80069bc <USER_SPI_ioctl>
 80062d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80062e8:	f007 f98a 	bl	800d600 <HAL_GetTick>
 80062ec:	4603      	mov	r3, r0
 80062ee:	4a04      	ldr	r2, [pc, #16]	; (8006300 <SPI_Timer_On+0x20>)
 80062f0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80062f2:	4a04      	ldr	r2, [pc, #16]	; (8006304 <SPI_Timer_On+0x24>)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6013      	str	r3, [r2, #0]
}
 80062f8:	bf00      	nop
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	200003b4 	.word	0x200003b4
 8006304:	200003b8 	.word	0x200003b8

08006308 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006308:	b580      	push	{r7, lr}
 800630a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800630c:	f007 f978 	bl	800d600 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	4b06      	ldr	r3, [pc, #24]	; (800632c <SPI_Timer_Status+0x24>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	1ad2      	subs	r2, r2, r3
 8006318:	4b05      	ldr	r3, [pc, #20]	; (8006330 <SPI_Timer_Status+0x28>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	bf34      	ite	cc
 8006320:	2301      	movcc	r3, #1
 8006322:	2300      	movcs	r3, #0
 8006324:	b2db      	uxtb	r3, r3
}
 8006326:	4618      	mov	r0, r3
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	200003b4 	.word	0x200003b4
 8006330:	200003b8 	.word	0x200003b8

08006334 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af02      	add	r7, sp, #8
 800633a:	4603      	mov	r3, r0
 800633c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800633e:	f107 020f 	add.w	r2, r7, #15
 8006342:	1df9      	adds	r1, r7, #7
 8006344:	2332      	movs	r3, #50	; 0x32
 8006346:	9300      	str	r3, [sp, #0]
 8006348:	2301      	movs	r3, #1
 800634a:	4804      	ldr	r0, [pc, #16]	; (800635c <xchg_spi+0x28>)
 800634c:	f7fd fc7b 	bl	8003c46 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006350:	7bfb      	ldrb	r3, [r7, #15]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	2000013c 	.word	0x2000013c

08006360 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006360:	b590      	push	{r4, r7, lr}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800636a:	2300      	movs	r3, #0
 800636c:	60fb      	str	r3, [r7, #12]
 800636e:	e00a      	b.n	8006386 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	18d4      	adds	r4, r2, r3
 8006376:	20ff      	movs	r0, #255	; 0xff
 8006378:	f7ff ffdc 	bl	8006334 <xchg_spi>
 800637c:	4603      	mov	r3, r0
 800637e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3301      	adds	r3, #1
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d3f0      	bcc.n	8006370 <rcvr_spi_multi+0x10>
	}
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	bd90      	pop	{r4, r7, pc}

08006398 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
 80063a6:	e009      	b.n	80063bc <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7ff ffbf 	bl	8006334 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3301      	adds	r3, #1
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d3f1      	bcc.n	80063a8 <xmit_spi_multi+0x10>
	}
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b086      	sub	sp, #24
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80063d6:	f007 f913 	bl	800d600 <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80063e0:	20ff      	movs	r0, #255	; 0xff
 80063e2:	f7ff ffa7 	bl	8006334 <xchg_spi>
 80063e6:	4603      	mov	r3, r0
 80063e8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	2bff      	cmp	r3, #255	; 0xff
 80063ee:	d007      	beq.n	8006400 <wait_ready+0x32>
 80063f0:	f007 f906 	bl	800d600 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d8ef      	bhi.n	80063e0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2bff      	cmp	r3, #255	; 0xff
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006418:	2201      	movs	r2, #1
 800641a:	2120      	movs	r1, #32
 800641c:	4803      	ldr	r0, [pc, #12]	; (800642c <despiselect+0x18>)
 800641e:	f7fb fcbb 	bl	8001d98 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006422:	20ff      	movs	r0, #255	; 0xff
 8006424:	f7ff ff86 	bl	8006334 <xchg_spi>

}
 8006428:	bf00      	nop
 800642a:	bd80      	pop	{r7, pc}
 800642c:	48000400 	.word	0x48000400

08006430 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006434:	2200      	movs	r2, #0
 8006436:	2120      	movs	r1, #32
 8006438:	4809      	ldr	r0, [pc, #36]	; (8006460 <spiselect+0x30>)
 800643a:	f7fb fcad 	bl	8001d98 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800643e:	20ff      	movs	r0, #255	; 0xff
 8006440:	f7ff ff78 	bl	8006334 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006448:	f7ff ffc1 	bl	80063ce <wait_ready>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <spiselect+0x26>
 8006452:	2301      	movs	r3, #1
 8006454:	e002      	b.n	800645c <spiselect+0x2c>

	despiselect();
 8006456:	f7ff ffdd 	bl	8006414 <despiselect>
	return 0;	/* Timeout */
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	48000400 	.word	0x48000400

08006464 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800646e:	20c8      	movs	r0, #200	; 0xc8
 8006470:	f7ff ff36 	bl	80062e0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006474:	20ff      	movs	r0, #255	; 0xff
 8006476:	f7ff ff5d 	bl	8006334 <xchg_spi>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2bff      	cmp	r3, #255	; 0xff
 8006482:	d104      	bne.n	800648e <rcvr_datablock+0x2a>
 8006484:	f7ff ff40 	bl	8006308 <SPI_Timer_Status>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1f2      	bne.n	8006474 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800648e:	7bfb      	ldrb	r3, [r7, #15]
 8006490:	2bfe      	cmp	r3, #254	; 0xfe
 8006492:	d001      	beq.n	8006498 <rcvr_datablock+0x34>
 8006494:	2300      	movs	r3, #0
 8006496:	e00a      	b.n	80064ae <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006498:	6839      	ldr	r1, [r7, #0]
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff ff60 	bl	8006360 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80064a0:	20ff      	movs	r0, #255	; 0xff
 80064a2:	f7ff ff47 	bl	8006334 <xchg_spi>
 80064a6:	20ff      	movs	r0, #255	; 0xff
 80064a8:	f7ff ff44 	bl	8006334 <xchg_spi>

	return 1;						/* Function succeeded */
 80064ac:	2301      	movs	r3, #1
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3710      	adds	r7, #16
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b084      	sub	sp, #16
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	460b      	mov	r3, r1
 80064c0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80064c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064c6:	f7ff ff82 	bl	80063ce <wait_ready>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <xmit_datablock+0x1e>
 80064d0:	2300      	movs	r3, #0
 80064d2:	e01e      	b.n	8006512 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff ff2c 	bl	8006334 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	2bfd      	cmp	r3, #253	; 0xfd
 80064e0:	d016      	beq.n	8006510 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80064e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ff56 	bl	8006398 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80064ec:	20ff      	movs	r0, #255	; 0xff
 80064ee:	f7ff ff21 	bl	8006334 <xchg_spi>
 80064f2:	20ff      	movs	r0, #255	; 0xff
 80064f4:	f7ff ff1e 	bl	8006334 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80064f8:	20ff      	movs	r0, #255	; 0xff
 80064fa:	f7ff ff1b 	bl	8006334 <xchg_spi>
 80064fe:	4603      	mov	r3, r0
 8006500:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	2b05      	cmp	r3, #5
 800650a:	d001      	beq.n	8006510 <xmit_datablock+0x5a>
 800650c:	2300      	movs	r3, #0
 800650e:	e000      	b.n	8006512 <xmit_datablock+0x5c>
	}
	return 1;
 8006510:	2301      	movs	r3, #1
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	4603      	mov	r3, r0
 8006522:	6039      	str	r1, [r7, #0]
 8006524:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	da0e      	bge.n	800654c <send_cmd+0x32>
		cmd &= 0x7F;
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006534:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006536:	2100      	movs	r1, #0
 8006538:	2037      	movs	r0, #55	; 0x37
 800653a:	f7ff ffee 	bl	800651a <send_cmd>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006542:	7bbb      	ldrb	r3, [r7, #14]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d901      	bls.n	800654c <send_cmd+0x32>
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	e051      	b.n	80065f0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	2b0c      	cmp	r3, #12
 8006550:	d008      	beq.n	8006564 <send_cmd+0x4a>
		despiselect();
 8006552:	f7ff ff5f 	bl	8006414 <despiselect>
		if (!spiselect()) return 0xFF;
 8006556:	f7ff ff6b 	bl	8006430 <spiselect>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d101      	bne.n	8006564 <send_cmd+0x4a>
 8006560:	23ff      	movs	r3, #255	; 0xff
 8006562:	e045      	b.n	80065f0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006564:	79fb      	ldrb	r3, [r7, #7]
 8006566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800656a:	b2db      	uxtb	r3, r3
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fee1 	bl	8006334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	0e1b      	lsrs	r3, r3, #24
 8006576:	b2db      	uxtb	r3, r3
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff fedb 	bl	8006334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	0c1b      	lsrs	r3, r3, #16
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fed5 	bl	8006334 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	0a1b      	lsrs	r3, r3, #8
 800658e:	b2db      	uxtb	r3, r3
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fecf 	bl	8006334 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff feca 	bl	8006334 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80065a0:	2301      	movs	r3, #1
 80065a2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80065a4:	79fb      	ldrb	r3, [r7, #7]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d101      	bne.n	80065ae <send_cmd+0x94>
 80065aa:	2395      	movs	r3, #149	; 0x95
 80065ac:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d101      	bne.n	80065b8 <send_cmd+0x9e>
 80065b4:	2387      	movs	r3, #135	; 0x87
 80065b6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff feba 	bl	8006334 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	2b0c      	cmp	r3, #12
 80065c4:	d102      	bne.n	80065cc <send_cmd+0xb2>
 80065c6:	20ff      	movs	r0, #255	; 0xff
 80065c8:	f7ff feb4 	bl	8006334 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80065cc:	230a      	movs	r3, #10
 80065ce:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80065d0:	20ff      	movs	r0, #255	; 0xff
 80065d2:	f7ff feaf 	bl	8006334 <xchg_spi>
 80065d6:	4603      	mov	r3, r0
 80065d8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80065da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	da05      	bge.n	80065ee <send_cmd+0xd4>
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	73fb      	strb	r3, [r7, #15]
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <send_cmd+0xb6>

	return res;							/* Return received response */
 80065ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <USER_SPI_initialize+0x14>
 8006608:	2301      	movs	r3, #1
 800660a:	e0d4      	b.n	80067b6 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800660c:	4b6c      	ldr	r3, [pc, #432]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <USER_SPI_initialize+0x2a>
 800661a:	4b69      	ldr	r3, [pc, #420]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e0c9      	b.n	80067b6 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8006622:	4b68      	ldr	r3, [pc, #416]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	4b66      	ldr	r3, [pc, #408]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8006630:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006632:	230a      	movs	r3, #10
 8006634:	73fb      	strb	r3, [r7, #15]
 8006636:	e005      	b.n	8006644 <USER_SPI_initialize+0x4c>
 8006638:	20ff      	movs	r0, #255	; 0xff
 800663a:	f7ff fe7b 	bl	8006334 <xchg_spi>
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	3b01      	subs	r3, #1
 8006642:	73fb      	strb	r3, [r7, #15]
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f6      	bne.n	8006638 <USER_SPI_initialize+0x40>

	ty = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800664e:	2100      	movs	r1, #0
 8006650:	2000      	movs	r0, #0
 8006652:	f7ff ff62 	bl	800651a <send_cmd>
 8006656:	4603      	mov	r3, r0
 8006658:	2b01      	cmp	r3, #1
 800665a:	f040 808b 	bne.w	8006774 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800665e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006662:	f7ff fe3d 	bl	80062e0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006666:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800666a:	2008      	movs	r0, #8
 800666c:	f7ff ff55 	bl	800651a <send_cmd>
 8006670:	4603      	mov	r3, r0
 8006672:	2b01      	cmp	r3, #1
 8006674:	d151      	bne.n	800671a <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006676:	2300      	movs	r3, #0
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	e00d      	b.n	8006698 <USER_SPI_initialize+0xa0>
 800667c:	7bfc      	ldrb	r4, [r7, #15]
 800667e:	20ff      	movs	r0, #255	; 0xff
 8006680:	f7ff fe58 	bl	8006334 <xchg_spi>
 8006684:	4603      	mov	r3, r0
 8006686:	461a      	mov	r2, r3
 8006688:	f104 0310 	add.w	r3, r4, #16
 800668c:	443b      	add	r3, r7
 800668e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	3301      	adds	r3, #1
 8006696:	73fb      	strb	r3, [r7, #15]
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b03      	cmp	r3, #3
 800669c:	d9ee      	bls.n	800667c <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800669e:	7abb      	ldrb	r3, [r7, #10]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d167      	bne.n	8006774 <USER_SPI_initialize+0x17c>
 80066a4:	7afb      	ldrb	r3, [r7, #11]
 80066a6:	2baa      	cmp	r3, #170	; 0xaa
 80066a8:	d164      	bne.n	8006774 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80066aa:	bf00      	nop
 80066ac:	f7ff fe2c 	bl	8006308 <SPI_Timer_Status>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <USER_SPI_initialize+0xce>
 80066b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80066ba:	20a9      	movs	r0, #169	; 0xa9
 80066bc:	f7ff ff2d 	bl	800651a <send_cmd>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f2      	bne.n	80066ac <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80066c6:	f7ff fe1f 	bl	8006308 <SPI_Timer_Status>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d051      	beq.n	8006774 <USER_SPI_initialize+0x17c>
 80066d0:	2100      	movs	r1, #0
 80066d2:	203a      	movs	r0, #58	; 0x3a
 80066d4:	f7ff ff21 	bl	800651a <send_cmd>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d14a      	bne.n	8006774 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
 80066e2:	e00d      	b.n	8006700 <USER_SPI_initialize+0x108>
 80066e4:	7bfc      	ldrb	r4, [r7, #15]
 80066e6:	20ff      	movs	r0, #255	; 0xff
 80066e8:	f7ff fe24 	bl	8006334 <xchg_spi>
 80066ec:	4603      	mov	r3, r0
 80066ee:	461a      	mov	r2, r3
 80066f0:	f104 0310 	add.w	r3, r4, #16
 80066f4:	443b      	add	r3, r7
 80066f6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	3301      	adds	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
 8006700:	7bfb      	ldrb	r3, [r7, #15]
 8006702:	2b03      	cmp	r3, #3
 8006704:	d9ee      	bls.n	80066e4 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006706:	7a3b      	ldrb	r3, [r7, #8]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d001      	beq.n	8006714 <USER_SPI_initialize+0x11c>
 8006710:	230c      	movs	r3, #12
 8006712:	e000      	b.n	8006716 <USER_SPI_initialize+0x11e>
 8006714:	2304      	movs	r3, #4
 8006716:	737b      	strb	r3, [r7, #13]
 8006718:	e02c      	b.n	8006774 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800671a:	2100      	movs	r1, #0
 800671c:	20a9      	movs	r0, #169	; 0xa9
 800671e:	f7ff fefc 	bl	800651a <send_cmd>
 8006722:	4603      	mov	r3, r0
 8006724:	2b01      	cmp	r3, #1
 8006726:	d804      	bhi.n	8006732 <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006728:	2302      	movs	r3, #2
 800672a:	737b      	strb	r3, [r7, #13]
 800672c:	23a9      	movs	r3, #169	; 0xa9
 800672e:	73bb      	strb	r3, [r7, #14]
 8006730:	e003      	b.n	800673a <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006732:	2301      	movs	r3, #1
 8006734:	737b      	strb	r3, [r7, #13]
 8006736:	2301      	movs	r3, #1
 8006738:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800673a:	bf00      	nop
 800673c:	f7ff fde4 	bl	8006308 <SPI_Timer_Status>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <USER_SPI_initialize+0x15e>
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fee5 	bl	800651a <send_cmd>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f2      	bne.n	800673c <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006756:	f7ff fdd7 	bl	8006308 <SPI_Timer_Status>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d007      	beq.n	8006770 <USER_SPI_initialize+0x178>
 8006760:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006764:	2010      	movs	r0, #16
 8006766:	f7ff fed8 	bl	800651a <send_cmd>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <USER_SPI_initialize+0x17c>
				ty = 0;
 8006770:	2300      	movs	r3, #0
 8006772:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006774:	4a14      	ldr	r2, [pc, #80]	; (80067c8 <USER_SPI_initialize+0x1d0>)
 8006776:	7b7b      	ldrb	r3, [r7, #13]
 8006778:	7013      	strb	r3, [r2, #0]
	despiselect();
 800677a:	f7ff fe4b 	bl	8006414 <despiselect>

	if (ty) {			/* OK */
 800677e:	7b7b      	ldrb	r3, [r7, #13]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d012      	beq.n	80067aa <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8006784:	4b0f      	ldr	r3, [pc, #60]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800678e:	4b0d      	ldr	r3, [pc, #52]	; (80067c4 <USER_SPI_initialize+0x1cc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0210 	orr.w	r2, r2, #16
 8006796:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006798:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f023 0301 	bic.w	r3, r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	4b06      	ldr	r3, [pc, #24]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e002      	b.n	80067b0 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80067aa:	4b05      	ldr	r3, [pc, #20]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80067b0:	4b03      	ldr	r3, [pc, #12]	; (80067c0 <USER_SPI_initialize+0x1c8>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd90      	pop	{r4, r7, pc}
 80067be:	bf00      	nop
 80067c0:	20000024 	.word	0x20000024
 80067c4:	2000013c 	.word	0x2000013c
 80067c8:	200003b0 	.word	0x200003b0

080067cc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80067d6:	79fb      	ldrb	r3, [r7, #7]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <USER_SPI_status+0x14>
 80067dc:	2301      	movs	r3, #1
 80067de:	e002      	b.n	80067e6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80067e0:	4b04      	ldr	r3, [pc, #16]	; (80067f4 <USER_SPI_status+0x28>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	b2db      	uxtb	r3, r3
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	20000024 	.word	0x20000024

080067f8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60b9      	str	r1, [r7, #8]
 8006800:	607a      	str	r2, [r7, #4]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d102      	bne.n	8006814 <USER_SPI_read+0x1c>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <USER_SPI_read+0x20>
 8006814:	2304      	movs	r3, #4
 8006816:	e04d      	b.n	80068b4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006818:	4b28      	ldr	r3, [pc, #160]	; (80068bc <USER_SPI_read+0xc4>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <USER_SPI_read+0x32>
 8006826:	2303      	movs	r3, #3
 8006828:	e044      	b.n	80068b4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800682a:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <USER_SPI_read+0xc8>)
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b00      	cmp	r3, #0
 8006834:	d102      	bne.n	800683c <USER_SPI_read+0x44>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	025b      	lsls	r3, r3, #9
 800683a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d111      	bne.n	8006866 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	2011      	movs	r0, #17
 8006846:	f7ff fe68 	bl	800651a <send_cmd>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d129      	bne.n	80068a4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006854:	68b8      	ldr	r0, [r7, #8]
 8006856:	f7ff fe05 	bl	8006464 <rcvr_datablock>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d021      	beq.n	80068a4 <USER_SPI_read+0xac>
			count = 0;
 8006860:	2300      	movs	r3, #0
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	e01e      	b.n	80068a4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	2012      	movs	r0, #18
 800686a:	f7ff fe56 	bl	800651a <send_cmd>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d117      	bne.n	80068a4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f7ff fdf3 	bl	8006464 <rcvr_datablock>
 800687e:	4603      	mov	r3, r0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <USER_SPI_read+0xa2>
				buff += 512;
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800688a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	3b01      	subs	r3, #1
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d1ed      	bne.n	8006874 <USER_SPI_read+0x7c>
 8006898:	e000      	b.n	800689c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800689a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800689c:	2100      	movs	r1, #0
 800689e:	200c      	movs	r0, #12
 80068a0:	f7ff fe3b 	bl	800651a <send_cmd>
		}
	}
	despiselect();
 80068a4:	f7ff fdb6 	bl	8006414 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	bf14      	ite	ne
 80068ae:	2301      	movne	r3, #1
 80068b0:	2300      	moveq	r3, #0
 80068b2:	b2db      	uxtb	r3, r3
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000024 	.word	0x20000024
 80068c0:	200003b0 	.word	0x200003b0

080068c4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
 80068ce:	603b      	str	r3, [r7, #0]
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80068d4:	7bfb      	ldrb	r3, [r7, #15]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <USER_SPI_write+0x1c>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <USER_SPI_write+0x20>
 80068e0:	2304      	movs	r3, #4
 80068e2:	e063      	b.n	80069ac <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80068e4:	4b33      	ldr	r3, [pc, #204]	; (80069b4 <USER_SPI_write+0xf0>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <USER_SPI_write+0x32>
 80068f2:	2303      	movs	r3, #3
 80068f4:	e05a      	b.n	80069ac <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80068f6:	4b2f      	ldr	r3, [pc, #188]	; (80069b4 <USER_SPI_write+0xf0>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	d001      	beq.n	8006908 <USER_SPI_write+0x44>
 8006904:	2302      	movs	r3, #2
 8006906:	e051      	b.n	80069ac <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006908:	4b2b      	ldr	r3, [pc, #172]	; (80069b8 <USER_SPI_write+0xf4>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <USER_SPI_write+0x56>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	025b      	lsls	r3, r3, #9
 8006918:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d110      	bne.n	8006942 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	2018      	movs	r0, #24
 8006924:	f7ff fdf9 	bl	800651a <send_cmd>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d136      	bne.n	800699c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800692e:	21fe      	movs	r1, #254	; 0xfe
 8006930:	68b8      	ldr	r0, [r7, #8]
 8006932:	f7ff fdc0 	bl	80064b6 <xmit_datablock>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d02f      	beq.n	800699c <USER_SPI_write+0xd8>
			count = 0;
 800693c:	2300      	movs	r3, #0
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	e02c      	b.n	800699c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <USER_SPI_write+0xf4>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	f003 0306 	and.w	r3, r3, #6
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <USER_SPI_write+0x92>
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	2097      	movs	r0, #151	; 0x97
 8006952:	f7ff fde2 	bl	800651a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006956:	6879      	ldr	r1, [r7, #4]
 8006958:	2019      	movs	r0, #25
 800695a:	f7ff fdde 	bl	800651a <send_cmd>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11b      	bne.n	800699c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006964:	21fc      	movs	r1, #252	; 0xfc
 8006966:	68b8      	ldr	r0, [r7, #8]
 8006968:	f7ff fda5 	bl	80064b6 <xmit_datablock>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <USER_SPI_write+0xc4>
				buff += 512;
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006978:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	3b01      	subs	r3, #1
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1ee      	bne.n	8006964 <USER_SPI_write+0xa0>
 8006986:	e000      	b.n	800698a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006988:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800698a:	21fd      	movs	r1, #253	; 0xfd
 800698c:	2000      	movs	r0, #0
 800698e:	f7ff fd92 	bl	80064b6 <xmit_datablock>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <USER_SPI_write+0xd8>
 8006998:	2301      	movs	r3, #1
 800699a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800699c:	f7ff fd3a 	bl	8006414 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	bf14      	ite	ne
 80069a6:	2301      	movne	r3, #1
 80069a8:	2300      	moveq	r3, #0
 80069aa:	b2db      	uxtb	r3, r3
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000024 	.word	0x20000024
 80069b8:	200003b0 	.word	0x200003b0

080069bc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b08c      	sub	sp, #48	; 0x30
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	603a      	str	r2, [r7, #0]
 80069c6:	71fb      	strb	r3, [r7, #7]
 80069c8:	460b      	mov	r3, r1
 80069ca:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80069cc:	79fb      	ldrb	r3, [r7, #7]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d001      	beq.n	80069d6 <USER_SPI_ioctl+0x1a>
 80069d2:	2304      	movs	r3, #4
 80069d4:	e15a      	b.n	8006c8c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80069d6:	4baf      	ldr	r3, [pc, #700]	; (8006c94 <USER_SPI_ioctl+0x2d8>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USER_SPI_ioctl+0x2c>
 80069e4:	2303      	movs	r3, #3
 80069e6:	e151      	b.n	8006c8c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80069ee:	79bb      	ldrb	r3, [r7, #6]
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	f200 8136 	bhi.w	8006c62 <USER_SPI_ioctl+0x2a6>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <USER_SPI_ioctl+0x40>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a11 	.word	0x08006a11
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006c63 	.word	0x08006c63
 8006a08:	08006ad1 	.word	0x08006ad1
 8006a0c:	08006bc7 	.word	0x08006bc7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006a10:	f7ff fd0e 	bl	8006430 <spiselect>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8127 	beq.w	8006c6a <USER_SPI_ioctl+0x2ae>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006a22:	e122      	b.n	8006c6a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006a24:	2100      	movs	r1, #0
 8006a26:	2009      	movs	r0, #9
 8006a28:	f7ff fd77 	bl	800651a <send_cmd>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 811d 	bne.w	8006c6e <USER_SPI_ioctl+0x2b2>
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	2110      	movs	r1, #16
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7ff fd12 	bl	8006464 <rcvr_datablock>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 8113 	beq.w	8006c6e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006a48:	7b3b      	ldrb	r3, [r7, #12]
 8006a4a:	099b      	lsrs	r3, r3, #6
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d111      	bne.n	8006a76 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006a52:	7d7b      	ldrb	r3, [r7, #21]
 8006a54:	461a      	mov	r2, r3
 8006a56:	7d3b      	ldrb	r3, [r7, #20]
 8006a58:	021b      	lsls	r3, r3, #8
 8006a5a:	4413      	add	r3, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	7cfb      	ldrb	r3, [r7, #19]
 8006a60:	041b      	lsls	r3, r3, #16
 8006a62:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006a66:	4413      	add	r3, r2
 8006a68:	3301      	adds	r3, #1
 8006a6a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	029a      	lsls	r2, r3, #10
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e028      	b.n	8006ac8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006a76:	7c7b      	ldrb	r3, [r7, #17]
 8006a78:	f003 030f 	and.w	r3, r3, #15
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	7dbb      	ldrb	r3, [r7, #22]
 8006a80:	09db      	lsrs	r3, r3, #7
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	4413      	add	r3, r2
 8006a86:	b2da      	uxtb	r2, r3
 8006a88:	7d7b      	ldrb	r3, [r7, #21]
 8006a8a:	005b      	lsls	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	f003 0306 	and.w	r3, r3, #6
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	4413      	add	r3, r2
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	3302      	adds	r3, #2
 8006a9a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006a9e:	7d3b      	ldrb	r3, [r7, #20]
 8006aa0:	099b      	lsrs	r3, r3, #6
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	7cfb      	ldrb	r3, [r7, #19]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	441a      	add	r2, r3
 8006aac:	7cbb      	ldrb	r3, [r7, #18]
 8006aae:	029b      	lsls	r3, r3, #10
 8006ab0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006aba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006abe:	3b09      	subs	r3, #9
 8006ac0:	69fa      	ldr	r2, [r7, #28]
 8006ac2:	409a      	lsls	r2, r3
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006ace:	e0ce      	b.n	8006c6e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006ad0:	4b71      	ldr	r3, [pc, #452]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0304 	and.w	r3, r3, #4
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d031      	beq.n	8006b40 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006adc:	2100      	movs	r1, #0
 8006ade:	208d      	movs	r0, #141	; 0x8d
 8006ae0:	f7ff fd1b 	bl	800651a <send_cmd>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f040 80c3 	bne.w	8006c72 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006aec:	20ff      	movs	r0, #255	; 0xff
 8006aee:	f7ff fc21 	bl	8006334 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006af2:	f107 030c 	add.w	r3, r7, #12
 8006af6:	2110      	movs	r1, #16
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7ff fcb3 	bl	8006464 <rcvr_datablock>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 80b6 	beq.w	8006c72 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006b06:	2330      	movs	r3, #48	; 0x30
 8006b08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006b0c:	e007      	b.n	8006b1e <USER_SPI_ioctl+0x162>
 8006b0e:	20ff      	movs	r0, #255	; 0xff
 8006b10:	f7ff fc10 	bl	8006334 <xchg_spi>
 8006b14:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006b1e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f3      	bne.n	8006b0e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006b26:	7dbb      	ldrb	r3, [r7, #22]
 8006b28:	091b      	lsrs	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2310      	movs	r3, #16
 8006b30:	fa03 f202 	lsl.w	r2, r3, r2
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006b3e:	e098      	b.n	8006c72 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006b40:	2100      	movs	r1, #0
 8006b42:	2009      	movs	r0, #9
 8006b44:	f7ff fce9 	bl	800651a <send_cmd>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 8091 	bne.w	8006c72 <USER_SPI_ioctl+0x2b6>
 8006b50:	f107 030c 	add.w	r3, r7, #12
 8006b54:	2110      	movs	r1, #16
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fc84 	bl	8006464 <rcvr_datablock>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 8087 	beq.w	8006c72 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006b64:	4b4c      	ldr	r3, [pc, #304]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d012      	beq.n	8006b96 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006b70:	7dbb      	ldrb	r3, [r7, #22]
 8006b72:	005b      	lsls	r3, r3, #1
 8006b74:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006b78:	7dfa      	ldrb	r2, [r7, #23]
 8006b7a:	09d2      	lsrs	r2, r2, #7
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	4413      	add	r3, r2
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	7e7b      	ldrb	r3, [r7, #25]
 8006b84:	099b      	lsrs	r3, r3, #6
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e013      	b.n	8006bbe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006b96:	7dbb      	ldrb	r3, [r7, #22]
 8006b98:	109b      	asrs	r3, r3, #2
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f003 031f 	and.w	r3, r3, #31
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	7dfa      	ldrb	r2, [r7, #23]
 8006ba4:	00d2      	lsls	r2, r2, #3
 8006ba6:	f002 0218 	and.w	r2, r2, #24
 8006baa:	7df9      	ldrb	r1, [r7, #23]
 8006bac:	0949      	lsrs	r1, r1, #5
 8006bae:	b2c9      	uxtb	r1, r1
 8006bb0:	440a      	add	r2, r1
 8006bb2:	3201      	adds	r2, #1
 8006bb4:	fb02 f303 	mul.w	r3, r2, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006bc4:	e055      	b.n	8006c72 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006bc6:	4b34      	ldr	r3, [pc, #208]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	f003 0306 	and.w	r3, r3, #6
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d051      	beq.n	8006c76 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006bd2:	f107 020c 	add.w	r2, r7, #12
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
 8006bd8:	210b      	movs	r1, #11
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff feee 	bl	80069bc <USER_SPI_ioctl>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d149      	bne.n	8006c7a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006be6:	7b3b      	ldrb	r3, [r7, #12]
 8006be8:	099b      	lsrs	r3, r3, #6
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USER_SPI_ioctl+0x23e>
 8006bf0:	7dbb      	ldrb	r3, [r7, #22]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d041      	beq.n	8006c7e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	623b      	str	r3, [r7, #32]
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <USER_SPI_ioctl+0x2dc>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d105      	bne.n	8006c22 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	025b      	lsls	r3, r3, #9
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	025b      	lsls	r3, r3, #9
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006c22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c24:	2020      	movs	r0, #32
 8006c26:	f7ff fc78 	bl	800651a <send_cmd>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d128      	bne.n	8006c82 <USER_SPI_ioctl+0x2c6>
 8006c30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c32:	2021      	movs	r0, #33	; 0x21
 8006c34:	f7ff fc71 	bl	800651a <send_cmd>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d121      	bne.n	8006c82 <USER_SPI_ioctl+0x2c6>
 8006c3e:	2100      	movs	r1, #0
 8006c40:	2026      	movs	r0, #38	; 0x26
 8006c42:	f7ff fc6a 	bl	800651a <send_cmd>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11a      	bne.n	8006c82 <USER_SPI_ioctl+0x2c6>
 8006c4c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c50:	f7ff fbbd 	bl	80063ce <wait_ready>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d013      	beq.n	8006c82 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006c60:	e00f      	b.n	8006c82 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006c62:	2304      	movs	r3, #4
 8006c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c68:	e00c      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c6a:	bf00      	nop
 8006c6c:	e00a      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c6e:	bf00      	nop
 8006c70:	e008      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c72:	bf00      	nop
 8006c74:	e006      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006c76:	bf00      	nop
 8006c78:	e004      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <USER_SPI_ioctl+0x2c8>
		break;
 8006c82:	bf00      	nop
	}

	despiselect();
 8006c84:	f7ff fbc6 	bl	8006414 <despiselect>

	return res;
 8006c88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3730      	adds	r7, #48	; 0x30
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000024 	.word	0x20000024
 8006c98:	200003b0 	.word	0x200003b0

08006c9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <disk_status+0x30>)
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	79fa      	ldrb	r2, [r7, #7]
 8006cb4:	4905      	ldr	r1, [pc, #20]	; (8006ccc <disk_status+0x30>)
 8006cb6:	440a      	add	r2, r1
 8006cb8:	7a12      	ldrb	r2, [r2, #8]
 8006cba:	4610      	mov	r0, r2
 8006cbc:	4798      	blx	r3
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	200003e4 	.word	0x200003e4

08006cd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	4a0d      	ldr	r2, [pc, #52]	; (8006d18 <disk_initialize+0x48>)
 8006ce2:	5cd3      	ldrb	r3, [r2, r3]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d111      	bne.n	8006d0c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006ce8:	79fb      	ldrb	r3, [r7, #7]
 8006cea:	4a0b      	ldr	r2, [pc, #44]	; (8006d18 <disk_initialize+0x48>)
 8006cec:	2101      	movs	r1, #1
 8006cee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	4a09      	ldr	r2, [pc, #36]	; (8006d18 <disk_initialize+0x48>)
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	79fa      	ldrb	r2, [r7, #7]
 8006cfe:	4906      	ldr	r1, [pc, #24]	; (8006d18 <disk_initialize+0x48>)
 8006d00:	440a      	add	r2, r1
 8006d02:	7a12      	ldrb	r2, [r2, #8]
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	200003e4 	.word	0x200003e4

08006d1c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d1c:	b590      	push	{r4, r7, lr}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	603b      	str	r3, [r7, #0]
 8006d28:	4603      	mov	r3, r0
 8006d2a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	4a0a      	ldr	r2, [pc, #40]	; (8006d58 <disk_read+0x3c>)
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	689c      	ldr	r4, [r3, #8]
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4a07      	ldr	r2, [pc, #28]	; (8006d58 <disk_read+0x3c>)
 8006d3c:	4413      	add	r3, r2
 8006d3e:	7a18      	ldrb	r0, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	47a0      	blx	r4
 8006d48:	4603      	mov	r3, r0
 8006d4a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	371c      	adds	r7, #28
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd90      	pop	{r4, r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200003e4 	.word	0x200003e4

08006d5c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d5c:	b590      	push	{r4, r7, lr}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	4a0a      	ldr	r2, [pc, #40]	; (8006d98 <disk_write+0x3c>)
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4413      	add	r3, r2
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	68dc      	ldr	r4, [r3, #12]
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	4a07      	ldr	r2, [pc, #28]	; (8006d98 <disk_write+0x3c>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	7a18      	ldrb	r0, [r3, #8]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	47a0      	blx	r4
 8006d88:	4603      	mov	r3, r0
 8006d8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd90      	pop	{r4, r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200003e4 	.word	0x200003e4

08006d9c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	4603      	mov	r3, r0
 8006da4:	603a      	str	r2, [r7, #0]
 8006da6:	71fb      	strb	r3, [r7, #7]
 8006da8:	460b      	mov	r3, r1
 8006daa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <disk_ioctl+0x38>)
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	79fa      	ldrb	r2, [r7, #7]
 8006dba:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <disk_ioctl+0x38>)
 8006dbc:	440a      	add	r2, r1
 8006dbe:	7a10      	ldrb	r0, [r2, #8]
 8006dc0:	79b9      	ldrb	r1, [r7, #6]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	4798      	blx	r3
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  return res;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	200003e4 	.word	0x200003e4

08006dd8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3301      	adds	r3, #1
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006de8:	89fb      	ldrh	r3, [r7, #14]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	b21a      	sxth	r2, r3
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	b21b      	sxth	r3, r3
 8006df4:	4313      	orrs	r3, r2
 8006df6:	b21b      	sxth	r3, r3
 8006df8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3303      	adds	r3, #3
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	3202      	adds	r2, #2
 8006e20:	7812      	ldrb	r2, [r2, #0]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	3201      	adds	r2, #1
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e40:	68fb      	ldr	r3, [r7, #12]
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	460b      	mov	r3, r1
 8006e58:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	887a      	ldrh	r2, [r7, #2]
 8006e62:	b2d2      	uxtb	r2, r2
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	0a1b      	lsrs	r3, r3, #8
 8006e6a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	1c5a      	adds	r2, r3, #1
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	887a      	ldrh	r2, [r7, #2]
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	701a      	strb	r2, [r3, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	683a      	ldr	r2, [r7, #0]
 8006e96:	b2d2      	uxtb	r2, r2
 8006e98:	701a      	strb	r2, [r3, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	0a1b      	lsrs	r3, r3, #8
 8006e9e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1c5a      	adds	r2, r3, #1
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	0a1b      	lsrs	r3, r3, #8
 8006eb0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	607a      	str	r2, [r7, #4]
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006ef6:	693a      	ldr	r2, [r7, #16]
 8006ef8:	1c53      	adds	r3, r2, #1
 8006efa:	613b      	str	r3, [r7, #16]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	1c59      	adds	r1, r3, #1
 8006f00:	6179      	str	r1, [r7, #20]
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	607b      	str	r3, [r7, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d1f1      	bne.n	8006ef6 <mem_cpy+0x1a>
	}
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	1c5a      	adds	r2, r3, #1
 8006f32:	617a      	str	r2, [r7, #20]
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	b2d2      	uxtb	r2, r2
 8006f38:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f3      	bne.n	8006f2e <mem_set+0x10>
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f54:	b480      	push	{r7}
 8006f56:	b089      	sub	sp, #36	; 0x24
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	61fb      	str	r3, [r7, #28]
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	4619      	mov	r1, r3
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	61ba      	str	r2, [r7, #24]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	1acb      	subs	r3, r1, r3
 8006f80:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	3b01      	subs	r3, #1
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d002      	beq.n	8006f94 <mem_cmp+0x40>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d0eb      	beq.n	8006f6c <mem_cmp+0x18>

	return r;
 8006f94:	697b      	ldr	r3, [r7, #20]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3724      	adds	r7, #36	; 0x24
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr

08006fa2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006fa2:	b480      	push	{r7}
 8006fa4:	b083      	sub	sp, #12
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006fac:	e002      	b.n	8006fb4 <chk_chr+0x12>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	607b      	str	r3, [r7, #4]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <chk_chr+0x26>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d1f2      	bne.n	8006fae <chk_chr+0xc>
	return *str;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60bb      	str	r3, [r7, #8]
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	e029      	b.n	8007040 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006fec:	4a27      	ldr	r2, [pc, #156]	; (800708c <chk_lock+0xb4>)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d01d      	beq.n	8007036 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006ffa:	4a24      	ldr	r2, [pc, #144]	; (800708c <chk_lock+0xb4>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	4413      	add	r3, r2
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d116      	bne.n	800703a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800700c:	4a1f      	ldr	r2, [pc, #124]	; (800708c <chk_lock+0xb4>)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	4413      	add	r3, r2
 8007014:	3304      	adds	r3, #4
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800701c:	429a      	cmp	r2, r3
 800701e:	d10c      	bne.n	800703a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007020:	4a1a      	ldr	r2, [pc, #104]	; (800708c <chk_lock+0xb4>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	011b      	lsls	r3, r3, #4
 8007026:	4413      	add	r3, r2
 8007028:	3308      	adds	r3, #8
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d102      	bne.n	800703a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007034:	e007      	b.n	8007046 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3301      	adds	r3, #1
 800703e:	60fb      	str	r3, [r7, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d9d2      	bls.n	8006fec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d109      	bne.n	8007060 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d102      	bne.n	8007058 <chk_lock+0x80>
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d101      	bne.n	800705c <chk_lock+0x84>
 8007058:	2300      	movs	r3, #0
 800705a:	e010      	b.n	800707e <chk_lock+0xa6>
 800705c:	2312      	movs	r3, #18
 800705e:	e00e      	b.n	800707e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d108      	bne.n	8007078 <chk_lock+0xa0>
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <chk_lock+0xb4>)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	4413      	add	r3, r2
 800706e:	330c      	adds	r3, #12
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007076:	d101      	bne.n	800707c <chk_lock+0xa4>
 8007078:	2310      	movs	r3, #16
 800707a:	e000      	b.n	800707e <chk_lock+0xa6>
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	200003c4 	.word	0x200003c4

08007090 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
 800709a:	e002      	b.n	80070a2 <enq_lock+0x12>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	3301      	adds	r3, #1
 80070a0:	607b      	str	r3, [r7, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d806      	bhi.n	80070b6 <enq_lock+0x26>
 80070a8:	4a09      	ldr	r2, [pc, #36]	; (80070d0 <enq_lock+0x40>)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	011b      	lsls	r3, r3, #4
 80070ae:	4413      	add	r3, r2
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f2      	bne.n	800709c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	370c      	adds	r7, #12
 80070c6:	46bd      	mov	sp, r7
 80070c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	200003c4 	.word	0x200003c4

080070d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	e01f      	b.n	8007124 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80070e4:	4a41      	ldr	r2, [pc, #260]	; (80071ec <inc_lock+0x118>)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	011b      	lsls	r3, r3, #4
 80070ea:	4413      	add	r3, r2
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d113      	bne.n	800711e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80070f6:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <inc_lock+0x118>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	011b      	lsls	r3, r3, #4
 80070fc:	4413      	add	r3, r2
 80070fe:	3304      	adds	r3, #4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007106:	429a      	cmp	r2, r3
 8007108:	d109      	bne.n	800711e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800710a:	4a38      	ldr	r2, [pc, #224]	; (80071ec <inc_lock+0x118>)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	011b      	lsls	r3, r3, #4
 8007110:	4413      	add	r3, r2
 8007112:	3308      	adds	r3, #8
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800711a:	429a      	cmp	r2, r3
 800711c:	d006      	beq.n	800712c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3301      	adds	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d9dc      	bls.n	80070e4 <inc_lock+0x10>
 800712a:	e000      	b.n	800712e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800712c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d132      	bne.n	800719a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007134:	2300      	movs	r3, #0
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e002      	b.n	8007140 <inc_lock+0x6c>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d806      	bhi.n	8007154 <inc_lock+0x80>
 8007146:	4a29      	ldr	r2, [pc, #164]	; (80071ec <inc_lock+0x118>)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	011b      	lsls	r3, r3, #4
 800714c:	4413      	add	r3, r2
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1f2      	bne.n	800713a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d101      	bne.n	800715e <inc_lock+0x8a>
 800715a:	2300      	movs	r3, #0
 800715c:	e040      	b.n	80071e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	4922      	ldr	r1, [pc, #136]	; (80071ec <inc_lock+0x118>)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	011b      	lsls	r3, r3, #4
 8007168:	440b      	add	r3, r1
 800716a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	491e      	ldr	r1, [pc, #120]	; (80071ec <inc_lock+0x118>)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	011b      	lsls	r3, r3, #4
 8007176:	440b      	add	r3, r1
 8007178:	3304      	adds	r3, #4
 800717a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	695a      	ldr	r2, [r3, #20]
 8007180:	491a      	ldr	r1, [pc, #104]	; (80071ec <inc_lock+0x118>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	011b      	lsls	r3, r3, #4
 8007186:	440b      	add	r3, r1
 8007188:	3308      	adds	r3, #8
 800718a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800718c:	4a17      	ldr	r2, [pc, #92]	; (80071ec <inc_lock+0x118>)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	4413      	add	r3, r2
 8007194:	330c      	adds	r3, #12
 8007196:	2200      	movs	r2, #0
 8007198:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <inc_lock+0xe0>
 80071a0:	4a12      	ldr	r2, [pc, #72]	; (80071ec <inc_lock+0x118>)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	011b      	lsls	r3, r3, #4
 80071a6:	4413      	add	r3, r2
 80071a8:	330c      	adds	r3, #12
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <inc_lock+0xe0>
 80071b0:	2300      	movs	r3, #0
 80071b2:	e015      	b.n	80071e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d108      	bne.n	80071cc <inc_lock+0xf8>
 80071ba:	4a0c      	ldr	r2, [pc, #48]	; (80071ec <inc_lock+0x118>)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	011b      	lsls	r3, r3, #4
 80071c0:	4413      	add	r3, r2
 80071c2:	330c      	adds	r3, #12
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	3301      	adds	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	e001      	b.n	80071d0 <inc_lock+0xfc>
 80071cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071d0:	4906      	ldr	r1, [pc, #24]	; (80071ec <inc_lock+0x118>)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	011b      	lsls	r3, r3, #4
 80071d6:	440b      	add	r3, r1
 80071d8:	330c      	adds	r3, #12
 80071da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	3301      	adds	r3, #1
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	200003c4 	.word	0x200003c4

080071f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	3b01      	subs	r3, #1
 80071fc:	607b      	str	r3, [r7, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d825      	bhi.n	8007250 <dec_lock+0x60>
		n = Files[i].ctr;
 8007204:	4a17      	ldr	r2, [pc, #92]	; (8007264 <dec_lock+0x74>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	011b      	lsls	r3, r3, #4
 800720a:	4413      	add	r3, r2
 800720c:	330c      	adds	r3, #12
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007212:	89fb      	ldrh	r3, [r7, #14]
 8007214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007218:	d101      	bne.n	800721e <dec_lock+0x2e>
 800721a:	2300      	movs	r3, #0
 800721c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800721e:	89fb      	ldrh	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d002      	beq.n	800722a <dec_lock+0x3a>
 8007224:	89fb      	ldrh	r3, [r7, #14]
 8007226:	3b01      	subs	r3, #1
 8007228:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800722a:	4a0e      	ldr	r2, [pc, #56]	; (8007264 <dec_lock+0x74>)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	330c      	adds	r3, #12
 8007234:	89fa      	ldrh	r2, [r7, #14]
 8007236:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007238:	89fb      	ldrh	r3, [r7, #14]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d105      	bne.n	800724a <dec_lock+0x5a>
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <dec_lock+0x74>)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	4413      	add	r3, r2
 8007246:	2200      	movs	r2, #0
 8007248:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	737b      	strb	r3, [r7, #13]
 800724e:	e001      	b.n	8007254 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007250:	2302      	movs	r3, #2
 8007252:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007254:	7b7b      	ldrb	r3, [r7, #13]
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	200003c4 	.word	0x200003c4

08007268 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e010      	b.n	8007298 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007276:	4a0d      	ldr	r2, [pc, #52]	; (80072ac <clear_lock+0x44>)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4413      	add	r3, r2
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d105      	bne.n	8007292 <clear_lock+0x2a>
 8007286:	4a09      	ldr	r2, [pc, #36]	; (80072ac <clear_lock+0x44>)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	4413      	add	r3, r2
 800728e:	2200      	movs	r2, #0
 8007290:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3301      	adds	r3, #1
 8007296:	60fb      	str	r3, [r7, #12]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d9eb      	bls.n	8007276 <clear_lock+0xe>
	}
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr
 80072ac:	200003c4 	.word	0x200003c4

080072b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b086      	sub	sp, #24
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80072b8:	2300      	movs	r3, #0
 80072ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	78db      	ldrb	r3, [r3, #3]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d034      	beq.n	800732e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	7858      	ldrb	r0, [r3, #1]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072d4:	2301      	movs	r3, #1
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f7ff fd40 	bl	8006d5c <disk_write>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d002      	beq.n	80072e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	73fb      	strb	r3, [r7, #15]
 80072e6:	e022      	b.n	800732e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	697a      	ldr	r2, [r7, #20]
 80072f4:	1ad2      	subs	r2, r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d217      	bcs.n	800732e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	789b      	ldrb	r3, [r3, #2]
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	e010      	b.n	8007328 <sync_window+0x78>
					wsect += fs->fsize;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4413      	add	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7858      	ldrb	r0, [r3, #1]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800731a:	2301      	movs	r3, #1
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	f7ff fd1d 	bl	8006d5c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	3b01      	subs	r3, #1
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d8eb      	bhi.n	8007306 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800732e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007342:	2300      	movs	r3, #0
 8007344:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	429a      	cmp	r2, r3
 800734e:	d01b      	beq.n	8007388 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ffad 	bl	80072b0 <sync_window>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d113      	bne.n	8007388 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	7858      	ldrb	r0, [r3, #1]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800736a:	2301      	movs	r3, #1
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	f7ff fcd5 	bl	8006d1c <disk_read>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d004      	beq.n	8007382 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007378:	f04f 33ff 	mov.w	r3, #4294967295
 800737c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800737e:	2301      	movs	r3, #1
 8007380:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f7ff ff87 	bl	80072b0 <sync_window>
 80073a2:	4603      	mov	r3, r0
 80073a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80073a6:	7bfb      	ldrb	r3, [r7, #15]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d158      	bne.n	800745e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d148      	bne.n	8007446 <sync_fs+0xb2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d144      	bne.n	8007446 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	3330      	adds	r3, #48	; 0x30
 80073c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073c4:	2100      	movs	r1, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7ff fda9 	bl	8006f1e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	3330      	adds	r3, #48	; 0x30
 80073d0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073d4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80073d8:	4618      	mov	r0, r3
 80073da:	f7ff fd38 	bl	8006e4e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	3330      	adds	r3, #48	; 0x30
 80073e2:	4921      	ldr	r1, [pc, #132]	; (8007468 <sync_fs+0xd4>)
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7ff fd4d 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3330      	adds	r3, #48	; 0x30
 80073ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073f2:	491e      	ldr	r1, [pc, #120]	; (800746c <sync_fs+0xd8>)
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7ff fd45 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	3330      	adds	r3, #48	; 0x30
 80073fe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	4619      	mov	r1, r3
 8007408:	4610      	mov	r0, r2
 800740a:	f7ff fd3b 	bl	8006e84 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3330      	adds	r3, #48	; 0x30
 8007412:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	4619      	mov	r1, r3
 800741c:	4610      	mov	r0, r2
 800741e:	f7ff fd31 	bl	8006e84 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	7858      	ldrb	r0, [r3, #1]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800743a:	2301      	movs	r3, #1
 800743c:	f7ff fc8e 	bl	8006d5c <disk_write>
			fs->fsi_flag = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	785b      	ldrb	r3, [r3, #1]
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fca4 	bl	8006d9c <disk_ioctl>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d001      	beq.n	800745e <sync_fs+0xca>
 800745a:	2301      	movs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	41615252 	.word	0x41615252
 800746c:	61417272 	.word	0x61417272

08007470 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	3b02      	subs	r3, #2
 800747e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	3b02      	subs	r3, #2
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	429a      	cmp	r2, r3
 800748a:	d301      	bcc.n	8007490 <clust2sect+0x20>
 800748c:	2300      	movs	r3, #0
 800748e:	e008      	b.n	80074a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	895b      	ldrh	r3, [r3, #10]
 8007494:	461a      	mov	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	fb03 f202 	mul.w	r2, r3, r2
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	4413      	add	r3, r2
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b086      	sub	sp, #24
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d904      	bls.n	80074ce <get_fat+0x20>
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d302      	bcc.n	80074d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80074ce:	2301      	movs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e08f      	b.n	80075f4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d062      	beq.n	80075a8 <get_fat+0xfa>
 80074e2:	2b03      	cmp	r3, #3
 80074e4:	dc7c      	bgt.n	80075e0 <get_fat+0x132>
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d002      	beq.n	80074f0 <get_fat+0x42>
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d042      	beq.n	8007574 <get_fat+0xc6>
 80074ee:	e077      	b.n	80075e0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	0a5b      	lsrs	r3, r3, #9
 8007506:	4413      	add	r3, r2
 8007508:	4619      	mov	r1, r3
 800750a:	6938      	ldr	r0, [r7, #16]
 800750c:	f7ff ff14 	bl	8007338 <move_window>
 8007510:	4603      	mov	r3, r0
 8007512:	2b00      	cmp	r3, #0
 8007514:	d167      	bne.n	80075e6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	60fa      	str	r2, [r7, #12]
 800751c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4413      	add	r3, r2
 8007524:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007528:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6a1a      	ldr	r2, [r3, #32]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	0a5b      	lsrs	r3, r3, #9
 8007532:	4413      	add	r3, r2
 8007534:	4619      	mov	r1, r3
 8007536:	6938      	ldr	r0, [r7, #16]
 8007538:	f7ff fefe 	bl	8007338 <move_window>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d153      	bne.n	80075ea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	461a      	mov	r2, r3
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	4313      	orrs	r3, r2
 8007558:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	f003 0301 	and.w	r3, r3, #1
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <get_fat+0xbc>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	091b      	lsrs	r3, r3, #4
 8007568:	e002      	b.n	8007570 <get_fat+0xc2>
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007570:	617b      	str	r3, [r7, #20]
			break;
 8007572:	e03f      	b.n	80075f4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6a1a      	ldr	r2, [r3, #32]
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	0a1b      	lsrs	r3, r3, #8
 800757c:	4413      	add	r3, r2
 800757e:	4619      	mov	r1, r3
 8007580:	6938      	ldr	r0, [r7, #16]
 8007582:	f7ff fed9 	bl	8007338 <move_window>
 8007586:	4603      	mov	r3, r0
 8007588:	2b00      	cmp	r3, #0
 800758a:	d130      	bne.n	80075ee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800759a:	4413      	add	r3, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fc1b 	bl	8006dd8 <ld_word>
 80075a2:	4603      	mov	r3, r0
 80075a4:	617b      	str	r3, [r7, #20]
			break;
 80075a6:	e025      	b.n	80075f4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	09db      	lsrs	r3, r3, #7
 80075b0:	4413      	add	r3, r2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6938      	ldr	r0, [r7, #16]
 80075b6:	f7ff febf 	bl	8007338 <move_window>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d118      	bne.n	80075f2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80075ce:	4413      	add	r3, r2
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7ff fc19 	bl	8006e08 <ld_dword>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80075dc:	617b      	str	r3, [r7, #20]
			break;
 80075de:	e009      	b.n	80075f4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80075e0:	2301      	movs	r3, #1
 80075e2:	617b      	str	r3, [r7, #20]
 80075e4:	e006      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075e6:	bf00      	nop
 80075e8:	e004      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075ea:	bf00      	nop
 80075ec:	e002      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80075ee:	bf00      	nop
 80075f0:	e000      	b.n	80075f4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80075f2:	bf00      	nop
		}
	}

	return val;
 80075f4:	697b      	ldr	r3, [r7, #20]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80075fe:	b590      	push	{r4, r7, lr}
 8007600:	b089      	sub	sp, #36	; 0x24
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800760a:	2302      	movs	r3, #2
 800760c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	2b01      	cmp	r3, #1
 8007612:	f240 80d2 	bls.w	80077ba <put_fat+0x1bc>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	429a      	cmp	r2, r3
 800761e:	f080 80cc 	bcs.w	80077ba <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b03      	cmp	r3, #3
 8007628:	f000 8096 	beq.w	8007758 <put_fat+0x15a>
 800762c:	2b03      	cmp	r3, #3
 800762e:	f300 80cd 	bgt.w	80077cc <put_fat+0x1ce>
 8007632:	2b01      	cmp	r3, #1
 8007634:	d002      	beq.n	800763c <put_fat+0x3e>
 8007636:	2b02      	cmp	r3, #2
 8007638:	d06e      	beq.n	8007718 <put_fat+0x11a>
 800763a:	e0c7      	b.n	80077cc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	61bb      	str	r3, [r7, #24]
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	4413      	add	r3, r2
 8007648:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	0a5b      	lsrs	r3, r3, #9
 8007652:	4413      	add	r3, r2
 8007654:	4619      	mov	r1, r3
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fe6e 	bl	8007338 <move_window>
 800765c:	4603      	mov	r3, r0
 800765e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007660:	7ffb      	ldrb	r3, [r7, #31]
 8007662:	2b00      	cmp	r3, #0
 8007664:	f040 80ab 	bne.w	80077be <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	61b9      	str	r1, [r7, #24]
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	4413      	add	r3, r2
 800767a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00d      	beq.n	80076a2 <put_fat+0xa4>
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	b25b      	sxtb	r3, r3
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	b25a      	sxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	b25b      	sxtb	r3, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	b25b      	sxtb	r3, r3
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	e001      	b.n	80076a6 <put_fat+0xa8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	0a5b      	lsrs	r3, r3, #9
 80076b8:	4413      	add	r3, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fe3b 	bl	8007338 <move_window>
 80076c2:	4603      	mov	r3, r0
 80076c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076c6:	7ffb      	ldrb	r3, [r7, #31]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d17a      	bne.n	80077c2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d8:	4413      	add	r3, r2
 80076da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d003      	beq.n	80076ee <put_fat+0xf0>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	e00e      	b.n	800770c <put_fat+0x10e>
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	b25b      	sxtb	r3, r3
 80076f4:	f023 030f 	bic.w	r3, r3, #15
 80076f8:	b25a      	sxtb	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	0a1b      	lsrs	r3, r3, #8
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f003 030f 	and.w	r3, r3, #15
 8007704:	b25b      	sxtb	r3, r3
 8007706:	4313      	orrs	r3, r2
 8007708:	b25b      	sxtb	r3, r3
 800770a:	b2db      	uxtb	r3, r3
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2201      	movs	r2, #1
 8007714:	70da      	strb	r2, [r3, #3]
			break;
 8007716:	e059      	b.n	80077cc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1a      	ldr	r2, [r3, #32]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	0a1b      	lsrs	r3, r3, #8
 8007720:	4413      	add	r3, r2
 8007722:	4619      	mov	r1, r3
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7ff fe07 	bl	8007338 <move_window>
 800772a:	4603      	mov	r3, r0
 800772c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800772e:	7ffb      	ldrb	r3, [r7, #31]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d148      	bne.n	80077c6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007742:	4413      	add	r3, r2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	b292      	uxth	r2, r2
 8007748:	4611      	mov	r1, r2
 800774a:	4618      	mov	r0, r3
 800774c:	f7ff fb7f 	bl	8006e4e <st_word>
			fs->wflag = 1;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2201      	movs	r2, #1
 8007754:	70da      	strb	r2, [r3, #3]
			break;
 8007756:	e039      	b.n	80077cc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a1a      	ldr	r2, [r3, #32]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	09db      	lsrs	r3, r3, #7
 8007760:	4413      	add	r3, r2
 8007762:	4619      	mov	r1, r3
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff fde7 	bl	8007338 <move_window>
 800776a:	4603      	mov	r3, r0
 800776c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800776e:	7ffb      	ldrb	r3, [r7, #31]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d12a      	bne.n	80077ca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007788:	4413      	add	r3, r2
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fb3c 	bl	8006e08 <ld_dword>
 8007790:	4603      	mov	r3, r0
 8007792:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007796:	4323      	orrs	r3, r4
 8007798:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80077a8:	4413      	add	r3, r2
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff fb69 	bl	8006e84 <st_dword>
			fs->wflag = 1;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	70da      	strb	r2, [r3, #3]
			break;
 80077b8:	e008      	b.n	80077cc <put_fat+0x1ce>
		}
	}
 80077ba:	bf00      	nop
 80077bc:	e006      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077be:	bf00      	nop
 80077c0:	e004      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077c2:	bf00      	nop
 80077c4:	e002      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077c6:	bf00      	nop
 80077c8:	e000      	b.n	80077cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 80077ca:	bf00      	nop
	return res;
 80077cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3724      	adds	r7, #36	; 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd90      	pop	{r4, r7, pc}

080077d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b088      	sub	sp, #32
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d904      	bls.n	80077fc <remove_chain+0x26>
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d301      	bcc.n	8007800 <remove_chain+0x2a>
 80077fc:	2302      	movs	r3, #2
 80077fe:	e04b      	b.n	8007898 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00c      	beq.n	8007820 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	6879      	ldr	r1, [r7, #4]
 800780c:	69b8      	ldr	r0, [r7, #24]
 800780e:	f7ff fef6 	bl	80075fe <put_fat>
 8007812:	4603      	mov	r3, r0
 8007814:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007816:	7ffb      	ldrb	r3, [r7, #31]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d001      	beq.n	8007820 <remove_chain+0x4a>
 800781c:	7ffb      	ldrb	r3, [r7, #31]
 800781e:	e03b      	b.n	8007898 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007820:	68b9      	ldr	r1, [r7, #8]
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7ff fe43 	bl	80074ae <get_fat>
 8007828:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d031      	beq.n	8007894 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <remove_chain+0x64>
 8007836:	2302      	movs	r3, #2
 8007838:	e02e      	b.n	8007898 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d101      	bne.n	8007846 <remove_chain+0x70>
 8007842:	2301      	movs	r3, #1
 8007844:	e028      	b.n	8007898 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007846:	2200      	movs	r2, #0
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	69b8      	ldr	r0, [r7, #24]
 800784c:	f7ff fed7 	bl	80075fe <put_fat>
 8007850:	4603      	mov	r3, r0
 8007852:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007854:	7ffb      	ldrb	r3, [r7, #31]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <remove_chain+0x88>
 800785a:	7ffb      	ldrb	r3, [r7, #31]
 800785c:	e01c      	b.n	8007898 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	3b02      	subs	r3, #2
 8007868:	429a      	cmp	r2, r3
 800786a:	d20b      	bcs.n	8007884 <remove_chain+0xae>
			fs->free_clst++;
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	1c5a      	adds	r2, r3, #1
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	791b      	ldrb	r3, [r3, #4]
 800787a:	f043 0301 	orr.w	r3, r3, #1
 800787e:	b2da      	uxtb	r2, r3
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	d3c6      	bcc.n	8007820 <remove_chain+0x4a>
 8007892:	e000      	b.n	8007896 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007894:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3720      	adds	r7, #32
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10d      	bne.n	80078d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <create_chain+0x2c>
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	69ba      	ldr	r2, [r7, #24]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d31b      	bcc.n	8007904 <create_chain+0x64>
 80078cc:	2301      	movs	r3, #1
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	e018      	b.n	8007904 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7ff fdea 	bl	80074ae <get_fat>
 80078da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d801      	bhi.n	80078e6 <create_chain+0x46>
 80078e2:	2301      	movs	r3, #1
 80078e4:	e070      	b.n	80079c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ec:	d101      	bne.n	80078f2 <create_chain+0x52>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	e06a      	b.n	80079c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d201      	bcs.n	8007900 <create_chain+0x60>
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	e063      	b.n	80079c8 <create_chain+0x128>
		scl = clst;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	3301      	adds	r3, #1
 800790c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	429a      	cmp	r2, r3
 8007916:	d307      	bcc.n	8007928 <create_chain+0x88>
				ncl = 2;
 8007918:	2302      	movs	r3, #2
 800791a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	429a      	cmp	r2, r3
 8007922:	d901      	bls.n	8007928 <create_chain+0x88>
 8007924:	2300      	movs	r3, #0
 8007926:	e04f      	b.n	80079c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007928:	69f9      	ldr	r1, [r7, #28]
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7ff fdbf 	bl	80074ae <get_fat>
 8007930:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00e      	beq.n	8007956 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d003      	beq.n	8007946 <create_chain+0xa6>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007944:	d101      	bne.n	800794a <create_chain+0xaa>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	e03e      	b.n	80079c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800794a:	69fa      	ldr	r2, [r7, #28]
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	429a      	cmp	r2, r3
 8007950:	d1da      	bne.n	8007908 <create_chain+0x68>
 8007952:	2300      	movs	r3, #0
 8007954:	e038      	b.n	80079c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007956:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007958:	f04f 32ff 	mov.w	r2, #4294967295
 800795c:	69f9      	ldr	r1, [r7, #28]
 800795e:	6938      	ldr	r0, [r7, #16]
 8007960:	f7ff fe4d 	bl	80075fe <put_fat>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <create_chain+0xe2>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d006      	beq.n	8007982 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6938      	ldr	r0, [r7, #16]
 800797a:	f7ff fe40 	bl	80075fe <put_fat>
 800797e:	4603      	mov	r3, r0
 8007980:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d116      	bne.n	80079b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	691a      	ldr	r2, [r3, #16]
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	3b02      	subs	r3, #2
 8007998:	429a      	cmp	r2, r3
 800799a:	d804      	bhi.n	80079a6 <create_chain+0x106>
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	1e5a      	subs	r2, r3, #1
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80079a6:	693b      	ldr	r3, [r7, #16]
 80079a8:	791b      	ldrb	r3, [r3, #4]
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	711a      	strb	r2, [r3, #4]
 80079b4:	e007      	b.n	80079c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80079b6:	7dfb      	ldrb	r3, [r7, #23]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d102      	bne.n	80079c2 <create_chain+0x122>
 80079bc:	f04f 33ff 	mov.w	r3, #4294967295
 80079c0:	e000      	b.n	80079c4 <create_chain+0x124>
 80079c2:	2301      	movs	r3, #1
 80079c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80079c6:	69fb      	ldr	r3, [r7, #28]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	3304      	adds	r3, #4
 80079e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	0a5b      	lsrs	r3, r3, #9
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	8952      	ldrh	r2, [r2, #10]
 80079f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1d1a      	adds	r2, r3, #4
 80079fa:	613a      	str	r2, [r7, #16]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <clmt_clust+0x3a>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e010      	b.n	8007a2c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d307      	bcc.n	8007a22 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007a12:	697a      	ldr	r2, [r7, #20]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	617b      	str	r3, [r7, #20]
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007a20:	e7e9      	b.n	80079f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007a22:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	4413      	add	r3, r2
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a4e:	d204      	bcs.n	8007a5a <dir_sdi+0x22>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	f003 031f 	and.w	r3, r3, #31
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <dir_sdi+0x26>
		return FR_INT_ERR;
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e063      	b.n	8007b26 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d106      	bne.n	8007a7e <dir_sdi+0x46>
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d902      	bls.n	8007a7e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d10c      	bne.n	8007a9e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	8912      	ldrh	r2, [r2, #8]
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d301      	bcc.n	8007a94 <dir_sdi+0x5c>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e048      	b.n	8007b26 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	61da      	str	r2, [r3, #28]
 8007a9c:	e029      	b.n	8007af2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	895b      	ldrh	r3, [r3, #10]
 8007aa2:	025b      	lsls	r3, r3, #9
 8007aa4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007aa6:	e019      	b.n	8007adc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6979      	ldr	r1, [r7, #20]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff fcfe 	bl	80074ae <get_fat>
 8007ab2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d101      	bne.n	8007ac0 <dir_sdi+0x88>
 8007abc:	2301      	movs	r3, #1
 8007abe:	e032      	b.n	8007b26 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d904      	bls.n	8007ad0 <dir_sdi+0x98>
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d301      	bcc.n	8007ad4 <dir_sdi+0x9c>
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	e028      	b.n	8007b26 <dir_sdi+0xee>
			ofs -= csz;
 8007ad4:	683a      	ldr	r2, [r7, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d2e1      	bcs.n	8007aa8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007ae4:	6979      	ldr	r1, [r7, #20]
 8007ae6:	6938      	ldr	r0, [r7, #16]
 8007ae8:	f7ff fcc2 	bl	8007470 <clust2sect>
 8007aec:	4602      	mov	r2, r0
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	69db      	ldr	r3, [r3, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <dir_sdi+0xcc>
 8007b00:	2302      	movs	r3, #2
 8007b02:	e010      	b.n	8007b26 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69da      	ldr	r2, [r3, #28]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	0a5b      	lsrs	r3, r3, #9
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1e:	441a      	add	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3718      	adds	r7, #24
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	3320      	adds	r3, #32
 8007b44:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <dir_next+0x28>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b54:	d301      	bcc.n	8007b5a <dir_next+0x2c>
 8007b56:	2304      	movs	r3, #4
 8007b58:	e0aa      	b.n	8007cb0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f040 8098 	bne.w	8007c96 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10b      	bne.n	8007b90 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	8912      	ldrh	r2, [r2, #8]
 8007b80:	4293      	cmp	r3, r2
 8007b82:	f0c0 8088 	bcc.w	8007c96 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	61da      	str	r2, [r3, #28]
 8007b8c:	2304      	movs	r3, #4
 8007b8e:	e08f      	b.n	8007cb0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	0a5b      	lsrs	r3, r3, #9
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	8952      	ldrh	r2, [r2, #10]
 8007b98:	3a01      	subs	r2, #1
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d17a      	bne.n	8007c96 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	699b      	ldr	r3, [r3, #24]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	4610      	mov	r0, r2
 8007baa:	f7ff fc80 	bl	80074ae <get_fat>
 8007bae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d801      	bhi.n	8007bba <dir_next+0x8c>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e07a      	b.n	8007cb0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bc0:	d101      	bne.n	8007bc6 <dir_next+0x98>
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e074      	b.n	8007cb0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d358      	bcc.n	8007c82 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d104      	bne.n	8007be0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	61da      	str	r2, [r3, #28]
 8007bdc:	2304      	movs	r3, #4
 8007bde:	e067      	b.n	8007cb0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	4619      	mov	r1, r3
 8007be8:	4610      	mov	r0, r2
 8007bea:	f7ff fe59 	bl	80078a0 <create_chain>
 8007bee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <dir_next+0xcc>
 8007bf6:	2307      	movs	r3, #7
 8007bf8:	e05a      	b.n	8007cb0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d101      	bne.n	8007c04 <dir_next+0xd6>
 8007c00:	2302      	movs	r3, #2
 8007c02:	e055      	b.n	8007cb0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0a:	d101      	bne.n	8007c10 <dir_next+0xe2>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e04f      	b.n	8007cb0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff fb4d 	bl	80072b0 <sync_window>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <dir_next+0xf2>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e047      	b.n	8007cb0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3330      	adds	r3, #48	; 0x30
 8007c24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7ff f977 	bl	8006f1e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff fc1a 	bl	8007470 <clust2sect>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c42:	e012      	b.n	8007c6a <dir_next+0x13c>
						fs->wflag = 1;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2201      	movs	r2, #1
 8007c48:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fb30 	bl	80072b0 <sync_window>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <dir_next+0x12c>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e02a      	b.n	8007cb0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	613b      	str	r3, [r7, #16]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c64:	1c5a      	adds	r2, r3, #1
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	895b      	ldrh	r3, [r3, #10]
 8007c6e:	461a      	mov	r2, r3
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d3e6      	bcc.n	8007c44 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	1ad2      	subs	r2, r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	697a      	ldr	r2, [r7, #20]
 8007c86:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007c88:	6979      	ldr	r1, [r7, #20]
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff fbf0 	bl	8007470 <clust2sect>
 8007c90:	4602      	mov	r2, r0
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	441a      	add	r2, r3
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7ff feb4 	bl	8007a38 <dir_sdi>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d12b      	bne.n	8007d32 <dir_alloc+0x7a>
		n = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f7ff fb27 	bl	8007338 <move_window>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d11d      	bne.n	8007d30 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	2be5      	cmp	r3, #229	; 0xe5
 8007cfc:	d004      	beq.n	8007d08 <dir_alloc+0x50>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6a1b      	ldr	r3, [r3, #32]
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d107      	bne.n	8007d18 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	613b      	str	r3, [r7, #16]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d102      	bne.n	8007d1c <dir_alloc+0x64>
 8007d16:	e00c      	b.n	8007d32 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007d18:	2300      	movs	r3, #0
 8007d1a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7ff ff05 	bl	8007b2e <dir_next>
 8007d24:	4603      	mov	r3, r0
 8007d26:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d0d7      	beq.n	8007cde <dir_alloc+0x26>
 8007d2e:	e000      	b.n	8007d32 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007d30:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007d32:	7dfb      	ldrb	r3, [r7, #23]
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d101      	bne.n	8007d3c <dir_alloc+0x84>
 8007d38:	2307      	movs	r3, #7
 8007d3a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b084      	sub	sp, #16
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	331a      	adds	r3, #26
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7ff f83f 	bl	8006dd8 <ld_word>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d109      	bne.n	8007d7a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	3314      	adds	r3, #20
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff f834 	bl	8006dd8 <ld_word>
 8007d70:	4603      	mov	r3, r0
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	331a      	adds	r3, #26
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	b292      	uxth	r2, r2
 8007d98:	4611      	mov	r1, r2
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7ff f857 	bl	8006e4e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	2b03      	cmp	r3, #3
 8007da6:	d109      	bne.n	8007dbc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f103 0214 	add.w	r2, r3, #20
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	0c1b      	lsrs	r3, r3, #16
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f7ff f849 	bl	8006e4e <st_word>
	}
}
 8007dbc:	bf00      	nop
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f7ff fe2f 	bl	8007a38 <dir_sdi>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <dir_find+0x24>
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	e03e      	b.n	8007e66 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	4619      	mov	r1, r3
 8007dee:	6938      	ldr	r0, [r7, #16]
 8007df0:	f7ff faa2 	bl	8007338 <move_window>
 8007df4:	4603      	mov	r3, r0
 8007df6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d12f      	bne.n	8007e5e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a1b      	ldr	r3, [r3, #32]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007e06:	7bfb      	ldrb	r3, [r7, #15]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <dir_find+0x4e>
 8007e0c:	2304      	movs	r3, #4
 8007e0e:	75fb      	strb	r3, [r7, #23]
 8007e10:	e028      	b.n	8007e64 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	330b      	adds	r3, #11
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	330b      	adds	r3, #11
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10a      	bne.n	8007e4a <dir_find+0x86>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a18      	ldr	r0, [r3, #32]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	3324      	adds	r3, #36	; 0x24
 8007e3c:	220b      	movs	r2, #11
 8007e3e:	4619      	mov	r1, r3
 8007e40:	f7ff f888 	bl	8006f54 <mem_cmp>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00b      	beq.n	8007e62 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fe6e 	bl	8007b2e <dir_next>
 8007e52:	4603      	mov	r3, r0
 8007e54:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d0c5      	beq.n	8007de8 <dir_find+0x24>
 8007e5c:	e002      	b.n	8007e64 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007e5e:	bf00      	nop
 8007e60:	e000      	b.n	8007e64 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007e62:	bf00      	nop

	return res;
 8007e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3718      	adds	r7, #24
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007e7c:	2101      	movs	r1, #1
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7ff ff1a 	bl	8007cb8 <dir_alloc>
 8007e84:	4603      	mov	r3, r0
 8007e86:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d11c      	bne.n	8007ec8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	69db      	ldr	r3, [r3, #28]
 8007e92:	4619      	mov	r1, r3
 8007e94:	68b8      	ldr	r0, [r7, #8]
 8007e96:	f7ff fa4f 	bl	8007338 <move_window>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d111      	bne.n	8007ec8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a1b      	ldr	r3, [r3, #32]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	2100      	movs	r1, #0
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7ff f836 	bl	8006f1e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a18      	ldr	r0, [r3, #32]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3324      	adds	r3, #36	; 0x24
 8007eba:	220b      	movs	r2, #11
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	f7ff f80d 	bl	8006edc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b088      	sub	sp, #32
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3324      	adds	r3, #36	; 0x24
 8007ee8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007eea:	220b      	movs	r2, #11
 8007eec:	2120      	movs	r1, #32
 8007eee:	68b8      	ldr	r0, [r7, #8]
 8007ef0:	f7ff f815 	bl	8006f1e <mem_set>
	si = i = 0; ni = 8;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	2308      	movs	r3, #8
 8007efe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	1c5a      	adds	r2, r3, #1
 8007f04:	61fa      	str	r2, [r7, #28]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f0e:	7efb      	ldrb	r3, [r7, #27]
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d94e      	bls.n	8007fb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007f14:	7efb      	ldrb	r3, [r7, #27]
 8007f16:	2b2f      	cmp	r3, #47	; 0x2f
 8007f18:	d006      	beq.n	8007f28 <create_name+0x54>
 8007f1a:	7efb      	ldrb	r3, [r7, #27]
 8007f1c:	2b5c      	cmp	r3, #92	; 0x5c
 8007f1e:	d110      	bne.n	8007f42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007f20:	e002      	b.n	8007f28 <create_name+0x54>
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	3301      	adds	r3, #1
 8007f26:	61fb      	str	r3, [r7, #28]
 8007f28:	68fa      	ldr	r2, [r7, #12]
 8007f2a:	69fb      	ldr	r3, [r7, #28]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b2f      	cmp	r3, #47	; 0x2f
 8007f32:	d0f6      	beq.n	8007f22 <create_name+0x4e>
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	2b5c      	cmp	r3, #92	; 0x5c
 8007f3e:	d0f0      	beq.n	8007f22 <create_name+0x4e>
			break;
 8007f40:	e038      	b.n	8007fb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007f42:	7efb      	ldrb	r3, [r7, #27]
 8007f44:	2b2e      	cmp	r3, #46	; 0x2e
 8007f46:	d003      	beq.n	8007f50 <create_name+0x7c>
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d30c      	bcc.n	8007f6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b0b      	cmp	r3, #11
 8007f54:	d002      	beq.n	8007f5c <create_name+0x88>
 8007f56:	7efb      	ldrb	r3, [r7, #27]
 8007f58:	2b2e      	cmp	r3, #46	; 0x2e
 8007f5a:	d001      	beq.n	8007f60 <create_name+0x8c>
 8007f5c:	2306      	movs	r3, #6
 8007f5e:	e044      	b.n	8007fea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f60:	2308      	movs	r3, #8
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	230b      	movs	r3, #11
 8007f66:	617b      	str	r3, [r7, #20]
			continue;
 8007f68:	e022      	b.n	8007fb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	da04      	bge.n	8007f7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f72:	7efb      	ldrb	r3, [r7, #27]
 8007f74:	3b80      	subs	r3, #128	; 0x80
 8007f76:	4a1f      	ldr	r2, [pc, #124]	; (8007ff4 <create_name+0x120>)
 8007f78:	5cd3      	ldrb	r3, [r2, r3]
 8007f7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f7c:	7efb      	ldrb	r3, [r7, #27]
 8007f7e:	4619      	mov	r1, r3
 8007f80:	481d      	ldr	r0, [pc, #116]	; (8007ff8 <create_name+0x124>)
 8007f82:	f7ff f80e 	bl	8006fa2 <chk_chr>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <create_name+0xbc>
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	e02c      	b.n	8007fea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f90:	7efb      	ldrb	r3, [r7, #27]
 8007f92:	2b60      	cmp	r3, #96	; 0x60
 8007f94:	d905      	bls.n	8007fa2 <create_name+0xce>
 8007f96:	7efb      	ldrb	r3, [r7, #27]
 8007f98:	2b7a      	cmp	r3, #122	; 0x7a
 8007f9a:	d802      	bhi.n	8007fa2 <create_name+0xce>
 8007f9c:	7efb      	ldrb	r3, [r7, #27]
 8007f9e:	3b20      	subs	r3, #32
 8007fa0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1c5a      	adds	r2, r3, #1
 8007fa6:	613a      	str	r2, [r7, #16]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	4413      	add	r3, r2
 8007fac:	7efa      	ldrb	r2, [r7, #27]
 8007fae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007fb0:	e7a6      	b.n	8007f00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007fb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	441a      	add	r2, r3
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <create_name+0xf4>
 8007fc4:	2306      	movs	r3, #6
 8007fc6:	e010      	b.n	8007fea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	2be5      	cmp	r3, #229	; 0xe5
 8007fce:	d102      	bne.n	8007fd6 <create_name+0x102>
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2205      	movs	r2, #5
 8007fd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007fd6:	7efb      	ldrb	r3, [r7, #27]
 8007fd8:	2b20      	cmp	r3, #32
 8007fda:	d801      	bhi.n	8007fe0 <create_name+0x10c>
 8007fdc:	2204      	movs	r2, #4
 8007fde:	e000      	b.n	8007fe2 <create_name+0x10e>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	330b      	adds	r3, #11
 8007fe6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007fe8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3720      	adds	r7, #32
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	08013c3c 	.word	0x08013c3c
 8007ff8:	080128b0 	.word	0x080128b0

08007ffc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008010:	e002      	b.n	8008018 <follow_path+0x1c>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	2b2f      	cmp	r3, #47	; 0x2f
 800801e:	d0f8      	beq.n	8008012 <follow_path+0x16>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	2b5c      	cmp	r3, #92	; 0x5c
 8008026:	d0f4      	beq.n	8008012 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2200      	movs	r2, #0
 800802c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2b1f      	cmp	r3, #31
 8008034:	d80a      	bhi.n	800804c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2280      	movs	r2, #128	; 0x80
 800803a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800803e:	2100      	movs	r1, #0
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff fcf9 	bl	8007a38 <dir_sdi>
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]
 800804a:	e043      	b.n	80080d4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800804c:	463b      	mov	r3, r7
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff ff3f 	bl	8007ed4 <create_name>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d134      	bne.n	80080ca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7ff feaf 	bl	8007dc4 <dir_find>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008070:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00a      	beq.n	800808e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	2b04      	cmp	r3, #4
 800807c:	d127      	bne.n	80080ce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800807e:	7afb      	ldrb	r3, [r7, #11]
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d122      	bne.n	80080ce <follow_path+0xd2>
 8008088:	2305      	movs	r3, #5
 800808a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800808c:	e01f      	b.n	80080ce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800808e:	7afb      	ldrb	r3, [r7, #11]
 8008090:	f003 0304 	and.w	r3, r3, #4
 8008094:	2b00      	cmp	r3, #0
 8008096:	d11c      	bne.n	80080d2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	799b      	ldrb	r3, [r3, #6]
 800809c:	f003 0310 	and.w	r3, r3, #16
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <follow_path+0xae>
				res = FR_NO_PATH; break;
 80080a4:	2305      	movs	r3, #5
 80080a6:	75fb      	strb	r3, [r7, #23]
 80080a8:	e014      	b.n	80080d4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	695b      	ldr	r3, [r3, #20]
 80080b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b8:	4413      	add	r3, r2
 80080ba:	4619      	mov	r1, r3
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff fe42 	bl	8007d46 <ld_clust>
 80080c2:	4602      	mov	r2, r0
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080c8:	e7c0      	b.n	800804c <follow_path+0x50>
			if (res != FR_OK) break;
 80080ca:	bf00      	nop
 80080cc:	e002      	b.n	80080d4 <follow_path+0xd8>
				break;
 80080ce:	bf00      	nop
 80080d0:	e000      	b.n	80080d4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080d2:	bf00      	nop
			}
		}
	}

	return res;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3718      	adds	r7, #24
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}

080080de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80080de:	b480      	push	{r7}
 80080e0:	b087      	sub	sp, #28
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80080e6:	f04f 33ff 	mov.w	r3, #4294967295
 80080ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d031      	beq.n	8008158 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	617b      	str	r3, [r7, #20]
 80080fa:	e002      	b.n	8008102 <get_ldnumber+0x24>
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3301      	adds	r3, #1
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b20      	cmp	r3, #32
 8008108:	d903      	bls.n	8008112 <get_ldnumber+0x34>
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b3a      	cmp	r3, #58	; 0x3a
 8008110:	d1f4      	bne.n	80080fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b3a      	cmp	r3, #58	; 0x3a
 8008118:	d11c      	bne.n	8008154 <get_ldnumber+0x76>
			tp = *path;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	60fa      	str	r2, [r7, #12]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	3b30      	subs	r3, #48	; 0x30
 800812a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	2b09      	cmp	r3, #9
 8008130:	d80e      	bhi.n	8008150 <get_ldnumber+0x72>
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	429a      	cmp	r2, r3
 8008138:	d10a      	bne.n	8008150 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <get_ldnumber+0x72>
					vol = (int)i;
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	3301      	adds	r3, #1
 8008148:	617b      	str	r3, [r7, #20]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	e002      	b.n	800815a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008158:	693b      	ldr	r3, [r7, #16]
}
 800815a:	4618      	mov	r0, r3
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
	...

08008168 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	70da      	strb	r2, [r3, #3]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f04f 32ff 	mov.w	r2, #4294967295
 800817e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff f8d8 	bl	8007338 <move_window>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <check_fs+0x2a>
 800818e:	2304      	movs	r3, #4
 8008190:	e038      	b.n	8008204 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3330      	adds	r3, #48	; 0x30
 8008196:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fe1c 	bl	8006dd8 <ld_word>
 80081a0:	4603      	mov	r3, r0
 80081a2:	461a      	mov	r2, r3
 80081a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d001      	beq.n	80081b0 <check_fs+0x48>
 80081ac:	2303      	movs	r3, #3
 80081ae:	e029      	b.n	8008204 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081b6:	2be9      	cmp	r3, #233	; 0xe9
 80081b8:	d009      	beq.n	80081ce <check_fs+0x66>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081c0:	2beb      	cmp	r3, #235	; 0xeb
 80081c2:	d11e      	bne.n	8008202 <check_fs+0x9a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80081ca:	2b90      	cmp	r3, #144	; 0x90
 80081cc:	d119      	bne.n	8008202 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3330      	adds	r3, #48	; 0x30
 80081d2:	3336      	adds	r3, #54	; 0x36
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fe17 	bl	8006e08 <ld_dword>
 80081da:	4603      	mov	r3, r0
 80081dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081e0:	4a0a      	ldr	r2, [pc, #40]	; (800820c <check_fs+0xa4>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d101      	bne.n	80081ea <check_fs+0x82>
 80081e6:	2300      	movs	r3, #0
 80081e8:	e00c      	b.n	8008204 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3330      	adds	r3, #48	; 0x30
 80081ee:	3352      	adds	r3, #82	; 0x52
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fe fe09 	bl	8006e08 <ld_dword>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4a05      	ldr	r2, [pc, #20]	; (8008210 <check_fs+0xa8>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d101      	bne.n	8008202 <check_fs+0x9a>
 80081fe:	2300      	movs	r3, #0
 8008200:	e000      	b.n	8008204 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008202:	2302      	movs	r3, #2
}
 8008204:	4618      	mov	r0, r3
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	00544146 	.word	0x00544146
 8008210:	33544146 	.word	0x33544146

08008214 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b096      	sub	sp, #88	; 0x58
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	4613      	mov	r3, r2
 8008220:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff ff58 	bl	80080de <get_ldnumber>
 800822e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	da01      	bge.n	800823a <find_volume+0x26>
 8008236:	230b      	movs	r3, #11
 8008238:	e22d      	b.n	8008696 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800823a:	4aa1      	ldr	r2, [pc, #644]	; (80084c0 <find_volume+0x2ac>)
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008242:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <find_volume+0x3a>
 800824a:	230c      	movs	r3, #12
 800824c:	e223      	b.n	8008696 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008252:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008254:	79fb      	ldrb	r3, [r7, #7]
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	4618      	mov	r0, r3
 800826a:	f7fe fd17 	bl	8006c9c <disk_status>
 800826e:	4603      	mov	r3, r0
 8008270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10c      	bne.n	800829a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <find_volume+0x82>
 8008286:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d001      	beq.n	8008296 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008292:	230a      	movs	r3, #10
 8008294:	e1ff      	b.n	8008696 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008296:	2300      	movs	r3, #0
 8008298:	e1fd      	b.n	8008696 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800829a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829c:	2200      	movs	r2, #0
 800829e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80082a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082a2:	b2da      	uxtb	r2, r3
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80082a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082aa:	785b      	ldrb	r3, [r3, #1]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fe fd0f 	bl	8006cd0 <disk_initialize>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80082b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80082c4:	2303      	movs	r3, #3
 80082c6:	e1e6      	b.n	8008696 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <find_volume+0xca>
 80082ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80082da:	230a      	movs	r3, #10
 80082dc:	e1db      	b.n	8008696 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80082de:	2300      	movs	r3, #0
 80082e0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80082e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082e6:	f7ff ff3f 	bl	8008168 <check_fs>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d149      	bne.n	800838c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082f8:	2300      	movs	r3, #0
 80082fa:	643b      	str	r3, [r7, #64]	; 0x40
 80082fc:	e01e      	b.n	800833c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800830c:	4413      	add	r3, r2
 800830e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008312:	3304      	adds	r3, #4
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d006      	beq.n	8008328 <find_volume+0x114>
 800831a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831c:	3308      	adds	r3, #8
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fd72 	bl	8006e08 <ld_dword>
 8008324:	4602      	mov	r2, r0
 8008326:	e000      	b.n	800832a <find_volume+0x116>
 8008328:	2200      	movs	r2, #0
 800832a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	3358      	adds	r3, #88	; 0x58
 8008330:	443b      	add	r3, r7
 8008332:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008338:	3301      	adds	r3, #1
 800833a:	643b      	str	r3, [r7, #64]	; 0x40
 800833c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833e:	2b03      	cmp	r3, #3
 8008340:	d9dd      	bls.n	80082fe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008342:	2300      	movs	r3, #0
 8008344:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d002      	beq.n	8008352 <find_volume+0x13e>
 800834c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834e:	3b01      	subs	r3, #1
 8008350:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	3358      	adds	r3, #88	; 0x58
 8008358:	443b      	add	r3, r7
 800835a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800835e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <find_volume+0x15e>
 8008366:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800836a:	f7ff fefd 	bl	8008168 <check_fs>
 800836e:	4603      	mov	r3, r0
 8008370:	e000      	b.n	8008374 <find_volume+0x160>
 8008372:	2303      	movs	r3, #3
 8008374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800837c:	2b01      	cmp	r3, #1
 800837e:	d905      	bls.n	800838c <find_volume+0x178>
 8008380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008382:	3301      	adds	r3, #1
 8008384:	643b      	str	r3, [r7, #64]	; 0x40
 8008386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008388:	2b03      	cmp	r3, #3
 800838a:	d9e2      	bls.n	8008352 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800838c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008390:	2b04      	cmp	r3, #4
 8008392:	d101      	bne.n	8008398 <find_volume+0x184>
 8008394:	2301      	movs	r3, #1
 8008396:	e17e      	b.n	8008696 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800839c:	2b01      	cmp	r3, #1
 800839e:	d901      	bls.n	80083a4 <find_volume+0x190>
 80083a0:	230d      	movs	r3, #13
 80083a2:	e178      	b.n	8008696 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	3330      	adds	r3, #48	; 0x30
 80083a8:	330b      	adds	r3, #11
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fd14 	bl	8006dd8 <ld_word>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b6:	d001      	beq.n	80083bc <find_volume+0x1a8>
 80083b8:	230d      	movs	r3, #13
 80083ba:	e16c      	b.n	8008696 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	3330      	adds	r3, #48	; 0x30
 80083c0:	3316      	adds	r3, #22
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fd08 	bl	8006dd8 <ld_word>
 80083c8:	4603      	mov	r3, r0
 80083ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <find_volume+0x1cc>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	3330      	adds	r3, #48	; 0x30
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fd15 	bl	8006e08 <ld_dword>
 80083de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	789b      	ldrb	r3, [r3, #2]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d005      	beq.n	8008404 <find_volume+0x1f0>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	789b      	ldrb	r3, [r3, #2]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d001      	beq.n	8008404 <find_volume+0x1f0>
 8008400:	230d      	movs	r3, #13
 8008402:	e148      	b.n	8008696 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	789b      	ldrb	r3, [r3, #2]
 8008408:	461a      	mov	r2, r3
 800840a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	b29a      	uxth	r2, r3
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	895b      	ldrh	r3, [r3, #10]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <find_volume+0x224>
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	895b      	ldrh	r3, [r3, #10]
 800842a:	461a      	mov	r2, r3
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	895b      	ldrh	r3, [r3, #10]
 8008430:	3b01      	subs	r3, #1
 8008432:	4013      	ands	r3, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <find_volume+0x228>
 8008438:	230d      	movs	r3, #13
 800843a:	e12c      	b.n	8008696 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	3330      	adds	r3, #48	; 0x30
 8008440:	3311      	adds	r3, #17
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fcc8 	bl	8006dd8 <ld_word>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	891b      	ldrh	r3, [r3, #8]
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <find_volume+0x24e>
 800845e:	230d      	movs	r3, #13
 8008460:	e119      	b.n	8008696 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	3330      	adds	r3, #48	; 0x30
 8008466:	3313      	adds	r3, #19
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fcb5 	bl	8006dd8 <ld_word>
 800846e:	4603      	mov	r3, r0
 8008470:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <find_volume+0x272>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	3330      	adds	r3, #48	; 0x30
 800847c:	3320      	adds	r3, #32
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fcc2 	bl	8006e08 <ld_dword>
 8008484:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	3330      	adds	r3, #48	; 0x30
 800848a:	330e      	adds	r3, #14
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fca3 	bl	8006dd8 <ld_word>
 8008492:	4603      	mov	r3, r0
 8008494:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008496:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <find_volume+0x28c>
 800849c:	230d      	movs	r3, #13
 800849e:	e0fa      	b.n	8008696 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80084a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	4413      	add	r3, r2
 80084a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a8:	8912      	ldrh	r2, [r2, #8]
 80084aa:	0912      	lsrs	r2, r2, #4
 80084ac:	b292      	uxth	r2, r2
 80084ae:	4413      	add	r3, r2
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80084b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d204      	bcs.n	80084c4 <find_volume+0x2b0>
 80084ba:	230d      	movs	r3, #13
 80084bc:	e0eb      	b.n	8008696 <find_volume+0x482>
 80084be:	bf00      	nop
 80084c0:	200003bc 	.word	0x200003bc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80084c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084cc:	8952      	ldrh	r2, [r2, #10]
 80084ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80084d2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <find_volume+0x2ca>
 80084da:	230d      	movs	r3, #13
 80084dc:	e0db      	b.n	8008696 <find_volume+0x482>
		fmt = FS_FAT32;
 80084de:	2303      	movs	r3, #3
 80084e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d802      	bhi.n	80084f4 <find_volume+0x2e0>
 80084ee:	2302      	movs	r3, #2
 80084f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d802      	bhi.n	8008504 <find_volume+0x2f0>
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800850c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008510:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008512:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008516:	441a      	add	r2, r3
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800851c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	441a      	add	r2, r3
 8008522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008524:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008526:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800852a:	2b03      	cmp	r3, #3
 800852c:	d11e      	bne.n	800856c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800852e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008530:	3330      	adds	r3, #48	; 0x30
 8008532:	332a      	adds	r3, #42	; 0x2a
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe fc4f 	bl	8006dd8 <ld_word>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <find_volume+0x330>
 8008540:	230d      	movs	r3, #13
 8008542:	e0a8      	b.n	8008696 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008546:	891b      	ldrh	r3, [r3, #8]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d001      	beq.n	8008550 <find_volume+0x33c>
 800854c:	230d      	movs	r3, #13
 800854e:	e0a2      	b.n	8008696 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008552:	3330      	adds	r3, #48	; 0x30
 8008554:	332c      	adds	r3, #44	; 0x2c
 8008556:	4618      	mov	r0, r3
 8008558:	f7fe fc56 	bl	8006e08 <ld_dword>
 800855c:	4602      	mov	r2, r0
 800855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008560:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	647b      	str	r3, [r7, #68]	; 0x44
 800856a:	e01f      	b.n	80085ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800856c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856e:	891b      	ldrh	r3, [r3, #8]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <find_volume+0x364>
 8008574:	230d      	movs	r3, #13
 8008576:	e08e      	b.n	8008696 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857a:	6a1a      	ldr	r2, [r3, #32]
 800857c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857e:	441a      	add	r2, r3
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008588:	2b02      	cmp	r3, #2
 800858a:	d103      	bne.n	8008594 <find_volume+0x380>
 800858c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	e00a      	b.n	80085aa <find_volume+0x396>
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	4613      	mov	r3, r2
 800859a:	005b      	lsls	r3, r3, #1
 800859c:	4413      	add	r3, r2
 800859e:	085a      	lsrs	r2, r3, #1
 80085a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a2:	695b      	ldr	r3, [r3, #20]
 80085a4:	f003 0301 	and.w	r3, r3, #1
 80085a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80085aa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80085ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ae:	699a      	ldr	r2, [r3, #24]
 80085b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80085b6:	0a5b      	lsrs	r3, r3, #9
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d201      	bcs.n	80085c0 <find_volume+0x3ac>
 80085bc:	230d      	movs	r3, #13
 80085be:	e06a      	b.n	8008696 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80085c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295
 80085c6:	611a      	str	r2, [r3, #16]
 80085c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80085d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d2:	2280      	movs	r2, #128	; 0x80
 80085d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80085d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d149      	bne.n	8008672 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80085de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e0:	3330      	adds	r3, #48	; 0x30
 80085e2:	3330      	adds	r3, #48	; 0x30
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fbf7 	bl	8006dd8 <ld_word>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d140      	bne.n	8008672 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80085f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f2:	3301      	adds	r3, #1
 80085f4:	4619      	mov	r1, r3
 80085f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085f8:	f7fe fe9e 	bl	8007338 <move_window>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d137      	bne.n	8008672 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008604:	2200      	movs	r2, #0
 8008606:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800860a:	3330      	adds	r3, #48	; 0x30
 800860c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008610:	4618      	mov	r0, r3
 8008612:	f7fe fbe1 	bl	8006dd8 <ld_word>
 8008616:	4603      	mov	r3, r0
 8008618:	461a      	mov	r2, r3
 800861a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800861e:	429a      	cmp	r2, r3
 8008620:	d127      	bne.n	8008672 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008624:	3330      	adds	r3, #48	; 0x30
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe fbee 	bl	8006e08 <ld_dword>
 800862c:	4603      	mov	r3, r0
 800862e:	4a1c      	ldr	r2, [pc, #112]	; (80086a0 <find_volume+0x48c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d11e      	bne.n	8008672 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008636:	3330      	adds	r3, #48	; 0x30
 8008638:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800863c:	4618      	mov	r0, r3
 800863e:	f7fe fbe3 	bl	8006e08 <ld_dword>
 8008642:	4603      	mov	r3, r0
 8008644:	4a17      	ldr	r2, [pc, #92]	; (80086a4 <find_volume+0x490>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d113      	bne.n	8008672 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	3330      	adds	r3, #48	; 0x30
 800864e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fbd8 	bl	8006e08 <ld_dword>
 8008658:	4602      	mov	r2, r0
 800865a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	3330      	adds	r3, #48	; 0x30
 8008662:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe fbce 	bl	8006e08 <ld_dword>
 800866c:	4602      	mov	r2, r0
 800866e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008670:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008674:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008678:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800867a:	4b0b      	ldr	r3, [pc, #44]	; (80086a8 <find_volume+0x494>)
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	3301      	adds	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <find_volume+0x494>)
 8008684:	801a      	strh	r2, [r3, #0]
 8008686:	4b08      	ldr	r3, [pc, #32]	; (80086a8 <find_volume+0x494>)
 8008688:	881a      	ldrh	r2, [r3, #0]
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800868e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008690:	f7fe fdea 	bl	8007268 <clear_lock>
#endif
	return FR_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3758      	adds	r7, #88	; 0x58
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	41615252 	.word	0x41615252
 80086a4:	61417272 	.word	0x61417272
 80086a8:	200003c0 	.word	0x200003c0

080086ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80086b6:	2309      	movs	r3, #9
 80086b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d01c      	beq.n	80086fa <validate+0x4e>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d018      	beq.n	80086fa <validate+0x4e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d013      	beq.n	80086fa <validate+0x4e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	889a      	ldrh	r2, [r3, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	429a      	cmp	r2, r3
 80086de:	d10c      	bne.n	80086fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	785b      	ldrb	r3, [r3, #1]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f7fe fad8 	bl	8006c9c <disk_status>
 80086ec:	4603      	mov	r3, r0
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d101      	bne.n	80086fa <validate+0x4e>
			res = FR_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80086fa:	7bfb      	ldrb	r3, [r7, #15]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d102      	bne.n	8008706 <validate+0x5a>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	e000      	b.n	8008708 <validate+0x5c>
 8008706:	2300      	movs	r3, #0
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	6013      	str	r3, [r2, #0]
	return res;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	4613      	mov	r3, r2
 8008724:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800872a:	f107 0310 	add.w	r3, r7, #16
 800872e:	4618      	mov	r0, r3
 8008730:	f7ff fcd5 	bl	80080de <get_ldnumber>
 8008734:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008736:	69fb      	ldr	r3, [r7, #28]
 8008738:	2b00      	cmp	r3, #0
 800873a:	da01      	bge.n	8008740 <f_mount+0x28>
 800873c:	230b      	movs	r3, #11
 800873e:	e02b      	b.n	8008798 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008740:	4a17      	ldr	r2, [pc, #92]	; (80087a0 <f_mount+0x88>)
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008748:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d005      	beq.n	800875c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008750:	69b8      	ldr	r0, [r7, #24]
 8008752:	f7fe fd89 	bl	8007268 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2200      	movs	r2, #0
 800875a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d002      	beq.n	8008768 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2200      	movs	r2, #0
 8008766:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	490d      	ldr	r1, [pc, #52]	; (80087a0 <f_mount+0x88>)
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d002      	beq.n	800877e <f_mount+0x66>
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d001      	beq.n	8008782 <f_mount+0x6a>
 800877e:	2300      	movs	r3, #0
 8008780:	e00a      	b.n	8008798 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008782:	f107 010c 	add.w	r1, r7, #12
 8008786:	f107 0308 	add.w	r3, r7, #8
 800878a:	2200      	movs	r2, #0
 800878c:	4618      	mov	r0, r3
 800878e:	f7ff fd41 	bl	8008214 <find_volume>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3720      	adds	r7, #32
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	200003bc 	.word	0x200003bc

080087a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b098      	sub	sp, #96	; 0x60
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <f_open+0x18>
 80087b8:	2309      	movs	r3, #9
 80087ba:	e1ad      	b.n	8008b18 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087c4:	79fa      	ldrb	r2, [r7, #7]
 80087c6:	f107 0110 	add.w	r1, r7, #16
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7ff fd20 	bl	8008214 <find_volume>
 80087d4:	4603      	mov	r3, r0
 80087d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80087da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087de:	2b00      	cmp	r3, #0
 80087e0:	f040 8191 	bne.w	8008b06 <f_open+0x362>
		dj.obj.fs = fs;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	f107 0314 	add.w	r3, r7, #20
 80087ee:	4611      	mov	r1, r2
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff fc03 	bl	8007ffc <follow_path>
 80087f6:	4603      	mov	r3, r0
 80087f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80087fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008800:	2b00      	cmp	r3, #0
 8008802:	d11a      	bne.n	800883a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008804:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008808:	b25b      	sxtb	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	da03      	bge.n	8008816 <f_open+0x72>
				res = FR_INVALID_NAME;
 800880e:	2306      	movs	r3, #6
 8008810:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008814:	e011      	b.n	800883a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	461a      	mov	r2, r3
 8008828:	f107 0314 	add.w	r3, r7, #20
 800882c:	4611      	mov	r1, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7fe fbd2 	bl	8006fd8 <chk_lock>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	f003 031c 	and.w	r3, r3, #28
 8008840:	2b00      	cmp	r3, #0
 8008842:	d07f      	beq.n	8008944 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008848:	2b00      	cmp	r3, #0
 800884a:	d017      	beq.n	800887c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800884c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008850:	2b04      	cmp	r3, #4
 8008852:	d10e      	bne.n	8008872 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008854:	f7fe fc1c 	bl	8007090 <enq_lock>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d006      	beq.n	800886c <f_open+0xc8>
 800885e:	f107 0314 	add.w	r3, r7, #20
 8008862:	4618      	mov	r0, r3
 8008864:	f7ff fb03 	bl	8007e6e <dir_register>
 8008868:	4603      	mov	r3, r0
 800886a:	e000      	b.n	800886e <f_open+0xca>
 800886c:	2312      	movs	r3, #18
 800886e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	f043 0308 	orr.w	r3, r3, #8
 8008878:	71fb      	strb	r3, [r7, #7]
 800887a:	e010      	b.n	800889e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800887c:	7ebb      	ldrb	r3, [r7, #26]
 800887e:	f003 0311 	and.w	r3, r3, #17
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <f_open+0xea>
					res = FR_DENIED;
 8008886:	2307      	movs	r3, #7
 8008888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800888c:	e007      	b.n	800889e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	f003 0304 	and.w	r3, r3, #4
 8008894:	2b00      	cmp	r3, #0
 8008896:	d002      	beq.n	800889e <f_open+0xfa>
 8008898:	2308      	movs	r3, #8
 800889a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800889e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d168      	bne.n	8008978 <f_open+0x1d4>
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	f003 0308 	and.w	r3, r3, #8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d063      	beq.n	8008978 <f_open+0x1d4>
				dw = GET_FATTIME();
 80088b0:	f7fd fcb8 	bl	8006224 <get_fattime>
 80088b4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	330e      	adds	r3, #14
 80088ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088bc:	4618      	mov	r0, r3
 80088be:	f7fe fae1 	bl	8006e84 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80088c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c4:	3316      	adds	r3, #22
 80088c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7fe fadb 	bl	8006e84 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80088ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d0:	330b      	adds	r3, #11
 80088d2:	2220      	movs	r2, #32
 80088d4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088da:	4611      	mov	r1, r2
 80088dc:	4618      	mov	r0, r3
 80088de:	f7ff fa32 	bl	8007d46 <ld_clust>
 80088e2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088e8:	2200      	movs	r2, #0
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7ff fa4a 	bl	8007d84 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	331c      	adds	r3, #28
 80088f4:	2100      	movs	r1, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fac4 	bl	8006e84 <st_dword>
					fs->wflag = 1;
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2201      	movs	r2, #1
 8008900:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008904:	2b00      	cmp	r3, #0
 8008906:	d037      	beq.n	8008978 <f_open+0x1d4>
						dw = fs->winsect;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800890e:	f107 0314 	add.w	r3, r7, #20
 8008912:	2200      	movs	r2, #0
 8008914:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe ff5d 	bl	80077d6 <remove_chain>
 800891c:	4603      	mov	r3, r0
 800891e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008926:	2b00      	cmp	r3, #0
 8008928:	d126      	bne.n	8008978 <f_open+0x1d4>
							res = move_window(fs, dw);
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800892e:	4618      	mov	r0, r3
 8008930:	f7fe fd02 	bl	8007338 <move_window>
 8008934:	4603      	mov	r3, r0
 8008936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800893e:	3a01      	subs	r2, #1
 8008940:	60da      	str	r2, [r3, #12]
 8008942:	e019      	b.n	8008978 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008944:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008948:	2b00      	cmp	r3, #0
 800894a:	d115      	bne.n	8008978 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800894c:	7ebb      	ldrb	r3, [r7, #26]
 800894e:	f003 0310 	and.w	r3, r3, #16
 8008952:	2b00      	cmp	r3, #0
 8008954:	d003      	beq.n	800895e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008956:	2304      	movs	r3, #4
 8008958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800895c:	e00c      	b.n	8008978 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800895e:	79fb      	ldrb	r3, [r7, #7]
 8008960:	f003 0302 	and.w	r3, r3, #2
 8008964:	2b00      	cmp	r3, #0
 8008966:	d007      	beq.n	8008978 <f_open+0x1d4>
 8008968:	7ebb      	ldrb	r3, [r7, #26]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d002      	beq.n	8008978 <f_open+0x1d4>
						res = FR_DENIED;
 8008972:	2307      	movs	r3, #7
 8008974:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008978:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d128      	bne.n	80089d2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008980:	79fb      	ldrb	r3, [r7, #7]
 8008982:	f003 0308 	and.w	r3, r3, #8
 8008986:	2b00      	cmp	r3, #0
 8008988:	d003      	beq.n	8008992 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800898a:	79fb      	ldrb	r3, [r7, #7]
 800898c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008990:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800899a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	f023 0301 	bic.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	bf14      	ite	ne
 80089aa:	2301      	movne	r3, #1
 80089ac:	2300      	moveq	r3, #0
 80089ae:	b2db      	uxtb	r3, r3
 80089b0:	461a      	mov	r2, r3
 80089b2:	f107 0314 	add.w	r3, r7, #20
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fb8b 	bl	80070d4 <inc_lock>
 80089be:	4602      	mov	r2, r0
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <f_open+0x22e>
 80089cc:	2302      	movs	r3, #2
 80089ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80089d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	f040 8095 	bne.w	8008b06 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff f9af 	bl	8007d46 <ld_clust>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80089ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f0:	331c      	adds	r3, #28
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fe fa08 	bl	8006e08 <ld_dword>
 80089f8:	4602      	mov	r2, r0
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	88da      	ldrh	r2, [r3, #6]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	79fa      	ldrb	r2, [r7, #7]
 8008a16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2200      	movs	r2, #0
 8008a28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3330      	adds	r3, #48	; 0x30
 8008a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe fa72 	bl	8006f1e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a3a:	79fb      	ldrb	r3, [r7, #7]
 8008a3c:	f003 0320 	and.w	r3, r3, #32
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d060      	beq.n	8008b06 <f_open+0x362>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d05c      	beq.n	8008b06 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	895b      	ldrh	r3, [r3, #10]
 8008a58:	025b      	lsls	r3, r3, #9
 8008a5a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	657b      	str	r3, [r7, #84]	; 0x54
 8008a68:	e016      	b.n	8008a98 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd1d 	bl	80074ae <get_fat>
 8008a74:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d802      	bhi.n	8008a82 <f_open+0x2de>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a88:	d102      	bne.n	8008a90 <f_open+0x2ec>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	657b      	str	r3, [r7, #84]	; 0x54
 8008a98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <f_open+0x304>
 8008aa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d8e0      	bhi.n	8008a6a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d127      	bne.n	8008b06 <f_open+0x362>
 8008ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d022      	beq.n	8008b06 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7fe fcd3 	bl	8007470 <clust2sect>
 8008aca:	6478      	str	r0, [r7, #68]	; 0x44
 8008acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d103      	bne.n	8008ada <f_open+0x336>
						res = FR_INT_ERR;
 8008ad2:	2302      	movs	r3, #2
 8008ad4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ad8:	e015      	b.n	8008b06 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008adc:	0a5a      	lsrs	r2, r3, #9
 8008ade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae0:	441a      	add	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	7858      	ldrb	r0, [r3, #1]
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	2301      	movs	r3, #1
 8008af6:	f7fe f911 	bl	8006d1c <disk_read>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <f_open+0x362>
 8008b00:	2301      	movs	r3, #1
 8008b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d002      	beq.n	8008b14 <f_open+0x370>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3760      	adds	r7, #96	; 0x60
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08e      	sub	sp, #56	; 0x38
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f107 0214 	add.w	r2, r7, #20
 8008b3e:	4611      	mov	r1, r2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fdb3 	bl	80086ac <validate>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d107      	bne.n	8008b64 <f_read+0x44>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	7d5b      	ldrb	r3, [r3, #21]
 8008b58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008b5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <f_read+0x4a>
 8008b64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b68:	e115      	b.n	8008d96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	7d1b      	ldrb	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <f_read+0x5a>
 8008b76:	2307      	movs	r3, #7
 8008b78:	e10d      	b.n	8008d96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	68da      	ldr	r2, [r3, #12]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	1ad3      	subs	r3, r2, r3
 8008b84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	f240 80fe 	bls.w	8008d8c <f_read+0x26c>
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8008b94:	e0fa      	b.n	8008d8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 80c6 	bne.w	8008d30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	0a5b      	lsrs	r3, r3, #9
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	8952      	ldrh	r2, [r2, #10]
 8008bae:	3a01      	subs	r2, #1
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d12f      	bne.n	8008c1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8008bc8:	e013      	b.n	8008bf2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d007      	beq.n	8008be2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f7fe fef9 	bl	80079d0 <clmt_clust>
 8008bde:	6338      	str	r0, [r7, #48]	; 0x30
 8008be0:	e007      	b.n	8008bf2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	69db      	ldr	r3, [r3, #28]
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f7fe fc5f 	bl	80074ae <get_fat>
 8008bf0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d804      	bhi.n	8008c02 <f_read+0xe2>
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	755a      	strb	r2, [r3, #21]
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e0c9      	b.n	8008d96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c08:	d104      	bne.n	8008c14 <f_read+0xf4>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	755a      	strb	r2, [r3, #21]
 8008c10:	2301      	movs	r3, #1
 8008c12:	e0c0      	b.n	8008d96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7fe fc24 	bl	8007470 <clust2sect>
 8008c28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d104      	bne.n	8008c3a <f_read+0x11a>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2202      	movs	r2, #2
 8008c34:	755a      	strb	r2, [r3, #21]
 8008c36:	2302      	movs	r3, #2
 8008c38:	e0ad      	b.n	8008d96 <f_read+0x276>
			sect += csect;
 8008c3a:	69ba      	ldr	r2, [r7, #24]
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	4413      	add	r3, r2
 8008c40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	0a5b      	lsrs	r3, r3, #9
 8008c46:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d039      	beq.n	8008cc2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c4e:	69fa      	ldr	r2, [r7, #28]
 8008c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c52:	4413      	add	r3, r2
 8008c54:	697a      	ldr	r2, [r7, #20]
 8008c56:	8952      	ldrh	r2, [r2, #10]
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d905      	bls.n	8008c68 <f_read+0x148>
					cc = fs->csize - csect;
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	895b      	ldrh	r3, [r3, #10]
 8008c60:	461a      	mov	r2, r3
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	7858      	ldrb	r0, [r3, #1]
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c72:	f7fe f853 	bl	8006d1c <disk_read>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d004      	beq.n	8008c86 <f_read+0x166>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	755a      	strb	r2, [r3, #21]
 8008c82:	2301      	movs	r3, #1
 8008c84:	e087      	b.n	8008d96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	7d1b      	ldrb	r3, [r3, #20]
 8008c8a:	b25b      	sxtb	r3, r3
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	da14      	bge.n	8008cba <f_read+0x19a>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a1a      	ldr	r2, [r3, #32]
 8008c94:	69bb      	ldr	r3, [r7, #24]
 8008c96:	1ad3      	subs	r3, r2, r3
 8008c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d90d      	bls.n	8008cba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6a1a      	ldr	r2, [r3, #32]
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	025b      	lsls	r3, r3, #9
 8008ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008caa:	18d0      	adds	r0, r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	3330      	adds	r3, #48	; 0x30
 8008cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	f7fe f911 	bl	8006edc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cbc:	025b      	lsls	r3, r3, #9
 8008cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8008cc0:	e050      	b.n	8008d64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d02e      	beq.n	8008d2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	7d1b      	ldrb	r3, [r3, #20]
 8008cd0:	b25b      	sxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da18      	bge.n	8008d08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	7858      	ldrb	r0, [r3, #1]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6a1a      	ldr	r2, [r3, #32]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f7fe f839 	bl	8006d5c <disk_write>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <f_read+0x1da>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	755a      	strb	r2, [r3, #21]
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e04d      	b.n	8008d96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	7d1b      	ldrb	r3, [r3, #20]
 8008cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d02:	b2da      	uxtb	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	7858      	ldrb	r0, [r3, #1]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d12:	2301      	movs	r3, #1
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	f7fe f801 	bl	8006d1c <disk_read>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d004      	beq.n	8008d2a <f_read+0x20a>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	755a      	strb	r2, [r3, #21]
 8008d26:	2301      	movs	r3, #1
 8008d28:	e035      	b.n	8008d96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	69ba      	ldr	r2, [r7, #24]
 8008d2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d901      	bls.n	8008d4a <f_read+0x22a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d58:	4413      	add	r3, r2
 8008d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d60:	f7fe f8bc 	bl	8006edc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	4413      	add	r3, r2
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	699a      	ldr	r2, [r3, #24]
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	619a      	str	r2, [r3, #24]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d7e:	441a      	add	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	601a      	str	r2, [r3, #0]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f47f af01 	bne.w	8008b96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008d94:	2300      	movs	r3, #0
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3738      	adds	r7, #56	; 0x38
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b08c      	sub	sp, #48	; 0x30
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60f8      	str	r0, [r7, #12]
 8008da6:	60b9      	str	r1, [r7, #8]
 8008da8:	607a      	str	r2, [r7, #4]
 8008daa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f107 0210 	add.w	r2, r7, #16
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f7ff fc74 	bl	80086ac <validate>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008dca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d107      	bne.n	8008de2 <f_write+0x44>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	7d5b      	ldrb	r3, [r3, #21]
 8008dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d002      	beq.n	8008de8 <f_write+0x4a>
 8008de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008de6:	e14b      	b.n	8009080 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	7d1b      	ldrb	r3, [r3, #20]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d101      	bne.n	8008df8 <f_write+0x5a>
 8008df4:	2307      	movs	r3, #7
 8008df6:	e143      	b.n	8009080 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	699a      	ldr	r2, [r3, #24]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	441a      	add	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	f080 812d 	bcs.w	8009064 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	699b      	ldr	r3, [r3, #24]
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008e12:	e127      	b.n	8009064 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f040 80e3 	bne.w	8008fe8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	699b      	ldr	r3, [r3, #24]
 8008e26:	0a5b      	lsrs	r3, r3, #9
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	8952      	ldrh	r2, [r2, #10]
 8008e2c:	3a01      	subs	r2, #1
 8008e2e:	4013      	ands	r3, r2
 8008e30:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d143      	bne.n	8008ec0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10c      	bne.n	8008e5a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d11a      	bne.n	8008e82 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fe fd25 	bl	80078a0 <create_chain>
 8008e56:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e58:	e013      	b.n	8008e82 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d007      	beq.n	8008e72 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	4619      	mov	r1, r3
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7fe fdb1 	bl	80079d0 <clmt_clust>
 8008e6e:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e70:	e007      	b.n	8008e82 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	69db      	ldr	r3, [r3, #28]
 8008e78:	4619      	mov	r1, r3
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	f7fe fd10 	bl	80078a0 <create_chain>
 8008e80:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 80f2 	beq.w	800906e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d104      	bne.n	8008e9a <f_write+0xfc>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2202      	movs	r2, #2
 8008e94:	755a      	strb	r2, [r3, #21]
 8008e96:	2302      	movs	r3, #2
 8008e98:	e0f2      	b.n	8009080 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea0:	d104      	bne.n	8008eac <f_write+0x10e>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	755a      	strb	r2, [r3, #21]
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e0e9      	b.n	8009080 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eb0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d102      	bne.n	8008ec0 <f_write+0x122>
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ebe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7d1b      	ldrb	r3, [r3, #20]
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da18      	bge.n	8008efc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	7858      	ldrb	r0, [r3, #1]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6a1a      	ldr	r2, [r3, #32]
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f7fd ff3f 	bl	8006d5c <disk_write>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d004      	beq.n	8008eee <f_write+0x150>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	755a      	strb	r2, [r3, #21]
 8008eea:	2301      	movs	r3, #1
 8008eec:	e0c8      	b.n	8009080 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	7d1b      	ldrb	r3, [r3, #20]
 8008ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	4619      	mov	r1, r3
 8008f04:	4610      	mov	r0, r2
 8008f06:	f7fe fab3 	bl	8007470 <clust2sect>
 8008f0a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <f_write+0x17e>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2202      	movs	r2, #2
 8008f16:	755a      	strb	r2, [r3, #21]
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e0b1      	b.n	8009080 <f_write+0x2e2>
			sect += csect;
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	4413      	add	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	0a5b      	lsrs	r3, r3, #9
 8008f28:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d03c      	beq.n	8008faa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f30:	69ba      	ldr	r2, [r7, #24]
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	4413      	add	r3, r2
 8008f36:	693a      	ldr	r2, [r7, #16]
 8008f38:	8952      	ldrh	r2, [r2, #10]
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d905      	bls.n	8008f4a <f_write+0x1ac>
					cc = fs->csize - csect;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	895b      	ldrh	r3, [r3, #10]
 8008f42:	461a      	mov	r2, r3
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	7858      	ldrb	r0, [r3, #1]
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	69f9      	ldr	r1, [r7, #28]
 8008f54:	f7fd ff02 	bl	8006d5c <disk_write>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d004      	beq.n	8008f68 <f_write+0x1ca>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	2201      	movs	r2, #1
 8008f62:	755a      	strb	r2, [r3, #21]
 8008f64:	2301      	movs	r3, #1
 8008f66:	e08b      	b.n	8009080 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6a1a      	ldr	r2, [r3, #32]
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	1ad3      	subs	r3, r2, r3
 8008f70:	6a3a      	ldr	r2, [r7, #32]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d915      	bls.n	8008fa2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6a1a      	ldr	r2, [r3, #32]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	1ad3      	subs	r3, r2, r3
 8008f84:	025b      	lsls	r3, r3, #9
 8008f86:	69fa      	ldr	r2, [r7, #28]
 8008f88:	4413      	add	r3, r2
 8008f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8e:	4619      	mov	r1, r3
 8008f90:	f7fd ffa4 	bl	8006edc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	7d1b      	ldrb	r3, [r3, #20]
 8008f98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	025b      	lsls	r3, r3, #9
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008fa8:	e03f      	b.n	800902a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d016      	beq.n	8008fe2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	699a      	ldr	r2, [r3, #24]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d210      	bcs.n	8008fe2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	7858      	ldrb	r0, [r3, #1]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fca:	2301      	movs	r3, #1
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	f7fd fea5 	bl	8006d1c <disk_read>
 8008fd2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d004      	beq.n	8008fe2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	755a      	strb	r2, [r3, #21]
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e04e      	b.n	8009080 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ff0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d901      	bls.n	8009002 <f_write+0x264>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009010:	4413      	add	r3, r2
 8009012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd ff60 	bl	8006edc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	7d1b      	ldrb	r3, [r3, #20]
 8009020:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009024:	b2da      	uxtb	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	4413      	add	r3, r2
 8009030:	61fb      	str	r3, [r7, #28]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	699a      	ldr	r2, [r3, #24]
 8009036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009038:	441a      	add	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	619a      	str	r2, [r3, #24]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	68da      	ldr	r2, [r3, #12]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	429a      	cmp	r2, r3
 8009048:	bf38      	it	cc
 800904a:	461a      	movcc	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	60da      	str	r2, [r3, #12]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009056:	441a      	add	r2, r3
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	601a      	str	r2, [r3, #0]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	f47f aed4 	bne.w	8008e14 <f_write+0x76>
 800906c:	e000      	b.n	8009070 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800906e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	7d1b      	ldrb	r3, [r3, #20]
 8009074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009078:	b2da      	uxtb	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3730      	adds	r7, #48	; 0x30
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f107 0208 	add.w	r2, r7, #8
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f7ff fb07 	bl	80086ac <validate>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d168      	bne.n	800917a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7d1b      	ldrb	r3, [r3, #20]
 80090ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d062      	beq.n	800917a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7d1b      	ldrb	r3, [r3, #20]
 80090b8:	b25b      	sxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da15      	bge.n	80090ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	7858      	ldrb	r0, [r3, #1]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6a1a      	ldr	r2, [r3, #32]
 80090cc:	2301      	movs	r3, #1
 80090ce:	f7fd fe45 	bl	8006d5c <disk_write>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <f_sync+0x54>
 80090d8:	2301      	movs	r3, #1
 80090da:	e04f      	b.n	800917c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	7d1b      	ldrb	r3, [r3, #20]
 80090e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80090ea:	f7fd f89b 	bl	8006224 <get_fattime>
 80090ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	4619      	mov	r1, r3
 80090f8:	4610      	mov	r0, r2
 80090fa:	f7fe f91d 	bl	8007338 <move_window>
 80090fe:	4603      	mov	r3, r0
 8009100:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009102:	7dfb      	ldrb	r3, [r7, #23]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d138      	bne.n	800917a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	330b      	adds	r3, #11
 8009112:	781a      	ldrb	r2, [r3, #0]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	330b      	adds	r3, #11
 8009118:	f042 0220 	orr.w	r2, r2, #32
 800911c:	b2d2      	uxtb	r2, r2
 800911e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	461a      	mov	r2, r3
 800912a:	68f9      	ldr	r1, [r7, #12]
 800912c:	f7fe fe2a 	bl	8007d84 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f103 021c 	add.w	r2, r3, #28
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	4619      	mov	r1, r3
 800913c:	4610      	mov	r0, r2
 800913e:	f7fd fea1 	bl	8006e84 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	3316      	adds	r3, #22
 8009146:	6939      	ldr	r1, [r7, #16]
 8009148:	4618      	mov	r0, r3
 800914a:	f7fd fe9b 	bl	8006e84 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	3312      	adds	r3, #18
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f7fd fe7a 	bl	8006e4e <st_word>
					fs->wflag = 1;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	2201      	movs	r2, #1
 800915e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe f916 	bl	8007394 <sync_fs>
 8009168:	4603      	mov	r3, r0
 800916a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	7d1b      	ldrb	r3, [r3, #20]
 8009170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009174:	b2da      	uxtb	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800917a:	7dfb      	ldrb	r3, [r7, #23]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3718      	adds	r7, #24
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ff7b 	bl	8009088 <f_sync>
 8009192:	4603      	mov	r3, r0
 8009194:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009196:	7bfb      	ldrb	r3, [r7, #15]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d118      	bne.n	80091ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f107 0208 	add.w	r2, r7, #8
 80091a2:	4611      	mov	r1, r2
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7ff fa81 	bl	80086ac <validate>
 80091aa:	4603      	mov	r3, r0
 80091ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10c      	bne.n	80091ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	691b      	ldr	r3, [r3, #16]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe f819 	bl	80071f0 <dec_lock>
 80091be:	4603      	mov	r3, r0
 80091c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d102      	bne.n	80091ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80091ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b092      	sub	sp, #72	; 0x48
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80091e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80091e8:	f107 030c 	add.w	r3, r7, #12
 80091ec:	2200      	movs	r2, #0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7ff f810 	bl	8008214 <find_volume>
 80091f4:	4603      	mov	r3, r0
 80091f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80091fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091fe:	2b00      	cmp	r3, #0
 8009200:	f040 8099 	bne.w	8009336 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	691a      	ldr	r2, [r3, #16]
 800920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	3b02      	subs	r3, #2
 8009214:	429a      	cmp	r2, r3
 8009216:	d804      	bhi.n	8009222 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	e089      	b.n	8009336 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8009226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d128      	bne.n	8009280 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800922e:	2302      	movs	r3, #2
 8009230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8009236:	f107 0314 	add.w	r3, r7, #20
 800923a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe f936 	bl	80074ae <get_fat>
 8009242:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d103      	bne.n	8009254 <f_getfree+0x7c>
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009252:	e063      	b.n	800931c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009256:	2b01      	cmp	r3, #1
 8009258:	d103      	bne.n	8009262 <f_getfree+0x8a>
 800925a:	2302      	movs	r3, #2
 800925c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009260:	e05c      	b.n	800931c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d102      	bne.n	800926e <f_getfree+0x96>
 8009268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800926a:	3301      	adds	r3, #1
 800926c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800926e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009270:	3301      	adds	r3, #1
 8009272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009276:	695b      	ldr	r3, [r3, #20]
 8009278:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800927a:	429a      	cmp	r2, r3
 800927c:	d3db      	bcc.n	8009236 <f_getfree+0x5e>
 800927e:	e04d      	b.n	800931c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8009280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	637b      	str	r3, [r7, #52]	; 0x34
 8009290:	2300      	movs	r3, #0
 8009292:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009296:	2b00      	cmp	r3, #0
 8009298:	d113      	bne.n	80092c2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800929a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	1c5a      	adds	r2, r3, #1
 80092a0:	63ba      	str	r2, [r7, #56]	; 0x38
 80092a2:	4619      	mov	r1, r3
 80092a4:	f7fe f848 	bl	8007338 <move_window>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80092ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d131      	bne.n	800931a <f_getfree+0x142>
							p = fs->win;
 80092b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b8:	3330      	adds	r3, #48	; 0x30
 80092ba:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80092bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092c0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80092c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d10f      	bne.n	80092ea <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80092ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092cc:	f7fd fd84 	bl	8006dd8 <ld_word>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d102      	bne.n	80092dc <f_getfree+0x104>
 80092d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092d8:	3301      	adds	r3, #1
 80092da:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80092dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092de:	3302      	adds	r3, #2
 80092e0:	633b      	str	r3, [r7, #48]	; 0x30
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	3b02      	subs	r3, #2
 80092e6:	637b      	str	r3, [r7, #52]	; 0x34
 80092e8:	e010      	b.n	800930c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80092ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092ec:	f7fd fd8c 	bl	8006e08 <ld_dword>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d102      	bne.n	8009300 <f_getfree+0x128>
 80092fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092fc:	3301      	adds	r3, #1
 80092fe:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	3304      	adds	r3, #4
 8009304:	633b      	str	r3, [r7, #48]	; 0x30
 8009306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009308:	3b04      	subs	r3, #4
 800930a:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800930c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800930e:	3b01      	subs	r3, #1
 8009310:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1bd      	bne.n	8009294 <f_getfree+0xbc>
 8009318:	e000      	b.n	800931c <f_getfree+0x144>
							if (res != FR_OK) break;
 800931a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009320:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009326:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	791a      	ldrb	r2, [r3, #4]
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f042 0201 	orr.w	r2, r2, #1
 8009332:	b2d2      	uxtb	r2, r2
 8009334:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009336:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800933a:	4618      	mov	r0, r3
 800933c:	3748      	adds	r7, #72	; 0x48
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b088      	sub	sp, #32
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
	int n = 0;
 800934e:	2300      	movs	r3, #0
 8009350:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009356:	e01b      	b.n	8009390 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009358:	f107 0310 	add.w	r3, r7, #16
 800935c:	f107 0114 	add.w	r1, r7, #20
 8009360:	2201      	movs	r2, #1
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff fbdc 	bl	8008b20 <f_read>
		if (rc != 1) break;
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d116      	bne.n	800939c <f_gets+0x5a>
		c = s[0];
 800936e:	7d3b      	ldrb	r3, [r7, #20]
 8009370:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009372:	7dfb      	ldrb	r3, [r7, #23]
 8009374:	2b0d      	cmp	r3, #13
 8009376:	d100      	bne.n	800937a <f_gets+0x38>
 8009378:	e00a      	b.n	8009390 <f_gets+0x4e>
		*p++ = c;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	1c5a      	adds	r2, r3, #1
 800937e:	61ba      	str	r2, [r7, #24]
 8009380:	7dfa      	ldrb	r2, [r7, #23]
 8009382:	701a      	strb	r2, [r3, #0]
		n++;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	3301      	adds	r3, #1
 8009388:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b0a      	cmp	r3, #10
 800938e:	d007      	beq.n	80093a0 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	3b01      	subs	r3, #1
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	429a      	cmp	r2, r3
 8009398:	dbde      	blt.n	8009358 <f_gets+0x16>
 800939a:	e002      	b.n	80093a2 <f_gets+0x60>
		if (rc != 1) break;
 800939c:	bf00      	nop
 800939e:	e000      	b.n	80093a2 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80093a0:	bf00      	nop
	}
	*p = 0;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <f_gets+0x70>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	e000      	b.n	80093b4 <f_gets+0x72>
 80093b2:	2300      	movs	r3, #0
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3720      	adds	r7, #32
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80093ca:	2301      	movs	r3, #1
 80093cc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80093d2:	4b1f      	ldr	r3, [pc, #124]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 80093d4:	7a5b      	ldrb	r3, [r3, #9]
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d131      	bne.n	8009440 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80093dc:	4b1c      	ldr	r3, [pc, #112]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 80093de:	7a5b      	ldrb	r3, [r3, #9]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	461a      	mov	r2, r3
 80093e4:	4b1a      	ldr	r3, [pc, #104]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 80093e6:	2100      	movs	r1, #0
 80093e8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80093ea:	4b19      	ldr	r3, [pc, #100]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 80093ec:	7a5b      	ldrb	r3, [r3, #9]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	4a17      	ldr	r2, [pc, #92]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80093fa:	4b15      	ldr	r3, [pc, #84]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 80093fc:	7a5b      	ldrb	r3, [r3, #9]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	461a      	mov	r2, r3
 8009402:	4b13      	ldr	r3, [pc, #76]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 8009404:	4413      	add	r3, r2
 8009406:	79fa      	ldrb	r2, [r7, #7]
 8009408:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800940a:	4b11      	ldr	r3, [pc, #68]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 800940c:	7a5b      	ldrb	r3, [r3, #9]
 800940e:	b2db      	uxtb	r3, r3
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	b2d1      	uxtb	r1, r2
 8009414:	4a0e      	ldr	r2, [pc, #56]	; (8009450 <FATFS_LinkDriverEx+0x94>)
 8009416:	7251      	strb	r1, [r2, #9]
 8009418:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800941a:	7dbb      	ldrb	r3, [r7, #22]
 800941c:	3330      	adds	r3, #48	; 0x30
 800941e:	b2da      	uxtb	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	3301      	adds	r3, #1
 8009428:	223a      	movs	r2, #58	; 0x3a
 800942a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	3302      	adds	r3, #2
 8009430:	222f      	movs	r2, #47	; 0x2f
 8009432:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	3303      	adds	r3, #3
 8009438:	2200      	movs	r2, #0
 800943a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	200003e4 	.word	0x200003e4

08009454 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800945e:	2200      	movs	r2, #0
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7ff ffaa 	bl	80093bc <FATFS_LinkDriverEx>
 8009468:	4603      	mov	r3, r0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
	...

08009474 <_ZN8Platform3BSP16InterruptManagerD1Ev>:
    InterruptManager(InterruptManager&&) = delete;
    InterruptManager& operator=(const InterruptManager&) = delete;
    const InterruptManager& operator=(InterruptManager&&) = delete;
#endif
    /* --Default destructor. */
    virtual ~InterruptManager() = default;
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	4a04      	ldr	r2, [pc, #16]	; (8009490 <_ZN8Platform3BSP16InterruptManagerD1Ev+0x1c>)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	601a      	str	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr
 8009490:	08013cc4 	.word	0x08013cc4

08009494 <_ZN8Platform3BSP16InterruptManagerD0Ev>:
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7ff ffe9 	bl	8009474 <_ZN8Platform3BSP16InterruptManagerD1Ev>
 80094a2:	2104      	movs	r1, #4
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f007 fb0d 	bl	8010ac4 <_ZdlPvj>
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4618      	mov	r0, r3
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <_Z41__static_initialization_and_destruction_0ii>:
    //return (iManager ? iManager->clear(*this) : false);
    return false;
}


}    // namespace BSP
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d107      	bne.n	80094d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d102      	bne.n	80094d4 <_Z41__static_initialization_and_destruction_0ii+0x20>
static InterruptManager iManager;
 80094ce:	4809      	ldr	r0, [pc, #36]	; (80094f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80094d0:	f000 f884 	bl	80095dc <_ZN8Platform3BSP16InterruptManagerC1Ev>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d107      	bne.n	80094ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d102      	bne.n	80094ea <_Z41__static_initialization_and_destruction_0ii+0x36>
 80094e4:	4803      	ldr	r0, [pc, #12]	; (80094f4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80094e6:	f7ff ffc5 	bl	8009474 <_ZN8Platform3BSP16InterruptManagerD1Ev>
}    // namespace BSP
 80094ea:	bf00      	nop
 80094ec:	3708      	adds	r7, #8
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	200003f0 	.word	0x200003f0

080094f8 <_GLOBAL__sub_I__ZNK8Platform3BSP10DigitalOut3setEv>:
 80094f8:	b580      	push	{r7, lr}
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009500:	2001      	movs	r0, #1
 8009502:	f7ff ffd7 	bl	80094b4 <_Z41__static_initialization_and_destruction_0ii>
 8009506:	bd80      	pop	{r7, pc}

08009508 <_GLOBAL__sub_D__ZNK8Platform3BSP10DigitalOut3setEv>:
 8009508:	b580      	push	{r7, lr}
 800950a:	af00      	add	r7, sp, #0
 800950c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009510:	2000      	movs	r0, #0
 8009512:	f7ff ffcf 	bl	80094b4 <_Z41__static_initialization_and_destruction_0ii>
 8009516:	bd80      	pop	{r7, pc}

08009518 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4618      	mov	r0, r3
 800953c:	370c      	adds	r7, #12
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4618      	mov	r0, r3
 8009552:	370c      	adds	r7, #12
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	609a      	str	r2, [r3, #8]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009576:	4770      	bx	lr

08009578 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d005      	beq.n	8009594 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	2203      	movs	r2, #3
 8009592:	4798      	blx	r3
    }
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800959e:	b480      	push	{r7}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	bf0c      	ite	eq
 80095ae:	2301      	moveq	r3, #1
 80095b0:	2300      	movne	r3, #0
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7ff ffd4 	bl	8009578 <_ZNSt14_Function_baseD1Ev>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <_ZN8Platform3BSP16InterruptManagerC1Ev>:

namespace Platform::BSP {

DigitalInterrupt::InterruptHandler InterruptManager::handler[static_cast<uint16_t>(NUMOFHANDLER::NHANDLER)] = {nullptr};

InterruptManager::InterruptManager() {
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	4a11      	ldr	r2, [pc, #68]	; (800962c <_ZN8Platform3BSP16InterruptManagerC1Ev+0x50>)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	601a      	str	r2, [r3, #0]
    /* --Setup internals. */
    // set all handlers to failure to catch uninitialized interrupt
    for(size_t i = 0; i < static_cast<uint16_t>(NUMOFHANDLER::NHANDLER); ++i)
 80095ea:	2300      	movs	r3, #0
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b0f      	cmp	r3, #15
 80095f2:	d816      	bhi.n	8009622 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x46>
    {
       if(handler[i] == nullptr)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	4a0d      	ldr	r2, [pc, #52]	; (8009630 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x54>)
 80095fa:	4413      	add	r3, r2
 80095fc:	2100      	movs	r1, #0
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f83a 	bl	8009678 <_ZSteqIvJN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEbRKSt8functionIFT_DpT0_EEDn>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d007      	beq.n	800961a <_ZN8Platform3BSP16InterruptManagerC1Ev+0x3e>
       {
            handler[i] = failure;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	4a08      	ldr	r2, [pc, #32]	; (8009630 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x54>)
 8009610:	4413      	add	r3, r2
 8009612:	4908      	ldr	r1, [pc, #32]	; (8009634 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x58>)
 8009614:	4618      	mov	r0, r3
 8009616:	f000 f83f 	bl	8009698 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEaSIRS4_EENSt9enable_ifIXsrNS5_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSD_JS3_EEEE5valueERS5_E4typeEOSB_>
    for(size_t i = 0; i < static_cast<uint16_t>(NUMOFHANDLER::NHANDLER); ++i)
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	3301      	adds	r3, #1
 800961e:	60fb      	str	r3, [r7, #12]
 8009620:	e7e5      	b.n	80095ee <_ZN8Platform3BSP16InterruptManagerC1Ev+0x12>
       }
    }
}
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}
 800962c:	08013cc4 	.word	0x08013cc4
 8009630:	200003f4 	.word	0x200003f4
 8009634:	08009639 	.word	0x08009639

08009638 <_ZN8Platform3BSP16InterruptManager7failureENS0_16DigitalInterrupt8EdgeTypeE>:

void InterruptManager::failure(DigitalInterrupt::EdgeType t)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
    (void)t; // to avoid compiler warnings
    /* --This should never happen. */
    while(true);
 8009640:	e7fe      	b.n	8009640 <_ZN8Platform3BSP16InterruptManager7failureENS0_16DigitalInterrupt8EdgeTypeE+0x8>

08009642 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1EDn>:

      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
 8009642:	b580      	push	{r7, lr}
 8009644:	b082      	sub	sp, #8
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff ff84 	bl	800955c <_ZNSt14_Function_baseC1Ev>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1Ev>:
      function() noexcept
 800965e:	b580      	push	{r7, lr}
 8009660:	b082      	sub	sp, #8
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4618      	mov	r0, r3
 800966a:	f7ff ff77 	bl	800955c <_ZNSt14_Function_baseC1Ev>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <_ZSteqIvJN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
    { return !static_cast<bool>(__f); }
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 f827 	bl	80096d6 <_ZNKSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEcvbEv>
 8009688:	4603      	mov	r3, r0
 800968a:	f083 0301 	eor.w	r3, r3, #1
 800968e:	b2db      	uxtb	r3, r3
 8009690:	4618      	mov	r0, r3
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEaSIRS4_EENSt9enable_ifIXsrNS5_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSD_JS3_EEEE5valueERS5_E4typeEOSB_>:
	operator=(_Functor&& __f)
 8009698:	b580      	push	{r7, lr}
 800969a:	b086      	sub	sp, #24
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 80096a2:	6838      	ldr	r0, [r7, #0]
 80096a4:	f000 f827 	bl	80096f6 <_ZSt7forwardIRFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80096a8:	4602      	mov	r2, r0
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	4611      	mov	r1, r2
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 f82b 	bl	800970c <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_>
 80096b6:	f107 0308 	add.w	r3, r7, #8
 80096ba:	6879      	ldr	r1, [r7, #4]
 80096bc:	4618      	mov	r0, r3
 80096be:	f000 f84f 	bl	8009760 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE4swapERS5_>
 80096c2:	f107 0308 	add.w	r3, r7, #8
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7ff ff7a 	bl	80095c0 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEED1Ev>
	  return *this;
 80096cc:	687b      	ldr	r3, [r7, #4]
	}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <_ZNKSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEcvbEv>:
      explicit operator bool() const noexcept
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7ff ff5c 	bl	800959e <_ZNKSt14_Function_base8_M_emptyEv>
 80096e6:	4603      	mov	r3, r0
 80096e8:	f083 0301 	eor.w	r3, r3, #1
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <_ZSt7forwardIRFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80096f6:	b480      	push	{r7}
 80096f8:	b083      	sub	sp, #12
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800970c:	b590      	push	{r4, r7, lr}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ff1f 	bl	800955c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	4618      	mov	r0, r3
 8009722:	f000 f849 	bl	80097b8 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE21_M_not_empty_functionIS5_EEbPT_>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d00f      	beq.n	800974c <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800972c:	687c      	ldr	r4, [r7, #4]
 800972e:	463b      	mov	r3, r7
 8009730:	4618      	mov	r0, r3
 8009732:	f000 f851 	bl	80097d8 <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>
 8009736:	4603      	mov	r3, r0
 8009738:	4619      	mov	r1, r3
 800973a:	4620      	mov	r0, r4
 800973c:	f000 f857 	bl	80097ee <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_>
	    _M_invoker = &_My_handler::_M_invoke;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a05      	ldr	r2, [pc, #20]	; (8009758 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_+0x4c>)
 8009744:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a04      	ldr	r2, [pc, #16]	; (800975c <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_+0x50>)
 800974a:	609a      	str	r2, [r3, #8]
      }
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4618      	mov	r0, r3
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bd90      	pop	{r4, r7, pc}
 8009756:	bf00      	nop
 8009758:	08009813 	.word	0x08009813
 800975c:	0800983d 	.word	0x0800983d

08009760 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE4swapERS5_>:
      void swap(function& __x) noexcept
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
 8009768:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	683a      	ldr	r2, [r7, #0]
 800976e:	4611      	mov	r1, r2
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f88d 	bl	8009890 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f103 0208 	add.w	r2, r3, #8
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	3308      	adds	r3, #8
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	f000 f8b6 	bl	80098f4 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f103 020c 	add.w	r2, r3, #12
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	4619      	mov	r1, r3
 8009794:	4610      	mov	r0, r2
 8009796:	f000 f8d7 	bl	8009948 <_ZSt4swapIPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>
      }
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80097a2:	b480      	push	{r7}
 80097a4:	b083      	sub	sp, #12
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE21_M_not_empty_functionIS5_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	bf14      	ite	ne
 80097c6:	2301      	movne	r3, #1
 80097c8:	2300      	moveq	r3, #0
 80097ca:	b2db      	uxtb	r3, r3
 80097cc:	4618      	mov	r0, r3
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80097ee:	b590      	push	{r4, r7, lr}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80097f8:	6838      	ldr	r0, [r7, #0]
 80097fa:	f7ff ffed 	bl	80097d8 <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>
 80097fe:	4603      	mov	r3, r0
 8009800:	4622      	mov	r2, r4
 8009802:	4619      	mov	r1, r3
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f8be 	bl	8009986 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>
 800980a:	bf00      	nop
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	bd90      	pop	{r4, r7, pc}

08009812 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E9_M_invokeERKSt9_Any_dataOS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009812:	b590      	push	{r4, r7, lr}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f8cb 	bl	80099b8 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>
 8009822:	4604      	mov	r4, r0
 8009824:	6838      	ldr	r0, [r7, #0]
 8009826:	f7ff ffbc 	bl	80097a2 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800982a:	4603      	mov	r3, r0
 800982c:	4619      	mov	r1, r3
 800982e:	4620      	mov	r0, r4
 8009830:	f000 f8d2 	bl	80099d8 <_ZSt10__invoke_rIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES8_E4typeEOS9_DpOSA_>
				     std::forward<_ArgTypes>(__args)...);
 8009834:	bf00      	nop
      }
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	bd90      	pop	{r4, r7, pc}

0800983c <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800983c:	b590      	push	{r4, r7, lr}
 800983e:	b085      	sub	sp, #20
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800984a:	79fb      	ldrb	r3, [r7, #7]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d109      	bne.n	8009864 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8009850:	68b8      	ldr	r0, [r7, #8]
 8009852:	f000 f8b1 	bl	80099b8 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>
 8009856:	4604      	mov	r4, r0
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f8d3 	bl	8009a04 <_ZNSt9_Any_data9_M_accessIPPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>
 800985e:	4603      	mov	r3, r0
 8009860:	601c      	str	r4, [r3, #0]
	    break;
 8009862:	e005      	b.n	8009870 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	461a      	mov	r2, r3
 8009868:	68b9      	ldr	r1, [r7, #8]
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 f8d6 	bl	8009a1c <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>
	return false;
 8009870:	2300      	movs	r3, #0
      }
 8009872:	4618      	mov	r0, r3
 8009874:	3714      	adds	r7, #20
 8009876:	46bd      	mov	sp, r7
 8009878:	bd90      	pop	{r4, r7, pc}

0800987a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4618      	mov	r0, r3
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff ffed 	bl	800987a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80098a0:	4602      	mov	r2, r0
 80098a2:	f107 0308 	add.w	r3, r7, #8
 80098a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098aa:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80098ae:	6838      	ldr	r0, [r7, #0]
 80098b0:	f7ff ffe3 	bl	800987a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80098b4:	4602      	mov	r2, r0
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098bc:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80098c0:	f107 0308 	add.w	r3, r7, #8
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7ff ffd8 	bl	800987a <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80098ca:	4602      	mov	r2, r0
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80098d2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7ff ffed 	bl	80098de <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8009904:	4603      	mov	r3, r0
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800990a:	6838      	ldr	r0, [r7, #0]
 800990c:	f7ff ffe7 	bl	80098de <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8009910:	4603      	mov	r3, r0
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009918:	f107 030c 	add.w	r3, r7, #12
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff ffde 	bl	80098de <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8009922:	4603      	mov	r3, r0
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	601a      	str	r2, [r3, #0]
    }
 800992a:	bf00      	nop
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 8009932:	b480      	push	{r7}
 8009934:	b083      	sub	sp, #12
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <_ZSt4swapIPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>:
    swap(_Tp& __a, _Tp& __b)
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff ffed 	bl	8009932 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>
 8009958:	4603      	mov	r3, r0
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800995e:	6838      	ldr	r0, [r7, #0]
 8009960:	f7ff ffe7 	bl	8009932 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>
 8009964:	4603      	mov	r3, r0
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800996c:	f107 030c 	add.w	r3, r7, #12
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff ffde 	bl	8009932 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>
 8009976:	4603      	mov	r3, r0
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	601a      	str	r2, [r3, #0]
    }
 800997e:	bf00      	nop
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8009986:	b590      	push	{r4, r7, lr}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	60b9      	str	r1, [r7, #8]
 8009990:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009992:	68b8      	ldr	r0, [r7, #8]
 8009994:	f7ff ff20 	bl	80097d8 <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>
 8009998:	4603      	mov	r3, r0
 800999a:	681c      	ldr	r4, [r3, #0]
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f7ff fdc7 	bl	8009530 <_ZNSt9_Any_data9_M_accessEv>
 80099a2:	4603      	mov	r3, r0
 80099a4:	4619      	mov	r1, r3
 80099a6:	2004      	movs	r0, #4
 80099a8:	f7ff fdb6 	bl	8009518 <_ZnwjPv>
 80099ac:	4603      	mov	r3, r0
 80099ae:	601c      	str	r4, [r3, #0]
 80099b0:	bf00      	nop
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd90      	pop	{r4, r7, pc}

080099b8 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f856 	bl	8009a72 <_ZNKSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERKT_v>
 80099c6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f85e 	bl	8009a8a <_ZSt11__addressofIKPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEPT_RS7_>
 80099ce:	4603      	mov	r3, r0
	}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <_ZSt10__invoke_rIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES8_E4typeEOS9_DpOSA_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80099d8:	b5b0      	push	{r4, r5, r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f85c 	bl	8009aa0 <_ZSt7forwardIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS7_E4typeE>
 80099e8:	4604      	mov	r4, r0
 80099ea:	6838      	ldr	r0, [r7, #0]
 80099ec:	f7ff fed9 	bl	80097a2 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>
 80099f0:	4603      	mov	r3, r0
 80099f2:	461a      	mov	r2, r3
 80099f4:	4621      	mov	r1, r4
 80099f6:	4628      	mov	r0, r5
 80099f8:	f000 f85d 	bl	8009ab6 <_ZSt13__invoke_implIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bdb0      	pop	{r4, r5, r7, pc}

08009a04 <_ZNSt9_Any_data9_M_accessIPPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>:
      _M_access()
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff fd8f 	bl	8009530 <_ZNSt9_Any_data9_M_accessEv>
 8009a12:	4603      	mov	r3, r0
 8009a14:	4618      	mov	r0, r3
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009a1c:	b5b0      	push	{r4, r5, r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	60f8      	str	r0, [r7, #12]
 8009a24:	60b9      	str	r1, [r7, #8]
 8009a26:	4613      	mov	r3, r2
 8009a28:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d016      	beq.n	8009a5e <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x42>
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	dc19      	bgt.n	8009a68 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d002      	beq.n	8009a3e <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x22>
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d00a      	beq.n	8009a52 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x36>
 8009a3c:	e014      	b.n	8009a68 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009a3e:	68b8      	ldr	r0, [r7, #8]
 8009a40:	f7ff ffba 	bl	80099b8 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>
 8009a44:	4604      	mov	r4, r0
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f7ff ffdc 	bl	8009a04 <_ZNSt9_Any_data9_M_accessIPPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	601c      	str	r4, [r3, #0]
	      break;
 8009a50:	e00a      	b.n	8009a68 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8009a52:	462a      	mov	r2, r5
 8009a54:	68b9      	ldr	r1, [r7, #8]
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f000 f843 	bl	8009ae2 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>
	      break;
 8009a5c:	e004      	b.n	8009a68 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009a5e:	4621      	mov	r1, r4
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 f857 	bl	8009b14 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8009a66:	bf00      	nop
	  return false;
 8009a68:	2300      	movs	r3, #0
	}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bdb0      	pop	{r4, r5, r7, pc}

08009a72 <_ZNKSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERKT_v>:
      _M_access() const
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff fd63 	bl	8009546 <_ZNKSt9_Any_data9_M_accessEv>
 8009a80:	4603      	mov	r3, r0
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <_ZSt11__addressofIKPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	4618      	mov	r0, r3
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <_ZSt7forwardIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr

08009ab6 <_ZSt13__invoke_implIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009ab6:	b590      	push	{r4, r7, lr}
 8009ab8:	b085      	sub	sp, #20
 8009aba:	af00      	add	r7, sp, #0
 8009abc:	7338      	strb	r0, [r7, #12]
 8009abe:	60b9      	str	r1, [r7, #8]
 8009ac0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009ac2:	68b8      	ldr	r0, [r7, #8]
 8009ac4:	f7ff ffec 	bl	8009aa0 <_ZSt7forwardIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS7_E4typeE>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	681c      	ldr	r4, [r3, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff fe68 	bl	80097a2 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	47a0      	blx	r4
 8009ada:	bf00      	nop
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd90      	pop	{r4, r7, pc}

08009ae2 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8009ae2:	b590      	push	{r4, r7, lr}
 8009ae4:	b085      	sub	sp, #20
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8009aee:	68b8      	ldr	r0, [r7, #8]
 8009af0:	f7ff ffbf 	bl	8009a72 <_ZNKSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERKT_v>
 8009af4:	4603      	mov	r3, r0
 8009af6:	681c      	ldr	r4, [r3, #0]
 8009af8:	68f8      	ldr	r0, [r7, #12]
 8009afa:	f7ff fd19 	bl	8009530 <_ZNSt9_Any_data9_M_accessEv>
 8009afe:	4603      	mov	r3, r0
 8009b00:	4619      	mov	r1, r3
 8009b02:	2004      	movs	r0, #4
 8009b04:	f7ff fd08 	bl	8009518 <_ZnwjPv>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	601c      	str	r4, [r3, #0]
	}
 8009b0c:	bf00      	nop
 8009b0e:	3714      	adds	r7, #20
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd90      	pop	{r4, r7, pc}

08009b14 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 f804 	bl	8009b2c <_ZNSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>
	}
 8009b24:	bf00      	nop
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <_ZNSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>:
      _M_access()
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b082      	sub	sp, #8
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f7ff fcfb 	bl	8009530 <_ZNSt9_Any_data9_M_accessEv>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <_Z41__static_initialization_and_destruction_0ii>:



/* --Bind the interrupt manager to global interrupt handler. */

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { Platform::BSP::InterruptManager::resolve(GPIO_Pin); }
 8009b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d115      	bne.n	8009b80 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d110      	bne.n	8009b80 <_Z41__static_initialization_and_destruction_0ii+0x3c>
DigitalInterrupt::InterruptHandler InterruptManager::handler[static_cast<uint16_t>(NUMOFHANDLER::NHANDLER)] = {nullptr};
 8009b5e:	4c13      	ldr	r4, [pc, #76]	; (8009bac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8009b60:	260f      	movs	r6, #15
 8009b62:	2100      	movs	r1, #0
 8009b64:	4620      	mov	r0, r4
 8009b66:	f7ff fd6c 	bl	8009642 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1EDn>
 8009b6a:	f104 0510 	add.w	r5, r4, #16
 8009b6e:	1e74      	subs	r4, r6, #1
 8009b70:	2c00      	cmp	r4, #0
 8009b72:	db05      	blt.n	8009b80 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 8009b74:	4628      	mov	r0, r5
 8009b76:	f7ff fd72 	bl	800965e <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1Ev>
 8009b7a:	3510      	adds	r5, #16
 8009b7c:	3c01      	subs	r4, #1
 8009b7e:	e7f7      	b.n	8009b70 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10d      	bne.n	8009ba2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d108      	bne.n	8009ba2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8009b90:	4c07      	ldr	r4, [pc, #28]	; (8009bb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8009b92:	4b06      	ldr	r3, [pc, #24]	; (8009bac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8009b94:	429c      	cmp	r4, r3
 8009b96:	d004      	beq.n	8009ba2 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8009b98:	3c10      	subs	r4, #16
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f7ff fd10 	bl	80095c0 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEED1Ev>
 8009ba0:	e7f7      	b.n	8009b92 <_Z41__static_initialization_and_destruction_0ii+0x4e>
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { Platform::BSP::InterruptManager::resolve(GPIO_Pin); }
 8009ba2:	bf00      	nop
 8009ba4:	370c      	adds	r7, #12
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009baa:	bf00      	nop
 8009bac:	200003f4 	.word	0x200003f4
 8009bb0:	200004f4 	.word	0x200004f4

08009bb4 <_GLOBAL__sub_I__ZN8Platform3BSP16InterruptManager7handlerE>:
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	f7ff ffc1 	bl	8009b44 <_Z41__static_initialization_and_destruction_0ii>
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <_GLOBAL__sub_D__ZN8Platform3BSP16InterruptManager7handlerE>:
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f7ff ffb9 	bl	8009b44 <_Z41__static_initialization_and_destruction_0ii>
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <_ZN8Platform3BSP3PinC1ENS1_7BitMaskE>:
        Pin14  = GPIO_PIN_14,
        Pin15  = GPIO_PIN_15,
        PinAll = GPIO_PIN_All
    };

    explicit Pin(BitMask mask):_mask(mask) {}
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	807b      	strh	r3, [r7, #2]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	887a      	ldrh	r2, [r7, #2]
 8009be4:	801a      	strh	r2, [r3, #0]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	4618      	mov	r0, r3
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <_ZN8Platform3BSP4PortC1ENS1_6SelectE>:

private:
    STM32HalType _type;
};

inline Port::Port(Select select) {
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	807b      	strh	r3, [r7, #2]
    /* --Just switch on the port; use global constants. */
    switch (select) {
 8009c00:	887b      	ldrh	r3, [r7, #2]
 8009c02:	2b07      	cmp	r3, #7
 8009c04:	d833      	bhi.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
 8009c06:	a201      	add	r2, pc, #4	; (adr r2, 8009c0c <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x18>)
 8009c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c0c:	08009c2d 	.word	0x08009c2d
 8009c10:	08009c37 	.word	0x08009c37
 8009c14:	08009c3f 	.word	0x08009c3f
 8009c18:	08009c47 	.word	0x08009c47
 8009c1c:	08009c4f 	.word	0x08009c4f
 8009c20:	08009c57 	.word	0x08009c57
 8009c24:	08009c5f 	.word	0x08009c5f
 8009c28:	08009c67 	.word	0x08009c67
    case Select::PortA : _type=GPIOA; break;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	e01b      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortB : _type=GPIOB; break;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a10      	ldr	r2, [pc, #64]	; (8009c7c <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x88>)
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	e017      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortC : _type=GPIOC; break;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a0f      	ldr	r2, [pc, #60]	; (8009c80 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x8c>)
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e013      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortD : _type=GPIOD; break;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a0e      	ldr	r2, [pc, #56]	; (8009c84 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x90>)
 8009c4a:	601a      	str	r2, [r3, #0]
 8009c4c:	e00f      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortE : _type=GPIOE; break;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a0d      	ldr	r2, [pc, #52]	; (8009c88 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x94>)
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	e00b      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortF : _type=GPIOF; break;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a0c      	ldr	r2, [pc, #48]	; (8009c8c <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x98>)
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	e007      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortG : _type=GPIOG; break;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a0b      	ldr	r2, [pc, #44]	; (8009c90 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x9c>)
 8009c62:	601a      	str	r2, [r3, #0]
 8009c64:	e003      	b.n	8009c6e <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortH : _type=GPIOH; break;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a0a      	ldr	r2, [pc, #40]	; (8009c94 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0xa0>)
 8009c6a:	601a      	str	r2, [r3, #0]
 8009c6c:	bf00      	nop
    default:;
    }
}
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	48000400 	.word	0x48000400
 8009c80:	48000800 	.word	0x48000800
 8009c84:	48000c00 	.word	0x48000c00
 8009c88:	48001000 	.word	0x48001000
 8009c8c:	48001400 	.word	0x48001400
 8009c90:	48001800 	.word	0x48001800
 8009c94:	48001c00 	.word	0x48001c00

08009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && !_PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
	explicit constexpr pair(_U1&& __x, _U2&& __y)
 8009c98:	b590      	push	{r4, r7, lr}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8009ca4:	68fc      	ldr	r4, [r7, #12]
 8009ca6:	68b8      	ldr	r0, [r7, #8]
 8009ca8:	f000 f816 	bl	8009cd8 <_ZSt7forwardIN8Platform3BSP4Port6SelectEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009cac:	4603      	mov	r3, r0
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7ff ff9e 	bl	8009bf4 <_ZN8Platform3BSP4PortC1ENS1_6SelectE>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	1d1c      	adds	r4, r3, #4
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f816 	bl	8009cee <_ZSt7forwardIN8Platform3BSP3Pin7BitMaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	881b      	ldrh	r3, [r3, #0]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff ff83 	bl	8009bd4 <_ZN8Platform3BSP3PinC1ENS1_7BitMaskE>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd90      	pop	{r4, r7, pc}

08009cd8 <_ZSt7forwardIN8Platform3BSP4Port6SelectEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <_ZSt7forwardIN8Platform3BSP3Pin7BitMaskEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cee:	b480      	push	{r7}
 8009cf0:	b083      	sub	sp, #12
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <_ZNK8Platform3BSP9TermColor6setColENS1_5ColorE>:

    /**
     * Sets font color
     * @param [in]  c  \ref Color value of color
     */
    void setCol(Color c) const
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	70fb      	strb	r3, [r7, #3]
    {
#ifdef _GLIBCXX_IOSTREAM
     // std::cout << std::flush;
      std::cout << colors[ c ];
#else
      fputs(colors[ c ], stdout);
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d18:	4b05      	ldr	r3, [pc, #20]	; (8009d30 <_ZNK8Platform3BSP9TermColor6setColENS1_5ColorE+0x2c>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	4610      	mov	r0, r2
 8009d22:	f006 ffa3 	bl	8010c6c <fputs>
#endif
    }
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	20000040 	.word	0x20000040

08009d34 <__tcf_0>:
     * \brief gets singleton instances of TermColor object.
     * \return reference to singleton
     */
    static TermColor & getInstance()
    {
        static TermColor inst;
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	4801      	ldr	r0, [pc, #4]	; (8009d40 <__tcf_0+0xc>)
 8009d3a:	f000 f879 	bl	8009e30 <_ZN8Platform3BSP9TermColorD1Ev>
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	200004f4 	.word	0x200004f4

08009d44 <_ZN8Platform3BSP9TermColor11getInstanceEv>:
    static TermColor & getInstance()
 8009d44:	b580      	push	{r7, lr}
 8009d46:	af00      	add	r7, sp, #0
        static TermColor inst;
 8009d48:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x50>)
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	f3bf 8f5b 	dmb	ish
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f003 0301 	and.w	r3, r3, #1
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	bf0c      	ite	eq
 8009d5a:	2301      	moveq	r3, #1
 8009d5c:	2300      	movne	r3, #0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d013      	beq.n	8009d8c <_ZN8Platform3BSP9TermColor11getInstanceEv+0x48>
 8009d64:	480b      	ldr	r0, [pc, #44]	; (8009d94 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x50>)
 8009d66:	f006 feb1 	bl	8010acc <__cxa_guard_acquire>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d008      	beq.n	8009d8c <_ZN8Platform3BSP9TermColor11getInstanceEv+0x48>
 8009d7a:	4807      	ldr	r0, [pc, #28]	; (8009d98 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x54>)
 8009d7c:	f000 f810 	bl	8009da0 <_ZN8Platform3BSP9TermColorC1Ev>
 8009d80:	4806      	ldr	r0, [pc, #24]	; (8009d9c <_ZN8Platform3BSP9TermColor11getInstanceEv+0x58>)
 8009d82:	f006 feee 	bl	8010b62 <atexit>
 8009d86:	4803      	ldr	r0, [pc, #12]	; (8009d94 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x50>)
 8009d88:	f006 feac 	bl	8010ae4 <__cxa_guard_release>
        return  inst;
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x54>)
    };
 8009d8e:	4618      	mov	r0, r3
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000584 	.word	0x20000584
 8009d98:	200004f4 	.word	0x200004f4
 8009d9c:	08009d35 	.word	0x08009d35

08009da0 <_ZN8Platform3BSP9TermColorC1Ev>:
        return old;
    }

   // static const char endl = '\n';   ///< line feed character
 private:
    TermColor()
 8009da0:	b5b0      	push	{r4, r5, r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
     { m_flags[0] = '\0';};
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a1f      	ldr	r2, [pc, #124]	; (8009e28 <_ZN8Platform3BSP9TermColorC1Ev+0x88>)
 8009dac:	4618      	mov	r0, r3
 8009dae:	4611      	mov	r1, r2
 8009db0:	2344      	movs	r3, #68	; 0x44
 8009db2:	461a      	mov	r2, r3
 8009db4:	f006 ff9a 	bl	8010cec <memcpy>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a1c      	ldr	r2, [pc, #112]	; (8009e2c <_ZN8Platform3BSP9TermColorC1Ev+0x8c>)
 8009dbc:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8009dc0:	4615      	mov	r5, r2
 8009dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009dce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4618      	mov	r0, r3
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bdb0      	pop	{r4, r5, r7, pc}
 8009e28:	080129f0 	.word	0x080129f0
 8009e2c:	08012a34 	.word	0x08012a34

08009e30 <_ZN8Platform3BSP9TermColorD1Ev>:
    ~TermColor() {setCol(stdcol);}
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b082      	sub	sp, #8
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	2108      	movs	r1, #8
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f7ff ff62 	bl	8009d04 <_ZNK8Platform3BSP9TermColor6setColENS1_5ColorE>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4618      	mov	r0, r3
 8009e44:	3708      	adds	r7, #8
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <_Z41__static_initialization_and_destruction_0ii>:
       setFlags();
       return *this;
   }

}
}
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d109      	bne.n	8009e70 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d104      	bne.n	8009e70 <_Z41__static_initialization_and_destruction_0ii+0x24>
TermColor& cout = TermColor::getInstance();  ///< reference to TermColor object, can be used for C++ like output
 8009e66:	f7ff ff6d 	bl	8009d44 <_ZN8Platform3BSP9TermColor11getInstanceEv>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	4a02      	ldr	r2, [pc, #8]	; (8009e78 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8009e6e:	6013      	str	r3, [r2, #0]
}
 8009e70:	bf00      	nop
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000588 	.word	0x20000588

08009e7c <_GLOBAL__sub_I__ZN8Platform3BSP4coutE>:
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009e84:	2001      	movs	r0, #1
 8009e86:	f7ff ffe1 	bl	8009e4c <_Z41__static_initialization_and_destruction_0ii>
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f103 0208 	add.w	r2, r3, #8
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f103 0208 	add.w	r2, r3, #8
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f103 0208 	add.w	r2, r3, #8
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009eda:	bf00      	nop
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	b085      	sub	sp, #20
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
 8009eee:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	689a      	ldr	r2, [r3, #8]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	687a      	ldr	r2, [r7, #4]
 8009f16:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	1c5a      	adds	r2, r3, #1
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	601a      	str	r2, [r3, #0]
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr

08009f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8009f2e:	b480      	push	{r7}
 8009f30:	b085      	sub	sp, #20
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
 8009f36:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f44:	d103      	bne.n	8009f4e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	60fb      	str	r3, [r7, #12]
 8009f4c:	e00c      	b.n	8009f68 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	3308      	adds	r3, #8
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e002      	b.n	8009f5c <vListInsert+0x2e>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d2f6      	bcs.n	8009f56 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	683a      	ldr	r2, [r7, #0]
 8009f76:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	68fa      	ldr	r2, [r7, #12]
 8009f7c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	1c5a      	adds	r2, r3, #1
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	601a      	str	r2, [r3, #0]
}
 8009f94:	bf00      	nop
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6892      	ldr	r2, [r2, #8]
 8009fb6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	6852      	ldr	r2, [r2, #4]
 8009fc0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d103      	bne.n	8009fd4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	1e5a      	subs	r2, r3, #1
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3714      	adds	r7, #20
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
 8009ffc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8009ffe:	2301      	movs	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <xQueueGenericReset+0x22>
 800a00c:	f44f 7188 	mov.w	r1, #272	; 0x110
 800a010:	4839      	ldr	r0, [pc, #228]	; (800a0f8 <xQueueGenericReset+0x104>)
 800a012:	f002 fffb 	bl	800d00c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d05d      	beq.n	800a0d8 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800a020:	2b00      	cmp	r3, #0
 800a022:	d059      	beq.n	800a0d8 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a02c:	2100      	movs	r1, #0
 800a02e:	fba3 2302 	umull	r2, r3, r3, r2
 800a032:	2b00      	cmp	r3, #0
 800a034:	d000      	beq.n	800a038 <xQueueGenericReset+0x44>
 800a036:	2101      	movs	r1, #1
 800a038:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d14c      	bne.n	800a0d8 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800a03e:	f001 ff65 	bl	800bf0c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	681a      	ldr	r2, [r3, #0]
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04a:	68b9      	ldr	r1, [r7, #8]
 800a04c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a04e:	fb01 f303 	mul.w	r3, r1, r3
 800a052:	441a      	add	r2, r3
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	2200      	movs	r2, #0
 800a05c:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a06e:	3b01      	subs	r3, #1
 800a070:	68b9      	ldr	r1, [r7, #8]
 800a072:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a074:	fb01 f303 	mul.w	r3, r1, r3
 800a078:	441a      	add	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	22ff      	movs	r2, #255	; 0xff
 800a082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	22ff      	movs	r2, #255	; 0xff
 800a08a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d114      	bne.n	800a0be <xQueueGenericReset+0xca>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	691b      	ldr	r3, [r3, #16]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01a      	beq.n	800a0d2 <xQueueGenericReset+0xde>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	3310      	adds	r3, #16
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f001 f8f9 	bl	800b298 <xTaskRemoveFromEventList>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d012      	beq.n	800a0d2 <xQueueGenericReset+0xde>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800a0ac:	4b13      	ldr	r3, [pc, #76]	; (800a0fc <xQueueGenericReset+0x108>)
 800a0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	e009      	b.n	800a0d2 <xQueueGenericReset+0xde>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	3310      	adds	r3, #16
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff fee2 	bl	8009e8c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	3324      	adds	r3, #36	; 0x24
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f7ff fedd 	bl	8009e8c <vListInitialise>
        }
        taskEXIT_CRITICAL();
 800a0d2:	f001 ff45 	bl	800bf60 <vPortExitCritical>
 800a0d6:	e001      	b.n	800a0dc <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d104      	bne.n	800a0ec <xQueueGenericReset+0xf8>
 800a0e2:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800a0e6:	4804      	ldr	r0, [pc, #16]	; (800a0f8 <xQueueGenericReset+0x104>)
 800a0e8:	f002 ff90 	bl	800d00c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
 800a0f6:	bf00      	nop
 800a0f8:	08012a70 	.word	0x08012a70
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800a100:	b580      	push	{r7, lr}
 800a102:	b08a      	sub	sp, #40	; 0x28
 800a104:	af02      	add	r7, sp, #8
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	4613      	mov	r3, r2
 800a10c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d02e      	beq.n	800a176 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800a118:	2100      	movs	r1, #0
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	fba3 2302 	umull	r2, r3, r3, r2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d000      	beq.n	800a128 <xQueueGenericCreate+0x28>
 800a126:	2101      	movs	r1, #1
 800a128:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d123      	bne.n	800a176 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800a136:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800a13a:	d81c      	bhi.n	800a176 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	fb02 f303 	mul.w	r3, r2, r3
 800a144:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	3350      	adds	r3, #80	; 0x50
 800a14a:	4618      	mov	r0, r3
 800a14c:	f002 f830 	bl	800c1b0 <pvPortMalloc>
 800a150:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800a152:	69fb      	ldr	r3, [r7, #28]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d016      	beq.n	800a186 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	3350      	adds	r3, #80	; 0x50
 800a160:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a162:	79fa      	ldrb	r2, [r7, #7]
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	9300      	str	r3, [sp, #0]
 800a168:	4613      	mov	r3, r2
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f000 f810 	bl	800a194 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800a174:	e007      	b.n	800a186 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d104      	bne.n	800a186 <xQueueGenericCreate+0x86>
 800a17c:	f240 11c5 	movw	r1, #453	; 0x1c5
 800a180:	4803      	ldr	r0, [pc, #12]	; (800a190 <xQueueGenericCreate+0x90>)
 800a182:	f002 ff43 	bl	800d00c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800a186:	69fb      	ldr	r3, [r7, #28]
    }
 800a188:	4618      	mov	r0, r3
 800a18a:	3720      	adds	r7, #32
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	08012a70 	.word	0x08012a70

0800a194 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b084      	sub	sp, #16
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
 800a1a0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d103      	bne.n	800a1b0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e002      	b.n	800a1b6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1b0:	69bb      	ldr	r3, [r7, #24]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800a1bc:	69bb      	ldr	r3, [r7, #24]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1c2:	2101      	movs	r1, #1
 800a1c4:	69b8      	ldr	r0, [r7, #24]
 800a1c6:	f7ff ff15 	bl	8009ff4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	78fa      	ldrb	r2, [r7, #3]
 800a1ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800a1d2:	bf00      	nop
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b08a      	sub	sp, #40	; 0x28
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d104      	bne.n	800a200 <xQueueReceive+0x24>
 800a1f6:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800a1fa:	485e      	ldr	r0, [pc, #376]	; (800a374 <xQueueReceive+0x198>)
 800a1fc:	f002 ff06 	bl	800d00c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d103      	bne.n	800a20e <xQueueReceive+0x32>
 800a206:	6a3b      	ldr	r3, [r7, #32]
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <xQueueReceive+0x36>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueReceive+0x38>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d104      	bne.n	800a222 <xQueueReceive+0x46>
 800a218:	f240 5154 	movw	r1, #1364	; 0x554
 800a21c:	4855      	ldr	r0, [pc, #340]	; (800a374 <xQueueReceive+0x198>)
 800a21e:	f002 fef5 	bl	800d00c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a222:	f001 fa39 	bl	800b698 <xTaskGetSchedulerState>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d102      	bne.n	800a232 <xQueueReceive+0x56>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d101      	bne.n	800a236 <xQueueReceive+0x5a>
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <xQueueReceive+0x5c>
 800a236:	2300      	movs	r3, #0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d104      	bne.n	800a246 <xQueueReceive+0x6a>
 800a23c:	f240 5159 	movw	r1, #1369	; 0x559
 800a240:	484c      	ldr	r0, [pc, #304]	; (800a374 <xQueueReceive+0x198>)
 800a242:	f002 fee3 	bl	800d00c <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800a246:	f001 fe61 	bl	800bf0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a24e:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a250:	69fb      	ldr	r3, [r7, #28]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d01f      	beq.n	800a296 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a256:	68b9      	ldr	r1, [r7, #8]
 800a258:	6a38      	ldr	r0, [r7, #32]
 800a25a:	f000 f88f 	bl	800a37c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	1e5a      	subs	r2, r3, #1
 800a262:	6a3b      	ldr	r3, [r7, #32]
 800a264:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00f      	beq.n	800a28e <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	3310      	adds	r3, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f001 f810 	bl	800b298 <xTaskRemoveFromEventList>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d007      	beq.n	800a28e <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800a27e:	4b3e      	ldr	r3, [pc, #248]	; (800a378 <xQueueReceive+0x19c>)
 800a280:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a284:	601a      	str	r2, [r3, #0]
 800a286:	f3bf 8f4f 	dsb	sy
 800a28a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800a28e:	f001 fe67 	bl	800bf60 <vPortExitCritical>
                return pdPASS;
 800a292:	2301      	movs	r3, #1
 800a294:	e069      	b.n	800a36a <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800a29c:	f001 fe60 	bl	800bf60 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	e062      	b.n	800a36a <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d106      	bne.n	800a2b8 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800a2aa:	f107 0314 	add.w	r3, r7, #20
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f001 f8c2 	bl	800b438 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800a2b8:	f001 fe52 	bl	800bf60 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800a2bc:	f000 fca8 	bl	800ac10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800a2c0:	f001 fe24 	bl	800bf0c <vPortEnterCritical>
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2ca:	b25b      	sxtb	r3, r3
 800a2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d0:	d103      	bne.n	800a2da <xQueueReceive+0xfe>
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2da:	6a3b      	ldr	r3, [r7, #32]
 800a2dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2e0:	b25b      	sxtb	r3, r3
 800a2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e6:	d103      	bne.n	800a2f0 <xQueueReceive+0x114>
 800a2e8:	6a3b      	ldr	r3, [r7, #32]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2f0:	f001 fe36 	bl	800bf60 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2f4:	1d3a      	adds	r2, r7, #4
 800a2f6:	f107 0314 	add.w	r3, r7, #20
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 f8b1 	bl	800b464 <xTaskCheckForTimeOut>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d123      	bne.n	800a350 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a308:	6a38      	ldr	r0, [r7, #32]
 800a30a:	f000 f8af 	bl	800a46c <prvIsQueueEmpty>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d017      	beq.n	800a344 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	3324      	adds	r3, #36	; 0x24
 800a318:	687a      	ldr	r2, [r7, #4]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 ff59 	bl	800b1d4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800a322:	6a38      	ldr	r0, [r7, #32]
 800a324:	f000 f850 	bl	800a3c8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800a328:	f000 fc80 	bl	800ac2c <xTaskResumeAll>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d189      	bne.n	800a246 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800a332:	4b11      	ldr	r3, [pc, #68]	; (800a378 <xQueueReceive+0x19c>)
 800a334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	f3bf 8f6f 	isb	sy
 800a342:	e780      	b.n	800a246 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800a344:	6a38      	ldr	r0, [r7, #32]
 800a346:	f000 f83f 	bl	800a3c8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800a34a:	f000 fc6f 	bl	800ac2c <xTaskResumeAll>
 800a34e:	e77a      	b.n	800a246 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800a350:	6a38      	ldr	r0, [r7, #32]
 800a352:	f000 f839 	bl	800a3c8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800a356:	f000 fc69 	bl	800ac2c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a35a:	6a38      	ldr	r0, [r7, #32]
 800a35c:	f000 f886 	bl	800a46c <prvIsQueueEmpty>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	f43f af6f 	beq.w	800a246 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800a368:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3728      	adds	r7, #40	; 0x28
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	08012a70 	.word	0x08012a70
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d018      	beq.n	800a3c0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68da      	ldr	r2, [r3, #12]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	441a      	add	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	68da      	ldr	r2, [r3, #12]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d303      	bcc.n	800a3b0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	68d9      	ldr	r1, [r3, #12]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	6838      	ldr	r0, [r7, #0]
 800a3bc:	f006 fc96 	bl	8010cec <memcpy>
    }
}
 800a3c0:	bf00      	nop
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800a3d0:	f001 fd9c 	bl	800bf0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3da:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3dc:	e011      	b.n	800a402 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d012      	beq.n	800a40c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3324      	adds	r3, #36	; 0x24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 ff54 	bl	800b298 <xTaskRemoveFromEventList>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800a3f6:	f001 f891 	bl	800b51c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800a402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dce9      	bgt.n	800a3de <prvUnlockQueue+0x16>
 800a40a:	e000      	b.n	800a40e <prvUnlockQueue+0x46>
                        break;
 800a40c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	22ff      	movs	r2, #255	; 0xff
 800a412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800a416:	f001 fda3 	bl	800bf60 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800a41a:	f001 fd77 	bl	800bf0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a424:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a426:	e011      	b.n	800a44c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d012      	beq.n	800a456 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3310      	adds	r3, #16
 800a434:	4618      	mov	r0, r3
 800a436:	f000 ff2f 	bl	800b298 <xTaskRemoveFromEventList>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800a440:	f001 f86c 	bl	800b51c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	3b01      	subs	r3, #1
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800a44c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a450:	2b00      	cmp	r3, #0
 800a452:	dce9      	bgt.n	800a428 <prvUnlockQueue+0x60>
 800a454:	e000      	b.n	800a458 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800a456:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	22ff      	movs	r2, #255	; 0xff
 800a45c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800a460:	f001 fd7e 	bl	800bf60 <vPortExitCritical>
}
 800a464:	bf00      	nop
 800a466:	3710      	adds	r7, #16
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800a474:	f001 fd4a 	bl	800bf0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d102      	bne.n	800a486 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800a480:	2301      	movs	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	e001      	b.n	800a48a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800a486:	2300      	movs	r3, #0
 800a488:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800a48a:	f001 fd69 	bl	800bf60 <vPortExitCritical>

    return xReturn;
 800a48e:	68fb      	ldr	r3, [r7, #12]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d104      	bne.n	800a4b2 <vQueueAddToRegistry+0x1a>
 800a4a8:	f640 21c7 	movw	r1, #2759	; 0xac7
 800a4ac:	481c      	ldr	r0, [pc, #112]	; (800a520 <vQueueAddToRegistry+0x88>)
 800a4ae:	f002 fdad 	bl	800d00c <vAssertCalled>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d024      	beq.n	800a506 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	e01e      	b.n	800a500 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800a4c2:	4a18      	ldr	r2, [pc, #96]	; (800a524 <vQueueAddToRegistry+0x8c>)
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	4413      	add	r3, r2
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	687a      	ldr	r2, [r7, #4]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d105      	bne.n	800a4de <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	00db      	lsls	r3, r3, #3
 800a4d6:	4a13      	ldr	r2, [pc, #76]	; (800a524 <vQueueAddToRegistry+0x8c>)
 800a4d8:	4413      	add	r3, r2
 800a4da:	60bb      	str	r3, [r7, #8]
                    break;
 800a4dc:	e013      	b.n	800a506 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d10a      	bne.n	800a4fa <vQueueAddToRegistry+0x62>
 800a4e4:	4a0f      	ldr	r2, [pc, #60]	; (800a524 <vQueueAddToRegistry+0x8c>)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	00db      	lsls	r3, r3, #3
 800a4f4:	4a0b      	ldr	r2, [pc, #44]	; (800a524 <vQueueAddToRegistry+0x8c>)
 800a4f6:	4413      	add	r3, r2
 800a4f8:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b09      	cmp	r3, #9
 800a504:	d9dd      	bls.n	800a4c2 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	08012a70 	.word	0x08012a70
 800a524:	2000058c 	.word	0x2000058c

0800a528 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b086      	sub	sp, #24
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800a538:	f001 fce8 	bl	800bf0c <vPortEnterCritical>
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a542:	b25b      	sxtb	r3, r3
 800a544:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a548:	d103      	bne.n	800a552 <vQueueWaitForMessageRestricted+0x2a>
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a558:	b25b      	sxtb	r3, r3
 800a55a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55e:	d103      	bne.n	800a568 <vQueueWaitForMessageRestricted+0x40>
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2200      	movs	r2, #0
 800a564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a568:	f001 fcfa 	bl	800bf60 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a570:	2b00      	cmp	r3, #0
 800a572:	d106      	bne.n	800a582 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	3324      	adds	r3, #36	; 0x24
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	4618      	mov	r0, r3
 800a57e:	f000 fe49 	bl	800b214 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800a582:	6978      	ldr	r0, [r7, #20]
 800a584:	f7ff ff20 	bl	800a3c8 <prvUnlockQueue>
    }
 800a588:	bf00      	nop
 800a58a:	3718      	adds	r7, #24
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800a590:	b580      	push	{r7, lr}
 800a592:	b08c      	sub	sp, #48	; 0x30
 800a594:	af04      	add	r7, sp, #16
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	603b      	str	r3, [r7, #0]
 800a59c:	4613      	mov	r3, r2
 800a59e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a5a0:	88fb      	ldrh	r3, [r7, #6]
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f001 fe03 	bl	800c1b0 <pvPortMalloc>
 800a5aa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00e      	beq.n	800a5d0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a5b2:	2064      	movs	r0, #100	; 0x64
 800a5b4:	f001 fdfc 	bl	800c1b0 <pvPortMalloc>
 800a5b8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d003      	beq.n	800a5c8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	631a      	str	r2, [r3, #48]	; 0x30
 800a5c6:	e005      	b.n	800a5d4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800a5c8:	6978      	ldr	r0, [r7, #20]
 800a5ca:	f001 fe03 	bl	800c1d4 <vPortFree>
 800a5ce:	e001      	b.n	800a5d4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d013      	beq.n	800a602 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5da:	88fa      	ldrh	r2, [r7, #6]
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9303      	str	r3, [sp, #12]
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	9302      	str	r3, [sp, #8]
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	9301      	str	r3, [sp, #4]
 800a5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ea:	9300      	str	r3, [sp, #0]
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	68f8      	ldr	r0, [r7, #12]
 800a5f2:	f000 f80f 	bl	800a614 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800a5f6:	69f8      	ldr	r0, [r7, #28]
 800a5f8:	f000 f8b0 	bl	800a75c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	61bb      	str	r3, [r7, #24]
 800a600:	e002      	b.n	800a608 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a602:	f04f 33ff 	mov.w	r3, #4294967295
 800a606:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800a608:	69bb      	ldr	r3, [r7, #24]
    }
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
	...

0800a614 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	461a      	mov	r2, r3
 800a62c:	21a5      	movs	r1, #165	; 0xa5
 800a62e:	f006 fb6b 	bl	8010d08 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a63c:	3b01      	subs	r3, #1
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f023 0307 	bic.w	r3, r3, #7
 800a64a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	f003 0307 	and.w	r3, r3, #7
 800a652:	2b00      	cmp	r3, #0
 800a654:	d004      	beq.n	800a660 <prvInitialiseNewTask+0x4c>
 800a656:	f240 315f 	movw	r1, #863	; 0x35f
 800a65a:	483f      	ldr	r0, [pc, #252]	; (800a758 <prvInitialiseNewTask+0x144>)
 800a65c:	f002 fcd6 	bl	800d00c <vAssertCalled>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 800a660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a662:	693a      	ldr	r2, [r7, #16]
 800a664:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d01f      	beq.n	800a6ac <prvInitialiseNewTask+0x98>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a66c:	2300      	movs	r3, #0
 800a66e:	617b      	str	r3, [r7, #20]
 800a670:	e012      	b.n	800a698 <prvInitialiseNewTask+0x84>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	4413      	add	r3, r2
 800a678:	7819      	ldrb	r1, [r3, #0]
 800a67a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	4413      	add	r3, r2
 800a680:	3334      	adds	r3, #52	; 0x34
 800a682:	460a      	mov	r2, r1
 800a684:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800a686:	68ba      	ldr	r2, [r7, #8]
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	4413      	add	r3, r2
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d006      	beq.n	800a6a0 <prvInitialiseNewTask+0x8c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	3301      	adds	r3, #1
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	2b0b      	cmp	r3, #11
 800a69c:	d9e9      	bls.n	800a672 <prvInitialiseNewTask+0x5e>
 800a69e:	e000      	b.n	800a6a2 <prvInitialiseNewTask+0x8e>
            {
                break;
 800a6a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a6aa:	e003      	b.n	800a6b4 <prvInitialiseNewTask+0xa0>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800a6b4:	6a3b      	ldr	r3, [r7, #32]
 800a6b6:	2b06      	cmp	r3, #6
 800a6b8:	d904      	bls.n	800a6c4 <prvInitialiseNewTask+0xb0>
 800a6ba:	f240 3196 	movw	r1, #918	; 0x396
 800a6be:	4826      	ldr	r0, [pc, #152]	; (800a758 <prvInitialiseNewTask+0x144>)
 800a6c0:	f002 fca4 	bl	800d00c <vAssertCalled>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	2b06      	cmp	r3, #6
 800a6c8:	d901      	bls.n	800a6ce <prvInitialiseNewTask+0xba>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6ca:	2306      	movs	r3, #6
 800a6cc:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800a6ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d0:	6a3a      	ldr	r2, [r7, #32]
 800a6d2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	6a3a      	ldr	r2, [r7, #32]
 800a6d8:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800a6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6dc:	2200      	movs	r2, #0
 800a6de:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7ff fbf1 	bl	8009ecc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	3318      	adds	r3, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7ff fbec 	bl	8009ecc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6f8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	f1c3 0207 	rsb	r2, r3, #7
 800a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a702:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a708:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 800a70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a70c:	2200      	movs	r2, #0
 800a70e:	655a      	str	r2, [r3, #84]	; 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 800a710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a712:	2200      	movs	r2, #0
 800a714:	659a      	str	r2, [r3, #88]	; 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	335c      	adds	r3, #92	; 0x5c
 800a71a:	2204      	movs	r2, #4
 800a71c:	2100      	movs	r1, #0
 800a71e:	4618      	mov	r0, r3
 800a720:	f006 faf2 	bl	8010d08 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	3360      	adds	r3, #96	; 0x60
 800a728:	2201      	movs	r2, #1
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f006 faeb 	bl	8010d08 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	68f9      	ldr	r1, [r7, #12]
 800a736:	6938      	ldr	r0, [r7, #16]
 800a738:	f001 fac8 	bl	800bccc <pxPortInitialiseStack>
 800a73c:	4602      	mov	r2, r0
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <prvInitialiseNewTask+0x13a>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a74c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a74e:	bf00      	nop
 800a750:	3718      	adds	r7, #24
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	08012a8c 	.word	0x08012a8c

0800a75c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b084      	sub	sp, #16
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800a764:	f001 fbd2 	bl	800bf0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800a768:	4b40      	ldr	r3, [pc, #256]	; (800a86c <prvAddNewTaskToReadyList+0x110>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	3301      	adds	r3, #1
 800a76e:	4a3f      	ldr	r2, [pc, #252]	; (800a86c <prvAddNewTaskToReadyList+0x110>)
 800a770:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800a772:	4b3f      	ldr	r3, [pc, #252]	; (800a870 <prvAddNewTaskToReadyList+0x114>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d109      	bne.n	800a78e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800a77a:	4a3d      	ldr	r2, [pc, #244]	; (800a870 <prvAddNewTaskToReadyList+0x114>)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a780:	4b3a      	ldr	r3, [pc, #232]	; (800a86c <prvAddNewTaskToReadyList+0x110>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b01      	cmp	r3, #1
 800a786:	d110      	bne.n	800a7aa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800a788:	f000 fedc 	bl	800b544 <prvInitialiseTaskLists>
 800a78c:	e00d      	b.n	800a7aa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800a78e:	4b39      	ldr	r3, [pc, #228]	; (800a874 <prvAddNewTaskToReadyList+0x118>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a796:	4b36      	ldr	r3, [pc, #216]	; (800a870 <prvAddNewTaskToReadyList+0x114>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d802      	bhi.n	800a7aa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800a7a4:	4a32      	ldr	r2, [pc, #200]	; (800a870 <prvAddNewTaskToReadyList+0x114>)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800a7aa:	4b33      	ldr	r3, [pc, #204]	; (800a878 <prvAddNewTaskToReadyList+0x11c>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	4a31      	ldr	r2, [pc, #196]	; (800a878 <prvAddNewTaskToReadyList+0x11c>)
 800a7b2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a7b4:	4b30      	ldr	r3, [pc, #192]	; (800a878 <prvAddNewTaskToReadyList+0x11c>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	409a      	lsls	r2, r3
 800a7c4:	4b2d      	ldr	r3, [pc, #180]	; (800a87c <prvAddNewTaskToReadyList+0x120>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	4a2c      	ldr	r2, [pc, #176]	; (800a87c <prvAddNewTaskToReadyList+0x120>)
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d2:	492b      	ldr	r1, [pc, #172]	; (800a880 <prvAddNewTaskToReadyList+0x124>)
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	4413      	add	r3, r2
 800a7da:	009b      	lsls	r3, r3, #2
 800a7dc:	440b      	add	r3, r1
 800a7de:	3304      	adds	r3, #4
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60fb      	str	r3, [r7, #12]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	609a      	str	r2, [r3, #8]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	689a      	ldr	r2, [r3, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60da      	str	r2, [r3, #12]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	3204      	adds	r2, #4
 800a7fa:	605a      	str	r2, [r3, #4]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	1d1a      	adds	r2, r3, #4
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	609a      	str	r2, [r3, #8]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a808:	4613      	mov	r3, r2
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4a1b      	ldr	r2, [pc, #108]	; (800a880 <prvAddNewTaskToReadyList+0x124>)
 800a812:	441a      	add	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	615a      	str	r2, [r3, #20]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a81c:	4918      	ldr	r1, [pc, #96]	; (800a880 <prvAddNewTaskToReadyList+0x124>)
 800a81e:	4613      	mov	r3, r2
 800a820:	009b      	lsls	r3, r3, #2
 800a822:	4413      	add	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	1c59      	adds	r1, r3, #1
 800a82c:	4814      	ldr	r0, [pc, #80]	; (800a880 <prvAddNewTaskToReadyList+0x124>)
 800a82e:	4613      	mov	r3, r2
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	4413      	add	r3, r2
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4403      	add	r3, r0
 800a838:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800a83a:	f001 fb91 	bl	800bf60 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800a83e:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <prvAddNewTaskToReadyList+0x118>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d00e      	beq.n	800a864 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a846:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <prvAddNewTaskToReadyList+0x114>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a850:	429a      	cmp	r2, r3
 800a852:	d207      	bcs.n	800a864 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800a854:	4b0b      	ldr	r3, [pc, #44]	; (800a884 <prvAddNewTaskToReadyList+0x128>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a864:	bf00      	nop
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	200006dc 	.word	0x200006dc
 800a870:	200005dc 	.word	0x200005dc
 800a874:	200006e8 	.word	0x200006e8
 800a878:	200006f8 	.word	0x200006f8
 800a87c:	200006e4 	.word	0x200006e4
 800a880:	200005e0 	.word	0x200005e0
 800a884:	e000ed04 	.word	0xe000ed04

0800a888 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800a890:	f001 fb3c 	bl	800bf0c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d102      	bne.n	800a8a0 <vTaskDelete+0x18>
 800a89a:	4b36      	ldr	r3, [pc, #216]	; (800a974 <vTaskDelete+0xec>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	e000      	b.n	800a8a2 <vTaskDelete+0x1a>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3304      	adds	r3, #4
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff fb79 	bl	8009fa0 <uxListRemove>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d115      	bne.n	800a8e0 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b8:	492f      	ldr	r1, [pc, #188]	; (800a978 <vTaskDelete+0xf0>)
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	440b      	add	r3, r1
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <vTaskDelete+0x58>
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8d4:	43da      	mvns	r2, r3
 800a8d6:	4b29      	ldr	r3, [pc, #164]	; (800a97c <vTaskDelete+0xf4>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4013      	ands	r3, r2
 800a8dc:	4a27      	ldr	r2, [pc, #156]	; (800a97c <vTaskDelete+0xf4>)
 800a8de:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	3318      	adds	r3, #24
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f7ff fb57 	bl	8009fa0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800a8f2:	4b23      	ldr	r3, [pc, #140]	; (800a980 <vTaskDelete+0xf8>)
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	4a21      	ldr	r2, [pc, #132]	; (800a980 <vTaskDelete+0xf8>)
 800a8fa:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800a8fc:	4b1d      	ldr	r3, [pc, #116]	; (800a974 <vTaskDelete+0xec>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68fa      	ldr	r2, [r7, #12]
 800a902:	429a      	cmp	r2, r3
 800a904:	d10b      	bne.n	800a91e <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3304      	adds	r3, #4
 800a90a:	4619      	mov	r1, r3
 800a90c:	481d      	ldr	r0, [pc, #116]	; (800a984 <vTaskDelete+0xfc>)
 800a90e:	f7ff faea 	bl	8009ee6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800a912:	4b1d      	ldr	r3, [pc, #116]	; (800a988 <vTaskDelete+0x100>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3301      	adds	r3, #1
 800a918:	4a1b      	ldr	r2, [pc, #108]	; (800a988 <vTaskDelete+0x100>)
 800a91a:	6013      	str	r3, [r2, #0]
 800a91c:	e009      	b.n	800a932 <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800a91e:	4b1b      	ldr	r3, [pc, #108]	; (800a98c <vTaskDelete+0x104>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3b01      	subs	r3, #1
 800a924:	4a19      	ldr	r2, [pc, #100]	; (800a98c <vTaskDelete+0x104>)
 800a926:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 800a928:	68f8      	ldr	r0, [r7, #12]
 800a92a:	f000 fe79 	bl	800b620 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800a92e:	f000 fe87 	bl	800b640 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800a932:	f001 fb15 	bl	800bf60 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800a936:	4b16      	ldr	r3, [pc, #88]	; (800a990 <vTaskDelete+0x108>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d015      	beq.n	800a96a <vTaskDelete+0xe2>
        {
            if( pxTCB == pxCurrentTCB )
 800a93e:	4b0d      	ldr	r3, [pc, #52]	; (800a974 <vTaskDelete+0xec>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	429a      	cmp	r2, r3
 800a946:	d110      	bne.n	800a96a <vTaskDelete+0xe2>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800a948:	4b12      	ldr	r3, [pc, #72]	; (800a994 <vTaskDelete+0x10c>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <vTaskDelete+0xd2>
 800a950:	f240 41d3 	movw	r1, #1235	; 0x4d3
 800a954:	4810      	ldr	r0, [pc, #64]	; (800a998 <vTaskDelete+0x110>)
 800a956:	f002 fb59 	bl	800d00c <vAssertCalled>
                portYIELD_WITHIN_API();
 800a95a:	4b10      	ldr	r3, [pc, #64]	; (800a99c <vTaskDelete+0x114>)
 800a95c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	f3bf 8f4f 	dsb	sy
 800a966:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800a96a:	bf00      	nop
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	200005dc 	.word	0x200005dc
 800a978:	200005e0 	.word	0x200005e0
 800a97c:	200006e4 	.word	0x200006e4
 800a980:	200006f8 	.word	0x200006f8
 800a984:	200006b0 	.word	0x200006b0
 800a988:	200006c4 	.word	0x200006c4
 800a98c:	200006dc 	.word	0x200006dc
 800a990:	200006e8 	.word	0x200006e8
 800a994:	20000704 	.word	0x20000704
 800a998:	08012a8c 	.word	0x08012a8c
 800a99c:	e000ed04 	.word	0xe000ed04

0800a9a0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800a9a8:	f001 fab0 	bl	800bf0c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d102      	bne.n	800a9b8 <uxTaskPriorityGet+0x18>
 800a9b2:	4b07      	ldr	r3, [pc, #28]	; (800a9d0 <uxTaskPriorityGet+0x30>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	e000      	b.n	800a9ba <uxTaskPriorityGet+0x1a>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800a9c2:	f001 facd 	bl	800bf60 <vPortExitCritical>

        return uxReturn;
 800a9c6:	68bb      	ldr	r3, [r7, #8]
    }
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}
 800a9d0:	200005dc 	.word	0x200005dc

0800a9d4 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b06      	cmp	r3, #6
 800a9e6:	d904      	bls.n	800a9f2 <vTaskPrioritySet+0x1e>
 800a9e8:	f240 610c 	movw	r1, #1548	; 0x60c
 800a9ec:	485b      	ldr	r0, [pc, #364]	; (800ab5c <vTaskPrioritySet+0x188>)
 800a9ee:	f002 fb0d 	bl	800d00c <vAssertCalled>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	2b06      	cmp	r3, #6
 800a9f6:	d901      	bls.n	800a9fc <vTaskPrioritySet+0x28>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a9f8:	2306      	movs	r3, #6
 800a9fa:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800a9fc:	f001 fa86 	bl	800bf0c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d102      	bne.n	800aa0c <vTaskPrioritySet+0x38>
 800aa06:	4b56      	ldr	r3, [pc, #344]	; (800ab60 <vTaskPrioritySet+0x18c>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	e000      	b.n	800aa0e <vTaskPrioritySet+0x3a>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa14:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	f000 8098 	beq.w	800ab50 <vTaskPrioritySet+0x17c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d90d      	bls.n	800aa44 <vTaskPrioritySet+0x70>
                {
                    if( pxTCB != pxCurrentTCB )
 800aa28:	4b4d      	ldr	r3, [pc, #308]	; (800ab60 <vTaskPrioritySet+0x18c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d00f      	beq.n	800aa52 <vTaskPrioritySet+0x7e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800aa32:	4b4b      	ldr	r3, [pc, #300]	; (800ab60 <vTaskPrioritySet+0x18c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d309      	bcc.n	800aa52 <vTaskPrioritySet+0x7e>
                        {
                            xYieldRequired = pdTRUE;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	61fb      	str	r3, [r7, #28]
 800aa42:	e006      	b.n	800aa52 <vTaskPrioritySet+0x7e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 800aa44:	4b46      	ldr	r3, [pc, #280]	; (800ab60 <vTaskPrioritySet+0x18c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	69ba      	ldr	r2, [r7, #24]
 800aa4a:	429a      	cmp	r2, r3
 800aa4c:	d101      	bne.n	800aa52 <vTaskPrioritySet+0x7e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d102      	bne.n	800aa6a <vTaskPrioritySet+0x96>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	683a      	ldr	r2, [r7, #0]
 800aa68:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 800aa6a:	69bb      	ldr	r3, [r7, #24]
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	64da      	str	r2, [r3, #76]	; 0x4c
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aa70:	69bb      	ldr	r3, [r7, #24]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	db04      	blt.n	800aa82 <vTaskPrioritySet+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	f1c3 0207 	rsb	r2, r3, #7
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	6959      	ldr	r1, [r3, #20]
 800aa86:	693a      	ldr	r2, [r7, #16]
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4a34      	ldr	r2, [pc, #208]	; (800ab64 <vTaskPrioritySet+0x190>)
 800aa92:	4413      	add	r3, r2
 800aa94:	4299      	cmp	r1, r3
 800aa96:	d150      	bne.n	800ab3a <vTaskPrioritySet+0x166>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f7ff fa7f 	bl	8009fa0 <uxListRemove>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d109      	bne.n	800aabc <vTaskPrioritySet+0xe8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	fa02 f303 	lsl.w	r3, r2, r3
 800aab0:	43da      	mvns	r2, r3
 800aab2:	4b2d      	ldr	r3, [pc, #180]	; (800ab68 <vTaskPrioritySet+0x194>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4013      	ands	r3, r2
 800aab8:	4a2b      	ldr	r2, [pc, #172]	; (800ab68 <vTaskPrioritySet+0x194>)
 800aaba:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac0:	2201      	movs	r2, #1
 800aac2:	409a      	lsls	r2, r3
 800aac4:	4b28      	ldr	r3, [pc, #160]	; (800ab68 <vTaskPrioritySet+0x194>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4313      	orrs	r3, r2
 800aaca:	4a27      	ldr	r2, [pc, #156]	; (800ab68 <vTaskPrioritySet+0x194>)
 800aacc:	6013      	str	r3, [r2, #0]
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad2:	4924      	ldr	r1, [pc, #144]	; (800ab64 <vTaskPrioritySet+0x190>)
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	3304      	adds	r3, #4
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	609a      	str	r2, [r3, #8]
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	689a      	ldr	r2, [r3, #8]
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	60da      	str	r2, [r3, #12]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	3204      	adds	r2, #4
 800aafa:	605a      	str	r2, [r3, #4]
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	1d1a      	adds	r2, r3, #4
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	609a      	str	r2, [r3, #8]
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	4613      	mov	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	4a14      	ldr	r2, [pc, #80]	; (800ab64 <vTaskPrioritySet+0x190>)
 800ab12:	441a      	add	r2, r3
 800ab14:	69bb      	ldr	r3, [r7, #24]
 800ab16:	615a      	str	r2, [r3, #20]
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4911      	ldr	r1, [pc, #68]	; (800ab64 <vTaskPrioritySet+0x190>)
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	440b      	add	r3, r1
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	1c59      	adds	r1, r3, #1
 800ab2c:	480d      	ldr	r0, [pc, #52]	; (800ab64 <vTaskPrioritySet+0x190>)
 800ab2e:	4613      	mov	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4403      	add	r3, r0
 800ab38:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800ab3a:	69fb      	ldr	r3, [r7, #28]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d007      	beq.n	800ab50 <vTaskPrioritySet+0x17c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800ab40:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <vTaskPrioritySet+0x198>)
 800ab42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800ab50:	f001 fa06 	bl	800bf60 <vPortExitCritical>
    }
 800ab54:	bf00      	nop
 800ab56:	3720      	adds	r7, #32
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}
 800ab5c:	08012a8c 	.word	0x08012a8c
 800ab60:	200005dc 	.word	0x200005dc
 800ab64:	200005e0 	.word	0x200005e0
 800ab68:	200006e4 	.word	0x200006e4
 800ab6c:	e000ed04 	.word	0xe000ed04

0800ab70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800ab76:	4b1e      	ldr	r3, [pc, #120]	; (800abf0 <vTaskStartScheduler+0x80>)
 800ab78:	9301      	str	r3, [sp, #4]
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9300      	str	r3, [sp, #0]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	2278      	movs	r2, #120	; 0x78
 800ab82:	491c      	ldr	r1, [pc, #112]	; (800abf4 <vTaskStartScheduler+0x84>)
 800ab84:	481c      	ldr	r0, [pc, #112]	; (800abf8 <vTaskStartScheduler+0x88>)
 800ab86:	f7ff fd03 	bl	800a590 <xTaskCreate>
 800ab8a:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d102      	bne.n	800ab98 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800ab92:	f000 fe1f 	bl	800b7d4 <xTimerCreateTimerTask>
 800ab96:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d118      	bne.n	800abd0 <vTaskStartScheduler+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800abb0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800abb2:	4b12      	ldr	r3, [pc, #72]	; (800abfc <vTaskStartScheduler+0x8c>)
 800abb4:	f04f 32ff 	mov.w	r2, #4294967295
 800abb8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800abba:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <vTaskStartScheduler+0x90>)
 800abbc:	2201      	movs	r2, #1
 800abbe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800abc0:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <vTaskStartScheduler+0x94>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800abc6:	f001 faad 	bl	800c124 <vConfigureTimerForRunTimeStats>

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800abca:	f001 f903 	bl	800bdd4 <xPortStartScheduler>
 800abce:	e008      	b.n	800abe2 <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abd6:	d104      	bne.n	800abe2 <vTaskStartScheduler+0x72>
 800abd8:	f640 0137 	movw	r1, #2103	; 0x837
 800abdc:	480a      	ldr	r0, [pc, #40]	; (800ac08 <vTaskStartScheduler+0x98>)
 800abde:	f002 fa15 	bl	800d00c <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800abe2:	4b0a      	ldr	r3, [pc, #40]	; (800ac0c <vTaskStartScheduler+0x9c>)
 800abe4:	681b      	ldr	r3, [r3, #0]
}
 800abe6:	bf00      	nop
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000700 	.word	0x20000700
 800abf4:	08012aa8 	.word	0x08012aa8
 800abf8:	0800b535 	.word	0x0800b535
 800abfc:	200006fc 	.word	0x200006fc
 800ac00:	200006e8 	.word	0x200006e8
 800ac04:	200006e0 	.word	0x200006e0
 800ac08:	08012a8c 	.word	0x08012a8c
 800ac0c:	20000028 	.word	0x20000028

0800ac10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ac10:	b480      	push	{r7}
 800ac12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800ac14:	4b04      	ldr	r3, [pc, #16]	; (800ac28 <vTaskSuspendAll+0x18>)
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	4a03      	ldr	r2, [pc, #12]	; (800ac28 <vTaskSuspendAll+0x18>)
 800ac1c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800ac1e:	bf00      	nop
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr
 800ac28:	20000704 	.word	0x20000704

0800ac2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b086      	sub	sp, #24
 800ac30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800ac36:	2300      	movs	r3, #0
 800ac38:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800ac3a:	4b6e      	ldr	r3, [pc, #440]	; (800adf4 <xTaskResumeAll+0x1c8>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d104      	bne.n	800ac4c <xTaskResumeAll+0x20>
 800ac42:	f640 01aa 	movw	r1, #2218	; 0x8aa
 800ac46:	486c      	ldr	r0, [pc, #432]	; (800adf8 <xTaskResumeAll+0x1cc>)
 800ac48:	f002 f9e0 	bl	800d00c <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800ac4c:	f001 f95e 	bl	800bf0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800ac50:	4b68      	ldr	r3, [pc, #416]	; (800adf4 <xTaskResumeAll+0x1c8>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3b01      	subs	r3, #1
 800ac56:	4a67      	ldr	r2, [pc, #412]	; (800adf4 <xTaskResumeAll+0x1c8>)
 800ac58:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac5a:	4b66      	ldr	r3, [pc, #408]	; (800adf4 <xTaskResumeAll+0x1c8>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	f040 80c0 	bne.w	800ade4 <xTaskResumeAll+0x1b8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ac64:	4b65      	ldr	r3, [pc, #404]	; (800adfc <xTaskResumeAll+0x1d0>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 80bb 	beq.w	800ade4 <xTaskResumeAll+0x1b8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ac6e:	e08a      	b.n	800ad86 <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac70:	4b63      	ldr	r3, [pc, #396]	; (800ae00 <xTaskResumeAll+0x1d4>)
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	68db      	ldr	r3, [r3, #12]
 800ac76:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac7c:	60bb      	str	r3, [r7, #8]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	69db      	ldr	r3, [r3, #28]
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	6a12      	ldr	r2, [r2, #32]
 800ac86:	609a      	str	r2, [r3, #8]
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	697a      	ldr	r2, [r7, #20]
 800ac8e:	69d2      	ldr	r2, [r2, #28]
 800ac90:	605a      	str	r2, [r3, #4]
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	3318      	adds	r3, #24
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d103      	bne.n	800aca6 <xTaskResumeAll+0x7a>
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	6a1a      	ldr	r2, [r3, #32]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	605a      	str	r2, [r3, #4]
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2200      	movs	r2, #0
 800acaa:	629a      	str	r2, [r3, #40]	; 0x28
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	1e5a      	subs	r2, r3, #1
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	695b      	ldr	r3, [r3, #20]
 800acba:	607b      	str	r3, [r7, #4]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	68d2      	ldr	r2, [r2, #12]
 800acc4:	609a      	str	r2, [r3, #8]
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	697a      	ldr	r2, [r7, #20]
 800accc:	6892      	ldr	r2, [r2, #8]
 800acce:	605a      	str	r2, [r3, #4]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	3304      	adds	r3, #4
 800acd8:	429a      	cmp	r2, r3
 800acda:	d103      	bne.n	800ace4 <xTaskResumeAll+0xb8>
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	68da      	ldr	r2, [r3, #12]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	605a      	str	r2, [r3, #4]
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2200      	movs	r2, #0
 800ace8:	615a      	str	r2, [r3, #20]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	1e5a      	subs	r2, r3, #1
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf8:	2201      	movs	r2, #1
 800acfa:	409a      	lsls	r2, r3
 800acfc:	4b41      	ldr	r3, [pc, #260]	; (800ae04 <xTaskResumeAll+0x1d8>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	4a40      	ldr	r2, [pc, #256]	; (800ae04 <xTaskResumeAll+0x1d8>)
 800ad04:	6013      	str	r3, [r2, #0]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0a:	493f      	ldr	r1, [pc, #252]	; (800ae08 <xTaskResumeAll+0x1dc>)
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	3304      	adds	r3, #4
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	683a      	ldr	r2, [r7, #0]
 800ad20:	609a      	str	r2, [r3, #8]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	689a      	ldr	r2, [r3, #8]
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	60da      	str	r2, [r3, #12]
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	697a      	ldr	r2, [r7, #20]
 800ad30:	3204      	adds	r2, #4
 800ad32:	605a      	str	r2, [r3, #4]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	609a      	str	r2, [r3, #8]
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4a2f      	ldr	r2, [pc, #188]	; (800ae08 <xTaskResumeAll+0x1dc>)
 800ad4a:	441a      	add	r2, r3
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	615a      	str	r2, [r3, #20]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad54:	492c      	ldr	r1, [pc, #176]	; (800ae08 <xTaskResumeAll+0x1dc>)
 800ad56:	4613      	mov	r3, r2
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	440b      	add	r3, r1
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	1c59      	adds	r1, r3, #1
 800ad64:	4828      	ldr	r0, [pc, #160]	; (800ae08 <xTaskResumeAll+0x1dc>)
 800ad66:	4613      	mov	r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	4403      	add	r3, r0
 800ad70:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad76:	4b25      	ldr	r3, [pc, #148]	; (800ae0c <xTaskResumeAll+0x1e0>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d302      	bcc.n	800ad86 <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800ad80:	4b23      	ldr	r3, [pc, #140]	; (800ae10 <xTaskResumeAll+0x1e4>)
 800ad82:	2201      	movs	r2, #1
 800ad84:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ad86:	4b1e      	ldr	r3, [pc, #120]	; (800ae00 <xTaskResumeAll+0x1d4>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	f47f af70 	bne.w	800ac70 <xTaskResumeAll+0x44>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800ad96:	f000 fc53 	bl	800b640 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ad9a:	4b1e      	ldr	r3, [pc, #120]	; (800ae14 <xTaskResumeAll+0x1e8>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d010      	beq.n	800adc8 <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800ada6:	f000 f85b 	bl	800ae60 <xTaskIncrementTick>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800adb0:	4b17      	ldr	r3, [pc, #92]	; (800ae10 <xTaskResumeAll+0x1e4>)
 800adb2:	2201      	movs	r2, #1
 800adb4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3b01      	subs	r3, #1
 800adba:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d1f1      	bne.n	800ada6 <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800adc2:	4b14      	ldr	r3, [pc, #80]	; (800ae14 <xTaskResumeAll+0x1e8>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800adc8:	4b11      	ldr	r3, [pc, #68]	; (800ae10 <xTaskResumeAll+0x1e4>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d009      	beq.n	800ade4 <xTaskResumeAll+0x1b8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800add0:	2301      	movs	r3, #1
 800add2:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800add4:	4b10      	ldr	r3, [pc, #64]	; (800ae18 <xTaskResumeAll+0x1ec>)
 800add6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	f3bf 8f4f 	dsb	sy
 800ade0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800ade4:	f001 f8bc 	bl	800bf60 <vPortExitCritical>

    return xAlreadyYielded;
 800ade8:	693b      	ldr	r3, [r7, #16]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3718      	adds	r7, #24
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	20000704 	.word	0x20000704
 800adf8:	08012a8c 	.word	0x08012a8c
 800adfc:	200006dc 	.word	0x200006dc
 800ae00:	2000069c 	.word	0x2000069c
 800ae04:	200006e4 	.word	0x200006e4
 800ae08:	200005e0 	.word	0x200005e0
 800ae0c:	200005dc 	.word	0x200005dc
 800ae10:	200006f0 	.word	0x200006f0
 800ae14:	200006ec 	.word	0x200006ec
 800ae18:	e000ed04 	.word	0xe000ed04

0800ae1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800ae22:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <xTaskGetTickCount+0x1c>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800ae28:	687b      	ldr	r3, [r7, #4]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	370c      	adds	r7, #12
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	200006e0 	.word	0x200006e0

0800ae3c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae42:	f001 f93b 	bl	800c0bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800ae46:	2300      	movs	r3, #0
 800ae48:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800ae4a:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <xTaskGetTickCountFromISR+0x20>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800ae50:	683b      	ldr	r3, [r7, #0]
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3708      	adds	r7, #8
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bd80      	pop	{r7, pc}
 800ae5a:	bf00      	nop
 800ae5c:	200006e0 	.word	0x200006e0

0800ae60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae6a:	4b7a      	ldr	r3, [pc, #488]	; (800b054 <xTaskIncrementTick+0x1f4>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f040 80e6 	bne.w	800b040 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ae74:	4b78      	ldr	r3, [pc, #480]	; (800b058 <xTaskIncrementTick+0x1f8>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800ae7c:	4a76      	ldr	r2, [pc, #472]	; (800b058 <xTaskIncrementTick+0x1f8>)
 800ae7e:	69bb      	ldr	r3, [r7, #24]
 800ae80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d11a      	bne.n	800aebe <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800ae88:	4b74      	ldr	r3, [pc, #464]	; (800b05c <xTaskIncrementTick+0x1fc>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d004      	beq.n	800ae9c <xTaskIncrementTick+0x3c>
 800ae92:	f640 21be 	movw	r1, #2750	; 0xabe
 800ae96:	4872      	ldr	r0, [pc, #456]	; (800b060 <xTaskIncrementTick+0x200>)
 800ae98:	f002 f8b8 	bl	800d00c <vAssertCalled>
 800ae9c:	4b6f      	ldr	r3, [pc, #444]	; (800b05c <xTaskIncrementTick+0x1fc>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	617b      	str	r3, [r7, #20]
 800aea2:	4b70      	ldr	r3, [pc, #448]	; (800b064 <xTaskIncrementTick+0x204>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4a6d      	ldr	r2, [pc, #436]	; (800b05c <xTaskIncrementTick+0x1fc>)
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	4a6e      	ldr	r2, [pc, #440]	; (800b064 <xTaskIncrementTick+0x204>)
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	6013      	str	r3, [r2, #0]
 800aeb0:	4b6d      	ldr	r3, [pc, #436]	; (800b068 <xTaskIncrementTick+0x208>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	4a6c      	ldr	r2, [pc, #432]	; (800b068 <xTaskIncrementTick+0x208>)
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	f000 fbc1 	bl	800b640 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800aebe:	4b6b      	ldr	r3, [pc, #428]	; (800b06c <xTaskIncrementTick+0x20c>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	f0c0 80a6 	bcc.w	800b016 <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aeca:	4b64      	ldr	r3, [pc, #400]	; (800b05c <xTaskIncrementTick+0x1fc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d104      	bne.n	800aede <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aed4:	4b65      	ldr	r3, [pc, #404]	; (800b06c <xTaskIncrementTick+0x20c>)
 800aed6:	f04f 32ff 	mov.w	r2, #4294967295
 800aeda:	601a      	str	r2, [r3, #0]
                    break;
 800aedc:	e09b      	b.n	800b016 <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aede:	4b5f      	ldr	r3, [pc, #380]	; (800b05c <xTaskIncrementTick+0x1fc>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	68db      	ldr	r3, [r3, #12]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	685b      	ldr	r3, [r3, #4]
 800aeec:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d203      	bcs.n	800aefe <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800aef6:	4a5d      	ldr	r2, [pc, #372]	; (800b06c <xTaskIncrementTick+0x20c>)
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800aefc:	e08b      	b.n	800b016 <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	695b      	ldr	r3, [r3, #20]
 800af02:	60bb      	str	r3, [r7, #8]
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	693a      	ldr	r2, [r7, #16]
 800af0a:	68d2      	ldr	r2, [r2, #12]
 800af0c:	609a      	str	r2, [r3, #8]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	68db      	ldr	r3, [r3, #12]
 800af12:	693a      	ldr	r2, [r7, #16]
 800af14:	6892      	ldr	r2, [r2, #8]
 800af16:	605a      	str	r2, [r3, #4]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	685a      	ldr	r2, [r3, #4]
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	3304      	adds	r3, #4
 800af20:	429a      	cmp	r2, r3
 800af22:	d103      	bne.n	800af2c <xTaskIncrementTick+0xcc>
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	68da      	ldr	r2, [r3, #12]
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	605a      	str	r2, [r3, #4]
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	2200      	movs	r2, #0
 800af30:	615a      	str	r2, [r3, #20]
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	1e5a      	subs	r2, r3, #1
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af40:	2b00      	cmp	r3, #0
 800af42:	d01e      	beq.n	800af82 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af48:	607b      	str	r3, [r7, #4]
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	69db      	ldr	r3, [r3, #28]
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	6a12      	ldr	r2, [r2, #32]
 800af52:	609a      	str	r2, [r3, #8]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	6a1b      	ldr	r3, [r3, #32]
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	69d2      	ldr	r2, [r2, #28]
 800af5c:	605a      	str	r2, [r3, #4]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685a      	ldr	r2, [r3, #4]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	3318      	adds	r3, #24
 800af66:	429a      	cmp	r2, r3
 800af68:	d103      	bne.n	800af72 <xTaskIncrementTick+0x112>
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	6a1a      	ldr	r2, [r3, #32]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	605a      	str	r2, [r3, #4]
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	2200      	movs	r2, #0
 800af76:	629a      	str	r2, [r3, #40]	; 0x28
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	1e5a      	subs	r2, r3, #1
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af86:	2201      	movs	r2, #1
 800af88:	409a      	lsls	r2, r3
 800af8a:	4b39      	ldr	r3, [pc, #228]	; (800b070 <xTaskIncrementTick+0x210>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4313      	orrs	r3, r2
 800af90:	4a37      	ldr	r2, [pc, #220]	; (800b070 <xTaskIncrementTick+0x210>)
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	4936      	ldr	r1, [pc, #216]	; (800b074 <xTaskIncrementTick+0x214>)
 800af9a:	4613      	mov	r3, r2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	440b      	add	r3, r1
 800afa4:	3304      	adds	r3, #4
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	603b      	str	r3, [r7, #0]
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	609a      	str	r2, [r3, #8]
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	689a      	ldr	r2, [r3, #8]
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	60da      	str	r2, [r3, #12]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	693a      	ldr	r2, [r7, #16]
 800afbe:	3204      	adds	r2, #4
 800afc0:	605a      	str	r2, [r3, #4]
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	1d1a      	adds	r2, r3, #4
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	609a      	str	r2, [r3, #8]
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afce:	4613      	mov	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	4413      	add	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4a27      	ldr	r2, [pc, #156]	; (800b074 <xTaskIncrementTick+0x214>)
 800afd8:	441a      	add	r2, r3
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	615a      	str	r2, [r3, #20]
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afe2:	4924      	ldr	r1, [pc, #144]	; (800b074 <xTaskIncrementTick+0x214>)
 800afe4:	4613      	mov	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	440b      	add	r3, r1
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	1c59      	adds	r1, r3, #1
 800aff2:	4820      	ldr	r0, [pc, #128]	; (800b074 <xTaskIncrementTick+0x214>)
 800aff4:	4613      	mov	r3, r2
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	4413      	add	r3, r2
 800affa:	009b      	lsls	r3, r3, #2
 800affc:	4403      	add	r3, r0
 800affe:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b004:	4b1c      	ldr	r3, [pc, #112]	; (800b078 <xTaskIncrementTick+0x218>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b00a:	429a      	cmp	r2, r3
 800b00c:	f4ff af5d 	bcc.w	800aeca <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 800b010:	2301      	movs	r3, #1
 800b012:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b014:	e759      	b.n	800aeca <xTaskIncrementTick+0x6a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b016:	4b18      	ldr	r3, [pc, #96]	; (800b078 <xTaskIncrementTick+0x218>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01c:	4915      	ldr	r1, [pc, #84]	; (800b074 <xTaskIncrementTick+0x214>)
 800b01e:	4613      	mov	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	009b      	lsls	r3, r3, #2
 800b026:	440b      	add	r3, r1
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d901      	bls.n	800b032 <xTaskIncrementTick+0x1d2>
                {
                    xSwitchRequired = pdTRUE;
 800b02e:	2301      	movs	r3, #1
 800b030:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800b032:	4b12      	ldr	r3, [pc, #72]	; (800b07c <xTaskIncrementTick+0x21c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d007      	beq.n	800b04a <xTaskIncrementTick+0x1ea>
                {
                    xSwitchRequired = pdTRUE;
 800b03a:	2301      	movs	r3, #1
 800b03c:	61fb      	str	r3, [r7, #28]
 800b03e:	e004      	b.n	800b04a <xTaskIncrementTick+0x1ea>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800b040:	4b0f      	ldr	r3, [pc, #60]	; (800b080 <xTaskIncrementTick+0x220>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3301      	adds	r3, #1
 800b046:	4a0e      	ldr	r2, [pc, #56]	; (800b080 <xTaskIncrementTick+0x220>)
 800b048:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800b04a:	69fb      	ldr	r3, [r7, #28]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000704 	.word	0x20000704
 800b058:	200006e0 	.word	0x200006e0
 800b05c:	20000694 	.word	0x20000694
 800b060:	08012a8c 	.word	0x08012a8c
 800b064:	20000698 	.word	0x20000698
 800b068:	200006f4 	.word	0x200006f4
 800b06c:	200006fc 	.word	0x200006fc
 800b070:	200006e4 	.word	0x200006e4
 800b074:	200005e0 	.word	0x200005e0
 800b078:	200005dc 	.word	0x200005dc
 800b07c:	200006f0 	.word	0x200006f0
 800b080:	200006ec 	.word	0x200006ec

0800b084 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d103      	bne.n	800b09c <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <vTaskSetApplicationTaskTag+0x34>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	e001      	b.n	800b0a0 <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 800b0a0:	f000 ff34 	bl	800bf0c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        taskEXIT_CRITICAL();
 800b0aa:	f000 ff59 	bl	800bf60 <vPortExitCritical>
    }
 800b0ae:	bf00      	nop
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	200005dc 	.word	0x200005dc

0800b0bc <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
    {
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        TaskHookFunction_t xReturn;

        /* If xTask is NULL then set the calling task's hook. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <xTaskGetApplicationTaskTag+0x14>
 800b0ca:	4b08      	ldr	r3, [pc, #32]	; (800b0ec <xTaskGetApplicationTaskTag+0x30>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	e000      	b.n	800b0d2 <xTaskGetApplicationTaskTag+0x16>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	60fb      	str	r3, [r7, #12]

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 800b0d4:	f000 ff1a 	bl	800bf0c <vPortEnterCritical>
        {
            xReturn = pxTCB->pxTaskTag;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0dc:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800b0de:	f000 ff3f 	bl	800bf60 <vPortExitCritical>

        return xReturn;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
    }
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}
 800b0ec:	200005dc 	.word	0x200005dc

0800b0f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0f6:	4b2f      	ldr	r3, [pc, #188]	; (800b1b4 <vTaskSwitchContext+0xc4>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d003      	beq.n	800b106 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800b0fe:	4b2e      	ldr	r3, [pc, #184]	; (800b1b8 <vTaskSwitchContext+0xc8>)
 800b100:	2201      	movs	r2, #1
 800b102:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800b104:	e052      	b.n	800b1ac <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 800b106:	4b2c      	ldr	r3, [pc, #176]	; (800b1b8 <vTaskSwitchContext+0xc8>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b10c:	f001 f830 	bl	800c170 <vGetRuntimeCounter>
 800b110:	4603      	mov	r3, r0
 800b112:	4a2a      	ldr	r2, [pc, #168]	; (800b1bc <vTaskSwitchContext+0xcc>)
 800b114:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b116:	4b29      	ldr	r3, [pc, #164]	; (800b1bc <vTaskSwitchContext+0xcc>)
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	4b29      	ldr	r3, [pc, #164]	; (800b1c0 <vTaskSwitchContext+0xd0>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d909      	bls.n	800b136 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b122:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <vTaskSwitchContext+0xcc>)
 800b124:	681a      	ldr	r2, [r3, #0]
 800b126:	4b26      	ldr	r3, [pc, #152]	; (800b1c0 <vTaskSwitchContext+0xd0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	1ad1      	subs	r1, r2, r3
 800b12c:	4b25      	ldr	r3, [pc, #148]	; (800b1c4 <vTaskSwitchContext+0xd4>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b132:	440a      	add	r2, r1
 800b134:	659a      	str	r2, [r3, #88]	; 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 800b136:	4b21      	ldr	r3, [pc, #132]	; (800b1bc <vTaskSwitchContext+0xcc>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	4a21      	ldr	r2, [pc, #132]	; (800b1c0 <vTaskSwitchContext+0xd0>)
 800b13c:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b13e:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <vTaskSwitchContext+0xd8>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	fab3 f383 	clz	r3, r3
 800b14a:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	f1c3 031f 	rsb	r3, r3, #31
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	491d      	ldr	r1, [pc, #116]	; (800b1cc <vTaskSwitchContext+0xdc>)
 800b156:	68fa      	ldr	r2, [r7, #12]
 800b158:	4613      	mov	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4413      	add	r3, r2
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	440b      	add	r3, r1
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d104      	bne.n	800b172 <vTaskSwitchContext+0x82>
 800b168:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800b16c:	4818      	ldr	r0, [pc, #96]	; (800b1d0 <vTaskSwitchContext+0xe0>)
 800b16e:	f001 ff4d 	bl	800d00c <vAssertCalled>
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4a13      	ldr	r2, [pc, #76]	; (800b1cc <vTaskSwitchContext+0xdc>)
 800b17e:	4413      	add	r3, r2
 800b180:	60bb      	str	r3, [r7, #8]
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	685a      	ldr	r2, [r3, #4]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	605a      	str	r2, [r3, #4]
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	3308      	adds	r3, #8
 800b194:	429a      	cmp	r2, r3
 800b196:	d104      	bne.n	800b1a2 <vTaskSwitchContext+0xb2>
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	605a      	str	r2, [r3, #4]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	4a06      	ldr	r2, [pc, #24]	; (800b1c4 <vTaskSwitchContext+0xd4>)
 800b1aa:	6013      	str	r3, [r2, #0]
}
 800b1ac:	bf00      	nop
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}
 800b1b4:	20000704 	.word	0x20000704
 800b1b8:	200006f0 	.word	0x200006f0
 800b1bc:	2000070c 	.word	0x2000070c
 800b1c0:	20000708 	.word	0x20000708
 800b1c4:	200005dc 	.word	0x200005dc
 800b1c8:	200006e4 	.word	0x200006e4
 800b1cc:	200005e0 	.word	0x200005e0
 800b1d0:	08012a8c 	.word	0x08012a8c

0800b1d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d104      	bne.n	800b1ee <vTaskPlaceOnEventList+0x1a>
 800b1e4:	f640 4113 	movw	r1, #3091	; 0xc13
 800b1e8:	4808      	ldr	r0, [pc, #32]	; (800b20c <vTaskPlaceOnEventList+0x38>)
 800b1ea:	f001 ff0f 	bl	800d00c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1ee:	4b08      	ldr	r3, [pc, #32]	; (800b210 <vTaskPlaceOnEventList+0x3c>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3318      	adds	r3, #24
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7fe fe99 	bl	8009f2e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1fc:	2101      	movs	r1, #1
 800b1fe:	6838      	ldr	r0, [r7, #0]
 800b200:	f000 fa68 	bl	800b6d4 <prvAddCurrentTaskToDelayedList>
}
 800b204:	bf00      	nop
 800b206:	3708      	adds	r7, #8
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	08012a8c 	.word	0x08012a8c
 800b210:	200005dc 	.word	0x200005dc

0800b214 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	60f8      	str	r0, [r7, #12]
 800b21c:	60b9      	str	r1, [r7, #8]
 800b21e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d104      	bne.n	800b230 <vTaskPlaceOnEventListRestricted+0x1c>
 800b226:	f640 4149 	movw	r1, #3145	; 0xc49
 800b22a:	4819      	ldr	r0, [pc, #100]	; (800b290 <vTaskPlaceOnEventListRestricted+0x7c>)
 800b22c:	f001 feee 	bl	800d00c <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	685b      	ldr	r3, [r3, #4]
 800b234:	617b      	str	r3, [r7, #20]
 800b236:	4b17      	ldr	r3, [pc, #92]	; (800b294 <vTaskPlaceOnEventListRestricted+0x80>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	61da      	str	r2, [r3, #28]
 800b23e:	4b15      	ldr	r3, [pc, #84]	; (800b294 <vTaskPlaceOnEventListRestricted+0x80>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	697a      	ldr	r2, [r7, #20]
 800b244:	6892      	ldr	r2, [r2, #8]
 800b246:	621a      	str	r2, [r3, #32]
 800b248:	4b12      	ldr	r3, [pc, #72]	; (800b294 <vTaskPlaceOnEventListRestricted+0x80>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	3218      	adds	r2, #24
 800b252:	605a      	str	r2, [r3, #4]
 800b254:	4b0f      	ldr	r3, [pc, #60]	; (800b294 <vTaskPlaceOnEventListRestricted+0x80>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f103 0218 	add.w	r2, r3, #24
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	609a      	str	r2, [r3, #8]
 800b260:	4b0c      	ldr	r3, [pc, #48]	; (800b294 <vTaskPlaceOnEventListRestricted+0x80>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68fa      	ldr	r2, [r7, #12]
 800b266:	629a      	str	r2, [r3, #40]	; 0x28
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	1c5a      	adds	r2, r3, #1
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <vTaskPlaceOnEventListRestricted+0x6a>
        {
            xTicksToWait = portMAX_DELAY;
 800b278:	f04f 33ff 	mov.w	r3, #4294967295
 800b27c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f000 fa27 	bl	800b6d4 <prvAddCurrentTaskToDelayedList>
    }
 800b286:	bf00      	nop
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	08012a8c 	.word	0x08012a8c
 800b294:	200005dc 	.word	0x200005dc

0800b298 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b088      	sub	sp, #32
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800b2a8:	69bb      	ldr	r3, [r7, #24]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d104      	bne.n	800b2b8 <xTaskRemoveFromEventList+0x20>
 800b2ae:	f640 4179 	movw	r1, #3193	; 0xc79
 800b2b2:	485a      	ldr	r0, [pc, #360]	; (800b41c <xTaskRemoveFromEventList+0x184>)
 800b2b4:	f001 feaa 	bl	800d00c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2bc:	617b      	str	r3, [r7, #20]
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	69db      	ldr	r3, [r3, #28]
 800b2c2:	69ba      	ldr	r2, [r7, #24]
 800b2c4:	6a12      	ldr	r2, [r2, #32]
 800b2c6:	609a      	str	r2, [r3, #8]
 800b2c8:	69bb      	ldr	r3, [r7, #24]
 800b2ca:	6a1b      	ldr	r3, [r3, #32]
 800b2cc:	69ba      	ldr	r2, [r7, #24]
 800b2ce:	69d2      	ldr	r2, [r2, #28]
 800b2d0:	605a      	str	r2, [r3, #4]
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	685a      	ldr	r2, [r3, #4]
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	3318      	adds	r3, #24
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d103      	bne.n	800b2e6 <xTaskRemoveFromEventList+0x4e>
 800b2de:	69bb      	ldr	r3, [r7, #24]
 800b2e0:	6a1a      	ldr	r2, [r3, #32]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	605a      	str	r2, [r3, #4]
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	629a      	str	r2, [r3, #40]	; 0x28
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	1e5a      	subs	r2, r3, #1
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2f6:	4b4a      	ldr	r3, [pc, #296]	; (800b420 <xTaskRemoveFromEventList+0x188>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d15e      	bne.n	800b3bc <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	60fb      	str	r3, [r7, #12]
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	68d2      	ldr	r2, [r2, #12]
 800b30c:	609a      	str	r2, [r3, #8]
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	6892      	ldr	r2, [r2, #8]
 800b316:	605a      	str	r2, [r3, #4]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	3304      	adds	r3, #4
 800b320:	429a      	cmp	r2, r3
 800b322:	d103      	bne.n	800b32c <xTaskRemoveFromEventList+0x94>
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	605a      	str	r2, [r3, #4]
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	2200      	movs	r2, #0
 800b330:	615a      	str	r2, [r3, #20]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	1e5a      	subs	r2, r3, #1
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b340:	2201      	movs	r2, #1
 800b342:	409a      	lsls	r2, r3
 800b344:	4b37      	ldr	r3, [pc, #220]	; (800b424 <xTaskRemoveFromEventList+0x18c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4313      	orrs	r3, r2
 800b34a:	4a36      	ldr	r2, [pc, #216]	; (800b424 <xTaskRemoveFromEventList+0x18c>)
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b352:	4935      	ldr	r1, [pc, #212]	; (800b428 <xTaskRemoveFromEventList+0x190>)
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	440b      	add	r3, r1
 800b35e:	3304      	adds	r3, #4
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	60bb      	str	r3, [r7, #8]
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	609a      	str	r2, [r3, #8]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	69bb      	ldr	r3, [r7, #24]
 800b370:	60da      	str	r2, [r3, #12]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	3204      	adds	r2, #4
 800b37a:	605a      	str	r2, [r3, #4]
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	1d1a      	adds	r2, r3, #4
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	609a      	str	r2, [r3, #8]
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a25      	ldr	r2, [pc, #148]	; (800b428 <xTaskRemoveFromEventList+0x190>)
 800b392:	441a      	add	r2, r3
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	615a      	str	r2, [r3, #20]
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b39c:	4922      	ldr	r1, [pc, #136]	; (800b428 <xTaskRemoveFromEventList+0x190>)
 800b39e:	4613      	mov	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	440b      	add	r3, r1
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	1c59      	adds	r1, r3, #1
 800b3ac:	481e      	ldr	r0, [pc, #120]	; (800b428 <xTaskRemoveFromEventList+0x190>)
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	4403      	add	r3, r0
 800b3b8:	6019      	str	r1, [r3, #0]
 800b3ba:	e01b      	b.n	800b3f4 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3bc:	4b1b      	ldr	r3, [pc, #108]	; (800b42c <xTaskRemoveFromEventList+0x194>)
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	613b      	str	r3, [r7, #16]
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	693a      	ldr	r2, [r7, #16]
 800b3c6:	61da      	str	r2, [r3, #28]
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	689a      	ldr	r2, [r3, #8]
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	621a      	str	r2, [r3, #32]
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	69ba      	ldr	r2, [r7, #24]
 800b3d6:	3218      	adds	r2, #24
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	f103 0218 	add.w	r2, r3, #24
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	609a      	str	r2, [r3, #8]
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	4a11      	ldr	r2, [pc, #68]	; (800b42c <xTaskRemoveFromEventList+0x194>)
 800b3e8:	629a      	str	r2, [r3, #40]	; 0x28
 800b3ea:	4b10      	ldr	r3, [pc, #64]	; (800b42c <xTaskRemoveFromEventList+0x194>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	4a0e      	ldr	r2, [pc, #56]	; (800b42c <xTaskRemoveFromEventList+0x194>)
 800b3f2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <xTaskRemoveFromEventList+0x198>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d905      	bls.n	800b40e <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800b402:	2301      	movs	r3, #1
 800b404:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800b406:	4b0b      	ldr	r3, [pc, #44]	; (800b434 <xTaskRemoveFromEventList+0x19c>)
 800b408:	2201      	movs	r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	e001      	b.n	800b412 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800b40e:	2300      	movs	r3, #0
 800b410:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800b412:	69fb      	ldr	r3, [r7, #28]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3720      	adds	r7, #32
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}
 800b41c:	08012a8c 	.word	0x08012a8c
 800b420:	20000704 	.word	0x20000704
 800b424:	200006e4 	.word	0x200006e4
 800b428:	200005e0 	.word	0x200005e0
 800b42c:	2000069c 	.word	0x2000069c
 800b430:	200005dc 	.word	0x200005dc
 800b434:	200006f0 	.word	0x200006f0

0800b438 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b438:	b480      	push	{r7}
 800b43a:	b083      	sub	sp, #12
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b440:	4b06      	ldr	r3, [pc, #24]	; (800b45c <vTaskInternalSetTimeOutState+0x24>)
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <vTaskInternalSetTimeOutState+0x28>)
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	605a      	str	r2, [r3, #4]
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	200006f4 	.word	0x200006f4
 800b460:	200006e0 	.word	0x200006e0

0800b464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <xTaskCheckForTimeOut+0x1a>
 800b474:	f640 41f4 	movw	r1, #3316	; 0xcf4
 800b478:	4825      	ldr	r0, [pc, #148]	; (800b510 <xTaskCheckForTimeOut+0xac>)
 800b47a:	f001 fdc7 	bl	800d00c <vAssertCalled>
    configASSERT( pxTicksToWait );
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d104      	bne.n	800b48e <xTaskCheckForTimeOut+0x2a>
 800b484:	f640 41f5 	movw	r1, #3317	; 0xcf5
 800b488:	4821      	ldr	r0, [pc, #132]	; (800b510 <xTaskCheckForTimeOut+0xac>)
 800b48a:	f001 fdbf 	bl	800d00c <vAssertCalled>

    taskENTER_CRITICAL();
 800b48e:	f000 fd3d 	bl	800bf0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800b492:	4b20      	ldr	r3, [pc, #128]	; (800b514 <xTaskCheckForTimeOut+0xb0>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	1ad3      	subs	r3, r2, r3
 800b4a0:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4aa:	d102      	bne.n	800b4b2 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	617b      	str	r3, [r7, #20]
 800b4b0:	e026      	b.n	800b500 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681a      	ldr	r2, [r3, #0]
 800b4b6:	4b18      	ldr	r3, [pc, #96]	; (800b518 <xTaskCheckForTimeOut+0xb4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d00a      	beq.n	800b4d4 <xTaskCheckForTimeOut+0x70>
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d305      	bcc.n	800b4d4 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	e015      	b.n	800b500 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	68fa      	ldr	r2, [r7, #12]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d20b      	bcs.n	800b4f6 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	1ad2      	subs	r2, r2, r3
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f7ff ffa4 	bl	800b438 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	617b      	str	r3, [r7, #20]
 800b4f4:	e004      	b.n	800b500 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800b500:	f000 fd2e 	bl	800bf60 <vPortExitCritical>

    return xReturn;
 800b504:	697b      	ldr	r3, [r7, #20]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3718      	adds	r7, #24
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	08012a8c 	.word	0x08012a8c
 800b514:	200006e0 	.word	0x200006e0
 800b518:	200006f4 	.word	0x200006f4

0800b51c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b51c:	b480      	push	{r7}
 800b51e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800b520:	4b03      	ldr	r3, [pc, #12]	; (800b530 <vTaskMissedYield+0x14>)
 800b522:	2201      	movs	r2, #1
 800b524:	601a      	str	r2, [r3, #0]
}
 800b526:	bf00      	nop
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr
 800b530:	200006f0 	.word	0x200006f0

0800b534 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800b53c:	f000 f842 	bl	800b5c4 <prvCheckTasksWaitingTermination>
 800b540:	e7fc      	b.n	800b53c <prvIdleTask+0x8>
	...

0800b544 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b54a:	2300      	movs	r3, #0
 800b54c:	607b      	str	r3, [r7, #4]
 800b54e:	e00c      	b.n	800b56a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4a12      	ldr	r2, [pc, #72]	; (800b5a4 <prvInitialiseTaskLists+0x60>)
 800b55c:	4413      	add	r3, r2
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fc94 	bl	8009e8c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3301      	adds	r3, #1
 800b568:	607b      	str	r3, [r7, #4]
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b06      	cmp	r3, #6
 800b56e:	d9ef      	bls.n	800b550 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800b570:	480d      	ldr	r0, [pc, #52]	; (800b5a8 <prvInitialiseTaskLists+0x64>)
 800b572:	f7fe fc8b 	bl	8009e8c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800b576:	480d      	ldr	r0, [pc, #52]	; (800b5ac <prvInitialiseTaskLists+0x68>)
 800b578:	f7fe fc88 	bl	8009e8c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800b57c:	480c      	ldr	r0, [pc, #48]	; (800b5b0 <prvInitialiseTaskLists+0x6c>)
 800b57e:	f7fe fc85 	bl	8009e8c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800b582:	480c      	ldr	r0, [pc, #48]	; (800b5b4 <prvInitialiseTaskLists+0x70>)
 800b584:	f7fe fc82 	bl	8009e8c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800b588:	480b      	ldr	r0, [pc, #44]	; (800b5b8 <prvInitialiseTaskLists+0x74>)
 800b58a:	f7fe fc7f 	bl	8009e8c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800b58e:	4b0b      	ldr	r3, [pc, #44]	; (800b5bc <prvInitialiseTaskLists+0x78>)
 800b590:	4a05      	ldr	r2, [pc, #20]	; (800b5a8 <prvInitialiseTaskLists+0x64>)
 800b592:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b594:	4b0a      	ldr	r3, [pc, #40]	; (800b5c0 <prvInitialiseTaskLists+0x7c>)
 800b596:	4a05      	ldr	r2, [pc, #20]	; (800b5ac <prvInitialiseTaskLists+0x68>)
 800b598:	601a      	str	r2, [r3, #0]
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	200005e0 	.word	0x200005e0
 800b5a8:	2000066c 	.word	0x2000066c
 800b5ac:	20000680 	.word	0x20000680
 800b5b0:	2000069c 	.word	0x2000069c
 800b5b4:	200006b0 	.word	0x200006b0
 800b5b8:	200006c8 	.word	0x200006c8
 800b5bc:	20000694 	.word	0x20000694
 800b5c0:	20000698 	.word	0x20000698

0800b5c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ca:	e019      	b.n	800b600 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800b5cc:	f000 fc9e 	bl	800bf0c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d0:	4b10      	ldr	r3, [pc, #64]	; (800b614 <prvCheckTasksWaitingTermination+0x50>)
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	3304      	adds	r3, #4
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7fe fcdf 	bl	8009fa0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800b5e2:	4b0d      	ldr	r3, [pc, #52]	; (800b618 <prvCheckTasksWaitingTermination+0x54>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	4a0b      	ldr	r2, [pc, #44]	; (800b618 <prvCheckTasksWaitingTermination+0x54>)
 800b5ea:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800b5ec:	4b0b      	ldr	r3, [pc, #44]	; (800b61c <prvCheckTasksWaitingTermination+0x58>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	3b01      	subs	r3, #1
 800b5f2:	4a0a      	ldr	r2, [pc, #40]	; (800b61c <prvCheckTasksWaitingTermination+0x58>)
 800b5f4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800b5f6:	f000 fcb3 	bl	800bf60 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f810 	bl	800b620 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b600:	4b06      	ldr	r3, [pc, #24]	; (800b61c <prvCheckTasksWaitingTermination+0x58>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d1e1      	bne.n	800b5cc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800b608:	bf00      	nop
 800b60a:	bf00      	nop
 800b60c:	3708      	adds	r7, #8
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	200006b0 	.word	0x200006b0
 800b618:	200006dc 	.word	0x200006dc
 800b61c:	200006c4 	.word	0x200006c4

0800b620 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fdd1 	bl	800c1d4 <vPortFree>
                vPortFree( pxTCB );
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fdce 	bl	800c1d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800b638:	bf00      	nop
 800b63a:	3708      	adds	r7, #8
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b640:	b480      	push	{r7}
 800b642:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <prvResetNextTaskUnblockTime+0x30>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d104      	bne.n	800b658 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800b64e:	4b09      	ldr	r3, [pc, #36]	; (800b674 <prvResetNextTaskUnblockTime+0x34>)
 800b650:	f04f 32ff 	mov.w	r2, #4294967295
 800b654:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800b656:	e005      	b.n	800b664 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <prvResetNextTaskUnblockTime+0x30>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a04      	ldr	r2, [pc, #16]	; (800b674 <prvResetNextTaskUnblockTime+0x34>)
 800b662:	6013      	str	r3, [r2, #0]
}
 800b664:	bf00      	nop
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	20000694 	.word	0x20000694
 800b674:	200006fc 	.word	0x200006fc

0800b678 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800b67e:	4b05      	ldr	r3, [pc, #20]	; (800b694 <xTaskGetCurrentTaskHandle+0x1c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	607b      	str	r3, [r7, #4]

        return xReturn;
 800b684:	687b      	ldr	r3, [r7, #4]
    }
 800b686:	4618      	mov	r0, r3
 800b688:	370c      	adds	r7, #12
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	200005dc 	.word	0x200005dc

0800b698 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800b69e:	4b0b      	ldr	r3, [pc, #44]	; (800b6cc <xTaskGetSchedulerState+0x34>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d102      	bne.n	800b6ac <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	607b      	str	r3, [r7, #4]
 800b6aa:	e008      	b.n	800b6be <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b6ac:	4b08      	ldr	r3, [pc, #32]	; (800b6d0 <xTaskGetSchedulerState+0x38>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d102      	bne.n	800b6ba <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800b6b4:	2302      	movs	r3, #2
 800b6b6:	607b      	str	r3, [r7, #4]
 800b6b8:	e001      	b.n	800b6be <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800b6be:	687b      	ldr	r3, [r7, #4]
    }
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	370c      	adds	r7, #12
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr
 800b6cc:	200006e8 	.word	0x200006e8
 800b6d0:	20000704 	.word	0x20000704

0800b6d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b086      	sub	sp, #24
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800b6de:	4b36      	ldr	r3, [pc, #216]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0xe4>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6e4:	4b35      	ldr	r3, [pc, #212]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7fe fc58 	bl	8009fa0 <uxListRemove>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10b      	bne.n	800b70e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b6f6:	4b31      	ldr	r3, [pc, #196]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b702:	43da      	mvns	r2, r3
 800b704:	4b2e      	ldr	r3, [pc, #184]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4013      	ands	r3, r2
 800b70a:	4a2d      	ldr	r2, [pc, #180]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0xec>)
 800b70c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b714:	d124      	bne.n	800b760 <prvAddCurrentTaskToDelayedList+0x8c>
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d021      	beq.n	800b760 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b71c:	4b29      	ldr	r3, [pc, #164]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	613b      	str	r3, [r7, #16]
 800b722:	4b26      	ldr	r3, [pc, #152]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	609a      	str	r2, [r3, #8]
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	6892      	ldr	r2, [r2, #8]
 800b732:	60da      	str	r2, [r3, #12]
 800b734:	4b21      	ldr	r3, [pc, #132]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b736:	681a      	ldr	r2, [r3, #0]
 800b738:	693b      	ldr	r3, [r7, #16]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	3204      	adds	r2, #4
 800b73e:	605a      	str	r2, [r3, #4]
 800b740:	4b1e      	ldr	r3, [pc, #120]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	1d1a      	adds	r2, r3, #4
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	609a      	str	r2, [r3, #8]
 800b74a:	4b1c      	ldr	r3, [pc, #112]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a1d      	ldr	r2, [pc, #116]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800b750:	615a      	str	r2, [r3, #20]
 800b752:	4b1c      	ldr	r3, [pc, #112]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3301      	adds	r3, #1
 800b758:	4a1a      	ldr	r2, [pc, #104]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0xf0>)
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b75e:	e026      	b.n	800b7ae <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800b760:	697a      	ldr	r2, [r7, #20]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	4413      	add	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b768:	4b14      	ldr	r3, [pc, #80]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	429a      	cmp	r2, r3
 800b776:	d209      	bcs.n	800b78c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b778:	4b13      	ldr	r3, [pc, #76]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0xf4>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7fe fbd2 	bl	8009f2e <vListInsert>
}
 800b78a:	e010      	b.n	800b7ae <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b78c:	4b0f      	ldr	r3, [pc, #60]	; (800b7cc <prvAddCurrentTaskToDelayedList+0xf8>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <prvAddCurrentTaskToDelayedList+0xe8>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	3304      	adds	r3, #4
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7fe fbc8 	bl	8009f2e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b79e:	4b0c      	ldr	r3, [pc, #48]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d202      	bcs.n	800b7ae <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800b7a8:	4a09      	ldr	r2, [pc, #36]	; (800b7d0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	6013      	str	r3, [r2, #0]
}
 800b7ae:	bf00      	nop
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	200006e0 	.word	0x200006e0
 800b7bc:	200005dc 	.word	0x200005dc
 800b7c0:	200006e4 	.word	0x200006e4
 800b7c4:	200006c8 	.word	0x200006c8
 800b7c8:	20000698 	.word	0x20000698
 800b7cc:	20000694 	.word	0x20000694
 800b7d0:	200006fc 	.word	0x200006fc

0800b7d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b7de:	f000 fa3f 	bl	800bc60 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b7e2:	4b0e      	ldr	r3, [pc, #56]	; (800b81c <xTimerCreateTimerTask+0x48>)
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00a      	beq.n	800b800 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b7ea:	4b0d      	ldr	r3, [pc, #52]	; (800b820 <xTimerCreateTimerTask+0x4c>)
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2278      	movs	r2, #120	; 0x78
 800b7f6:	490b      	ldr	r1, [pc, #44]	; (800b824 <xTimerCreateTimerTask+0x50>)
 800b7f8:	480b      	ldr	r0, [pc, #44]	; (800b828 <xTimerCreateTimerTask+0x54>)
 800b7fa:	f7fe fec9 	bl	800a590 <xTaskCreate>
 800b7fe:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d104      	bne.n	800b810 <xTimerCreateTimerTask+0x3c>
 800b806:	f240 1119 	movw	r1, #281	; 0x119
 800b80a:	4808      	ldr	r0, [pc, #32]	; (800b82c <xTimerCreateTimerTask+0x58>)
 800b80c:	f001 fbfe 	bl	800d00c <vAssertCalled>
        return xReturn;
 800b810:	687b      	ldr	r3, [r7, #4]
    }
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	20000740 	.word	0x20000740
 800b820:	20000744 	.word	0x20000744
 800b824:	08012af4 	.word	0x08012af4
 800b828:	0800b8d5 	.word	0x0800b8d5
 800b82c:	08012afc 	.word	0x08012afc

0800b830 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b83c:	e008      	b.n	800b850 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	699b      	ldr	r3, [r3, #24]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	4413      	add	r3, r2
 800b846:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	6a1b      	ldr	r3, [r3, #32]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	699a      	ldr	r2, [r3, #24]
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	18d1      	adds	r1, r2, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	f000 f8dd 	bl	800ba1c <prvInsertTimerInActiveList>
 800b862:	4603      	mov	r3, r0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d1ea      	bne.n	800b83e <prvReloadTimer+0xe>
        }
    }
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b87e:	4b14      	ldr	r3, [pc, #80]	; (800b8d0 <prvProcessExpiredTimer+0x5c>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fb87 	bl	8009fa0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d005      	beq.n	800b8ac <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f7ff ffc3 	bl	800b830 <prvReloadTimer>
 800b8aa:	e008      	b.n	800b8be <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6a1b      	ldr	r3, [r3, #32]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	4798      	blx	r3
    }
 800b8c6:	bf00      	nop
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20000738 	.word	0x20000738

0800b8d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8dc:	f107 0308 	add.w	r3, r7, #8
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 f857 	bl	800b994 <prvGetNextExpireTime>
 800b8e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f000 f803 	bl	800b8f8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b8f2:	f000 f8d5 	bl	800baa0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8f6:	e7f1      	b.n	800b8dc <prvTimerTask+0x8>

0800b8f8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b902:	f7ff f985 	bl	800ac10 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b906:	f107 0308 	add.w	r3, r7, #8
 800b90a:	4618      	mov	r0, r3
 800b90c:	f000 f866 	bl	800b9dc <prvSampleTimeNow>
 800b910:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d130      	bne.n	800b97a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10a      	bne.n	800b934 <prvProcessTimerOrBlockTask+0x3c>
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	429a      	cmp	r2, r3
 800b924:	d806      	bhi.n	800b934 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b926:	f7ff f981 	bl	800ac2c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b92a:	68f9      	ldr	r1, [r7, #12]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7ff ffa1 	bl	800b874 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b932:	e024      	b.n	800b97e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d008      	beq.n	800b94c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b93a:	4b13      	ldr	r3, [pc, #76]	; (800b988 <prvProcessTimerOrBlockTask+0x90>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d101      	bne.n	800b948 <prvProcessTimerOrBlockTask+0x50>
 800b944:	2301      	movs	r3, #1
 800b946:	e000      	b.n	800b94a <prvProcessTimerOrBlockTask+0x52>
 800b948:	2300      	movs	r3, #0
 800b94a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b94c:	4b0f      	ldr	r3, [pc, #60]	; (800b98c <prvProcessTimerOrBlockTask+0x94>)
 800b94e:	6818      	ldr	r0, [r3, #0]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	1ad3      	subs	r3, r2, r3
 800b956:	683a      	ldr	r2, [r7, #0]
 800b958:	4619      	mov	r1, r3
 800b95a:	f7fe fde5 	bl	800a528 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b95e:	f7ff f965 	bl	800ac2c <xTaskResumeAll>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10a      	bne.n	800b97e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b968:	4b09      	ldr	r3, [pc, #36]	; (800b990 <prvProcessTimerOrBlockTask+0x98>)
 800b96a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b96e:	601a      	str	r2, [r3, #0]
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	f3bf 8f6f 	isb	sy
    }
 800b978:	e001      	b.n	800b97e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b97a:	f7ff f957 	bl	800ac2c <xTaskResumeAll>
    }
 800b97e:	bf00      	nop
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	2000073c 	.word	0x2000073c
 800b98c:	20000740 	.word	0x20000740
 800b990:	e000ed04 	.word	0xe000ed04

0800b994 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b99c:	4b0e      	ldr	r3, [pc, #56]	; (800b9d8 <prvGetNextExpireTime+0x44>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d101      	bne.n	800b9aa <prvGetNextExpireTime+0x16>
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	e000      	b.n	800b9ac <prvGetNextExpireTime+0x18>
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d105      	bne.n	800b9c4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9b8:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <prvGetNextExpireTime+0x44>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60fb      	str	r3, [r7, #12]
 800b9c2:	e001      	b.n	800b9c8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
    }
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	20000738 	.word	0x20000738

0800b9dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b9e4:	f7ff fa1a 	bl	800ae1c <xTaskGetTickCount>
 800b9e8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ba18 <prvSampleTimeNow+0x3c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d205      	bcs.n	800ba00 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b9f4:	f000 f90e 	bl	800bc14 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	e002      	b.n	800ba06 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800ba06:	4a04      	ldr	r2, [pc, #16]	; (800ba18 <prvSampleTimeNow+0x3c>)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
    }
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	20000748 	.word	0x20000748

0800ba1c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	60b9      	str	r1, [r7, #8]
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	68fa      	ldr	r2, [r7, #12]
 800ba38:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d812      	bhi.n	800ba68 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	1ad2      	subs	r2, r2, r3
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	699b      	ldr	r3, [r3, #24]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d302      	bcc.n	800ba56 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800ba50:	2301      	movs	r3, #1
 800ba52:	617b      	str	r3, [r7, #20]
 800ba54:	e01b      	b.n	800ba8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba56:	4b10      	ldr	r3, [pc, #64]	; (800ba98 <prvInsertTimerInActiveList+0x7c>)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4610      	mov	r0, r2
 800ba62:	f7fe fa64 	bl	8009f2e <vListInsert>
 800ba66:	e012      	b.n	800ba8e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	429a      	cmp	r2, r3
 800ba6e:	d206      	bcs.n	800ba7e <prvInsertTimerInActiveList+0x62>
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	683b      	ldr	r3, [r7, #0]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d302      	bcc.n	800ba7e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	e007      	b.n	800ba8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba7e:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <prvInsertTimerInActiveList+0x80>)
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3304      	adds	r3, #4
 800ba86:	4619      	mov	r1, r3
 800ba88:	4610      	mov	r0, r2
 800ba8a:	f7fe fa50 	bl	8009f2e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800ba8e:	697b      	ldr	r3, [r7, #20]
    }
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	2000073c 	.word	0x2000073c
 800ba9c:	20000738 	.word	0x20000738

0800baa0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b086      	sub	sp, #24
 800baa4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800baa6:	e0a0      	b.n	800bbea <prvProcessReceivedCommands+0x14a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f2c0 809c 	blt.w	800bbe8 <prvProcessReceivedCommands+0x148>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	695b      	ldr	r3, [r3, #20]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d004      	beq.n	800bac6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe fa6d 	bl	8009fa0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bac6:	463b      	mov	r3, r7
 800bac8:	4618      	mov	r0, r3
 800baca:	f7ff ff87 	bl	800b9dc <prvSampleTimeNow>
 800bace:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	f200 8088 	bhi.w	800bbea <prvProcessReceivedCommands+0x14a>
 800bada:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <prvProcessReceivedCommands+0x40>)
 800badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae0:	0800bb05 	.word	0x0800bb05
 800bae4:	0800bb05 	.word	0x0800bb05
 800bae8:	0800bb6d 	.word	0x0800bb6d
 800baec:	0800bb81 	.word	0x0800bb81
 800baf0:	0800bbbf 	.word	0x0800bbbf
 800baf4:	0800bb05 	.word	0x0800bb05
 800baf8:	0800bb05 	.word	0x0800bb05
 800bafc:	0800bb6d 	.word	0x0800bb6d
 800bb00:	0800bb81 	.word	0x0800bb81
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb0a:	f043 0301 	orr.w	r3, r3, #1
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bb16:	68ba      	ldr	r2, [r7, #8]
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	699b      	ldr	r3, [r3, #24]
 800bb1c:	18d1      	adds	r1, r2, r3
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	693a      	ldr	r2, [r7, #16]
 800bb22:	6978      	ldr	r0, [r7, #20]
 800bb24:	f7ff ff7a 	bl	800ba1c <prvInsertTimerInActiveList>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d05d      	beq.n	800bbea <prvProcessReceivedCommands+0x14a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d009      	beq.n	800bb50 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	4413      	add	r3, r2
 800bb44:	693a      	ldr	r2, [r7, #16]
 800bb46:	4619      	mov	r1, r3
 800bb48:	6978      	ldr	r0, [r7, #20]
 800bb4a:	f7ff fe71 	bl	800b830 <prvReloadTimer>
 800bb4e:	e008      	b.n	800bb62 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb56:	f023 0301 	bic.w	r3, r3, #1
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	6a1b      	ldr	r3, [r3, #32]
 800bb66:	6978      	ldr	r0, [r7, #20]
 800bb68:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800bb6a:	e03e      	b.n	800bbea <prvProcessReceivedCommands+0x14a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb72:	f023 0301 	bic.w	r3, r3, #1
 800bb76:	b2da      	uxtb	r2, r3
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800bb7e:	e034      	b.n	800bbea <prvProcessReceivedCommands+0x14a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb86:	f043 0301 	orr.w	r3, r3, #1
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	697b      	ldr	r3, [r7, #20]
 800bb8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb92:	68ba      	ldr	r2, [r7, #8]
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d104      	bne.n	800bbaa <prvProcessReceivedCommands+0x10a>
 800bba0:	f44f 7156 	mov.w	r1, #856	; 0x358
 800bba4:	4819      	ldr	r0, [pc, #100]	; (800bc0c <prvProcessReceivedCommands+0x16c>)
 800bba6:	f001 fa31 	bl	800d00c <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	699a      	ldr	r2, [r3, #24]
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	18d1      	adds	r1, r2, r3
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	6978      	ldr	r0, [r7, #20]
 800bbb8:	f7ff ff30 	bl	800ba1c <prvInsertTimerInActiveList>
                        break;
 800bbbc:	e015      	b.n	800bbea <prvProcessReceivedCommands+0x14a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bbbe:	697b      	ldr	r3, [r7, #20]
 800bbc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d103      	bne.n	800bbd4 <prvProcessReceivedCommands+0x134>
                                {
                                    vPortFree( pxTimer );
 800bbcc:	6978      	ldr	r0, [r7, #20]
 800bbce:	f000 fb01 	bl	800c1d4 <vPortFree>
 800bbd2:	e00a      	b.n	800bbea <prvProcessReceivedCommands+0x14a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbda:	f023 0301 	bic.w	r3, r3, #1
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800bbe6:	e000      	b.n	800bbea <prvProcessReceivedCommands+0x14a>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800bbe8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbea:	4b09      	ldr	r3, [pc, #36]	; (800bc10 <prvProcessReceivedCommands+0x170>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	1d39      	adds	r1, r7, #4
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7fe faf2 	bl	800a1dc <xQueueReceive>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f47f af54 	bne.w	800baa8 <prvProcessReceivedCommands+0x8>
        }
    }
 800bc00:	bf00      	nop
 800bc02:	bf00      	nop
 800bc04:	3718      	adds	r7, #24
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	08012afc 	.word	0x08012afc
 800bc10:	20000740 	.word	0x20000740

0800bc14 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc1a:	e009      	b.n	800bc30 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <prvSwitchTimerLists+0x44>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800bc26:	f04f 31ff 	mov.w	r1, #4294967295
 800bc2a:	6838      	ldr	r0, [r7, #0]
 800bc2c:	f7ff fe22 	bl	800b874 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc30:	4b09      	ldr	r3, [pc, #36]	; (800bc58 <prvSwitchTimerLists+0x44>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1f0      	bne.n	800bc1c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800bc3a:	4b07      	ldr	r3, [pc, #28]	; (800bc58 <prvSwitchTimerLists+0x44>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800bc40:	4b06      	ldr	r3, [pc, #24]	; (800bc5c <prvSwitchTimerLists+0x48>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a04      	ldr	r2, [pc, #16]	; (800bc58 <prvSwitchTimerLists+0x44>)
 800bc46:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800bc48:	4a04      	ldr	r2, [pc, #16]	; (800bc5c <prvSwitchTimerLists+0x48>)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6013      	str	r3, [r2, #0]
    }
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20000738 	.word	0x20000738
 800bc5c:	2000073c 	.word	0x2000073c

0800bc60 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800bc60:	b580      	push	{r7, lr}
 800bc62:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800bc64:	f000 f952 	bl	800bf0c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800bc68:	4b12      	ldr	r3, [pc, #72]	; (800bcb4 <prvCheckForValidListAndQueue+0x54>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d11d      	bne.n	800bcac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800bc70:	4811      	ldr	r0, [pc, #68]	; (800bcb8 <prvCheckForValidListAndQueue+0x58>)
 800bc72:	f7fe f90b 	bl	8009e8c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800bc76:	4811      	ldr	r0, [pc, #68]	; (800bcbc <prvCheckForValidListAndQueue+0x5c>)
 800bc78:	f7fe f908 	bl	8009e8c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800bc7c:	4b10      	ldr	r3, [pc, #64]	; (800bcc0 <prvCheckForValidListAndQueue+0x60>)
 800bc7e:	4a0e      	ldr	r2, [pc, #56]	; (800bcb8 <prvCheckForValidListAndQueue+0x58>)
 800bc80:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800bc82:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <prvCheckForValidListAndQueue+0x64>)
 800bc84:	4a0d      	ldr	r2, [pc, #52]	; (800bcbc <prvCheckForValidListAndQueue+0x5c>)
 800bc86:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800bc88:	2200      	movs	r2, #0
 800bc8a:	210c      	movs	r1, #12
 800bc8c:	200a      	movs	r0, #10
 800bc8e:	f7fe fa37 	bl	800a100 <xQueueGenericCreate>
 800bc92:	4603      	mov	r3, r0
 800bc94:	4a07      	ldr	r2, [pc, #28]	; (800bcb4 <prvCheckForValidListAndQueue+0x54>)
 800bc96:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800bc98:	4b06      	ldr	r3, [pc, #24]	; (800bcb4 <prvCheckForValidListAndQueue+0x54>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d005      	beq.n	800bcac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bca0:	4b04      	ldr	r3, [pc, #16]	; (800bcb4 <prvCheckForValidListAndQueue+0x54>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4908      	ldr	r1, [pc, #32]	; (800bcc8 <prvCheckForValidListAndQueue+0x68>)
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe fbf6 	bl	800a498 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800bcac:	f000 f958 	bl	800bf60 <vPortExitCritical>
    }
 800bcb0:	bf00      	nop
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	20000740 	.word	0x20000740
 800bcb8:	20000710 	.word	0x20000710
 800bcbc:	20000724 	.word	0x20000724
 800bcc0:	20000738 	.word	0x20000738
 800bcc4:	2000073c 	.word	0x2000073c
 800bcc8:	08012b18 	.word	0x08012b18

0800bccc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3b04      	subs	r3, #4
 800bcdc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bce4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3b04      	subs	r3, #4
 800bcea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f023 0201 	bic.w	r2, r3, #1
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	3b04      	subs	r3, #4
 800bcfa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800bcfc:	4a0c      	ldr	r2, [pc, #48]	; (800bd30 <pxPortInitialiseStack+0x64>)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3b14      	subs	r3, #20
 800bd06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	3b04      	subs	r3, #4
 800bd12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f06f 0202 	mvn.w	r2, #2
 800bd1a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	3b20      	subs	r3, #32
 800bd20:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800bd22:	68fb      	ldr	r3, [r7, #12]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3714      	adds	r7, #20
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr
 800bd30:	0800bd35 	.word	0x0800bd35

0800bd34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800bd3e:	4b0e      	ldr	r3, [pc, #56]	; (800bd78 <prvTaskExitError+0x44>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd46:	d003      	beq.n	800bd50 <prvTaskExitError+0x1c>
 800bd48:	21e7      	movs	r1, #231	; 0xe7
 800bd4a:	480c      	ldr	r0, [pc, #48]	; (800bd7c <prvTaskExitError+0x48>)
 800bd4c:	f001 f95e 	bl	800d00c <vAssertCalled>
        __asm volatile
 800bd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd54:	f383 8811 	msr	BASEPRI, r3
 800bd58:	f3bf 8f6f 	isb	sy
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	607b      	str	r3, [r7, #4]
    }
 800bd62:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800bd64:	bf00      	nop
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d0fc      	beq.n	800bd66 <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800bd6c:	bf00      	nop
 800bd6e:	bf00      	nop
 800bd70:	3708      	adds	r7, #8
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	2000002c 	.word	0x2000002c
 800bd7c:	08012b20 	.word	0x08012b20

0800bd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800bd80:	4b07      	ldr	r3, [pc, #28]	; (800bda0 <pxCurrentTCBConst2>)
 800bd82:	6819      	ldr	r1, [r3, #0]
 800bd84:	6808      	ldr	r0, [r1, #0]
 800bd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd8a:	f380 8809 	msr	PSP, r0
 800bd8e:	f3bf 8f6f 	isb	sy
 800bd92:	f04f 0000 	mov.w	r0, #0
 800bd96:	f380 8811 	msr	BASEPRI, r0
 800bd9a:	4770      	bx	lr
 800bd9c:	f3af 8000 	nop.w

0800bda0 <pxCurrentTCBConst2>:
 800bda0:	200005dc 	.word	0x200005dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800bda4:	bf00      	nop
 800bda6:	bf00      	nop

0800bda8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800bda8:	4808      	ldr	r0, [pc, #32]	; (800bdcc <prvPortStartFirstTask+0x24>)
 800bdaa:	6800      	ldr	r0, [r0, #0]
 800bdac:	6800      	ldr	r0, [r0, #0]
 800bdae:	f380 8808 	msr	MSP, r0
 800bdb2:	f04f 0000 	mov.w	r0, #0
 800bdb6:	f380 8814 	msr	CONTROL, r0
 800bdba:	b662      	cpsie	i
 800bdbc:	b661      	cpsie	f
 800bdbe:	f3bf 8f4f 	dsb	sy
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	df00      	svc	0
 800bdc8:	bf00      	nop
 800bdca:	0000      	.short	0x0000
 800bdcc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800bdd0:	bf00      	nop
 800bdd2:	bf00      	nop

0800bdd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b084      	sub	sp, #16
 800bdd8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bdda:	4b42      	ldr	r3, [pc, #264]	; (800bee4 <xPortStartScheduler+0x110>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a42      	ldr	r2, [pc, #264]	; (800bee8 <xPortStartScheduler+0x114>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d104      	bne.n	800bdee <xPortStartScheduler+0x1a>
 800bde4:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800bde8:	4840      	ldr	r0, [pc, #256]	; (800beec <xPortStartScheduler+0x118>)
 800bdea:	f001 f90f 	bl	800d00c <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bdee:	4b3d      	ldr	r3, [pc, #244]	; (800bee4 <xPortStartScheduler+0x110>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a3f      	ldr	r2, [pc, #252]	; (800bef0 <xPortStartScheduler+0x11c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d104      	bne.n	800be02 <xPortStartScheduler+0x2e>
 800bdf8:	f240 112f 	movw	r1, #303	; 0x12f
 800bdfc:	483b      	ldr	r0, [pc, #236]	; (800beec <xPortStartScheduler+0x118>)
 800bdfe:	f001 f905 	bl	800d00c <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800be02:	4b3c      	ldr	r3, [pc, #240]	; (800bef4 <xPortStartScheduler+0x120>)
 800be04:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	22ff      	movs	r2, #255	; 0xff
 800be12:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	b2db      	uxtb	r3, r3
 800be20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800be24:	b2da      	uxtb	r2, r3
 800be26:	4b34      	ldr	r3, [pc, #208]	; (800bef8 <xPortStartScheduler+0x124>)
 800be28:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800be2a:	4b34      	ldr	r3, [pc, #208]	; (800befc <xPortStartScheduler+0x128>)
 800be2c:	2207      	movs	r2, #7
 800be2e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be30:	e009      	b.n	800be46 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 800be32:	4b32      	ldr	r3, [pc, #200]	; (800befc <xPortStartScheduler+0x128>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	3b01      	subs	r3, #1
 800be38:	4a30      	ldr	r2, [pc, #192]	; (800befc <xPortStartScheduler+0x128>)
 800be3a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	005b      	lsls	r3, r3, #1
 800be42:	b2db      	uxtb	r3, r3
 800be44:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800be46:	79fb      	ldrb	r3, [r7, #7]
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be4e:	2b80      	cmp	r3, #128	; 0x80
 800be50:	d0ef      	beq.n	800be32 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800be52:	4b2a      	ldr	r3, [pc, #168]	; (800befc <xPortStartScheduler+0x128>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f1c3 0307 	rsb	r3, r3, #7
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	d004      	beq.n	800be68 <xPortStartScheduler+0x94>
 800be5e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800be62:	4822      	ldr	r0, [pc, #136]	; (800beec <xPortStartScheduler+0x118>)
 800be64:	f001 f8d2 	bl	800d00c <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800be68:	4b24      	ldr	r3, [pc, #144]	; (800befc <xPortStartScheduler+0x128>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f1c3 0307 	rsb	r3, r3, #7
 800be70:	2b04      	cmp	r3, #4
 800be72:	d004      	beq.n	800be7e <xPortStartScheduler+0xaa>
 800be74:	f240 1161 	movw	r1, #353	; 0x161
 800be78:	481c      	ldr	r0, [pc, #112]	; (800beec <xPortStartScheduler+0x118>)
 800be7a:	f001 f8c7 	bl	800d00c <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800be7e:	4b1f      	ldr	r3, [pc, #124]	; (800befc <xPortStartScheduler+0x128>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	021b      	lsls	r3, r3, #8
 800be84:	4a1d      	ldr	r2, [pc, #116]	; (800befc <xPortStartScheduler+0x128>)
 800be86:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800be88:	4b1c      	ldr	r3, [pc, #112]	; (800befc <xPortStartScheduler+0x128>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800be90:	4a1a      	ldr	r2, [pc, #104]	; (800befc <xPortStartScheduler+0x128>)
 800be92:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	b2da      	uxtb	r2, r3
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800be9c:	4b18      	ldr	r3, [pc, #96]	; (800bf00 <xPortStartScheduler+0x12c>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a17      	ldr	r2, [pc, #92]	; (800bf00 <xPortStartScheduler+0x12c>)
 800bea2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bea6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800bea8:	4b15      	ldr	r3, [pc, #84]	; (800bf00 <xPortStartScheduler+0x12c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	4a14      	ldr	r2, [pc, #80]	; (800bf00 <xPortStartScheduler+0x12c>)
 800beae:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800beb2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800beb4:	f000 f8d2 	bl	800c05c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800beb8:	4b12      	ldr	r3, [pc, #72]	; (800bf04 <xPortStartScheduler+0x130>)
 800beba:	2200      	movs	r2, #0
 800bebc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800bebe:	f000 f8f1 	bl	800c0a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bec2:	4b11      	ldr	r3, [pc, #68]	; (800bf08 <xPortStartScheduler+0x134>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4a10      	ldr	r2, [pc, #64]	; (800bf08 <xPortStartScheduler+0x134>)
 800bec8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800becc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800bece:	f7ff ff6b 	bl	800bda8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800bed2:	f7ff f90d 	bl	800b0f0 <vTaskSwitchContext>
    prvTaskExitError();
 800bed6:	f7ff ff2d 	bl	800bd34 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3710      	adds	r7, #16
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	e000ed00 	.word	0xe000ed00
 800bee8:	410fc271 	.word	0x410fc271
 800beec:	08012b20 	.word	0x08012b20
 800bef0:	410fc270 	.word	0x410fc270
 800bef4:	e000e400 	.word	0xe000e400
 800bef8:	2000074c 	.word	0x2000074c
 800befc:	20000750 	.word	0x20000750
 800bf00:	e000ed20 	.word	0xe000ed20
 800bf04:	2000002c 	.word	0x2000002c
 800bf08:	e000ef34 	.word	0xe000ef34

0800bf0c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
        __asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	607b      	str	r3, [r7, #4]
    }
 800bf24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800bf26:	4b0b      	ldr	r3, [pc, #44]	; (800bf54 <vPortEnterCritical+0x48>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	3301      	adds	r3, #1
 800bf2c:	4a09      	ldr	r2, [pc, #36]	; (800bf54 <vPortEnterCritical+0x48>)
 800bf2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800bf30:	4b08      	ldr	r3, [pc, #32]	; (800bf54 <vPortEnterCritical+0x48>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d109      	bne.n	800bf4c <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bf38:	4b07      	ldr	r3, [pc, #28]	; (800bf58 <vPortEnterCritical+0x4c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	b2db      	uxtb	r3, r3
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d004      	beq.n	800bf4c <vPortEnterCritical+0x40>
 800bf42:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800bf46:	4805      	ldr	r0, [pc, #20]	; (800bf5c <vPortEnterCritical+0x50>)
 800bf48:	f001 f860 	bl	800d00c <vAssertCalled>
    }
}
 800bf4c:	bf00      	nop
 800bf4e:	3708      	adds	r7, #8
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	2000002c 	.word	0x2000002c
 800bf58:	e000ed04 	.word	0xe000ed04
 800bf5c:	08012b20 	.word	0x08012b20

0800bf60 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800bf66:	4b0e      	ldr	r3, [pc, #56]	; (800bfa0 <vPortExitCritical+0x40>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d104      	bne.n	800bf78 <vPortExitCritical+0x18>
 800bf6e:	f240 11ad 	movw	r1, #429	; 0x1ad
 800bf72:	480c      	ldr	r0, [pc, #48]	; (800bfa4 <vPortExitCritical+0x44>)
 800bf74:	f001 f84a 	bl	800d00c <vAssertCalled>
    uxCriticalNesting--;
 800bf78:	4b09      	ldr	r3, [pc, #36]	; (800bfa0 <vPortExitCritical+0x40>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	4a08      	ldr	r2, [pc, #32]	; (800bfa0 <vPortExitCritical+0x40>)
 800bf80:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800bf82:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <vPortExitCritical+0x40>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d105      	bne.n	800bf96 <vPortExitCritical+0x36>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800bf94:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bf96:	bf00      	nop
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	2000002c 	.word	0x2000002c
 800bfa4:	08012b20 	.word	0x08012b20
	...

0800bfb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bfb0:	f3ef 8009 	mrs	r0, PSP
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	4b15      	ldr	r3, [pc, #84]	; (800c010 <pxCurrentTCBConst>)
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	f01e 0f10 	tst.w	lr, #16
 800bfc0:	bf08      	it	eq
 800bfc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bfc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfca:	6010      	str	r0, [r2, #0]
 800bfcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bfd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bfd4:	f380 8811 	msr	BASEPRI, r0
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f7ff f886 	bl	800b0f0 <vTaskSwitchContext>
 800bfe4:	f04f 0000 	mov.w	r0, #0
 800bfe8:	f380 8811 	msr	BASEPRI, r0
 800bfec:	bc09      	pop	{r0, r3}
 800bfee:	6819      	ldr	r1, [r3, #0]
 800bff0:	6808      	ldr	r0, [r1, #0]
 800bff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff6:	f01e 0f10 	tst.w	lr, #16
 800bffa:	bf08      	it	eq
 800bffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c000:	f380 8809 	msr	PSP, r0
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	f3af 8000 	nop.w

0800c010 <pxCurrentTCBConst>:
 800c010:	200005dc 	.word	0x200005dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800c014:	bf00      	nop
 800c016:	bf00      	nop

0800c018 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
        __asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	607b      	str	r3, [r7, #4]
    }
 800c030:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800c032:	f7fe ff15 	bl	800ae60 <xTaskIncrementTick>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d003      	beq.n	800c044 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c03c:	4b06      	ldr	r3, [pc, #24]	; (800c058 <SysTick_Handler+0x40>)
 800c03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c042:	601a      	str	r2, [r3, #0]
 800c044:	2300      	movs	r3, #0
 800c046:	603b      	str	r3, [r7, #0]
        __asm volatile
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f383 8811 	msr	BASEPRI, r3
    }
 800c04e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800c050:	bf00      	nop
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	e000ed04 	.word	0xe000ed04

0800c05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c060:	4b0b      	ldr	r3, [pc, #44]	; (800c090 <vPortSetupTimerInterrupt+0x34>)
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c066:	4b0b      	ldr	r3, [pc, #44]	; (800c094 <vPortSetupTimerInterrupt+0x38>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c06c:	4b0a      	ldr	r3, [pc, #40]	; (800c098 <vPortSetupTimerInterrupt+0x3c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a0a      	ldr	r2, [pc, #40]	; (800c09c <vPortSetupTimerInterrupt+0x40>)
 800c072:	fba2 2303 	umull	r2, r3, r2, r3
 800c076:	099b      	lsrs	r3, r3, #6
 800c078:	4a09      	ldr	r2, [pc, #36]	; (800c0a0 <vPortSetupTimerInterrupt+0x44>)
 800c07a:	3b01      	subs	r3, #1
 800c07c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c07e:	4b04      	ldr	r3, [pc, #16]	; (800c090 <vPortSetupTimerInterrupt+0x34>)
 800c080:	2207      	movs	r2, #7
 800c082:	601a      	str	r2, [r3, #0]
}
 800c084:	bf00      	nop
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop
 800c090:	e000e010 	.word	0xe000e010
 800c094:	e000e018 	.word	0xe000e018
 800c098:	20000004 	.word	0x20000004
 800c09c:	10624dd3 	.word	0x10624dd3
 800c0a0:	e000e014 	.word	0xe000e014

0800c0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800c0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c0b4 <vPortEnableVFP+0x10>
 800c0a8:	6801      	ldr	r1, [r0, #0]
 800c0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c0ae:	6001      	str	r1, [r0, #0]
 800c0b0:	4770      	bx	lr
 800c0b2:	0000      	.short	0x0000
 800c0b4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800c0b8:	bf00      	nop
 800c0ba:	bf00      	nop

0800c0bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b082      	sub	sp, #8
 800c0c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800c0c2:	f3ef 8305 	mrs	r3, IPSR
 800c0c6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2b0f      	cmp	r3, #15
 800c0cc:	d90e      	bls.n	800c0ec <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c0ce:	4a10      	ldr	r2, [pc, #64]	; (800c110 <vPortValidateInterruptPriority+0x54>)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c0d8:	4b0e      	ldr	r3, [pc, #56]	; (800c114 <vPortValidateInterruptPriority+0x58>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	78fa      	ldrb	r2, [r7, #3]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d204      	bcs.n	800c0ec <vPortValidateInterruptPriority+0x30>
 800c0e2:	f240 21fe 	movw	r1, #766	; 0x2fe
 800c0e6:	480c      	ldr	r0, [pc, #48]	; (800c118 <vPortValidateInterruptPriority+0x5c>)
 800c0e8:	f000 ff90 	bl	800d00c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c0ec:	4b0b      	ldr	r3, [pc, #44]	; (800c11c <vPortValidateInterruptPriority+0x60>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c0f4:	4b0a      	ldr	r3, [pc, #40]	; (800c120 <vPortValidateInterruptPriority+0x64>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d904      	bls.n	800c106 <vPortValidateInterruptPriority+0x4a>
 800c0fc:	f240 310e 	movw	r1, #782	; 0x30e
 800c100:	4805      	ldr	r0, [pc, #20]	; (800c118 <vPortValidateInterruptPriority+0x5c>)
 800c102:	f000 ff83 	bl	800d00c <vAssertCalled>
    }
 800c106:	bf00      	nop
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	e000e3f0 	.word	0xe000e3f0
 800c114:	2000074c 	.word	0x2000074c
 800c118:	08012b20 	.word	0x08012b20
 800c11c:	e000ed0c 	.word	0xe000ed0c
 800c120:	20000750 	.word	0x20000750

0800c124 <vConfigureTimerForRunTimeStats>:

static TIM_HandleTypeDef *vRuntimeCounter = NULL;

volatile uint32_t ulHighFrequencyTimerTicks = 0;

void vConfigureTimerForRunTimeStats( void ) {
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
#ifdef configUsedTimer
    vRuntimeCounter = &configUsedTimer; // defined in FreeRTOSConfig.h
 800c128:	4b0e      	ldr	r3, [pc, #56]	; (800c164 <vConfigureTimerForRunTimeStats+0x40>)
 800c12a:	4a0f      	ldr	r2, [pc, #60]	; (800c168 <vConfigureTimerForRunTimeStats+0x44>)
 800c12c:	601a      	str	r2, [r3, #0]
    if(vRuntimeCounter->Instance == TIM2 || vRuntimeCounter->Instance == TIM5)
 800c12e:	4b0d      	ldr	r3, [pc, #52]	; (800c164 <vConfigureTimerForRunTimeStats+0x40>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c138:	d005      	beq.n	800c146 <vConfigureTimerForRunTimeStats+0x22>
 800c13a:	4b0a      	ldr	r3, [pc, #40]	; (800c164 <vConfigureTimerForRunTimeStats+0x40>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	4a0a      	ldr	r2, [pc, #40]	; (800c16c <vConfigureTimerForRunTimeStats+0x48>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d105      	bne.n	800c152 <vConfigureTimerForRunTimeStats+0x2e>
    {
       HAL_TIM_Base_Start(vRuntimeCounter);
 800c146:	4b07      	ldr	r3, [pc, #28]	; (800c164 <vConfigureTimerForRunTimeStats+0x40>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f8 f94a 	bl	80043e4 <HAL_TIM_Base_Start>
 800c150:	e005      	b.n	800c15e <vConfigureTimerForRunTimeStats+0x3a>
    }
    else
    {
       HAL_TIM_Base_Start_IT(vRuntimeCounter);
 800c152:	4b04      	ldr	r3, [pc, #16]	; (800c164 <vConfigureTimerForRunTimeStats+0x40>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4618      	mov	r0, r3
 800c158:	f7f8 f9ac 	bl	80044b4 <HAL_TIM_Base_Start_IT>
    }
#else
#error No Timer specified for runtime stats.
#endif
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	bd80      	pop	{r7, pc}
 800c162:	bf00      	nop
 800c164:	20000754 	.word	0x20000754
 800c168:	20000204 	.word	0x20000204
 800c16c:	40000c00 	.word	0x40000c00

0800c170 <vGetRuntimeCounter>:

uint32_t vGetRuntimeCounter()
{
 800c170:	b480      	push	{r7}
 800c172:	af00      	add	r7, sp, #0
    if(vRuntimeCounter->Instance == TIM2 || vRuntimeCounter->Instance == TIM5)
 800c174:	4b0b      	ldr	r3, [pc, #44]	; (800c1a4 <vGetRuntimeCounter+0x34>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c17e:	d005      	beq.n	800c18c <vGetRuntimeCounter+0x1c>
 800c180:	4b08      	ldr	r3, [pc, #32]	; (800c1a4 <vGetRuntimeCounter+0x34>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a08      	ldr	r2, [pc, #32]	; (800c1a8 <vGetRuntimeCounter+0x38>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d104      	bne.n	800c196 <vGetRuntimeCounter+0x26>
        return __HAL_TIM_GET_COUNTER(vRuntimeCounter);
 800c18c:	4b05      	ldr	r3, [pc, #20]	; (800c1a4 <vGetRuntimeCounter+0x34>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c194:	e001      	b.n	800c19a <vGetRuntimeCounter+0x2a>
    else
        return ulHighFrequencyTimerTicks;
 800c196:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <vGetRuntimeCounter+0x3c>)
 800c198:	681b      	ldr	r3, [r3, #0]
}
 800c19a:	4618      	mov	r0, r3
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	20000754 	.word	0x20000754
 800c1a8:	40000c00 	.word	0x40000c00
 800c1ac:	20000758 	.word	0x20000758

0800c1b0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b084      	sub	sp, #16
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800c1b8:	f7fe fd2a 	bl	800ac10 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f004 fd85 	bl	8010ccc <malloc>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800c1c6:	f7fe fd31 	bl	800ac2c <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b082      	sub	sp, #8
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
    if( pv )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d006      	beq.n	800c1f0 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800c1e2:	f7fe fd15 	bl	800ac10 <vTaskSuspendAll>
        {
            free( pv );
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f004 fd78 	bl	8010cdc <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800c1ec:	f7fe fd1e 	bl	800ac2c <xTaskResumeAll>
    }
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <__malloc_lock>:
#include <reent.h>
#include "FreeRTOS.h"
#include <task.h>

void __malloc_lock(struct _reent* REENT)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
 800c200:	f7fe fd06 	bl	800ac10 <vTaskSuspendAll>
}
 800c204:	bf00      	nop
 800c206:	3708      	adds	r7, #8
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <__malloc_unlock>:


void __malloc_unlock(struct _reent* REENT)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
    ( void ) xTaskResumeAll();
 800c214:	f7fe fd0a 	bl	800ac2c <xTaskResumeAll>
}
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <_ZNK4RTOS4Task13getTaskHandleEv>:

    /**
     * get task handle
     * @return RTOS id of task or 0 if task is not created in RTOS
     */
    osThreadId getTaskHandle() const { return m_handle;}
 800c220:	b480      	push	{r7}
 800c222:	b083      	sub	sp, #12
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	691b      	ldr	r3, [r3, #16]
 800c22c:	4618      	mov	r0, r3
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c236:	4770      	bx	lr

0800c238 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>:
    */
   static uint32_t getMaxSystemMailNumber()  {return m_maxSystemMailNumber;}
private:
   struct MboxData_t
   {
       MboxData_t(osMailQId _id = 0, size_t _size = 0):id(_id), size(_size) {}
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	601a      	str	r2, [r3, #0]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	605a      	str	r2, [r3, #4]
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	4618      	mov	r0, r3
 800c254:	3714      	adds	r7, #20
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr

0800c25e <_ZN4RTOS10PostOfficeD1Ev>:
   };

   PostOffice();
   PostOffice(const PostOffice&) = delete;
   PostOffice operator = (const PostOffice&) = delete;
   ~PostOffice() {};
 800c25e:	b580      	push	{r7, lr}
 800c260:	b082      	sub	sp, #8
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	331c      	adds	r3, #28
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f92a 	bl	800c4c4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbED1Ev>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f914 	bl	800c4a0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEED1Ev>
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <_ZNK4RTOS4Task11getTaskNameEv>:

    /**
     * get task name
     * @return Name of Task
     */
    const char * getTaskName() const { return m_Name;}
 800c282:	b480      	push	{r7}
 800c284:	b083      	sub	sp, #12
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	4618      	mov	r0, r3
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
	...

0800c29c <_ZN4RTOS10PostOfficeC1Ev>:
{


uint32_t PostOffice::m_maxSystemMailNumber = 10;   ///< default for number of message in system

PostOffice::PostOffice():
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b086      	sub	sp, #24
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_RTOS_POSTOFFICE
   m_timeout(2000),
#else
   m_timeout(osWaitForever),
#endif
   m_mailPool(0)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2119      	movs	r1, #25
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 f91d 	bl	800c4e8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	331c      	adds	r3, #28
 800c2b2:	4a14      	ldr	r2, [pc, #80]	; (800c304 <_ZN4RTOS10PostOfficeC1Ev+0x68>)
 800c2b4:	6812      	ldr	r2, [r2, #0]
 800c2b6:	4611      	mov	r1, r2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f97b 	bl	800c5b4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800c2c4:	635a      	str	r2, [r3, #52]	; 0x34
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	639a      	str	r2, [r3, #56]	; 0x38

{
   if (m_maxSystemMailNumber)
 800c2cc:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <_ZN4RTOS10PostOfficeC1Ev+0x68>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d012      	beq.n	800c2fa <_ZN4RTOS10PostOfficeC1Ev+0x5e>
   {
      osPoolDef_t messagePool = {m_maxSystemMailNumber,
 800c2d4:	f107 030c 	add.w	r3, r7, #12
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]
 800c2dc:	605a      	str	r2, [r3, #4]
 800c2de:	609a      	str	r2, [r3, #8]
 800c2e0:	2310      	movs	r3, #16
 800c2e2:	613b      	str	r3, [r7, #16]
                                 sizeof(mailStruct_t),
                                 0};
 800c2e4:	4b07      	ldr	r3, [pc, #28]	; (800c304 <_ZN4RTOS10PostOfficeC1Ev+0x68>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	60fb      	str	r3, [r7, #12]
     m_mailPool = osPoolCreate(&messagePool);
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f001 f8e0 	bl	800d4b4 <osPoolCreate>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	639a      	str	r2, [r3, #56]	; 0x38
   }
}
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	20000030 	.word	0x20000030

0800c308 <__tcf_0>:


PostOffice& PostOffice::getInstance()
{
   static PostOffice m_instance;
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__tcf_0+0xc>)
 800c30e:	f7ff ffa6 	bl	800c25e <_ZN4RTOS10PostOfficeD1Ev>
 800c312:	bd80      	pop	{r7, pc}
 800c314:	2000075c 	.word	0x2000075c

0800c318 <_ZN4RTOS10PostOffice11getInstanceEv>:
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	af00      	add	r7, sp, #0
   static PostOffice m_instance;
 800c31c:	4b12      	ldr	r3, [pc, #72]	; (800c368 <_ZN4RTOS10PostOffice11getInstanceEv+0x50>)
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	f3bf 8f5b 	dmb	ish
 800c324:	b2db      	uxtb	r3, r3
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	bf0c      	ite	eq
 800c32e:	2301      	moveq	r3, #1
 800c330:	2300      	movne	r3, #0
 800c332:	b2db      	uxtb	r3, r3
 800c334:	2b00      	cmp	r3, #0
 800c336:	d013      	beq.n	800c360 <_ZN4RTOS10PostOffice11getInstanceEv+0x48>
 800c338:	480b      	ldr	r0, [pc, #44]	; (800c368 <_ZN4RTOS10PostOffice11getInstanceEv+0x50>)
 800c33a:	f004 fbc7 	bl	8010acc <__cxa_guard_acquire>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	bf14      	ite	ne
 800c344:	2301      	movne	r3, #1
 800c346:	2300      	moveq	r3, #0
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d008      	beq.n	800c360 <_ZN4RTOS10PostOffice11getInstanceEv+0x48>
 800c34e:	4807      	ldr	r0, [pc, #28]	; (800c36c <_ZN4RTOS10PostOffice11getInstanceEv+0x54>)
 800c350:	f7ff ffa4 	bl	800c29c <_ZN4RTOS10PostOfficeC1Ev>
 800c354:	4806      	ldr	r0, [pc, #24]	; (800c370 <_ZN4RTOS10PostOffice11getInstanceEv+0x58>)
 800c356:	f004 fc04 	bl	8010b62 <atexit>
 800c35a:	4803      	ldr	r0, [pc, #12]	; (800c368 <_ZN4RTOS10PostOffice11getInstanceEv+0x50>)
 800c35c:	f004 fbc2 	bl	8010ae4 <__cxa_guard_release>
   return m_instance;
 800c360:	4b02      	ldr	r3, [pc, #8]	; (800c36c <_ZN4RTOS10PostOffice11getInstanceEv+0x54>)
}
 800c362:	4618      	mov	r0, r3
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	20000798 	.word	0x20000798
 800c36c:	2000075c 	.word	0x2000075c
 800c370:	0800c309 	.word	0x0800c309

0800c374 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj>:

// param:
//
bool PostOffice::registerMailBox(const Task& obj, osMailQId mailBoxId, size_t size)
{
 800c374:	b590      	push	{r4, r7, lr}
 800c376:	b08d      	sub	sp, #52	; 0x34
 800c378:	af02      	add	r7, sp, #8
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
 800c380:	603b      	str	r3, [r7, #0]
    bool xcode = true;
 800c382:	2301      	movs	r3, #1
 800c384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osThreadId taskHandle = obj.getTaskHandle();
 800c388:	68b8      	ldr	r0, [r7, #8]
 800c38a:	f7ff ff49 	bl	800c220 <_ZNK4RTOS4Task13getTaskHandleEv>
 800c38e:	4603      	mov	r3, r0
 800c390:	61fb      	str	r3, [r7, #28]

    if (0 != mailBoxId)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d016      	beq.n	800c3c6 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x52>
    {
       MboxData_t  data = {mailBoxId, size};
 800c398:	f107 0314 	add.w	r3, r7, #20
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff ff49 	bl	800c238 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>
       m_mailBoxMap[taskHandle] = data;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f107 021c 	add.w	r2, r7, #28
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f000 f95a 	bl	800c668 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	f107 0314 	add.w	r3, r7, #20
 800c3bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3c0:	e882 0003 	stmia.w	r2, {r0, r1}
 800c3c4:	e01b      	b.n	800c3fe <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x8a>
    }
    else // deregister the message box...
    {
        auto delObj = m_mailBoxMap.erase(taskHandle);
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	f107 021c 	add.w	r2, r7, #28
 800c3cc:	4611      	mov	r1, r2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f000 f983 	bl	800c6da <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_>
 800c3d4:	6238      	str	r0, [r7, #32]
        if (0 == delObj)
 800c3d6:	6a3b      	ldr	r3, [r7, #32]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d110      	bne.n	800c3fe <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x8a>
        {
#ifdef DEBUG_RTOS_POSTOFFICE
        	fprintf(stderr, "*** %s Line %d: couldn't deregister Mailbox for task %s\n",
 800c3dc:	4b0b      	ldr	r3, [pc, #44]	; (800c40c <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x98>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68dc      	ldr	r4, [r3, #12]
 800c3e2:	68b8      	ldr	r0, [r7, #8]
 800c3e4:	f7ff ff4d 	bl	800c282 <_ZNK4RTOS4Task11getTaskNameEv>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	234d      	movs	r3, #77	; 0x4d
 800c3ee:	4a08      	ldr	r2, [pc, #32]	; (800c410 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x9c>)
 800c3f0:	4908      	ldr	r1, [pc, #32]	; (800c414 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0xa0>)
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f004 fbc2 	bl	8010b7c <fiprintf>
            __FILE__, __LINE__, obj.getTaskName());
#endif
            xcode = false;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }
    return xcode;
 800c3fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800c402:	4618      	mov	r0, r3
 800c404:	372c      	adds	r7, #44	; 0x2c
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}
 800c40a:	bf00      	nop
 800c40c:	20000040 	.word	0x20000040
 800c410:	08012b50 	.word	0x08012b50
 800c414:	08012b7c 	.word	0x08012b7c

0800c418 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb>:
    return xcode;
}


bool PostOffice::registerMessageBox(const Task& obj, osMessageQId messageBoxId)
{
 800c418:	b590      	push	{r4, r7, lr}
 800c41a:	b08b      	sub	sp, #44	; 0x2c
 800c41c:	af02      	add	r7, sp, #8
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
    bool xcode = true;
 800c424:	2301      	movs	r3, #1
 800c426:	77fb      	strb	r3, [r7, #31]
    osThreadId taskHandle = obj.getTaskHandle();
 800c428:	68b8      	ldr	r0, [r7, #8]
 800c42a:	f7ff fef9 	bl	800c220 <_ZNK4RTOS4Task13getTaskHandleEv>
 800c42e:	4603      	mov	r3, r0
 800c430:	617b      	str	r3, [r7, #20]
    if (0 != messageBoxId)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x38>
    {
       m_messageBoxMap[taskHandle] = messageBoxId;
 800c438:	687c      	ldr	r4, [r7, #4]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	331c      	adds	r3, #28
 800c43e:	f107 0214 	add.w	r2, r7, #20
 800c442:	4611      	mov	r1, r2
 800c444:	4618      	mov	r0, r3
 800c446:	f000 f9a9 	bl	800c79c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_>
 800c44a:	4603      	mov	r3, r0
 800c44c:	601c      	str	r4, [r3, #0]
 800c44e:	e01b      	b.n	800c488 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x70>
    }
    else // deregister the message box...
    {
        auto delObj = m_messageBoxMap.erase(taskHandle);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	331c      	adds	r3, #28
 800c454:	f107 0214 	add.w	r2, r7, #20
 800c458:	4611      	mov	r1, r2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f9d1 	bl	800c802 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_>
 800c460:	61b8      	str	r0, [r7, #24]
        if (0 == delObj)
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10f      	bne.n	800c488 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x70>
        {
#ifdef DEBUG_RTOS_POSTOFFICE
        	fprintf(stderr, "*** %s Line %d: couldn't deregister Messagebox for task %s\n",
 800c468:	4b0a      	ldr	r3, [pc, #40]	; (800c494 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x7c>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	68dc      	ldr	r4, [r3, #12]
 800c46e:	68b8      	ldr	r0, [r7, #8]
 800c470:	f7ff ff07 	bl	800c282 <_ZNK4RTOS4Task11getTaskNameEv>
 800c474:	4603      	mov	r3, r0
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	23e1      	movs	r3, #225	; 0xe1
 800c47a:	4a07      	ldr	r2, [pc, #28]	; (800c498 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x80>)
 800c47c:	4907      	ldr	r1, [pc, #28]	; (800c49c <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x84>)
 800c47e:	4620      	mov	r0, r4
 800c480:	f004 fb7c 	bl	8010b7c <fiprintf>
            __FILE__, __LINE__, obj.getTaskName());
#endif
            xcode = false;
 800c484:	2300      	movs	r3, #0
 800c486:	77fb      	strb	r3, [r7, #31]
        }
    }
    return xcode;
 800c488:	7ffb      	ldrb	r3, [r7, #31]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3724      	adds	r7, #36	; 0x24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd90      	pop	{r4, r7, pc}
 800c492:	bf00      	nop
 800c494:	20000040 	.word	0x20000040
 800c498:	08012b50 	.word	0x08012b50
 800c49c:	08012cc0 	.word	0x08012cc0

0800c4a0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEED1Ev>:
        m_size = 0;
    }
}

template <typename T, typename U>
Embmap<T, U>::~Embmap()
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
{
   delete [] m_map;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	689b      	ldr	r3, [r3, #8]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d004      	beq.n	800c4ba <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEED1Ev+0x1a>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f004 fb07 	bl	8010ac8 <_ZdaPv>
}
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3708      	adds	r7, #8
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbED1Ev>:
Embmap<T, U>::~Embmap()
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b082      	sub	sp, #8
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
   delete [] m_map;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	689b      	ldr	r3, [r3, #8]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d004      	beq.n	800c4de <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbED1Ev+0x1a>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f004 faf5 	bl	8010ac8 <_ZdaPv>
}
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej>:
Embmap<T, U>::Embmap(size_t size) :
 800c4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af02      	add	r7, sp, #8
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
   m_map(nullptr), m_begin(nullptr), m_end(nullptr)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	683a      	ldr	r2, [r7, #0]
 800c4f6:	601a      	str	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	605a      	str	r2, [r3, #4]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	609a      	str	r2, [r3, #8]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	60da      	str	r2, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	611a      	str	r2, [r3, #16]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	3314      	adds	r3, #20
 800c514:	2200      	movs	r2, #0
 800c516:	2100      	movs	r1, #0
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fe8d 	bl	800c238 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>
    m_map   = new(std::nothrow) EmbPair<T, U>[size];
 800c51e:	683c      	ldr	r4, [r7, #0]
 800c520:	4b1e      	ldr	r3, [pc, #120]	; (800c59c <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xb4>)
 800c522:	429c      	cmp	r4, r3
 800c524:	d804      	bhi.n	800c530 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x48>
 800c526:	4623      	mov	r3, r4
 800c528:	005b      	lsls	r3, r3, #1
 800c52a:	4423      	add	r3, r4
 800c52c:	009b      	lsls	r3, r3, #2
 800c52e:	e001      	b.n	800c534 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x4c>
 800c530:	f04f 33ff 	mov.w	r3, #4294967295
 800c534:	491a      	ldr	r1, [pc, #104]	; (800c5a0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xb8>)
 800c536:	4618      	mov	r0, r3
 800c538:	f004 fae2 	bl	8010b00 <_ZnajRKSt9nothrow_t>
 800c53c:	4603      	mov	r3, r0
 800c53e:	461e      	mov	r6, r3
 800c540:	2e00      	cmp	r6, #0
 800c542:	d00a      	beq.n	800c55a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x72>
 800c544:	4635      	mov	r5, r6
 800c546:	1e63      	subs	r3, r4, #1
 800c548:	461c      	mov	r4, r3
 800c54a:	2c00      	cmp	r4, #0
 800c54c:	db05      	blt.n	800c55a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x72>
 800c54e:	4628      	mov	r0, r5
 800c550:	f000 f9b7 	bl	800c8c2 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1Ev>
 800c554:	350c      	adds	r5, #12
 800c556:	3c01      	subs	r4, #1
 800c558:	e7f7      	b.n	800c54a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x62>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	609e      	str	r6, [r3, #8]
    m_end   = m_map;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	689a      	ldr	r2, [r3, #8]
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	611a      	str	r2, [r3, #16]
    m_begin = m_map;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	689a      	ldr	r2, [r3, #8]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	60da      	str	r2, [r3, #12]
    if (nullptr == m_map)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10c      	bne.n	800c590 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xa8>
        DEBOUT("coudn't get memory");
 800c576:	4b0b      	ldr	r3, [pc, #44]	; (800c5a4 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xbc>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	68d8      	ldr	r0, [r3, #12]
 800c57c:	4b0a      	ldr	r3, [pc, #40]	; (800c5a8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xc0>)
 800c57e:	9300      	str	r3, [sp, #0]
 800c580:	23ae      	movs	r3, #174	; 0xae
 800c582:	4a0a      	ldr	r2, [pc, #40]	; (800c5ac <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xc4>)
 800c584:	490a      	ldr	r1, [pc, #40]	; (800c5b0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xc8>)
 800c586:	f004 faf9 	bl	8010b7c <fiprintf>
        m_size = 0;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2200      	movs	r2, #0
 800c58e:	601a      	str	r2, [r3, #0]
}
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4618      	mov	r0, r3
 800c594:	370c      	adds	r7, #12
 800c596:	46bd      	mov	sp, r7
 800c598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c59a:	bf00      	nop
 800c59c:	0aaaaaaa 	.word	0x0aaaaaaa
 800c5a0:	08013cf4 	.word	0x08013cf4
 800c5a4:	20000040 	.word	0x20000040
 800c5a8:	08012da8 	.word	0x08012da8
 800c5ac:	08012d50 	.word	0x08012d50
 800c5b0:	08012d94 	.word	0x08012d94

0800c5b4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej>:
Embmap<T, U>::Embmap(size_t size) :
 800c5b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af02      	add	r7, sp, #8
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
   m_map(nullptr), m_begin(nullptr), m_end(nullptr)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	601a      	str	r2, [r3, #0]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	605a      	str	r2, [r3, #4]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	609a      	str	r2, [r3, #8]
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	60da      	str	r2, [r3, #12]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	2200      	movs	r2, #0
 800c5da:	611a      	str	r2, [r3, #16]
    m_map   = new(std::nothrow) EmbPair<T, U>[size];
 800c5dc:	683c      	ldr	r4, [r7, #0]
 800c5de:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800c5e2:	d201      	bcs.n	800c5e8 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x34>
 800c5e4:	00e3      	lsls	r3, r4, #3
 800c5e6:	e001      	b.n	800c5ec <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x38>
 800c5e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ec:	4919      	ldr	r1, [pc, #100]	; (800c654 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xa0>)
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f004 fa86 	bl	8010b00 <_ZnajRKSt9nothrow_t>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	461e      	mov	r6, r3
 800c5f8:	2e00      	cmp	r6, #0
 800c5fa:	d00a      	beq.n	800c612 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x5e>
 800c5fc:	4635      	mov	r5, r6
 800c5fe:	1e63      	subs	r3, r4, #1
 800c600:	461c      	mov	r4, r3
 800c602:	2c00      	cmp	r4, #0
 800c604:	db05      	blt.n	800c612 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x5e>
 800c606:	4628      	mov	r0, r5
 800c608:	f000 f96b 	bl	800c8e2 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1Ev>
 800c60c:	3508      	adds	r5, #8
 800c60e:	3c01      	subs	r4, #1
 800c610:	e7f7      	b.n	800c602 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x4e>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	609e      	str	r6, [r3, #8]
    m_end   = m_map;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	689a      	ldr	r2, [r3, #8]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	611a      	str	r2, [r3, #16]
    m_begin = m_map;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	60da      	str	r2, [r3, #12]
    if (nullptr == m_map)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d10c      	bne.n	800c648 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x94>
        DEBOUT("coudn't get memory");
 800c62e:	4b0a      	ldr	r3, [pc, #40]	; (800c658 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xa4>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68d8      	ldr	r0, [r3, #12]
 800c634:	4b09      	ldr	r3, [pc, #36]	; (800c65c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xa8>)
 800c636:	9300      	str	r3, [sp, #0]
 800c638:	23ae      	movs	r3, #174	; 0xae
 800c63a:	4a09      	ldr	r2, [pc, #36]	; (800c660 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xac>)
 800c63c:	4909      	ldr	r1, [pc, #36]	; (800c664 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xb0>)
 800c63e:	f004 fa9d 	bl	8010b7c <fiprintf>
        m_size = 0;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2200      	movs	r2, #0
 800c646:	601a      	str	r2, [r3, #0]
}
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c652:	bf00      	nop
 800c654:	08013cf4 	.word	0x08013cf4
 800c658:	20000040 	.word	0x20000040
 800c65c:	08012da8 	.word	0x08012da8
 800c660:	08012d50 	.word	0x08012d50
 800c664:	08012d94 	.word	0x08012d94

0800c668 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_>:

template <typename T, typename U>
U& Embmap<T, U>::operator[](const T& key)
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
{
    EmbPair<T, U> *it = find(key);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f93f 	bl	800c8f8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800c67a:	6278      	str	r0, [r7, #36]	; 0x24
    if (it == m_end)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c682:	429a      	cmp	r2, r3
 800c684:	d123      	bne.n	800c6ce <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_+0x66>
    {
      U a {m_error};
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	f107 0308 	add.w	r3, r7, #8
 800c68c:	3214      	adds	r2, #20
 800c68e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c692:	e883 0003 	stmia.w	r3, {r0, r1}
      if (false == (insert(EmbPair<T, U> (key, a))).second)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	6819      	ldr	r1, [r3, #0]
 800c69a:	f107 0018 	add.w	r0, r7, #24
 800c69e:	f107 0308 	add.w	r3, r7, #8
 800c6a2:	cb0c      	ldmia	r3, {r2, r3}
 800c6a4:	f000 f986 	bl	800c9b4 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1ES1_S3_>
 800c6a8:	f107 0310 	add.w	r3, r7, #16
 800c6ac:	f107 0218 	add.w	r2, r7, #24
 800c6b0:	6879      	ldr	r1, [r7, #4]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f934 	bl	800c920 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE>
 800c6b8:	7d3b      	ldrb	r3, [r7, #20]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	bf0c      	ite	eq
 800c6be:	2301      	moveq	r3, #1
 800c6c0:	2300      	movne	r3, #0
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d002      	beq.n	800c6ce <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_+0x66>
      {
         return m_error;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	3314      	adds	r3, #20
 800c6cc:	e001      	b.n	800c6d2 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_+0x6a>
      }
    }
    return it->second;
 800c6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d0:	3304      	adds	r3, #4
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3728      	adds	r7, #40	; 0x28
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}

0800c6da <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_>:

template <typename T, typename U>
size_t Embmap<T, U>::erase(const T&  key)
 800c6da:	b590      	push	{r4, r7, lr}
 800c6dc:	b085      	sub	sp, #20
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	6039      	str	r1, [r7, #0]
{
    size_t ret = 0;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	60fb      	str	r3, [r7, #12]
    if(!m_elements) return ret;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d101      	bne.n	800c6f4 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x1a>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	e026      	b.n	800c742 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x68>
    EmbPair<T, U> *it = find(key);
 800c6f4:	6839      	ldr	r1, [r7, #0]
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f8fe 	bl	800c8f8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800c6fc:	60b8      	str	r0, [r7, #8]
    if (it != m_end)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	429a      	cmp	r2, r3
 800c706:	d01b      	beq.n	800c740 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x66>
    {
      // we found something....
      if (it != m_end - 1)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	3b0c      	subs	r3, #12
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	429a      	cmp	r2, r3
 800c712:	d008      	beq.n	800c726 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x4c>
      {
          // if element is not last element in list, overwrite it with last
          *it = *(m_end -1);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	691b      	ldr	r3, [r3, #16]
 800c718:	68ba      	ldr	r2, [r7, #8]
 800c71a:	4614      	mov	r4, r2
 800c71c:	3b0c      	subs	r3, #12
 800c71e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      }
        --m_end;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	691b      	ldr	r3, [r3, #16]
 800c72a:	f1a3 020c 	sub.w	r2, r3, #12
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	611a      	str	r2, [r3, #16]
      --m_elements;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	1e5a      	subs	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	605a      	str	r2, [r3, #4]
      ret = 1;
 800c73c:	2301      	movs	r3, #1
 800c73e:	60fb      	str	r3, [r7, #12]
    }
    return ret;
 800c740:	68fb      	ldr	r3, [r7, #12]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	bd90      	pop	{r4, r7, pc}

0800c74a <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>:


template <typename T, typename U>
const EmbPair<T, U>* Embmap<T, U>::find(const T& key) const
 800c74a:	b480      	push	{r7}
 800c74c:	b085      	sub	sp, #20
 800c74e:	af00      	add	r7, sp, #0
 800c750:	6078      	str	r0, [r7, #4]
 800c752:	6039      	str	r1, [r7, #0]
{
   if(!m_elements) return m_end;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d102      	bne.n	800c762 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x18>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	691b      	ldr	r3, [r3, #16]
 800c760:	e016      	b.n	800c790 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x46>
   EmbPair<T, U> *it = nullptr;
 800c762:	2300      	movs	r3, #0
 800c764:	60fb      	str	r3, [r7, #12]
   for (it = m_begin; it != m_end; ++it)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	68db      	ldr	r3, [r3, #12]
 800c76a:	60fb      	str	r3, [r7, #12]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	429a      	cmp	r2, r3
 800c774:	d00b      	beq.n	800c78e <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x44>
   {
      if(it->first == key)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	681a      	ldr	r2, [r3, #0]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d101      	bne.n	800c786 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x3c>
      {
          return it;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	e004      	b.n	800c790 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x46>
   for (it = m_begin; it != m_end; ++it)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	330c      	adds	r3, #12
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	e7ee      	b.n	800c76c <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x22>
      }
   }
   return it;
 800c78e:	68fb      	ldr	r3, [r7, #12]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_>:
U& Embmap<T, U>::operator[](const T& key)
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b088      	sub	sp, #32
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
 800c7a4:	6039      	str	r1, [r7, #0]
    EmbPair<T, U> *it = find(key);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f91c 	bl	800c9e6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800c7ae:	61f8      	str	r0, [r7, #28]
    if (it == m_end)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	691b      	ldr	r3, [r3, #16]
 800c7b4:	69fa      	ldr	r2, [r7, #28]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d11d      	bne.n	800c7f6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_+0x5a>
      U a {m_error};
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	695b      	ldr	r3, [r3, #20]
 800c7be:	61bb      	str	r3, [r7, #24]
      if (false == (insert(EmbPair<T, U> (key, a))).second)
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	6819      	ldr	r1, [r3, #0]
 800c7c4:	f107 0310 	add.w	r3, r7, #16
 800c7c8:	69ba      	ldr	r2, [r7, #24]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 f96a 	bl	800caa4 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1ES1_S3_>
 800c7d0:	f107 0308 	add.w	r3, r7, #8
 800c7d4:	f107 0210 	add.w	r2, r7, #16
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f916 	bl	800ca0c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE>
 800c7e0:	7b3b      	ldrb	r3, [r7, #12]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	bf0c      	ite	eq
 800c7e6:	2301      	moveq	r3, #1
 800c7e8:	2300      	movne	r3, #0
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d002      	beq.n	800c7f6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_+0x5a>
         return m_error;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	3314      	adds	r3, #20
 800c7f4:	e001      	b.n	800c7fa <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_+0x5e>
    return it->second;
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	3304      	adds	r3, #4
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3720      	adds	r7, #32
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_>:
size_t Embmap<T, U>::erase(const T&  key)
 800c802:	b580      	push	{r7, lr}
 800c804:	b084      	sub	sp, #16
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	6039      	str	r1, [r7, #0]
    size_t ret = 0;
 800c80c:	2300      	movs	r3, #0
 800c80e:	60fb      	str	r3, [r7, #12]
    if(!m_elements) return ret;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	685b      	ldr	r3, [r3, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d101      	bne.n	800c81c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x1a>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	e025      	b.n	800c868 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x66>
    EmbPair<T, U> *it = find(key);
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f8e1 	bl	800c9e6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800c824:	60b8      	str	r0, [r7, #8]
    if (it != m_end)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d01a      	beq.n	800c866 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x64>
      if (it != m_end - 1)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	3b08      	subs	r3, #8
 800c836:	68ba      	ldr	r2, [r7, #8]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d007      	beq.n	800c84c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x4a>
          *it = *(m_end -1);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	691b      	ldr	r3, [r3, #16]
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	3b08      	subs	r3, #8
 800c844:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c848:	e882 0003 	stmia.w	r2, {r0, r1}
        --m_end;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	f1a3 0208 	sub.w	r2, r3, #8
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	611a      	str	r2, [r3, #16]
      --m_elements;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	1e5a      	subs	r2, r3, #1
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	605a      	str	r2, [r3, #4]
      ret = 1;
 800c862:	2301      	movs	r3, #1
 800c864:	60fb      	str	r3, [r7, #12]
    return ret;
 800c866:	68fb      	ldr	r3, [r7, #12]
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>:
const EmbPair<T, U>* Embmap<T, U>::find(const T& key) const
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
   if(!m_elements) return m_end;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d102      	bne.n	800c888 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x18>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	e016      	b.n	800c8b6 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x46>
   EmbPair<T, U> *it = nullptr;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
   for (it = m_begin; it != m_end; ++it)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	68db      	ldr	r3, [r3, #12]
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	691b      	ldr	r3, [r3, #16]
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d00b      	beq.n	800c8b4 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x44>
      if(it->first == key)
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d101      	bne.n	800c8ac <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x3c>
          return it;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	e004      	b.n	800c8b6 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x46>
   for (it = m_begin; it != m_end; ++it)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	3308      	adds	r3, #8
 800c8b0:	60fb      	str	r3, [r7, #12]
 800c8b2:	e7ee      	b.n	800c892 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x22>
   return it;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1Ev>:
  EmbPair() {};
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2100      	movs	r1, #0
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7ff fcb0 	bl	800c238 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	3708      	adds	r7, #8
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}

0800c8e2 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1Ev>:
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>:

template <typename T, typename U>
EmbPair<T, U>* Embmap<T, U>::find(const T& key)
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
{
    const Embmap<T, U> *ptr = this;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	617b      	str	r3, [r7, #20]
    const EmbPair<T, U>* cret = ptr->find(key);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6978      	ldr	r0, [r7, #20]
 800c90a:	f7ff ff1e 	bl	800c74a <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800c90e:	6138      	str	r0, [r7, #16]
    EmbPair<T, U>* ret = const_cast<EmbPair<T, U>*>(cret);
 800c910:	693b      	ldr	r3, [r7, #16]
 800c912:	60fb      	str	r3, [r7, #12]

    return ret;
 800c914:	68fb      	ldr	r3, [r7, #12]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE>:


template <typename T, typename U>
EmbPair<EmbPair<T, U>*, bool> Embmap<T, U>::insert(const EmbPair<T, U>& val)
 800c920:	b580      	push	{r7, lr}
 800c922:	b088      	sub	sp, #32
 800c924:	af02      	add	r7, sp, #8
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
{
    EmbPair<EmbPair<T, U>*, bool> ret(nullptr,false);
 800c92c:	2200      	movs	r2, #0
 800c92e:	2100      	movs	r1, #0
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f000 f8ca 	bl	800caca <_ZN4RTOS7EmbPairIPNS0_IPvNS_10PostOffice10MboxData_tEEEbEC1ES5_b>

    if (m_size == m_elements)
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	681a      	ldr	r2, [r3, #0]
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d10a      	bne.n	800c958 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x38>
    {
        DEBOUT("insert(): No free map space");
 800c942:	4b18      	ldr	r3, [pc, #96]	; (800c9a4 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x84>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	68d8      	ldr	r0, [r3, #12]
 800c948:	4b17      	ldr	r3, [pc, #92]	; (800c9a8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x88>)
 800c94a:	9300      	str	r3, [sp, #0]
 800c94c:	23ff      	movs	r3, #255	; 0xff
 800c94e:	4a17      	ldr	r2, [pc, #92]	; (800c9ac <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x8c>)
 800c950:	4917      	ldr	r1, [pc, #92]	; (800c9b0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x90>)
 800c952:	f004 f913 	bl	8010b7c <fiprintf>
        return ret;
 800c956:	e021      	b.n	800c99c <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x7c>
    }

    EmbPair<T, U>* it = find(val.first);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4619      	mov	r1, r3
 800c95c:	68b8      	ldr	r0, [r7, #8]
 800c95e:	f7ff ffcb 	bl	800c8f8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800c962:	6178      	str	r0, [r7, #20]
    *it = val;
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	ca07      	ldmia	r2, {r0, r1, r2}
 800c96a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(it == m_end)
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	429a      	cmp	r2, r3
 800c976:	d10a      	bne.n	800c98e <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x6e>
    {
        ++m_end;
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	f103 020c 	add.w	r2, r3, #12
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	611a      	str	r2, [r3, #16]
        ++m_elements;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	605a      	str	r2, [r3, #4]
    }
    ret.first  = it;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	697a      	ldr	r2, [r7, #20]
 800c992:	601a      	str	r2, [r3, #0]
    ret.second = true;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2201      	movs	r2, #1
 800c998:	711a      	strb	r2, [r3, #4]

    return ret;
 800c99a:	bf00      	nop
}
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	20000040 	.word	0x20000040
 800c9a8:	08012dbc 	.word	0x08012dbc
 800c9ac:	08012d50 	.word	0x08012d50
 800c9b0:	08012d94 	.word	0x08012d94

0800c9b4 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1ES1_S3_>:
  EmbPair(T first, U second):first(first), second(second){};
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	4639      	mov	r1, r7
 800c9c0:	e881 000c 	stmia.w	r1, {r2, r3}
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3304      	adds	r3, #4
 800c9ce:	463a      	mov	r2, r7
 800c9d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c9d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3714      	adds	r7, #20
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>:
EmbPair<T, U>* Embmap<T, U>::find(const T& key)
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b086      	sub	sp, #24
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	6039      	str	r1, [r7, #0]
    const Embmap<T, U> *ptr = this;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	617b      	str	r3, [r7, #20]
    const EmbPair<T, U>* cret = ptr->find(key);
 800c9f4:	6839      	ldr	r1, [r7, #0]
 800c9f6:	6978      	ldr	r0, [r7, #20]
 800c9f8:	f7ff ff3a 	bl	800c870 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800c9fc:	6138      	str	r0, [r7, #16]
    EmbPair<T, U>* ret = const_cast<EmbPair<T, U>*>(cret);
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	60fb      	str	r3, [r7, #12]
    return ret;
 800ca02:	68fb      	ldr	r3, [r7, #12]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3718      	adds	r7, #24
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE>:
EmbPair<EmbPair<T, U>*, bool> Embmap<T, U>::insert(const EmbPair<T, U>& val)
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b088      	sub	sp, #32
 800ca10:	af02      	add	r7, sp, #8
 800ca12:	60f8      	str	r0, [r7, #12]
 800ca14:	60b9      	str	r1, [r7, #8]
 800ca16:	607a      	str	r2, [r7, #4]
    EmbPair<EmbPair<T, U>*, bool> ret(nullptr,false);
 800ca18:	2200      	movs	r2, #0
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f000 f868 	bl	800caf2 <_ZN4RTOS7EmbPairIPNS0_IPvP14os_messageQ_cbEEbEC1ES5_b>
    if (m_size == m_elements)
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	681a      	ldr	r2, [r3, #0]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d10a      	bne.n	800ca44 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x38>
        DEBOUT("insert(): No free map space");
 800ca2e:	4b19      	ldr	r3, [pc, #100]	; (800ca94 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x88>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	68d8      	ldr	r0, [r3, #12]
 800ca34:	4b18      	ldr	r3, [pc, #96]	; (800ca98 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x8c>)
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	23ff      	movs	r3, #255	; 0xff
 800ca3a:	4a18      	ldr	r2, [pc, #96]	; (800ca9c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x90>)
 800ca3c:	4918      	ldr	r1, [pc, #96]	; (800caa0 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x94>)
 800ca3e:	f004 f89d 	bl	8010b7c <fiprintf>
        return ret;
 800ca42:	e022      	b.n	800ca8a <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x7e>
    EmbPair<T, U>* it = find(val.first);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4619      	mov	r1, r3
 800ca48:	68b8      	ldr	r0, [r7, #8]
 800ca4a:	f7ff ffcc 	bl	800c9e6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800ca4e:	6178      	str	r0, [r7, #20]
    *it = val;
 800ca50:	697b      	ldr	r3, [r7, #20]
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ca58:	e883 0003 	stmia.w	r3, {r0, r1}
    if(it == m_end)
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	691b      	ldr	r3, [r3, #16]
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d10a      	bne.n	800ca7c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x70>
        ++m_end;
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	691b      	ldr	r3, [r3, #16]
 800ca6a:	f103 0208 	add.w	r2, r3, #8
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	611a      	str	r2, [r3, #16]
        ++m_elements;
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	1c5a      	adds	r2, r3, #1
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	605a      	str	r2, [r3, #4]
    ret.first  = it;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	697a      	ldr	r2, [r7, #20]
 800ca80:	601a      	str	r2, [r3, #0]
    ret.second = true;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2201      	movs	r2, #1
 800ca86:	711a      	strb	r2, [r3, #4]
    return ret;
 800ca88:	bf00      	nop
}
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20000040 	.word	0x20000040
 800ca98:	08012dbc 	.word	0x08012dbc
 800ca9c:	08012d50 	.word	0x08012d50
 800caa0:	08012d94 	.word	0x08012d94

0800caa4 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1ES1_S3_>:
  EmbPair(T first, U second):first(first), second(second){};
 800caa4:	b480      	push	{r7}
 800caa6:	b085      	sub	sp, #20
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	605a      	str	r2, [r3, #4]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4618      	mov	r0, r3
 800cac0:	3714      	adds	r7, #20
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr

0800caca <_ZN4RTOS7EmbPairIPNS0_IPvNS_10PostOffice10MboxData_tEEEbEC1ES5_b>:
 800caca:	b480      	push	{r7}
 800cacc:	b085      	sub	sp, #20
 800cace:	af00      	add	r7, sp, #0
 800cad0:	60f8      	str	r0, [r7, #12]
 800cad2:	60b9      	str	r1, [r7, #8]
 800cad4:	4613      	mov	r3, r2
 800cad6:	71fb      	strb	r3, [r7, #7]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	79fa      	ldrb	r2, [r7, #7]
 800cae2:	711a      	strb	r2, [r3, #4]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4618      	mov	r0, r3
 800cae8:	3714      	adds	r7, #20
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <_ZN4RTOS7EmbPairIPNS0_IPvP14os_messageQ_cbEEbEC1ES5_b>:
 800caf2:	b480      	push	{r7}
 800caf4:	b085      	sub	sp, #20
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	4613      	mov	r3, r2
 800cafe:	71fb      	strb	r3, [r7, #7]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	601a      	str	r2, [r3, #0]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	79fa      	ldrb	r2, [r7, #7]
 800cb0a:	711a      	strb	r2, [r3, #4]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	3714      	adds	r7, #20
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr

0800cb1a <_ZNK4RTOS4Task13isSchedulableEv>:
    /**
     * returns the status of the task, tasks are only schedulable when the task's
     * objekt is fully initialized
     * @return true if task might get scheduled by RTOS, else false
     */
    bool isSchedulable() const { return m_isFullInitialized;}
 800cb1a:	b480      	push	{r7}
 800cb1c:	b083      	sub	sp, #12
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	791b      	ldrb	r3, [r3, #4]
 800cb26:	4618      	mov	r0, r3
 800cb28:	370c      	adds	r7, #12
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb30:	4770      	bx	lr
	...

0800cb34 <taskFnc>:
#endif

// this is the task for RTOS.
// This function calls the task handler.
static void taskFnc(void *para)
{
 800cb34:	b590      	push	{r4, r7, lr}
 800cb36:	b087      	sub	sp, #28
 800cb38:	af02      	add	r7, sp, #8
 800cb3a:	6078      	str	r0, [r7, #4]
    // para is "this" pointer of task's object!
    RTOS::Task *obj = reinterpret_cast<RTOS::Task *>(para);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	60fb      	str	r3, [r7, #12]
#ifdef DEBUG_RTOS_TASK_BASE
    if (!obj->isSchedulable() || !obj->getTaskHandle())
 800cb40:	68f8      	ldr	r0, [r7, #12]
 800cb42:	f7ff ffea 	bl	800cb1a <_ZNK4RTOS4Task13isSchedulableEv>
 800cb46:	4603      	mov	r3, r0
 800cb48:	f083 0301 	eor.w	r3, r3, #1
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d105      	bne.n	800cb5e <taskFnc+0x2a>
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff fb64 	bl	800c220 <_ZNK4RTOS4Task13getTaskHandleEv>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <taskFnc+0x2e>
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e000      	b.n	800cb64 <taskFnc+0x30>
 800cb62:	2300      	movs	r3, #0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d015      	beq.n	800cb94 <taskFnc+0x60>
    {
        fprintf(stderr,
 800cb68:	4b0f      	ldr	r3, [pc, #60]	; (800cba8 <taskFnc+0x74>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68dc      	ldr	r4, [r3, #12]
                "*** %s Line %d: task %s is scheduled before fully initialized\n",
                __FILE__, __LINE__, (obj->getTaskName() ? obj->getTaskName() : "UNKWON"));
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff fb87 	bl	800c282 <_ZNK4RTOS4Task11getTaskNameEv>
 800cb74:	4603      	mov	r3, r0
        fprintf(stderr,
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d004      	beq.n	800cb84 <taskFnc+0x50>
                __FILE__, __LINE__, (obj->getTaskName() ? obj->getTaskName() : "UNKWON"));
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f7ff fb81 	bl	800c282 <_ZNK4RTOS4Task11getTaskNameEv>
 800cb80:	4603      	mov	r3, r0
 800cb82:	e000      	b.n	800cb86 <taskFnc+0x52>
        fprintf(stderr,
 800cb84:	4b09      	ldr	r3, [pc, #36]	; (800cbac <taskFnc+0x78>)
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	2323      	movs	r3, #35	; 0x23
 800cb8a:	4a09      	ldr	r2, [pc, #36]	; (800cbb0 <taskFnc+0x7c>)
 800cb8c:	4909      	ldr	r1, [pc, #36]	; (800cbb4 <taskFnc+0x80>)
 800cb8e:	4620      	mov	r0, r4
 800cb90:	f003 fff4 	bl	8010b7c <fiprintf>
    }

#endif
    obj->m_task();
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	4798      	blx	r3
}
 800cb9e:	bf00      	nop
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd90      	pop	{r4, r7, pc}
 800cba6:	bf00      	nop
 800cba8:	20000040 	.word	0x20000040
 800cbac:	08012dd8 	.word	0x08012dd8
 800cbb0:	08012de0 	.word	0x08012de0
 800cbb4:	08012e08 	.word	0x08012e08

0800cbb8 <_ZN4RTOS4TaskC1EPKct10osPriorityb>:
const int32_t TIMEREVENT      = 0x01 << 2;
const int32_t SIGNALEVENT     = 0x01 << 3;


// Const and Dstr
Task::Task(const char * const pcName,
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	80fb      	strh	r3, [r7, #6]
 800cbca:	4613      	mov	r3, r2
 800cbcc:	80bb      	strh	r3, [r7, #4]
             m_Name((char *)pcName),
             m_StackDepth(usStackDepth),
             m_Priority(uxPriority),
             m_handle(0),
             m_immidiateStart(immidiateStart),
             m_mutex(0)
 800cbce:	4a1c      	ldr	r2, [pc, #112]	; (800cc40 <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x88>)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	711a      	strb	r2, [r3, #4]
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	609a      	str	r2, [r3, #8]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	88fa      	ldrh	r2, [r7, #6]
 800cbe4:	819a      	strh	r2, [r3, #12]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	88ba      	ldrh	r2, [r7, #4]
 800cbea:	81da      	strh	r2, [r3, #14]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	611a      	str	r2, [r3, #16]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	7e3a      	ldrb	r2, [r7, #24]
 800cbf6:	751a      	strb	r2, [r3, #20]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	619a      	str	r2, [r3, #24]
{
    if(true == m_immidiateStart)
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	7d1b      	ldrb	r3, [r3, #20]
 800cc02:	2b01      	cmp	r3, #1
 800cc04:	d117      	bne.n	800cc36 <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x7e>
    {
        if (osKernelRunning())
 800cc06:	f000 fa65 	bl	800d0d4 <osKernelRunning>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	bf14      	ite	ne
 800cc10:	2301      	movne	r3, #1
 800cc12:	2300      	moveq	r3, #0
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x6c>
        {
            // set prio to lowest prio, thus task will not be scheduled before
            // initialization of this object is complete.
            // If kernel is not running, there is no problem creating tasks.
            m_Priority = osPriorityIdle;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800cc20:	81da      	strh	r2, [r3, #14]
 800cc22:	e002      	b.n	800cc2a <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x72>
        }
        else
        {
            // kernel is not running, the constructor is not interrupted by the scheduler
            m_isFullInitialized = true;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2201      	movs	r2, #1
 800cc28:	711a      	strb	r2, [r3, #4]
        }
        createTask();
 800cc2a:	68f8      	ldr	r0, [r7, #12]
 800cc2c:	f000 f81c 	bl	800cc68 <_ZN4RTOS4Task10createTaskEv>
        m_Priority = uxPriority;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	88ba      	ldrh	r2, [r7, #4]
 800cc34:	81da      	strh	r2, [r3, #14]

    }
}
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3710      	adds	r7, #16
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	08013cd4 	.word	0x08013cd4

0800cc44 <_ZN4RTOS4TaskD1Ev>:


Task::~Task()
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
 800cc4c:	4a05      	ldr	r2, [pc, #20]	; (800cc64 <_ZN4RTOS4TaskD1Ev+0x20>)
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	601a      	str	r2, [r3, #0]
{
    // remove task from RTOS scheduler list
    deleteTask();
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 f856 	bl	800cd04 <_ZN4RTOS4Task10deleteTaskEv>
}
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	08013cd4 	.word	0x08013cd4

0800cc68 <_ZN4RTOS4Task10createTaskEv>:
}



osThreadId Task::createTask()
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b088      	sub	sp, #32
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
    osThreadDef_t thread_def;
    if (0 == m_handle)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d12f      	bne.n	800ccd8 <_ZN4RTOS4Task10createTaskEv+0x70>
    {
          // parameter of Task _MUST_ be this-pointer.
          // Else task Code can't see context of object! this-pointer of task object is given parameter!
          // (Note: Normally, this-pointer is implicitly the first parameter of a method call in C++.)
          //        FreeRTOS uses C parameter passing, there is nothing like a this-pointer foreseen.)
        thread_def.instances = 1;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	617b      	str	r3, [r7, #20]
        thread_def.name      = m_Name;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	61fb      	str	r3, [r7, #28]
        thread_def.pthread   = reinterpret_cast<os_pthread>(taskFnc);
 800cc82:	4b1c      	ldr	r3, [pc, #112]	; (800ccf4 <_ZN4RTOS4Task10createTaskEv+0x8c>)
 800cc84:	60fb      	str	r3, [r7, #12]
        thread_def.stacksize = m_StackDepth;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	899b      	ldrh	r3, [r3, #12]
 800cc8a:	61bb      	str	r3, [r7, #24]
        // if kernel is running, immediate scheduling must be prevented because this object
        // might needs m_handle. Set priority to idle and change it after task is created.
        thread_def.tpriority = (osKernelRunning() ? osPriorityIdle : m_Priority);
 800cc8c:	f000 fa22 	bl	800d0d4 <osKernelRunning>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d103      	bne.n	800cc9e <_ZN4RTOS4Task10createTaskEv+0x36>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800cc9c:	e001      	b.n	800cca2 <_ZN4RTOS4Task10createTaskEv+0x3a>
 800cc9e:	f06f 0302 	mvn.w	r3, #2
 800cca2:	823b      	strh	r3, [r7, #16]

        m_handle = osThreadCreate(&thread_def, this);
 800cca4:	f107 030c 	add.w	r3, r7, #12
 800cca8:	6879      	ldr	r1, [r7, #4]
 800ccaa:	4618      	mov	r0, r3
 800ccac:	f000 fa38 	bl	800d120 <osThreadCreate>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	611a      	str	r2, [r3, #16]
        if (m_Priority != thread_def.tpriority)
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800ccbc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d011      	beq.n	800cce8 <_ZN4RTOS4Task10createTaskEv+0x80>
        {
          osThreadSetPriority(m_handle, m_Priority);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	691a      	ldr	r2, [r3, #16]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	f000 fb37 	bl	800d344 <osThreadSetPriority>
 800ccd6:	e007      	b.n	800cce8 <_ZN4RTOS4Task10createTaskEv+0x80>
        }
    }
#ifdef DEBUG_RTOS_TASK_BASE
    else
    {
        fprintf(stderr,
 800ccd8:	4b07      	ldr	r3, [pc, #28]	; (800ccf8 <_ZN4RTOS4Task10createTaskEv+0x90>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	68d8      	ldr	r0, [r3, #12]
 800ccde:	2390      	movs	r3, #144	; 0x90
 800cce0:	4a06      	ldr	r2, [pc, #24]	; (800ccfc <_ZN4RTOS4Task10createTaskEv+0x94>)
 800cce2:	4907      	ldr	r1, [pc, #28]	; (800cd00 <_ZN4RTOS4Task10createTaskEv+0x98>)
 800cce4:	f003 ff4a 	bl	8010b7c <fiprintf>
                "*** %s Line %d: try to (re)create already running task\n",
                __FILE__, __LINE__);
    }
#endif
    return m_handle;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	691b      	ldr	r3, [r3, #16]
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3720      	adds	r7, #32
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}
 800ccf4:	0800cb35 	.word	0x0800cb35
 800ccf8:	20000040 	.word	0x20000040
 800ccfc:	08012de0 	.word	0x08012de0
 800cd00:	08012e48 	.word	0x08012e48

0800cd04 <_ZN4RTOS4Task10deleteTaskEv>:

osThreadId Task::deleteTask()
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
    // deregister message and mail Box in Post office (if there are any)
    PostOffice::getInstance().registerMessageBox(*this, (osMessageQId)0);
 800cd0c:	f7ff fb04 	bl	800c318 <_ZN4RTOS10PostOffice11getInstanceEv>
 800cd10:	4603      	mov	r3, r0
 800cd12:	2200      	movs	r2, #0
 800cd14:	6879      	ldr	r1, [r7, #4]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff fb7e 	bl	800c418 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb>
    PostOffice::getInstance().registerMailBox(*this, (osMailQId)0, 0);
 800cd1c:	f7ff fafc 	bl	800c318 <_ZN4RTOS10PostOffice11getInstanceEv>
 800cd20:	2300      	movs	r3, #0
 800cd22:	2200      	movs	r2, #0
 800cd24:	6879      	ldr	r1, [r7, #4]
 800cd26:	f7ff fb25 	bl	800c374 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj>

    osThreadId handle = m_handle;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	60fb      	str	r3, [r7, #12]
    // if the active tasks tries to delete itself, we will not return!
    // set m_handle to 0 to reenable a restart of task.
    m_handle = 0;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2200      	movs	r2, #0
 800cd34:	611a      	str	r2, [r3, #16]

    osStatus xcode = osThreadTerminate( handle );
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	f000 fac4 	bl	800d2c4 <osThreadTerminate>
 800cd3c:	60b8      	str	r0, [r7, #8]

    // this code is only reached if another task deletes us.
    // if error occurred, caller is notified via handle.
    if (osOK != xcode)
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d002      	beq.n	800cd4a <_ZN4RTOS4Task10deleteTaskEv+0x46>
    {
      m_handle = handle;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	611a      	str	r2, [r3, #16]
    }
    return m_handle;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	691b      	ldr	r3, [r3, #16]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}
	...

0800cd58 <enterCritical>:


// ====[ intern helper functions ]=====
inline
static uint32_t enterCritical()
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b082      	sub	sp, #8
 800cd5c:	af00      	add	r7, sp, #0
  if (isInterrupt())  return portSET_INTERRUPT_MASK_FROM_ISR();
 800cd5e:	4b0d      	ldr	r3, [pc, #52]	; (800cd94 <enterCritical+0x3c>)
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00d      	beq.n	800cd86 <enterCritical+0x2e>
        __asm volatile
 800cd6a:	f3ef 8211 	mrs	r2, BASEPRI
 800cd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd72:	f383 8811 	msr	BASEPRI, r3
 800cd76:	f3bf 8f6f 	isb	sy
 800cd7a:	f3bf 8f4f 	dsb	sy
 800cd7e:	607a      	str	r2, [r7, #4]
 800cd80:	603b      	str	r3, [r7, #0]
        return ulOriginalBASEPRI;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	e002      	b.n	800cd8c <enterCritical+0x34>
  else                vPortEnterCritical();
 800cd86:	f7ff f8c1 	bl	800bf0c <vPortEnterCritical>
  return 0;
 800cd8a:	2300      	movs	r3, #0
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3708      	adds	r7, #8
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	e000ed00 	.word	0xe000ed00

0800cd98 <exitCritical>:

inline
static void exitCritical(uint32_t isrMask)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
  if (isInterrupt())  portCLEAR_INTERRUPT_MASK_FROM_ISR(isrMask);
 800cda0:	4b09      	ldr	r3, [pc, #36]	; (800cdc8 <exitCritical+0x30>)
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d005      	beq.n	800cdb8 <exitCritical+0x20>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	60fb      	str	r3, [r7, #12]
        __asm volatile
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f383 8811 	msr	BASEPRI, r3
    }
 800cdb6:	e002      	b.n	800cdbe <exitCritical+0x26>
  else                vPortExitCritical();
 800cdb8:	f7ff f8d2 	bl	800bf60 <vPortExitCritical>
}
 800cdbc:	bf00      	nop
 800cdbe:	bf00      	nop
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}
 800cdc6:	bf00      	nop
 800cdc8:	e000ed00 	.word	0xe000ed00

0800cdcc <initTaskList>:

// ====[ intern debug functions ]=====
#ifdef DEBUG_CMSIS_API
static void initTaskList()
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af02      	add	r7, sp, #8
  unsigned int i = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	607b      	str	r3, [r7, #4]
  uint32_t     isrMask;
  if (FALSE == isInit)
 800cdd6:	4b1d      	ldr	r3, [pc, #116]	; (800ce4c <initTaskList+0x80>)
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d132      	bne.n	800ce44 <initTaskList+0x78>
  {
     isrMask = enterCritical();    // enter critical section,
 800cdde:	f7ff ffbb 	bl	800cd58 <enterCritical>
 800cde2:	6038      	str	r0, [r7, #0]
     for (i = 1; i < sizeof(taskList)/sizeof(TaskInfoList_t); ++i)
 800cde4:	2301      	movs	r3, #1
 800cde6:	607b      	str	r3, [r7, #4]
 800cde8:	e00c      	b.n	800ce04 <initTaskList+0x38>
     {
        taskList[i-1].next = &(taskList[i]);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	00d2      	lsls	r2, r2, #3
 800cdf2:	4917      	ldr	r1, [pc, #92]	; (800ce50 <initTaskList+0x84>)
 800cdf4:	440a      	add	r2, r1
 800cdf6:	4916      	ldr	r1, [pc, #88]	; (800ce50 <initTaskList+0x84>)
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	440b      	add	r3, r1
 800cdfc:	605a      	str	r2, [r3, #4]
     for (i = 1; i < sizeof(taskList)/sizeof(TaskInfoList_t); ++i)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	3301      	adds	r3, #1
 800ce02:	607b      	str	r3, [r7, #4]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2b1d      	cmp	r3, #29
 800ce08:	d9ef      	bls.n	800cdea <initTaskList+0x1e>
     }
     taskList[i-1].next = 0;   // i-1 points to last list element
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	4a10      	ldr	r2, [pc, #64]	; (800ce50 <initTaskList+0x84>)
 800ce10:	00db      	lsls	r3, r3, #3
 800ce12:	4413      	add	r3, r2
 800ce14:	2200      	movs	r2, #0
 800ce16:	605a      	str	r2, [r3, #4]
     freeList = taskList;      // only free elements in list
 800ce18:	4b0e      	ldr	r3, [pc, #56]	; (800ce54 <initTaskList+0x88>)
 800ce1a:	4a0d      	ldr	r2, [pc, #52]	; (800ce50 <initTaskList+0x84>)
 800ce1c:	601a      	str	r2, [r3, #0]
     usedList = 0;
 800ce1e:	4b0e      	ldr	r3, [pc, #56]	; (800ce58 <initTaskList+0x8c>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
     isInit = TRUE;
 800ce24:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <initTaskList+0x80>)
 800ce26:	2201      	movs	r2, #1
 800ce28:	701a      	strb	r2, [r3, #0]
     exitCritical(isrMask);    // leave critical section.
 800ce2a:	6838      	ldr	r0, [r7, #0]
 800ce2c:	f7ff ffb4 	bl	800cd98 <exitCritical>
     // Do some configuration checks
     DEBOUT(osKernelSystemId);
 800ce30:	4b0a      	ldr	r3, [pc, #40]	; (800ce5c <initTaskList+0x90>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68d8      	ldr	r0, [r3, #12]
 800ce36:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <initTaskList+0x94>)
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	237c      	movs	r3, #124	; 0x7c
 800ce3c:	4a09      	ldr	r2, [pc, #36]	; (800ce64 <initTaskList+0x98>)
 800ce3e:	490a      	ldr	r1, [pc, #40]	; (800ce68 <initTaskList+0x9c>)
 800ce40:	f003 fe9c 	bl	8010b7c <fiprintf>
     if (configMAX_PRIORITIES <= (osPriorityRealtime-osPriorityIdle))
     {
         DEBOUT("FreeRTOS should be configured to support more priorities.");
     }
  }
}
 800ce44:	bf00      	nop
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	2000079c 	.word	0x2000079c
 800ce50:	200007a0 	.word	0x200007a0
 800ce54:	20000034 	.word	0x20000034
 800ce58:	20000890 	.word	0x20000890
 800ce5c:	20000040 	.word	0x20000040
 800ce60:	08012f04 	.word	0x08012f04
 800ce64:	08012ec8 	.word	0x08012ec8
 800ce68:	08012ef0 	.word	0x08012ef0

0800ce6c <addToTaskList>:

static osStatus addToTaskList(TaskHandle_t taskId)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b088      	sub	sp, #32
 800ce70:	af02      	add	r7, sp, #8
 800ce72:	6078      	str	r0, [r7, #4]
    osStatus xcode = osOK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	617b      	str	r3, [r7, #20]
    if (FALSE == isInit)
 800ce78:	4b2b      	ldr	r3, [pc, #172]	; (800cf28 <addToTaskList+0xbc>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d101      	bne.n	800ce84 <addToTaskList+0x18>
    {
        initTaskList();
 800ce80:	f7ff ffa4 	bl	800cdcc <initTaskList>
    }

   // first: check if id is already in list
    uint32_t isrMask = enterCritical();
 800ce84:	f7ff ff68 	bl	800cd58 <enterCritical>
 800ce88:	60f8      	str	r0, [r7, #12]
    TaskInfoList_t *listPtr = usedList;
 800ce8a:	4b28      	ldr	r3, [pc, #160]	; (800cf2c <addToTaskList+0xc0>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	613b      	str	r3, [r7, #16]
    while ( listPtr && (osOK == xcode) )
 800ce90:	e013      	b.n	800ceba <addToTaskList+0x4e>
    {
        if (listPtr->info.taskId == taskId)
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d10b      	bne.n	800ceb4 <addToTaskList+0x48>
        {
            DEBOUT("try to add taskId more than once");
 800ce9c:	4b24      	ldr	r3, [pc, #144]	; (800cf30 <addToTaskList+0xc4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	68d8      	ldr	r0, [r3, #12]
 800cea2:	4b24      	ldr	r3, [pc, #144]	; (800cf34 <addToTaskList+0xc8>)
 800cea4:	9300      	str	r3, [sp, #0]
 800cea6:	2393      	movs	r3, #147	; 0x93
 800cea8:	4a23      	ldr	r2, [pc, #140]	; (800cf38 <addToTaskList+0xcc>)
 800ceaa:	4924      	ldr	r1, [pc, #144]	; (800cf3c <addToTaskList+0xd0>)
 800ceac:	f003 fe66 	bl	8010b7c <fiprintf>
            xcode = osErrorOS;
 800ceb0:	23ff      	movs	r3, #255	; 0xff
 800ceb2:	617b      	str	r3, [r7, #20]
        }
        listPtr = listPtr->next;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	613b      	str	r3, [r7, #16]
    while ( listPtr && (osOK == xcode) )
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d002      	beq.n	800cec6 <addToTaskList+0x5a>
 800cec0:	697b      	ldr	r3, [r7, #20]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d0e5      	beq.n	800ce92 <addToTaskList+0x26>
    }
    if (osOK == xcode)
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d10f      	bne.n	800ceec <addToTaskList+0x80>
    {
      // now add in list!
      if(0 == freeList)
 800cecc:	4b1c      	ldr	r3, [pc, #112]	; (800cf40 <addToTaskList+0xd4>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10b      	bne.n	800ceec <addToTaskList+0x80>
      {
         DEBOUT("max Number of task in debug list reached. Add more entries.");
 800ced4:	4b16      	ldr	r3, [pc, #88]	; (800cf30 <addToTaskList+0xc4>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68d8      	ldr	r0, [r3, #12]
 800ceda:	4b1a      	ldr	r3, [pc, #104]	; (800cf44 <addToTaskList+0xd8>)
 800cedc:	9300      	str	r3, [sp, #0]
 800cede:	239d      	movs	r3, #157	; 0x9d
 800cee0:	4a15      	ldr	r2, [pc, #84]	; (800cf38 <addToTaskList+0xcc>)
 800cee2:	4916      	ldr	r1, [pc, #88]	; (800cf3c <addToTaskList+0xd0>)
 800cee4:	f003 fe4a 	bl	8010b7c <fiprintf>
         xcode = osErrorOS;
 800cee8:	23ff      	movs	r3, #255	; 0xff
 800ceea:	617b      	str	r3, [r7, #20]
      }
    }
    if (osOK == xcode)
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d112      	bne.n	800cf18 <addToTaskList+0xac>
    {
      // add first free element to used list
      listPtr = freeList;            // remember first free element.
 800cef2:	4b13      	ldr	r3, [pc, #76]	; (800cf40 <addToTaskList+0xd4>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	613b      	str	r3, [r7, #16]
      // remove entry from free list.
      freeList = freeList->next;
 800cef8:	4b11      	ldr	r3, [pc, #68]	; (800cf40 <addToTaskList+0xd4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	4a10      	ldr	r2, [pc, #64]	; (800cf40 <addToTaskList+0xd4>)
 800cf00:	6013      	str	r3, [r2, #0]
      // add entry on top of used list
      listPtr->next = usedList;
 800cf02:	4b0a      	ldr	r3, [pc, #40]	; (800cf2c <addToTaskList+0xc0>)
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	605a      	str	r2, [r3, #4]
      usedList = listPtr;
 800cf0a:	4a08      	ldr	r2, [pc, #32]	; (800cf2c <addToTaskList+0xc0>)
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	6013      	str	r3, [r2, #0]
      // enter info data
      usedList->info.taskId = taskId;
 800cf10:	4b06      	ldr	r3, [pc, #24]	; (800cf2c <addToTaskList+0xc0>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	601a      	str	r2, [r3, #0]
    }
    exitCritical(isrMask);
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f7ff ff3d 	bl	800cd98 <exitCritical>
    return osOK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3718      	adds	r7, #24
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	2000079c 	.word	0x2000079c
 800cf2c:	20000890 	.word	0x20000890
 800cf30:	20000040 	.word	0x20000040
 800cf34:	08012f18 	.word	0x08012f18
 800cf38:	08012ec8 	.word	0x08012ec8
 800cf3c:	08012ef0 	.word	0x08012ef0
 800cf40:	20000034 	.word	0x20000034
 800cf44:	08012f3c 	.word	0x08012f3c

0800cf48 <removeFromTaskList>:

static osStatus removeFromTaskList(TaskHandle_t taskId)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b08a      	sub	sp, #40	; 0x28
 800cf4c:	af02      	add	r7, sp, #8
 800cf4e:	6078      	str	r0, [r7, #4]
    osStatus        xcode   = osOK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	61fb      	str	r3, [r7, #28]
    TaskInfoList_t *prevPtr = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61bb      	str	r3, [r7, #24]
    uint8_t         found   = FALSE;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	75fb      	strb	r3, [r7, #23]
    uint32_t        isrMask;
    if (FALSE == isInit)
 800cf5c:	4b24      	ldr	r3, [pc, #144]	; (800cff0 <removeFromTaskList+0xa8>)
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d101      	bne.n	800cf68 <removeFromTaskList+0x20>
    {
        initTaskList();
 800cf64:	f7ff ff32 	bl	800cdcc <initTaskList>
    }
    isrMask = enterCritical();
 800cf68:	f7ff fef6 	bl	800cd58 <enterCritical>
 800cf6c:	60f8      	str	r0, [r7, #12]
    TaskInfoList_t *listPtr = usedList;
 800cf6e:	4b21      	ldr	r3, [pc, #132]	; (800cff4 <removeFromTaskList+0xac>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	613b      	str	r3, [r7, #16]

    while (listPtr && FALSE == found)
 800cf74:	e01e      	b.n	800cfb4 <removeFromTaskList+0x6c>
    {
       if (listPtr->info.taskId == taskId)
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	429a      	cmp	r2, r3
 800cf7e:	d114      	bne.n	800cfaa <removeFromTaskList+0x62>
       {
           found = TRUE;
 800cf80:	2301      	movs	r3, #1
 800cf82:	75fb      	strb	r3, [r7, #23]
           // remove element from used list.
           if (prevPtr)
 800cf84:	69bb      	ldr	r3, [r7, #24]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d004      	beq.n	800cf94 <removeFromTaskList+0x4c>
           {
              prevPtr->next = listPtr->next;
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	605a      	str	r2, [r3, #4]
 800cf92:	e003      	b.n	800cf9c <removeFromTaskList+0x54>
           }
           else   // found Id in root element of list, set new root element
           {
               usedList = listPtr->next;
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	685b      	ldr	r3, [r3, #4]
 800cf98:	4a16      	ldr	r2, [pc, #88]	; (800cff4 <removeFromTaskList+0xac>)
 800cf9a:	6013      	str	r3, [r2, #0]
           }
           // add entry on top of free list
           listPtr->next = freeList;
 800cf9c:	4b16      	ldr	r3, [pc, #88]	; (800cff8 <removeFromTaskList+0xb0>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	605a      	str	r2, [r3, #4]
           freeList = listPtr;
 800cfa4:	4a14      	ldr	r2, [pc, #80]	; (800cff8 <removeFromTaskList+0xb0>)
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	6013      	str	r3, [r2, #0]
       }
       prevPtr = listPtr;
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	61bb      	str	r3, [r7, #24]
       listPtr = listPtr->next;
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	613b      	str	r3, [r7, #16]
    while (listPtr && FALSE == found)
 800cfb4:	693b      	ldr	r3, [r7, #16]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <removeFromTaskList+0x78>
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0da      	beq.n	800cf76 <removeFromTaskList+0x2e>
    }
    exitCritical(isrMask);
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f7ff fee9 	bl	800cd98 <exitCritical>
    if (FALSE == found)
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d10b      	bne.n	800cfe4 <removeFromTaskList+0x9c>
    {
        DEBOUT("couldn't find entry to delete");
 800cfcc:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <removeFromTaskList+0xb4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	68d8      	ldr	r0, [r3, #12]
 800cfd2:	4b0b      	ldr	r3, [pc, #44]	; (800d000 <removeFromTaskList+0xb8>)
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	23d6      	movs	r3, #214	; 0xd6
 800cfd8:	4a0a      	ldr	r2, [pc, #40]	; (800d004 <removeFromTaskList+0xbc>)
 800cfda:	490b      	ldr	r1, [pc, #44]	; (800d008 <removeFromTaskList+0xc0>)
 800cfdc:	f003 fdce 	bl	8010b7c <fiprintf>
        xcode = osErrorOS;
 800cfe0:	23ff      	movs	r3, #255	; 0xff
 800cfe2:	61fb      	str	r3, [r7, #28]
    }
    return xcode;
 800cfe4:	69fb      	ldr	r3, [r7, #28]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	2000079c 	.word	0x2000079c
 800cff4:	20000890 	.word	0x20000890
 800cff8:	20000034 	.word	0x20000034
 800cffc:	20000040 	.word	0x20000040
 800d000:	08012f78 	.word	0x08012f78
 800d004:	08012ec8 	.word	0x08012ec8
 800d008:	08012ef0 	.word	0x08012ef0

0800d00c <vAssertCalled>:


// =====[ Helper functions ]=============
#if (defined (DEBUG) && defined (configOS_ASSERT)  &&  (configOS_ASSERT != 0))
void vAssertCalled(const char * const pcFileName, unsigned long ulLine)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
   volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	60bb      	str	r3, [r7, #8]

#if (defined (DEBUG_CMSIS_API))
    fprintf(stderr,"*** %s Line %" PRIu32 ": FreeRTOS assertion.\n",pcFileName, ulLine);
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <vAssertCalled+0x3c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	68d8      	ldr	r0, [r3, #12]
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	4909      	ldr	r1, [pc, #36]	; (800d04c <vAssertCalled+0x40>)
 800d026:	f003 fda9 	bl	8010b7c <fiprintf>
#endif
    uint32_t isrMask = enterCritical();
 800d02a:	f7ff fe95 	bl	800cd58 <enterCritical>
 800d02e:	60f8      	str	r0, [r7, #12]
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 0 )
 800d030:	bf00      	nop
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0fc      	beq.n	800d032 <vAssertCalled+0x26>
        {
        }
    }
    exitCritical(isrMask);
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f7ff fead 	bl	800cd98 <exitCritical>
}
 800d03e:	bf00      	nop
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	20000040 	.word	0x20000040
 800d04c:	08012f98 	.word	0x08012f98

0800d050 <taskFunc>:
}


/* generic task code for all Tasks!!!! */
static void taskFunc(void *param)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b086      	sub	sp, #24
 800d054:	af02      	add	r7, sp, #8
 800d056:	6078      	str	r0, [r7, #4]
    //TaskFunction_t
    TaskHookFunction_t taskCode = xTaskGetApplicationTaskTag( NULL );
 800d058:	2000      	movs	r0, #0
 800d05a:	f7fe f82f 	bl	800b0bc <xTaskGetApplicationTaskTag>
 800d05e:	60f8      	str	r0, [r7, #12]
    osThreadId myId = 0;
 800d060:	2300      	movs	r3, #0
 800d062:	60bb      	str	r3, [r7, #8]

    if (taskCode)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d003      	beq.n	800d072 <taskFunc+0x22>
    {
      taskCode(param);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	4798      	blx	r3
 800d070:	e00a      	b.n	800d088 <taskFunc+0x38>
    }
    else
    {
         DEBOUT("Can't start Task Code");
 800d072:	4b0a      	ldr	r3, [pc, #40]	; (800d09c <taskFunc+0x4c>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	68d8      	ldr	r0, [r3, #12]
 800d078:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <taskFunc+0x50>)
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800d080:	4a08      	ldr	r2, [pc, #32]	; (800d0a4 <taskFunc+0x54>)
 800d082:	4909      	ldr	r1, [pc, #36]	; (800d0a8 <taskFunc+0x58>)
 800d084:	f003 fd7a 	bl	8010b7c <fiprintf>
    }

    myId = osThreadGetId();
 800d088:	f000 f8d6 	bl	800d238 <osThreadGetId>
 800d08c:	60b8      	str	r0, [r7, #8]
    osThreadTerminate(myId);
 800d08e:	68b8      	ldr	r0, [r7, #8]
 800d090:	f000 f918 	bl	800d2c4 <osThreadTerminate>
}
 800d094:	bf00      	nop
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}
 800d09c:	20000040 	.word	0x20000040
 800d0a0:	08012fc0 	.word	0x08012fc0
 800d0a4:	08012ec8 	.word	0x08012ec8
 800d0a8:	08012ef0 	.word	0x08012ef0

0800d0ac <osKernelInitialize>:

/// Initialize the RTOS Kernel for creating objects.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osKernelInitialize shall be consistent in every CMSIS-RTOS.
osStatus osKernelInitialize (void)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	af00      	add	r7, sp, #0
    //prevent compile error
    return osOK;
 800d0b0:	2300      	movs	r3, #0
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <osKernelStart>:

/// Start the RTOS Kernel.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
osStatus osKernelStart (void)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	af00      	add	r7, sp, #0
    isKernelStarted = 1;
 800d0c0:	4b03      	ldr	r3, [pc, #12]	; (800d0d0 <osKernelStart+0x14>)
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	601a      	str	r2, [r3, #0]
    vTaskStartScheduler();
 800d0c6:	f7fd fd53 	bl	800ab70 <vTaskStartScheduler>
    return osErrorOS;            //Program is not supposed to reach this point!
 800d0ca:	23ff      	movs	r3, #255	; 0xff
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	bd80      	pop	{r7, pc}
 800d0d0:	20000894 	.word	0x20000894

0800d0d4 <osKernelRunning>:

/// Check if the RTOS kernel is already started.
/// \note MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
/// \return 0 RTOS is not started, 1 RTOS is started.
int32_t osKernelRunning(void)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	af00      	add	r7, sp, #0
    //prevent compile error
    return isKernelStarted;
 800d0d8:	4b03      	ldr	r3, [pc, #12]	; (800d0e8 <osKernelRunning+0x14>)
 800d0da:	681b      	ldr	r3, [r3, #0]
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	20000894 	.word	0x20000894

0800d0ec <osKernelSysTick>:

/// Get the RTOS kernel system timer counter
/// \note MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
/// \return RTOS kernel system timer as 32-bit value
uint32_t osKernelSysTick (void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
    TickType_t ticks = 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	607b      	str	r3, [r7, #4]
    if (!isInterrupt())
 800d0f6:	4b09      	ldr	r3, [pc, #36]	; (800d11c <osKernelSysTick+0x30>)
 800d0f8:	685b      	ldr	r3, [r3, #4]
 800d0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d103      	bne.n	800d10a <osKernelSysTick+0x1e>
    {
       ticks = xTaskGetTickCount( );
 800d102:	f7fd fe8b 	bl	800ae1c <xTaskGetTickCount>
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	e002      	b.n	800d110 <osKernelSysTick+0x24>
    }
    else
    {
       ticks = xTaskGetTickCountFromISR( );
 800d10a:	f7fd fe97 	bl	800ae3c <xTaskGetTickCountFromISR>
 800d10e:	6078      	str	r0, [r7, #4]
    }
    return (uint32_t)ticks;
 800d110:	687b      	ldr	r3, [r7, #4]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	e000ed00 	.word	0xe000ed00

0800d120 <osThreadCreate>:
/// \param[in]     thread_def    thread definition referenced with \ref osThread.
/// \param[in]     argument      pointer that is passed to the thread function as start argument.
/// \return thread ID for reference by other functions or NULL in case of error.
/// \note MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b08c      	sub	sp, #48	; 0x30
 800d124:	af02      	add	r7, sp, #8
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
    osThreadId id = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	627b      	str	r3, [r7, #36]	; 0x24

    if(!thread_def)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10c      	bne.n	800d14e <osThreadCreate+0x2e>
    {
        //error message here
        DEBOUT("Thread creation failed because of invalid definition!");
 800d134:	4b38      	ldr	r3, [pc, #224]	; (800d218 <osThreadCreate+0xf8>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	68d8      	ldr	r0, [r3, #12]
 800d13a:	4b38      	ldr	r3, [pc, #224]	; (800d21c <osThreadCreate+0xfc>)
 800d13c:	9300      	str	r3, [sp, #0]
 800d13e:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800d142:	4a37      	ldr	r2, [pc, #220]	; (800d220 <osThreadCreate+0x100>)
 800d144:	4937      	ldr	r1, [pc, #220]	; (800d224 <osThreadCreate+0x104>)
 800d146:	f003 fd19 	bl	8010b7c <fiprintf>
        return 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	e05f      	b.n	800d20e <osThreadCreate+0xee>
    }
    if(isInterrupt())    // interrupt mode
 800d14e:	4b36      	ldr	r3, [pc, #216]	; (800d228 <osThreadCreate+0x108>)
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d156:	2b00      	cmp	r3, #0
 800d158:	d001      	beq.n	800d15e <osThreadCreate+0x3e>
    {
        // CMSIS forbids thread creation from Interrupt!
        return 0;
 800d15a:	2300      	movs	r3, #0
 800d15c:	e057      	b.n	800d20e <osThreadCreate+0xee>
    }

    //--Parse to task-parameters
    TaskFunction_t taskCode = (TaskFunction_t)(thread_def->pthread);      // in C++ use reinterpret_cast to parse void(*)(const void*) to void(*)(void*)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	61fb      	str	r3, [r7, #28]
    char * const taskName = thread_def->name;                              //dummy name since it is for debugging purposes anyway
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	691b      	ldr	r3, [r3, #16]
 800d168:	61bb      	str	r3, [r7, #24]
    uint16_t stackDepth = ((thread_def->stacksize) / sizeof(StackType_t)); //conversion from bytes into specified number of the variables the stack can hold
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	089b      	lsrs	r3, r3, #2
 800d170:	847b      	strh	r3, [r7, #34]	; 0x22
    void *parameters = argument;                                           //parameter for thread function
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	617b      	str	r3, [r7, #20]
    UBaseType_t priority = tskIDLE_PRIORITY;                               //priority
 800d176:	2300      	movs	r3, #0
 800d178:	613b      	str	r3, [r7, #16]
    TaskHandle_t createdTask = NULL;                                       //taskHandle that will be written by a successful xTaskCreate
 800d17a:	2300      	movs	r3, #0
 800d17c:	60bb      	str	r3, [r7, #8]

    // adapt CMSIS to FreeRtos priority levels
    // osPriorityIdle (-3) must be mapped to tskIDLE_PRIORITY (0)
    priority = thread_def->tpriority + (tskIDLE_PRIORITY - osPriorityIdle);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d184:	3303      	adds	r3, #3
 800d186:	613b      	str	r3, [r7, #16]

    // check stackDepth.
    // according to CMSIS-RTOS API description, 0 is default stack size
    if (0 == stackDepth)
 800d188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d101      	bne.n	800d192 <osThreadCreate+0x72>
    {
        stackDepth = configMINIMAL_STACK_SIZE;  // defined in FreeRTOSConfig.h
 800d18e:	2378      	movs	r3, #120	; 0x78
 800d190:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    // check valid priority.
    if(thread_def->tpriority > osPriorityRealtime)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d198:	2b03      	cmp	r3, #3
 800d19a:	dd0c      	ble.n	800d1b6 <osThreadCreate+0x96>
    {
        //error message here
        DEBOUT("Thread creation failed because of invalid priority!");
 800d19c:	4b1e      	ldr	r3, [pc, #120]	; (800d218 <osThreadCreate+0xf8>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	68d8      	ldr	r0, [r3, #12]
 800d1a2:	4b22      	ldr	r3, [pc, #136]	; (800d22c <osThreadCreate+0x10c>)
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	f44f 73c2 	mov.w	r3, #388	; 0x184
 800d1aa:	4a1d      	ldr	r2, [pc, #116]	; (800d220 <osThreadCreate+0x100>)
 800d1ac:	491d      	ldr	r1, [pc, #116]	; (800d224 <osThreadCreate+0x104>)
 800d1ae:	f003 fce5 	bl	8010b7c <fiprintf>
        return 0;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	e02b      	b.n	800d20e <osThreadCreate+0xee>
    }

    //  --Create Task
#if (defined( DEBUG_CMSIS_API) || (defined(configUSE_APPLICATION_TASK_TAG) && (configUSE_APPLICATION_TASK_TAG == 1)))
    uint32_t isrMask = enterCritical();   // protect creation AND add to internal list....
 800d1b6:	f7ff fdcf 	bl	800cd58 <enterCritical>
 800d1ba:	60f8      	str	r0, [r7, #12]
#endif
    if (pdPASS == xTaskCreate(taskFunc, taskName, stackDepth, parameters, priority, &createdTask))
 800d1bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d1be:	f107 0308 	add.w	r3, r7, #8
 800d1c2:	9301      	str	r3, [sp, #4]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	69b9      	ldr	r1, [r7, #24]
 800d1cc:	4818      	ldr	r0, [pc, #96]	; (800d230 <osThreadCreate+0x110>)
 800d1ce:	f7fd f9df 	bl	800a590 <xTaskCreate>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d10b      	bne.n	800d1f0 <osThreadCreate+0xd0>
    {
        //success
        id = (osThreadId)createdTask;                                     //pass created taskHandle to id
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	627b      	str	r3, [r7, #36]	; 0x24
        vTaskSetApplicationTaskTag(createdTask,(TaskHookFunction_t)taskCode);   // set Tag to task Code....
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	69f9      	ldr	r1, [r7, #28]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7fd ff4f 	bl	800b084 <vTaskSetApplicationTaskTag>
        (void) ADDTOLIST(createdTask);
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7ff fe3f 	bl	800ce6c <addToTaskList>
 800d1ee:	e00a      	b.n	800d206 <osThreadCreate+0xe6>
    }
    else
    {
        //error message here
        DEBOUT("Thread creation failed!");
 800d1f0:	4b09      	ldr	r3, [pc, #36]	; (800d218 <osThreadCreate+0xf8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	68d8      	ldr	r0, [r3, #12]
 800d1f6:	4b0f      	ldr	r3, [pc, #60]	; (800d234 <osThreadCreate+0x114>)
 800d1f8:	9300      	str	r3, [sp, #0]
 800d1fa:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800d1fe:	4a08      	ldr	r2, [pc, #32]	; (800d220 <osThreadCreate+0x100>)
 800d200:	4908      	ldr	r1, [pc, #32]	; (800d224 <osThreadCreate+0x104>)
 800d202:	f003 fcbb 	bl	8010b7c <fiprintf>
    }
#if (defined( DEBUG_CMSIS_API) || (defined(configUSE_APPLICATION_TASK_TAG) && (configUSE_APPLICATION_TASK_TAG == 1)))
    exitCritical(isrMask);
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f7ff fdc6 	bl	800cd98 <exitCritical>
#endif

    return id;
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3728      	adds	r7, #40	; 0x28
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	20000040 	.word	0x20000040
 800d21c:	08012fd8 	.word	0x08012fd8
 800d220:	08012ec8 	.word	0x08012ec8
 800d224:	08012ef0 	.word	0x08012ef0
 800d228:	e000ed00 	.word	0xe000ed00
 800d22c:	08013010 	.word	0x08013010
 800d230:	0800d051 	.word	0x0800d051
 800d234:	08013044 	.word	0x08013044

0800d238 <osThreadGetId>:

/// Return the thread ID of the current running thread.
/// \return thread ID for reference by other functions or NULL in case of error.
/// \note MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
osThreadId osThreadGetId (void)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af02      	add	r7, sp, #8
    osThreadId id = NULL;
 800d23e:	2300      	movs	r3, #0
 800d240:	607b      	str	r3, [r7, #4]
    TaskHandle_t handle = NULL;
 800d242:	2300      	movs	r3, #0
 800d244:	603b      	str	r3, [r7, #0]

    if(isInterrupt())    // interrupt mode
 800d246:	4b19      	ldr	r3, [pc, #100]	; (800d2ac <osThreadGetId+0x74>)
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <osThreadGetId+0x1e>
    {
        // CMSIS forbids call from Interrupt!
        return 0;
 800d252:	2300      	movs	r3, #0
 800d254:	e025      	b.n	800d2a2 <osThreadGetId+0x6a>
    }

#if (defined( DEBUG_CMSIS_API))
    if(!osKernelRunning())
 800d256:	f7ff ff3d 	bl	800d0d4 <osKernelRunning>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d10b      	bne.n	800d278 <osThreadGetId+0x40>
    {
        DEBOUT( "Can't get Thread ID while OS is not Running!");
 800d260:	4b13      	ldr	r3, [pc, #76]	; (800d2b0 <osThreadGetId+0x78>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	68d8      	ldr	r0, [r3, #12]
 800d266:	4b13      	ldr	r3, [pc, #76]	; (800d2b4 <osThreadGetId+0x7c>)
 800d268:	9300      	str	r3, [sp, #0]
 800d26a:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800d26e:	4a12      	ldr	r2, [pc, #72]	; (800d2b8 <osThreadGetId+0x80>)
 800d270:	4912      	ldr	r1, [pc, #72]	; (800d2bc <osThreadGetId+0x84>)
 800d272:	f003 fc83 	bl	8010b7c <fiprintf>
 800d276:	e002      	b.n	800d27e <osThreadGetId+0x46>
    }
    else
#endif
    {
       /*--Get current handle*/
       handle = xTaskGetCurrentTaskHandle();       //write the taskHandle of the current Task
 800d278:	f7fe f9fe 	bl	800b678 <xTaskGetCurrentTaskHandle>
 800d27c:	6038      	str	r0, [r7, #0]
    }
    if(handle != NULL)
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d002      	beq.n	800d28a <osThreadGetId+0x52>
    {
        //success
        id = handle;                            //pass current handle to the current threadId
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	607b      	str	r3, [r7, #4]
 800d288:	e00a      	b.n	800d2a0 <osThreadGetId+0x68>
    }
    else
    {
        //error message here
        DEBOUT( "Was not able to get the ID of the current task!");
 800d28a:	4b09      	ldr	r3, [pc, #36]	; (800d2b0 <osThreadGetId+0x78>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	68d8      	ldr	r0, [r3, #12]
 800d290:	4b0b      	ldr	r3, [pc, #44]	; (800d2c0 <osThreadGetId+0x88>)
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800d298:	4a07      	ldr	r2, [pc, #28]	; (800d2b8 <osThreadGetId+0x80>)
 800d29a:	4908      	ldr	r1, [pc, #32]	; (800d2bc <osThreadGetId+0x84>)
 800d29c:	f003 fc6e 	bl	8010b7c <fiprintf>
    }
    return id;
 800d2a0:	687b      	ldr	r3, [r7, #4]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	e000ed00 	.word	0xe000ed00
 800d2b0:	20000040 	.word	0x20000040
 800d2b4:	0801305c 	.word	0x0801305c
 800d2b8:	08012ec8 	.word	0x08012ec8
 800d2bc:	08012ef0 	.word	0x08012ef0
 800d2c0:	0801308c 	.word	0x0801308c

0800d2c4 <osThreadTerminate>:
/// Terminate execution of a thread and remove it from Active Threads.
/// \param[in]     thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
osStatus osThreadTerminate (osThreadId thread_id)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b088      	sub	sp, #32
 800d2c8:	af02      	add	r7, sp, #8
 800d2ca:	6078      	str	r0, [r7, #4]
    osStatus state = osOK;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	617b      	str	r3, [r7, #20]
#if ( INCLUDE_vTaskDelete == 1 )
    TaskHandle_t task = thread_id;                                  //pass the threadID of the task/thread to be deleted
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	613b      	str	r3, [r7, #16]

    if(isInterrupt())    // interrupt mode
 800d2d4:	4b16      	ldr	r3, [pc, #88]	; (800d330 <osThreadTerminate+0x6c>)
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d003      	beq.n	800d2e8 <osThreadTerminate+0x24>
    {
        // CMSIS forbids call from Interrupt!
        state = osErrorISR;
 800d2e0:	2382      	movs	r3, #130	; 0x82
 800d2e2:	617b      	str	r3, [r7, #20]
        return state;
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	e01e      	b.n	800d326 <osThreadTerminate+0x62>
    }

    /*--Delete task*/
    if (0 != task)
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d00d      	beq.n	800d30a <osThreadTerminate+0x46>
    {
#ifdef DEBUG_CMSIS_API
        uint32_t isrMask = enterCritical();   // protect creation AND remove from internal list....
 800d2ee:	f7ff fd33 	bl	800cd58 <enterCritical>
 800d2f2:	60f8      	str	r0, [r7, #12]
#endif
        vTaskDelete(task);                                          //delete the task
 800d2f4:	6938      	ldr	r0, [r7, #16]
 800d2f6:	f7fd fac7 	bl	800a888 <vTaskDelete>
        state = REMOVEFROMLIST(task);
 800d2fa:	6938      	ldr	r0, [r7, #16]
 800d2fc:	f7ff fe24 	bl	800cf48 <removeFromTaskList>
 800d300:	6178      	str	r0, [r7, #20]
#ifdef DEBUG_CMSIS_API
        exitCritical(isrMask);
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7ff fd48 	bl	800cd98 <exitCritical>
 800d308:	e00c      	b.n	800d324 <osThreadTerminate+0x60>
#endif

    }
    else
    {
        DEBOUT("try to terminate NULL Task");
 800d30a:	4b0a      	ldr	r3, [pc, #40]	; (800d334 <osThreadTerminate+0x70>)
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68d8      	ldr	r0, [r3, #12]
 800d310:	4b09      	ldr	r3, [pc, #36]	; (800d338 <osThreadTerminate+0x74>)
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	f240 13e5 	movw	r3, #485	; 0x1e5
 800d318:	4a08      	ldr	r2, [pc, #32]	; (800d33c <osThreadTerminate+0x78>)
 800d31a:	4909      	ldr	r1, [pc, #36]	; (800d340 <osThreadTerminate+0x7c>)
 800d31c:	f003 fc2e 	bl	8010b7c <fiprintf>
        state = osErrorParameter;
 800d320:	2380      	movs	r3, #128	; 0x80
 800d322:	617b      	str	r3, [r7, #20]
    state = osErrorOS;
    //error message here
    DEBOUT("INCLUDE_vTaskDelete must be enabled to terminate Task");
#endif

   return state;
 800d324:	697b      	ldr	r3, [r7, #20]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3718      	adds	r7, #24
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	e000ed00 	.word	0xe000ed00
 800d334:	20000040 	.word	0x20000040
 800d338:	080130bc 	.word	0x080130bc
 800d33c:	08012ec8 	.word	0x08012ec8
 800d340:	08012ef0 	.word	0x08012ef0

0800d344 <osThreadSetPriority>:
/// \param[in]     thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
/// \param[in]     priority      new priority value for the thread function.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b088      	sub	sp, #32
 800d348:	af02      	add	r7, sp, #8
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	460b      	mov	r3, r1
 800d34e:	807b      	strh	r3, [r7, #2]
    osStatus state = osOK;
 800d350:	2300      	movs	r3, #0
 800d352:	617b      	str	r3, [r7, #20]
    TaskHandle_t task = thread_id;                                  //pass the threadID of the task/thread whose priority has to be set
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	613b      	str	r3, [r7, #16]
    UBaseType_t taskPriority = tskIDLE_PRIORITY;                    //pass priority
 800d358:	2300      	movs	r3, #0
 800d35a:	60fb      	str	r3, [r7, #12]

    if(isInterrupt())    // interrupt mode
 800d35c:	4b27      	ldr	r3, [pc, #156]	; (800d3fc <osThreadSetPriority+0xb8>)
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d364:	2b00      	cmp	r3, #0
 800d366:	d003      	beq.n	800d370 <osThreadSetPriority+0x2c>
    {
        // CMSIS forbids call from Interrupt!
        state =  osErrorISR;
 800d368:	2382      	movs	r3, #130	; 0x82
 800d36a:	617b      	str	r3, [r7, #20]
        return state;
 800d36c:	697b      	ldr	r3, [r7, #20]
 800d36e:	e040      	b.n	800d3f2 <osThreadSetPriority+0xae>
    }

#if (1 == INCLUDE_vTaskPrioritySet)     // check if we are allowed to do this...
    if (priority < osPriorityIdle || priority > osPriorityRealtime)
 800d370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d374:	f113 0f03 	cmn.w	r3, #3
 800d378:	db03      	blt.n	800d382 <osThreadSetPriority+0x3e>
 800d37a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d37e:	2b03      	cmp	r3, #3
 800d380:	dd03      	ble.n	800d38a <osThreadSetPriority+0x46>
    {
        state = osErrorValue;
 800d382:	2386      	movs	r3, #134	; 0x86
 800d384:	617b      	str	r3, [r7, #20]
        return state;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	e033      	b.n	800d3f2 <osThreadSetPriority+0xae>
    }

    // adapt CMSIS to FreeRtos priority levels
    // osPriorityIdle (-3) must be mapped to tskIDLE_PRIORITY (0)
    taskPriority = priority + (tskIDLE_PRIORITY - osPriorityIdle);
 800d38a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d38e:	3303      	adds	r3, #3
 800d390:	60fb      	str	r3, [r7, #12]

    if(!thread_id)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10e      	bne.n	800d3b6 <osThreadSetPriority+0x72>
    {
        //error message here
        DEBOUT("Priority of the NULL thread can not be changed!");
 800d398:	4b19      	ldr	r3, [pc, #100]	; (800d400 <osThreadSetPriority+0xbc>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	68d8      	ldr	r0, [r3, #12]
 800d39e:	4b19      	ldr	r3, [pc, #100]	; (800d404 <osThreadSetPriority+0xc0>)
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	f240 2326 	movw	r3, #550	; 0x226
 800d3a6:	4a18      	ldr	r2, [pc, #96]	; (800d408 <osThreadSetPriority+0xc4>)
 800d3a8:	4918      	ldr	r1, [pc, #96]	; (800d40c <osThreadSetPriority+0xc8>)
 800d3aa:	f003 fbe7 	bl	8010b7c <fiprintf>
        state = osErrorParameter;
 800d3ae:	2380      	movs	r3, #128	; 0x80
 800d3b0:	617b      	str	r3, [r7, #20]
        return state;
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	e01d      	b.n	800d3f2 <osThreadSetPriority+0xae>
    }
    /*--Set the priority*/
    vTaskPrioritySet(task, taskPriority);
 800d3b6:	68f9      	ldr	r1, [r7, #12]
 800d3b8:	6938      	ldr	r0, [r7, #16]
 800d3ba:	f7fd fb0b 	bl	800a9d4 <vTaskPrioritySet>
    if (osThreadGetPriority(thread_id) == priority)                 //check if the priority is the one that was supposed to be set
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f828 	bl	800d414 <osThreadGetPriority>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	461a      	mov	r2, r3
 800d3c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d3cc:	4293      	cmp	r3, r2
 800d3ce:	d102      	bne.n	800d3d6 <osThreadSetPriority+0x92>
    {
        //success
        state = osOK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	617b      	str	r3, [r7, #20]
 800d3d4:	e00c      	b.n	800d3f0 <osThreadSetPriority+0xac>
    }
    else
    {
        //error message here
        DEBOUT("Priority of the thread could not be changed!");
 800d3d6:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <osThreadSetPriority+0xbc>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	68d8      	ldr	r0, [r3, #12]
 800d3dc:	4b0c      	ldr	r3, [pc, #48]	; (800d410 <osThreadSetPriority+0xcc>)
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	f44f 730d 	mov.w	r3, #564	; 0x234
 800d3e4:	4a08      	ldr	r2, [pc, #32]	; (800d408 <osThreadSetPriority+0xc4>)
 800d3e6:	4909      	ldr	r1, [pc, #36]	; (800d40c <osThreadSetPriority+0xc8>)
 800d3e8:	f003 fbc8 	bl	8010b7c <fiprintf>
        state = osErrorValue;
 800d3ec:	2386      	movs	r3, #134	; 0x86
 800d3ee:	617b      	str	r3, [r7, #20]
    state = osErrorOS;
    //error message here
    DEBOUT("INCLUDE_vTaskPrioritySet must be enabled to terminate Task");
#endif

    return state;
 800d3f0:	697b      	ldr	r3, [r7, #20]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3718      	adds	r7, #24
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	e000ed00 	.word	0xe000ed00
 800d400:	20000040 	.word	0x20000040
 800d404:	080130d8 	.word	0x080130d8
 800d408:	08012ec8 	.word	0x08012ec8
 800d40c:	08012ef0 	.word	0x08012ef0
 800d410:	08013108 	.word	0x08013108

0800d414 <osThreadGetPriority>:
/// Get current priority of an active thread.
/// \param[in]     thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
/// \return current priority value of the thread function.
/// \note MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
osPriority osThreadGetPriority (osThreadId thread_id)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b088      	sub	sp, #32
 800d418:	af02      	add	r7, sp, #8
 800d41a:	6078      	str	r0, [r7, #4]
    TaskHandle_t task = thread_id;                     //pass the threadID of the task/thread whose priority has to be get
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	613b      	str	r3, [r7, #16]
    osPriority priority = osPriorityError;
 800d420:	2384      	movs	r3, #132	; 0x84
 800d422:	82fb      	strh	r3, [r7, #22]
    UBaseType_t prio = priority;
 800d424:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d428:	60fb      	str	r3, [r7, #12]
    if(isInterrupt())    // interrupt mode
 800d42a:	4b1c      	ldr	r3, [pc, #112]	; (800d49c <osThreadGetPriority+0x88>)
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d432:	2b00      	cmp	r3, #0
 800d434:	d002      	beq.n	800d43c <osThreadGetPriority+0x28>
    {
        // CMSIS forbids call from Interrupt!
        return priority;
 800d436:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d43a:	e02a      	b.n	800d492 <osThreadGetPriority+0x7e>
    }

    if(!thread_id)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d10d      	bne.n	800d45e <osThreadGetPriority+0x4a>
    {
        //error message here
        DEBOUT("Priority of the NULL thread can not be changed!");
 800d442:	4b17      	ldr	r3, [pc, #92]	; (800d4a0 <osThreadGetPriority+0x8c>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	68d8      	ldr	r0, [r3, #12]
 800d448:	4b16      	ldr	r3, [pc, #88]	; (800d4a4 <osThreadGetPriority+0x90>)
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	f240 2352 	movw	r3, #594	; 0x252
 800d450:	4a15      	ldr	r2, [pc, #84]	; (800d4a8 <osThreadGetPriority+0x94>)
 800d452:	4916      	ldr	r1, [pc, #88]	; (800d4ac <osThreadGetPriority+0x98>)
 800d454:	f003 fb92 	bl	8010b7c <fiprintf>
        return priority;
 800d458:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d45c:	e019      	b.n	800d492 <osThreadGetPriority+0x7e>
    }

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    /*--Get the priority*/
    prio = uxTaskPriorityGet(task);
 800d45e:	6938      	ldr	r0, [r7, #16]
 800d460:	f7fd fa9e 	bl	800a9a0 <uxTaskPriorityGet>
 800d464:	60f8      	str	r0, [r7, #12]

    if(prio <= (osPriorityRealtime - osPriorityIdle) + tskIDLE_PRIORITY)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b06      	cmp	r3, #6
 800d46a:	d805      	bhi.n	800d478 <osThreadGetPriority+0x64>
    {
        priority = prio + osPriorityIdle  - tskIDLE_PRIORITY;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	b29b      	uxth	r3, r3
 800d470:	3b03      	subs	r3, #3
 800d472:	b29b      	uxth	r3, r3
 800d474:	82fb      	strh	r3, [r7, #22]
 800d476:	e00a      	b.n	800d48e <osThreadGetPriority+0x7a>
    }
    else
    {
        //error message here
        DEBOUT("Priority could not be achieved!");
 800d478:	4b09      	ldr	r3, [pc, #36]	; (800d4a0 <osThreadGetPriority+0x8c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68d8      	ldr	r0, [r3, #12]
 800d47e:	4b0c      	ldr	r3, [pc, #48]	; (800d4b0 <osThreadGetPriority+0x9c>)
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	f240 2361 	movw	r3, #609	; 0x261
 800d486:	4a08      	ldr	r2, [pc, #32]	; (800d4a8 <osThreadGetPriority+0x94>)
 800d488:	4908      	ldr	r1, [pc, #32]	; (800d4ac <osThreadGetPriority+0x98>)
 800d48a:	f003 fb77 	bl	8010b7c <fiprintf>
    }
#else
    //error message here
    DEBOUT("INCLUDE_uxTaskPriorityGet must be enabled to terminate Task");
#endif
    return priority;
 800d48e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3718      	adds	r7, #24
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	e000ed00 	.word	0xe000ed00
 800d4a0:	20000040 	.word	0x20000040
 800d4a4:	080130d8 	.word	0x080130d8
 800d4a8:	08012ec8 	.word	0x08012ec8
 800d4ac:	08012ef0 	.word	0x08012ef0
 800d4b0:	08013138 	.word	0x08013138

0800d4b4 <osPoolCreate>:
/// Create and Initialize a memory pool.
/// \param[in]     pool_def      memory pool definition referenced with \ref osPool.
/// \return memory pool ID for reference by other functions or NULL in case of error.
/// \note MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b088      	sub	sp, #32
 800d4b8:	af02      	add	r7, sp, #8
 800d4ba:	6078      	str	r0, [r7, #4]

  osPoolId thePool;
  size_t itemSize = 0;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	613b      	str	r3, [r7, #16]
  uint32_t i;

  if (isInterrupt())
 800d4c0:	4b3e      	ldr	r3, [pc, #248]	; (800d5bc <osPoolCreate+0x108>)
 800d4c2:	685b      	ldr	r3, [r3, #4]
 800d4c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <osPoolCreate+0x1c>
  {
    // CMISIS forbids call from ISR
    return 0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	e070      	b.n	800d5b2 <osPoolCreate+0xfe>
  }
  if (!pool_def)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d10c      	bne.n	800d4f0 <osPoolCreate+0x3c>
  {
    DEBOUT("NULL Pool Definition not allowed!");
 800d4d6:	4b3a      	ldr	r3, [pc, #232]	; (800d5c0 <osPoolCreate+0x10c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68d8      	ldr	r0, [r3, #12]
 800d4dc:	4b39      	ldr	r3, [pc, #228]	; (800d5c4 <osPoolCreate+0x110>)
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	f240 53de 	movw	r3, #1502	; 0x5de
 800d4e4:	4a38      	ldr	r2, [pc, #224]	; (800d5c8 <osPoolCreate+0x114>)
 800d4e6:	4939      	ldr	r1, [pc, #228]	; (800d5cc <osPoolCreate+0x118>)
 800d4e8:	f003 fb48 	bl	8010b7c <fiprintf>
    return 0;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	e060      	b.n	800d5b2 <osPoolCreate+0xfe>
  }
  itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	3303      	adds	r3, #3
 800d4f6:	f023 0303 	bic.w	r3, r3, #3
 800d4fa:	613b      	str	r3, [r7, #16]
    DEBOUT("Couldn't allocate memory for Mem Pool admin data!");
  }
#else    /* alternate implementation, jw                                     */
  /* First have to allocate memory for the pool control data and pool memory */
  size_t wantedSize = sizeof(os_pool_cb_t)                 /* control block  */
                    + pool_def->pool_sz * sizeof(Marker);  /* markers        */
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
  size_t wantedSize = sizeof(os_pool_cb_t)                 /* control block  */
 800d500:	3318      	adds	r3, #24
 800d502:	60fb      	str	r3, [r7, #12]
  wantedSize = 4*((wantedSize+3)/4);             /* create 4 byte alignment! */
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3303      	adds	r3, #3
 800d508:	f023 0303 	bic.w	r3, r3, #3
 800d50c:	60fb      	str	r3, [r7, #12]
  wantedSize += pool_def->pool_sz * itemSize;              /* pool itself    */
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	693a      	ldr	r2, [r7, #16]
 800d514:	fb02 f303 	mul.w	r3, r2, r3
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4413      	add	r3, r2
 800d51c:	60fb      	str	r3, [r7, #12]
  thePool = (osPoolId)pvPortMalloc(wantedSize);
 800d51e:	68f8      	ldr	r0, [r7, #12]
 800d520:	f7fe fe46 	bl	800c1b0 <pvPortMalloc>
 800d524:	60b8      	str	r0, [r7, #8]

  if (thePool)
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d036      	beq.n	800d59a <osPoolCreate+0xe6>
  {
    thePool->pool_sz = pool_def->pool_sz;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	60da      	str	r2, [r3, #12]
    thePool->item_sz = itemSize;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	693a      	ldr	r2, [r7, #16]
 800d538:	611a      	str	r2, [r3, #16]
    thePool->currentIndex = 0;
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	2200      	movs	r2, #0
 800d53e:	615a      	str	r2, [r3, #20]
    /* Memory for markers */
    thePool->markers = (void *)thePool + sizeof(os_pool_cb_t);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	f103 0218 	add.w	r2, r3, #24
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	605a      	str	r2, [r3, #4]
    for (i = 0; i < pool_def->pool_sz; i++)
 800d54a:	2300      	movs	r3, #0
 800d54c:	617b      	str	r3, [r7, #20]
 800d54e:	e008      	b.n	800d562 <osPoolCreate+0xae>
    {
      thePool->markers[i] = FREE;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	4413      	add	r3, r2
 800d558:	2200      	movs	r2, #0
 800d55a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < pool_def->pool_sz; i++)
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	3301      	adds	r3, #1
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d3f1      	bcc.n	800d550 <osPoolCreate+0x9c>
    }
    /* Memory for the pool itself. (4 byte alligned)*/
    thePool->pool = (void *)(thePool) +  (wantedSize - pool_def->pool_sz * itemSize);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	fb02 f303 	mul.w	r3, r2, r3
 800d576:	68fa      	ldr	r2, [r7, #12]
 800d578:	1ad3      	subs	r3, r2, r3
 800d57a:	68ba      	ldr	r2, [r7, #8]
 800d57c:	441a      	add	r2, r3
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	601a      	str	r2, [r3, #0]
#ifdef DEBUG_CMSIS_API
    memset(thePool->pool, POOLPATTERN, (pool_def->pool_sz * itemSize));
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	6818      	ldr	r0, [r3, #0]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	693a      	ldr	r2, [r7, #16]
 800d58c:	fb02 f303 	mul.w	r3, r2, r3
 800d590:	461a      	mov	r2, r3
 800d592:	2177      	movs	r1, #119	; 0x77
 800d594:	f003 fbb8 	bl	8010d08 <memset>
 800d598:	e00a      	b.n	800d5b0 <osPoolCreate+0xfc>
#endif
  }
  else
  {
    DEBOUT("Couldn't allocate memory for Mem Pool data!");
 800d59a:	4b09      	ldr	r3, [pc, #36]	; (800d5c0 <osPoolCreate+0x10c>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	68d8      	ldr	r0, [r3, #12]
 800d5a0:	4b0b      	ldr	r3, [pc, #44]	; (800d5d0 <osPoolCreate+0x11c>)
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	f240 632a 	movw	r3, #1578	; 0x62a
 800d5a8:	4a07      	ldr	r2, [pc, #28]	; (800d5c8 <osPoolCreate+0x114>)
 800d5aa:	4908      	ldr	r1, [pc, #32]	; (800d5cc <osPoolCreate+0x118>)
 800d5ac:	f003 fae6 	bl	8010b7c <fiprintf>
  }
#endif
  return thePool;
 800d5b0:	68bb      	ldr	r3, [r7, #8]
}
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	3718      	adds	r7, #24
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	e000ed00 	.word	0xe000ed00
 800d5c0:	20000040 	.word	0x20000040
 800d5c4:	080136e0 	.word	0x080136e0
 800d5c8:	08012ec8 	.word	0x08012ec8
 800d5cc:	08012ef0 	.word	0x08012ef0
 800d5d0:	08013704 	.word	0x08013704

0800d5d4 <_ZN11ApplicationC1Ev>:
	HAL_SPI_Transmit(Platform::BSP::STM32Facade::instance(Platform::BSP::STM32Facade::SPI_Peripheral::UseSPI1), &b, 1, 0xFFFFFFFF);
}

uint16_t stack = 2048;
/* --Project includes. */
Application::Application(): m_sdTask("SD_Task", stack, osPriorityHigh, true)/*m_webserverTask("Webserver_Task",stack,osPriorityNormal,true)*/{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b084      	sub	sp, #16
 800d5d8:	af02      	add	r7, sp, #8
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	4b06      	ldr	r3, [pc, #24]	; (800d5f8 <_ZN11ApplicationC1Ev+0x24>)
 800d5e0:	881a      	ldrh	r2, [r3, #0]
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	4904      	ldr	r1, [pc, #16]	; (800d5fc <_ZN11ApplicationC1Ev+0x28>)
 800d5ea:	f000 fe6d 	bl	800e2c8 <_ZN6SDTaskC1EPKct10osPriorityb>
//	std::printf("Network configuration:\r\n");
//	std::printf("  MAC ADDRESS: %x:%x:%x:%x:%x:%x\r\n", netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3], netInfo.mac[4], netInfo.mac[5]);
//	std::printf("  IP ADDRESS:  %d.%d.%d.%d\r\n", netInfo.ip[0], netInfo.ip[1], netInfo.ip[2], netInfo.ip[3]);
//	std::printf("  NETMASK:     %d.%d.%d.%d\r\n", netInfo.sn[0], netInfo.sn[1], netInfo.sn[2], netInfo.sn[3]);
//	std::printf("  GATEWAY:     %d.%d.%d.%d\r\n", netInfo.gw[0], netInfo.gw[1], netInfo.gw[2], netInfo.gw[3]);
}
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}
 800d5f8:	20000038 	.word	0x20000038
 800d5fc:	08013a0c 	.word	0x08013a0c

0800d600 <HAL_GetTick>:

extern "C" {
uint32_t HAL_GetTick(void) {
 800d600:	b580      	push	{r7, lr}
 800d602:	af00      	add	r7, sp, #0
	return osKernelSysTick();
 800d604:	f7ff fd72 	bl	800d0ec <osKernelSysTick>
 800d608:	4603      	mov	r3, r0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	bd80      	pop	{r7, pc}
	...

0800d610 <startApplication>:

static uint8_t appMem[sizeof(Application)];

static Application *appPointer = nullptr;

extern "C" void startApplication() {
 800d610:	b598      	push	{r3, r4, r7, lr}
 800d612:	af00      	add	r7, sp, #0
	/* --Initialize the kernel. */
	osKernelInitialize();
 800d614:	f7ff fd4a 	bl	800d0ac <osKernelInitialize>

	appPointer = new (appMem) Application;
 800d618:	4907      	ldr	r1, [pc, #28]	; (800d638 <startApplication+0x28>)
 800d61a:	f44f 7013 	mov.w	r0, #588	; 0x24c
 800d61e:	f7fb ff7b 	bl	8009518 <_ZnwjPv>
 800d622:	4604      	mov	r4, r0
 800d624:	4620      	mov	r0, r4
 800d626:	f7ff ffd5 	bl	800d5d4 <_ZN11ApplicationC1Ev>
 800d62a:	4b04      	ldr	r3, [pc, #16]	; (800d63c <startApplication+0x2c>)
 800d62c:	601c      	str	r4, [r3, #0]
	/* --Run the kernel. */
	osKernelStart();
 800d62e:	f7ff fd45 	bl	800d0bc <osKernelStart>

}
 800d632:	bf00      	nop
 800d634:	bd98      	pop	{r3, r4, r7, pc}
 800d636:	bf00      	nop
 800d638:	20000a20 	.word	0x20000a20
 800d63c:	20000c6c 	.word	0x20000c6c

0800d640 <_Z41__static_initialization_and_destruction_0ii>:
 800d640:	b580      	push	{r7, lr}
 800d642:	b0b4      	sub	sp, #208	; 0xd0
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	f040 85fe 	bne.w	800e24e <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d658:	4293      	cmp	r3, r2
 800d65a:	f040 85f8 	bne.w	800e24e <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	/* --Short-cuts for GPIOs. */
	using _Port=Port::Select;
	using _Pin=Pin::BitMask;

	/* --Port A. */
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 800d65e:	4ba1      	ldr	r3, [pc, #644]	; (800d8e4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3301      	adds	r3, #1
 800d664:	4a9f      	ldr	r2, [pc, #636]	; (800d8e4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	4b9e      	ldr	r3, [pc, #632]	; (800d8e4 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	bf0c      	ite	eq
 800d670:	2301      	moveq	r3, #1
 800d672:	2300      	movne	r3, #0
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00b      	beq.n	800d692 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800d67a:	2300      	movs	r3, #0
 800d67c:	81bb      	strh	r3, [r7, #12]
 800d67e:	2301      	movs	r3, #1
 800d680:	81fb      	strh	r3, [r7, #14]
 800d682:	f107 020e 	add.w	r2, r7, #14
 800d686:	f107 030c 	add.w	r3, r7, #12
 800d68a:	4619      	mov	r1, r3
 800d68c:	4896      	ldr	r0, [pc, #600]	; (800d8e8 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800d68e:	f7fc fb03 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 800d692:	4b96      	ldr	r3, [pc, #600]	; (800d8ec <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3301      	adds	r3, #1
 800d698:	4a94      	ldr	r2, [pc, #592]	; (800d8ec <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800d69a:	6013      	str	r3, [r2, #0]
 800d69c:	4b93      	ldr	r3, [pc, #588]	; (800d8ec <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2b01      	cmp	r3, #1
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2301      	moveq	r3, #1
 800d6a6:	2300      	movne	r3, #0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00b      	beq.n	800d6c6 <_Z41__static_initialization_and_destruction_0ii+0x86>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	823b      	strh	r3, [r7, #16]
 800d6b2:	2302      	movs	r3, #2
 800d6b4:	827b      	strh	r3, [r7, #18]
 800d6b6:	f107 0212 	add.w	r2, r7, #18
 800d6ba:	f107 0310 	add.w	r3, r7, #16
 800d6be:	4619      	mov	r1, r3
 800d6c0:	488b      	ldr	r0, [pc, #556]	; (800d8f0 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800d6c2:	f7fc fae9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 800d6c6:	4b8b      	ldr	r3, [pc, #556]	; (800d8f4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	4a89      	ldr	r2, [pc, #548]	; (800d8f4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800d6ce:	6013      	str	r3, [r2, #0]
 800d6d0:	4b88      	ldr	r3, [pc, #544]	; (800d8f4 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	bf0c      	ite	eq
 800d6d8:	2301      	moveq	r3, #1
 800d6da:	2300      	movne	r3, #0
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d00b      	beq.n	800d6fa <_Z41__static_initialization_and_destruction_0ii+0xba>
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	82bb      	strh	r3, [r7, #20]
 800d6e6:	2304      	movs	r3, #4
 800d6e8:	82fb      	strh	r3, [r7, #22]
 800d6ea:	f107 0216 	add.w	r2, r7, #22
 800d6ee:	f107 0314 	add.w	r3, r7, #20
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	4880      	ldr	r0, [pc, #512]	; (800d8f8 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800d6f6:	f7fc facf 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 800d6fa:	4b80      	ldr	r3, [pc, #512]	; (800d8fc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3301      	adds	r3, #1
 800d700:	4a7e      	ldr	r2, [pc, #504]	; (800d8fc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800d702:	6013      	str	r3, [r2, #0]
 800d704:	4b7d      	ldr	r3, [pc, #500]	; (800d8fc <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	2b01      	cmp	r3, #1
 800d70a:	bf0c      	ite	eq
 800d70c:	2301      	moveq	r3, #1
 800d70e:	2300      	movne	r3, #0
 800d710:	b2db      	uxtb	r3, r3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00b      	beq.n	800d72e <_Z41__static_initialization_and_destruction_0ii+0xee>
 800d716:	2300      	movs	r3, #0
 800d718:	833b      	strh	r3, [r7, #24]
 800d71a:	2308      	movs	r3, #8
 800d71c:	837b      	strh	r3, [r7, #26]
 800d71e:	f107 021a 	add.w	r2, r7, #26
 800d722:	f107 0318 	add.w	r3, r7, #24
 800d726:	4619      	mov	r1, r3
 800d728:	4875      	ldr	r0, [pc, #468]	; (800d900 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800d72a:	f7fc fab5 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 800d72e:	4b75      	ldr	r3, [pc, #468]	; (800d904 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	3301      	adds	r3, #1
 800d734:	4a73      	ldr	r2, [pc, #460]	; (800d904 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800d736:	6013      	str	r3, [r2, #0]
 800d738:	4b72      	ldr	r3, [pc, #456]	; (800d904 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	bf0c      	ite	eq
 800d740:	2301      	moveq	r3, #1
 800d742:	2300      	movne	r3, #0
 800d744:	b2db      	uxtb	r3, r3
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00b      	beq.n	800d762 <_Z41__static_initialization_and_destruction_0ii+0x122>
 800d74a:	2300      	movs	r3, #0
 800d74c:	83bb      	strh	r3, [r7, #28]
 800d74e:	2310      	movs	r3, #16
 800d750:	83fb      	strh	r3, [r7, #30]
 800d752:	f107 021e 	add.w	r2, r7, #30
 800d756:	f107 031c 	add.w	r3, r7, #28
 800d75a:	4619      	mov	r1, r3
 800d75c:	486a      	ldr	r0, [pc, #424]	; (800d908 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800d75e:	f7fc fa9b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 800d762:	4b6a      	ldr	r3, [pc, #424]	; (800d90c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	3301      	adds	r3, #1
 800d768:	4a68      	ldr	r2, [pc, #416]	; (800d90c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800d76a:	6013      	str	r3, [r2, #0]
 800d76c:	4b67      	ldr	r3, [pc, #412]	; (800d90c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	bf0c      	ite	eq
 800d774:	2301      	moveq	r3, #1
 800d776:	2300      	movne	r3, #0
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00b      	beq.n	800d796 <_Z41__static_initialization_and_destruction_0ii+0x156>
 800d77e:	2300      	movs	r3, #0
 800d780:	843b      	strh	r3, [r7, #32]
 800d782:	2320      	movs	r3, #32
 800d784:	847b      	strh	r3, [r7, #34]	; 0x22
 800d786:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800d78a:	f107 0320 	add.w	r3, r7, #32
 800d78e:	4619      	mov	r1, r3
 800d790:	485f      	ldr	r0, [pc, #380]	; (800d910 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800d792:	f7fc fa81 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 800d796:	4b5f      	ldr	r3, [pc, #380]	; (800d914 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3301      	adds	r3, #1
 800d79c:	4a5d      	ldr	r2, [pc, #372]	; (800d914 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	4b5c      	ldr	r3, [pc, #368]	; (800d914 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	bf0c      	ite	eq
 800d7a8:	2301      	moveq	r3, #1
 800d7aa:	2300      	movne	r3, #0
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d00b      	beq.n	800d7ca <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d7b6:	2340      	movs	r3, #64	; 0x40
 800d7b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d7ba:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800d7be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4854      	ldr	r0, [pc, #336]	; (800d918 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800d7c6:	f7fc fa67 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 800d7ca:	4b54      	ldr	r3, [pc, #336]	; (800d91c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	4a52      	ldr	r2, [pc, #328]	; (800d91c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800d7d2:	6013      	str	r3, [r2, #0]
 800d7d4:	4b51      	ldr	r3, [pc, #324]	; (800d91c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	bf0c      	ite	eq
 800d7dc:	2301      	moveq	r3, #1
 800d7de:	2300      	movne	r3, #0
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00b      	beq.n	800d7fe <_Z41__static_initialization_and_destruction_0ii+0x1be>
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	853b      	strh	r3, [r7, #40]	; 0x28
 800d7ea:	2380      	movs	r3, #128	; 0x80
 800d7ec:	857b      	strh	r3, [r7, #42]	; 0x2a
 800d7ee:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800d7f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4849      	ldr	r0, [pc, #292]	; (800d920 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800d7fa:	f7fc fa4d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 800d7fe:	4b49      	ldr	r3, [pc, #292]	; (800d924 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3301      	adds	r3, #1
 800d804:	4a47      	ldr	r2, [pc, #284]	; (800d924 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800d806:	6013      	str	r3, [r2, #0]
 800d808:	4b46      	ldr	r3, [pc, #280]	; (800d924 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	bf0c      	ite	eq
 800d810:	2301      	moveq	r3, #1
 800d812:	2300      	movne	r3, #0
 800d814:	b2db      	uxtb	r3, r3
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00c      	beq.n	800d834 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 800d81a:	2300      	movs	r3, #0
 800d81c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800d81e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d822:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800d824:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800d828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d82c:	4619      	mov	r1, r3
 800d82e:	483e      	ldr	r0, [pc, #248]	; (800d928 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800d830:	f7fc fa32 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 800d834:	4b3d      	ldr	r3, [pc, #244]	; (800d92c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	3301      	adds	r3, #1
 800d83a:	4a3c      	ldr	r2, [pc, #240]	; (800d92c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800d83c:	6013      	str	r3, [r2, #0]
 800d83e:	4b3b      	ldr	r3, [pc, #236]	; (800d92c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	2b01      	cmp	r3, #1
 800d844:	bf0c      	ite	eq
 800d846:	2301      	moveq	r3, #1
 800d848:	2300      	movne	r3, #0
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d00c      	beq.n	800d86a <_Z41__static_initialization_and_destruction_0ii+0x22a>
 800d850:	2300      	movs	r3, #0
 800d852:	863b      	strh	r3, [r7, #48]	; 0x30
 800d854:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d858:	867b      	strh	r3, [r7, #50]	; 0x32
 800d85a:	f107 0232 	add.w	r2, r7, #50	; 0x32
 800d85e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d862:	4619      	mov	r1, r3
 800d864:	4832      	ldr	r0, [pc, #200]	; (800d930 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800d866:	f7fc fa17 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 800d86a:	4b32      	ldr	r3, [pc, #200]	; (800d934 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3301      	adds	r3, #1
 800d870:	4a30      	ldr	r2, [pc, #192]	; (800d934 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800d872:	6013      	str	r3, [r2, #0]
 800d874:	4b2f      	ldr	r3, [pc, #188]	; (800d934 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b01      	cmp	r3, #1
 800d87a:	bf0c      	ite	eq
 800d87c:	2301      	moveq	r3, #1
 800d87e:	2300      	movne	r3, #0
 800d880:	b2db      	uxtb	r3, r3
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00c      	beq.n	800d8a0 <_Z41__static_initialization_and_destruction_0ii+0x260>
 800d886:	2300      	movs	r3, #0
 800d888:	86bb      	strh	r3, [r7, #52]	; 0x34
 800d88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d88e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800d890:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800d894:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d898:	4619      	mov	r1, r3
 800d89a:	4827      	ldr	r0, [pc, #156]	; (800d938 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800d89c:	f7fc f9fc 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 800d8a0:	4b26      	ldr	r3, [pc, #152]	; (800d93c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	4a25      	ldr	r2, [pc, #148]	; (800d93c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800d8a8:	6013      	str	r3, [r2, #0]
 800d8aa:	4b24      	ldr	r3, [pc, #144]	; (800d93c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	bf0c      	ite	eq
 800d8b2:	2301      	moveq	r3, #1
 800d8b4:	2300      	movne	r3, #0
 800d8b6:	b2db      	uxtb	r3, r3
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00c      	beq.n	800d8d6 <_Z41__static_initialization_and_destruction_0ii+0x296>
 800d8bc:	2300      	movs	r3, #0
 800d8be:	873b      	strh	r3, [r7, #56]	; 0x38
 800d8c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8c4:	877b      	strh	r3, [r7, #58]	; 0x3a
 800d8c6:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 800d8ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d8ce:	4619      	mov	r1, r3
 800d8d0:	481b      	ldr	r0, [pc, #108]	; (800d940 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800d8d2:	f7fc f9e1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 800d8d6:	4b1b      	ldr	r3, [pc, #108]	; (800d944 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	4a19      	ldr	r2, [pc, #100]	; (800d944 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800d8de:	6013      	str	r3, [r2, #0]
 800d8e0:	e032      	b.n	800d948 <_Z41__static_initialization_and_destruction_0ii+0x308>
 800d8e2:	bf00      	nop
 800d8e4:	20000c70 	.word	0x20000c70
 800d8e8:	20000898 	.word	0x20000898
 800d8ec:	20000c74 	.word	0x20000c74
 800d8f0:	200008a0 	.word	0x200008a0
 800d8f4:	20000c78 	.word	0x20000c78
 800d8f8:	200008a8 	.word	0x200008a8
 800d8fc:	20000c7c 	.word	0x20000c7c
 800d900:	200008b0 	.word	0x200008b0
 800d904:	20000c80 	.word	0x20000c80
 800d908:	200008b8 	.word	0x200008b8
 800d90c:	20000c84 	.word	0x20000c84
 800d910:	200008c0 	.word	0x200008c0
 800d914:	20000c88 	.word	0x20000c88
 800d918:	200008c8 	.word	0x200008c8
 800d91c:	20000c8c 	.word	0x20000c8c
 800d920:	200008d0 	.word	0x200008d0
 800d924:	20000c90 	.word	0x20000c90
 800d928:	200008d8 	.word	0x200008d8
 800d92c:	20000c94 	.word	0x20000c94
 800d930:	200008e0 	.word	0x200008e0
 800d934:	20000c98 	.word	0x20000c98
 800d938:	200008e8 	.word	0x200008e8
 800d93c:	20000c9c 	.word	0x20000c9c
 800d940:	200008f0 	.word	0x200008f0
 800d944:	20000ca0 	.word	0x20000ca0
 800d948:	4bac      	ldr	r3, [pc, #688]	; (800dbfc <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	bf0c      	ite	eq
 800d950:	2301      	moveq	r3, #1
 800d952:	2300      	movne	r3, #0
 800d954:	b2db      	uxtb	r3, r3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d00c      	beq.n	800d974 <_Z41__static_initialization_and_destruction_0ii+0x334>
 800d95a:	2300      	movs	r3, #0
 800d95c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800d95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d962:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800d964:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800d968:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d96c:	4619      	mov	r1, r3
 800d96e:	48a4      	ldr	r0, [pc, #656]	; (800dc00 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d970:	f7fc f992 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 800d974:	4ba3      	ldr	r3, [pc, #652]	; (800dc04 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	3301      	adds	r3, #1
 800d97a:	4aa2      	ldr	r2, [pc, #648]	; (800dc04 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d97c:	6013      	str	r3, [r2, #0]
 800d97e:	4ba1      	ldr	r3, [pc, #644]	; (800dc04 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	2b01      	cmp	r3, #1
 800d984:	bf0c      	ite	eq
 800d986:	2301      	moveq	r3, #1
 800d988:	2300      	movne	r3, #0
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00e      	beq.n	800d9ae <_Z41__static_initialization_and_destruction_0ii+0x36e>
 800d990:	2300      	movs	r3, #0
 800d992:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800d996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d99a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800d99e:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800d9a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	4897      	ldr	r0, [pc, #604]	; (800dc08 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d9aa:	f7fc f975 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 800d9ae:	4b97      	ldr	r3, [pc, #604]	; (800dc0c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	4a95      	ldr	r2, [pc, #596]	; (800dc0c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d9b6:	6013      	str	r3, [r2, #0]
 800d9b8:	4b94      	ldr	r3, [pc, #592]	; (800dc0c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	2b01      	cmp	r3, #1
 800d9be:	bf0c      	ite	eq
 800d9c0:	2301      	moveq	r3, #1
 800d9c2:	2300      	movne	r3, #0
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00e      	beq.n	800d9e8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d9d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d9d4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d9d8:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800d9dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	488b      	ldr	r0, [pc, #556]	; (800dc10 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d9e4:	f7fc f958 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 800d9e8:	4b8a      	ldr	r3, [pc, #552]	; (800dc14 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	3301      	adds	r3, #1
 800d9ee:	4a89      	ldr	r2, [pc, #548]	; (800dc14 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d9f0:	6013      	str	r3, [r2, #0]
 800d9f2:	4b88      	ldr	r3, [pc, #544]	; (800dc14 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	bf0c      	ite	eq
 800d9fa:	2301      	moveq	r3, #1
 800d9fc:	2300      	movne	r3, #0
 800d9fe:	b2db      	uxtb	r3, r3
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00e      	beq.n	800da22 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 800da04:	2300      	movs	r3, #0
 800da06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800da0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800da12:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 800da16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da1a:	4619      	mov	r1, r3
 800da1c:	487e      	ldr	r0, [pc, #504]	; (800dc18 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800da1e:	f7fc f93b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port B. */
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 800da22:	4b7e      	ldr	r3, [pc, #504]	; (800dc1c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	3301      	adds	r3, #1
 800da28:	4a7c      	ldr	r2, [pc, #496]	; (800dc1c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800da2a:	6013      	str	r3, [r2, #0]
 800da2c:	4b7b      	ldr	r3, [pc, #492]	; (800dc1c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2b01      	cmp	r3, #1
 800da32:	bf0c      	ite	eq
 800da34:	2301      	moveq	r3, #1
 800da36:	2300      	movne	r3, #0
 800da38:	b2db      	uxtb	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00d      	beq.n	800da5a <_Z41__static_initialization_and_destruction_0ii+0x41a>
 800da3e:	2301      	movs	r3, #1
 800da40:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800da44:	2301      	movs	r3, #1
 800da46:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800da4a:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800da4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800da52:	4619      	mov	r1, r3
 800da54:	4872      	ldr	r0, [pc, #456]	; (800dc20 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800da56:	f7fc f91f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 800da5a:	4b72      	ldr	r3, [pc, #456]	; (800dc24 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	3301      	adds	r3, #1
 800da60:	4a70      	ldr	r2, [pc, #448]	; (800dc24 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800da62:	6013      	str	r3, [r2, #0]
 800da64:	4b6f      	ldr	r3, [pc, #444]	; (800dc24 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	2b01      	cmp	r3, #1
 800da6a:	bf0c      	ite	eq
 800da6c:	2301      	moveq	r3, #1
 800da6e:	2300      	movne	r3, #0
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d00d      	beq.n	800da92 <_Z41__static_initialization_and_destruction_0ii+0x452>
 800da76:	2301      	movs	r3, #1
 800da78:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800da7c:	2302      	movs	r3, #2
 800da7e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800da82:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800da86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800da8a:	4619      	mov	r1, r3
 800da8c:	4866      	ldr	r0, [pc, #408]	; (800dc28 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800da8e:	f7fc f903 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 800da92:	4b66      	ldr	r3, [pc, #408]	; (800dc2c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	3301      	adds	r3, #1
 800da98:	4a64      	ldr	r2, [pc, #400]	; (800dc2c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800da9a:	6013      	str	r3, [r2, #0]
 800da9c:	4b63      	ldr	r3, [pc, #396]	; (800dc2c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	bf0c      	ite	eq
 800daa4:	2301      	moveq	r3, #1
 800daa6:	2300      	movne	r3, #0
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00d      	beq.n	800daca <_Z41__static_initialization_and_destruction_0ii+0x48a>
 800daae:	2301      	movs	r3, #1
 800dab0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800dab4:	2304      	movs	r3, #4
 800dab6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800daba:	f107 0256 	add.w	r2, r7, #86	; 0x56
 800dabe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dac2:	4619      	mov	r1, r3
 800dac4:	485a      	ldr	r0, [pc, #360]	; (800dc30 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800dac6:	f7fc f8e7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 800daca:	4b5a      	ldr	r3, [pc, #360]	; (800dc34 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	3301      	adds	r3, #1
 800dad0:	4a58      	ldr	r2, [pc, #352]	; (800dc34 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800dad2:	6013      	str	r3, [r2, #0]
 800dad4:	4b57      	ldr	r3, [pc, #348]	; (800dc34 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	bf0c      	ite	eq
 800dadc:	2301      	moveq	r3, #1
 800dade:	2300      	movne	r3, #0
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00d      	beq.n	800db02 <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 800dae6:	2301      	movs	r3, #1
 800dae8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800daec:	2308      	movs	r3, #8
 800daee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800daf2:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 800daf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800dafa:	4619      	mov	r1, r3
 800dafc:	484e      	ldr	r0, [pc, #312]	; (800dc38 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800dafe:	f7fc f8cb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 800db02:	4b4e      	ldr	r3, [pc, #312]	; (800dc3c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3301      	adds	r3, #1
 800db08:	4a4c      	ldr	r2, [pc, #304]	; (800dc3c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	4b4b      	ldr	r3, [pc, #300]	; (800dc3c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	2b01      	cmp	r3, #1
 800db12:	bf0c      	ite	eq
 800db14:	2301      	moveq	r3, #1
 800db16:	2300      	movne	r3, #0
 800db18:	b2db      	uxtb	r3, r3
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d00d      	beq.n	800db3a <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 800db1e:	2301      	movs	r3, #1
 800db20:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800db24:	2310      	movs	r3, #16
 800db26:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800db2a:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 800db2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800db32:	4619      	mov	r1, r3
 800db34:	4842      	ldr	r0, [pc, #264]	; (800dc40 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800db36:	f7fc f8af 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 800db3a:	4b42      	ldr	r3, [pc, #264]	; (800dc44 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	3301      	adds	r3, #1
 800db40:	4a40      	ldr	r2, [pc, #256]	; (800dc44 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800db42:	6013      	str	r3, [r2, #0]
 800db44:	4b3f      	ldr	r3, [pc, #252]	; (800dc44 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	2b01      	cmp	r3, #1
 800db4a:	bf0c      	ite	eq
 800db4c:	2301      	moveq	r3, #1
 800db4e:	2300      	movne	r3, #0
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00d      	beq.n	800db72 <_Z41__static_initialization_and_destruction_0ii+0x532>
 800db56:	2301      	movs	r3, #1
 800db58:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800db5c:	2320      	movs	r3, #32
 800db5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800db62:	f107 0262 	add.w	r2, r7, #98	; 0x62
 800db66:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800db6a:	4619      	mov	r1, r3
 800db6c:	4836      	ldr	r0, [pc, #216]	; (800dc48 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800db6e:	f7fc f893 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 800db72:	4b36      	ldr	r3, [pc, #216]	; (800dc4c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	3301      	adds	r3, #1
 800db78:	4a34      	ldr	r2, [pc, #208]	; (800dc4c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800db7a:	6013      	str	r3, [r2, #0]
 800db7c:	4b33      	ldr	r3, [pc, #204]	; (800dc4c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	2b01      	cmp	r3, #1
 800db82:	bf0c      	ite	eq
 800db84:	2301      	moveq	r3, #1
 800db86:	2300      	movne	r3, #0
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d00e      	beq.n	800dbac <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800db8e:	2301      	movs	r3, #1
 800db90:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800db94:	f44f 7380 	mov.w	r3, #256	; 0x100
 800db98:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800db9c:	f107 0266 	add.w	r2, r7, #102	; 0x66
 800dba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800dba4:	4619      	mov	r1, r3
 800dba6:	482a      	ldr	r0, [pc, #168]	; (800dc50 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800dba8:	f7fc f876 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 800dbac:	4b29      	ldr	r3, [pc, #164]	; (800dc54 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	3301      	adds	r3, #1
 800dbb2:	4a28      	ldr	r2, [pc, #160]	; (800dc54 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800dbb4:	6013      	str	r3, [r2, #0]
 800dbb6:	4b27      	ldr	r3, [pc, #156]	; (800dc54 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	2b01      	cmp	r3, #1
 800dbbc:	bf0c      	ite	eq
 800dbbe:	2301      	moveq	r3, #1
 800dbc0:	2300      	movne	r3, #0
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d00e      	beq.n	800dbe6 <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 800dbc8:	2301      	movs	r3, #1
 800dbca:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800dbce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dbd2:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800dbd6:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 800dbda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dbde:	4619      	mov	r1, r3
 800dbe0:	481d      	ldr	r0, [pc, #116]	; (800dc58 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800dbe2:	f7fc f859 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 800dbe6:	4b1d      	ldr	r3, [pc, #116]	; (800dc5c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	3301      	adds	r3, #1
 800dbec:	4a1b      	ldr	r2, [pc, #108]	; (800dc5c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800dbee:	6013      	str	r3, [r2, #0]
 800dbf0:	4b1a      	ldr	r3, [pc, #104]	; (800dc5c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	bf08      	it	eq
 800dbf8:	2301      	moveq	r3, #1
 800dbfa:	e031      	b.n	800dc60 <_Z41__static_initialization_and_destruction_0ii+0x620>
 800dbfc:	20000ca0 	.word	0x20000ca0
 800dc00:	200008f8 	.word	0x200008f8
 800dc04:	20000ca4 	.word	0x20000ca4
 800dc08:	20000900 	.word	0x20000900
 800dc0c:	20000ca8 	.word	0x20000ca8
 800dc10:	20000908 	.word	0x20000908
 800dc14:	20000cac 	.word	0x20000cac
 800dc18:	20000910 	.word	0x20000910
 800dc1c:	20000cb0 	.word	0x20000cb0
 800dc20:	20000918 	.word	0x20000918
 800dc24:	20000cb4 	.word	0x20000cb4
 800dc28:	20000920 	.word	0x20000920
 800dc2c:	20000cb8 	.word	0x20000cb8
 800dc30:	20000928 	.word	0x20000928
 800dc34:	20000cbc 	.word	0x20000cbc
 800dc38:	20000930 	.word	0x20000930
 800dc3c:	20000cc0 	.word	0x20000cc0
 800dc40:	20000938 	.word	0x20000938
 800dc44:	20000cc4 	.word	0x20000cc4
 800dc48:	20000940 	.word	0x20000940
 800dc4c:	20000cc8 	.word	0x20000cc8
 800dc50:	20000948 	.word	0x20000948
 800dc54:	20000ccc 	.word	0x20000ccc
 800dc58:	20000950 	.word	0x20000950
 800dc5c:	20000cd0 	.word	0x20000cd0
 800dc60:	bf18      	it	ne
 800dc62:	2300      	movne	r3, #0
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00e      	beq.n	800dc88 <_Z41__static_initialization_and_destruction_0ii+0x648>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800dc70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc74:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800dc78:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800dc7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dc80:	4619      	mov	r1, r3
 800dc82:	48ae      	ldr	r0, [pc, #696]	; (800df3c <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 800dc84:	f7fc f808 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 800dc88:	4bad      	ldr	r3, [pc, #692]	; (800df40 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	4aac      	ldr	r2, [pc, #688]	; (800df40 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800dc90:	6013      	str	r3, [r2, #0]
 800dc92:	4bab      	ldr	r3, [pc, #684]	; (800df40 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	bf0c      	ite	eq
 800dc9a:	2301      	moveq	r3, #1
 800dc9c:	2300      	movne	r3, #0
 800dc9e:	b2db      	uxtb	r3, r3
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00e      	beq.n	800dcc2 <_Z41__static_initialization_and_destruction_0ii+0x682>
 800dca4:	2301      	movs	r3, #1
 800dca6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800dcaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dcae:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800dcb2:	f107 0272 	add.w	r2, r7, #114	; 0x72
 800dcb6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800dcba:	4619      	mov	r1, r3
 800dcbc:	48a1      	ldr	r0, [pc, #644]	; (800df44 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 800dcbe:	f7fb ffeb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 800dcc2:	4ba1      	ldr	r3, [pc, #644]	; (800df48 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	4a9f      	ldr	r2, [pc, #636]	; (800df48 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800dcca:	6013      	str	r3, [r2, #0]
 800dccc:	4b9e      	ldr	r3, [pc, #632]	; (800df48 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	bf0c      	ite	eq
 800dcd4:	2301      	moveq	r3, #1
 800dcd6:	2300      	movne	r3, #0
 800dcd8:	b2db      	uxtb	r3, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00e      	beq.n	800dcfc <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 800dcde:	2301      	movs	r3, #1
 800dce0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800dce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dce8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800dcec:	f107 0276 	add.w	r2, r7, #118	; 0x76
 800dcf0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	4895      	ldr	r0, [pc, #596]	; (800df4c <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 800dcf8:	f7fb ffce 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 800dcfc:	4b94      	ldr	r3, [pc, #592]	; (800df50 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3301      	adds	r3, #1
 800dd02:	4a93      	ldr	r2, [pc, #588]	; (800df50 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800dd04:	6013      	str	r3, [r2, #0]
 800dd06:	4b92      	ldr	r3, [pc, #584]	; (800df50 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b01      	cmp	r3, #1
 800dd0c:	bf0c      	ite	eq
 800dd0e:	2301      	moveq	r3, #1
 800dd10:	2300      	movne	r3, #0
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00e      	beq.n	800dd36 <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 800dd18:	2301      	movs	r3, #1
 800dd1a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800dd1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dd22:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800dd26:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 800dd2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800dd2e:	4619      	mov	r1, r3
 800dd30:	4888      	ldr	r0, [pc, #544]	; (800df54 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 800dd32:	f7fb ffb1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 800dd36:	4b88      	ldr	r3, [pc, #544]	; (800df58 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	4a86      	ldr	r2, [pc, #536]	; (800df58 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800dd3e:	6013      	str	r3, [r2, #0]
 800dd40:	4b85      	ldr	r3, [pc, #532]	; (800df58 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	bf0c      	ite	eq
 800dd48:	2301      	moveq	r3, #1
 800dd4a:	2300      	movne	r3, #0
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d00e      	beq.n	800dd70 <_Z41__static_initialization_and_destruction_0ii+0x730>
 800dd52:	2301      	movs	r3, #1
 800dd54:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800dd58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800dd5c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800dd60:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 800dd64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd68:	4619      	mov	r1, r3
 800dd6a:	487c      	ldr	r0, [pc, #496]	; (800df5c <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 800dd6c:	f7fb ff94 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 800dd70:	4b7b      	ldr	r3, [pc, #492]	; (800df60 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	3301      	adds	r3, #1
 800dd76:	4a7a      	ldr	r2, [pc, #488]	; (800df60 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800dd78:	6013      	str	r3, [r2, #0]
 800dd7a:	4b79      	ldr	r3, [pc, #484]	; (800df60 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	bf0c      	ite	eq
 800dd82:	2301      	moveq	r3, #1
 800dd84:	2300      	movne	r3, #0
 800dd86:	b2db      	uxtb	r3, r3
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d00e      	beq.n	800ddaa <_Z41__static_initialization_and_destruction_0ii+0x76a>
 800dd8c:	2301      	movs	r3, #1
 800dd8e:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 800dd92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd96:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800dd9a:	f107 0282 	add.w	r2, r7, #130	; 0x82
 800dd9e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800dda2:	4619      	mov	r1, r3
 800dda4:	486f      	ldr	r0, [pc, #444]	; (800df64 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 800dda6:	f7fb ff77 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port C. */
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 800ddaa:	4b6f      	ldr	r3, [pc, #444]	; (800df68 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	3301      	adds	r3, #1
 800ddb0:	4a6d      	ldr	r2, [pc, #436]	; (800df68 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800ddb2:	6013      	str	r3, [r2, #0]
 800ddb4:	4b6c      	ldr	r3, [pc, #432]	; (800df68 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2b01      	cmp	r3, #1
 800ddba:	bf0c      	ite	eq
 800ddbc:	2301      	moveq	r3, #1
 800ddbe:	2300      	movne	r3, #0
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d00d      	beq.n	800dde2 <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 800ddc6:	2302      	movs	r3, #2
 800ddc8:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800ddcc:	2301      	movs	r3, #1
 800ddce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800ddd2:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800ddd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ddda:	4619      	mov	r1, r3
 800dddc:	4863      	ldr	r0, [pc, #396]	; (800df6c <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800ddde:	f7fb ff5b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 800dde2:	4b63      	ldr	r3, [pc, #396]	; (800df70 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3301      	adds	r3, #1
 800dde8:	4a61      	ldr	r2, [pc, #388]	; (800df70 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800ddea:	6013      	str	r3, [r2, #0]
 800ddec:	4b60      	ldr	r3, [pc, #384]	; (800df70 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	bf0c      	ite	eq
 800ddf4:	2301      	moveq	r3, #1
 800ddf6:	2300      	movne	r3, #0
 800ddf8:	b2db      	uxtb	r3, r3
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d00d      	beq.n	800de1a <_Z41__static_initialization_and_destruction_0ii+0x7da>
 800ddfe:	2302      	movs	r3, #2
 800de00:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800de04:	2302      	movs	r3, #2
 800de06:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800de0a:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800de0e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800de12:	4619      	mov	r1, r3
 800de14:	4857      	ldr	r0, [pc, #348]	; (800df74 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 800de16:	f7fb ff3f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 800de1a:	4b57      	ldr	r3, [pc, #348]	; (800df78 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	3301      	adds	r3, #1
 800de20:	4a55      	ldr	r2, [pc, #340]	; (800df78 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800de22:	6013      	str	r3, [r2, #0]
 800de24:	4b54      	ldr	r3, [pc, #336]	; (800df78 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b01      	cmp	r3, #1
 800de2a:	bf0c      	ite	eq
 800de2c:	2301      	moveq	r3, #1
 800de2e:	2300      	movne	r3, #0
 800de30:	b2db      	uxtb	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00d      	beq.n	800de52 <_Z41__static_initialization_and_destruction_0ii+0x812>
 800de36:	2302      	movs	r3, #2
 800de38:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800de3c:	2304      	movs	r3, #4
 800de3e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800de42:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 800de46:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800de4a:	4619      	mov	r1, r3
 800de4c:	484b      	ldr	r0, [pc, #300]	; (800df7c <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 800de4e:	f7fb ff23 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 800de52:	4b4b      	ldr	r3, [pc, #300]	; (800df80 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	3301      	adds	r3, #1
 800de58:	4a49      	ldr	r2, [pc, #292]	; (800df80 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800de5a:	6013      	str	r3, [r2, #0]
 800de5c:	4b48      	ldr	r3, [pc, #288]	; (800df80 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2b01      	cmp	r3, #1
 800de62:	bf0c      	ite	eq
 800de64:	2301      	moveq	r3, #1
 800de66:	2300      	movne	r3, #0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00d      	beq.n	800de8a <_Z41__static_initialization_and_destruction_0ii+0x84a>
 800de6e:	2302      	movs	r3, #2
 800de70:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800de74:	2308      	movs	r3, #8
 800de76:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800de7a:	f107 0292 	add.w	r2, r7, #146	; 0x92
 800de7e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800de82:	4619      	mov	r1, r3
 800de84:	483f      	ldr	r0, [pc, #252]	; (800df84 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 800de86:	f7fb ff07 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 800de8a:	4b3f      	ldr	r3, [pc, #252]	; (800df88 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	3301      	adds	r3, #1
 800de90:	4a3d      	ldr	r2, [pc, #244]	; (800df88 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800de92:	6013      	str	r3, [r2, #0]
 800de94:	4b3c      	ldr	r3, [pc, #240]	; (800df88 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	bf0c      	ite	eq
 800de9c:	2301      	moveq	r3, #1
 800de9e:	2300      	movne	r3, #0
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d00d      	beq.n	800dec2 <_Z41__static_initialization_and_destruction_0ii+0x882>
 800dea6:	2302      	movs	r3, #2
 800dea8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800deac:	2310      	movs	r3, #16
 800deae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800deb2:	f107 0296 	add.w	r2, r7, #150	; 0x96
 800deb6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800deba:	4619      	mov	r1, r3
 800debc:	4833      	ldr	r0, [pc, #204]	; (800df8c <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800debe:	f7fb feeb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 800dec2:	4b33      	ldr	r3, [pc, #204]	; (800df90 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	3301      	adds	r3, #1
 800dec8:	4a31      	ldr	r2, [pc, #196]	; (800df90 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800deca:	6013      	str	r3, [r2, #0]
 800decc:	4b30      	ldr	r3, [pc, #192]	; (800df90 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b01      	cmp	r3, #1
 800ded2:	bf0c      	ite	eq
 800ded4:	2301      	moveq	r3, #1
 800ded6:	2300      	movne	r3, #0
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00d      	beq.n	800defa <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 800dede:	2302      	movs	r3, #2
 800dee0:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800dee4:	2320      	movs	r3, #32
 800dee6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800deea:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 800deee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800def2:	4619      	mov	r1, r3
 800def4:	4827      	ldr	r0, [pc, #156]	; (800df94 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 800def6:	f7fb fecf 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 800defa:	4b27      	ldr	r3, [pc, #156]	; (800df98 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	3301      	adds	r3, #1
 800df00:	4a25      	ldr	r2, [pc, #148]	; (800df98 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800df02:	6013      	str	r3, [r2, #0]
 800df04:	4b24      	ldr	r3, [pc, #144]	; (800df98 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	2b01      	cmp	r3, #1
 800df0a:	bf0c      	ite	eq
 800df0c:	2301      	moveq	r3, #1
 800df0e:	2300      	movne	r3, #0
 800df10:	b2db      	uxtb	r3, r3
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00d      	beq.n	800df32 <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 800df16:	2302      	movs	r3, #2
 800df18:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800df1c:	2340      	movs	r3, #64	; 0x40
 800df1e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800df22:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 800df26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800df2a:	4619      	mov	r1, r3
 800df2c:	481b      	ldr	r0, [pc, #108]	; (800df9c <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 800df2e:	f7fb feb3 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 800df32:	4b1b      	ldr	r3, [pc, #108]	; (800dfa0 <_Z41__static_initialization_and_destruction_0ii+0x960>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	3301      	adds	r3, #1
 800df38:	e034      	b.n	800dfa4 <_Z41__static_initialization_and_destruction_0ii+0x964>
 800df3a:	bf00      	nop
 800df3c:	20000958 	.word	0x20000958
 800df40:	20000cd4 	.word	0x20000cd4
 800df44:	20000960 	.word	0x20000960
 800df48:	20000cd8 	.word	0x20000cd8
 800df4c:	20000968 	.word	0x20000968
 800df50:	20000cdc 	.word	0x20000cdc
 800df54:	20000970 	.word	0x20000970
 800df58:	20000ce0 	.word	0x20000ce0
 800df5c:	20000978 	.word	0x20000978
 800df60:	20000ce4 	.word	0x20000ce4
 800df64:	20000980 	.word	0x20000980
 800df68:	20000ce8 	.word	0x20000ce8
 800df6c:	20000988 	.word	0x20000988
 800df70:	20000cec 	.word	0x20000cec
 800df74:	20000990 	.word	0x20000990
 800df78:	20000cf0 	.word	0x20000cf0
 800df7c:	20000998 	.word	0x20000998
 800df80:	20000cf4 	.word	0x20000cf4
 800df84:	200009a0 	.word	0x200009a0
 800df88:	20000cf8 	.word	0x20000cf8
 800df8c:	200009a8 	.word	0x200009a8
 800df90:	20000cfc 	.word	0x20000cfc
 800df94:	200009b0 	.word	0x200009b0
 800df98:	20000d00 	.word	0x20000d00
 800df9c:	200009b8 	.word	0x200009b8
 800dfa0:	20000d04 	.word	0x20000d04
 800dfa4:	4aac      	ldr	r2, [pc, #688]	; (800e258 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800dfa6:	6013      	str	r3, [r2, #0]
 800dfa8:	4bab      	ldr	r3, [pc, #684]	; (800e258 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	bf0c      	ite	eq
 800dfb0:	2301      	moveq	r3, #1
 800dfb2:	2300      	movne	r3, #0
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d00d      	beq.n	800dfd6 <_Z41__static_initialization_and_destruction_0ii+0x996>
 800dfba:	2302      	movs	r3, #2
 800dfbc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800dfc0:	2380      	movs	r3, #128	; 0x80
 800dfc2:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 800dfc6:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 800dfca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800dfce:	4619      	mov	r1, r3
 800dfd0:	48a2      	ldr	r0, [pc, #648]	; (800e25c <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 800dfd2:	f7fb fe61 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 800dfd6:	4ba2      	ldr	r3, [pc, #648]	; (800e260 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	3301      	adds	r3, #1
 800dfdc:	4aa0      	ldr	r2, [pc, #640]	; (800e260 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800dfde:	6013      	str	r3, [r2, #0]
 800dfe0:	4b9f      	ldr	r3, [pc, #636]	; (800e260 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	bf0c      	ite	eq
 800dfe8:	2301      	moveq	r3, #1
 800dfea:	2300      	movne	r3, #0
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00e      	beq.n	800e010 <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 800dff2:	2302      	movs	r3, #2
 800dff4:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800dff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800dffc:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800e000:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 800e004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e008:	4619      	mov	r1, r3
 800e00a:	4896      	ldr	r0, [pc, #600]	; (800e264 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 800e00c:	f7fb fe44 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 800e010:	4b95      	ldr	r3, [pc, #596]	; (800e268 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	3301      	adds	r3, #1
 800e016:	4a94      	ldr	r2, [pc, #592]	; (800e268 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	4b93      	ldr	r3, [pc, #588]	; (800e268 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	2b01      	cmp	r3, #1
 800e020:	bf0c      	ite	eq
 800e022:	2301      	moveq	r3, #1
 800e024:	2300      	movne	r3, #0
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00e      	beq.n	800e04a <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 800e02c:	2302      	movs	r3, #2
 800e02e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800e032:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e036:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800e03a:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 800e03e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800e042:	4619      	mov	r1, r3
 800e044:	4889      	ldr	r0, [pc, #548]	; (800e26c <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 800e046:	f7fb fe27 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 800e04a:	4b89      	ldr	r3, [pc, #548]	; (800e270 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	3301      	adds	r3, #1
 800e050:	4a87      	ldr	r2, [pc, #540]	; (800e270 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	4b86      	ldr	r3, [pc, #536]	; (800e270 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	bf0c      	ite	eq
 800e05c:	2301      	moveq	r3, #1
 800e05e:	2300      	movne	r3, #0
 800e060:	b2db      	uxtb	r3, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d00e      	beq.n	800e084 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 800e066:	2302      	movs	r3, #2
 800e068:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800e06c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e070:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800e074:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 800e078:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800e07c:	4619      	mov	r1, r3
 800e07e:	487d      	ldr	r0, [pc, #500]	; (800e274 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 800e080:	f7fb fe0a 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 800e084:	4b7c      	ldr	r3, [pc, #496]	; (800e278 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	3301      	adds	r3, #1
 800e08a:	4a7b      	ldr	r2, [pc, #492]	; (800e278 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800e08c:	6013      	str	r3, [r2, #0]
 800e08e:	4b7a      	ldr	r3, [pc, #488]	; (800e278 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b01      	cmp	r3, #1
 800e094:	bf0c      	ite	eq
 800e096:	2301      	moveq	r3, #1
 800e098:	2300      	movne	r3, #0
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d00e      	beq.n	800e0be <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 800e0a0:	2302      	movs	r3, #2
 800e0a2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800e0a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0aa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800e0ae:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 800e0b2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4870      	ldr	r0, [pc, #448]	; (800e27c <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 800e0ba:	f7fb fded 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 800e0be:	4b70      	ldr	r3, [pc, #448]	; (800e280 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	4a6e      	ldr	r2, [pc, #440]	; (800e280 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	4b6d      	ldr	r3, [pc, #436]	; (800e280 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	bf0c      	ite	eq
 800e0d0:	2301      	moveq	r3, #1
 800e0d2:	2300      	movne	r3, #0
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d00e      	beq.n	800e0f8 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 800e0da:	2302      	movs	r3, #2
 800e0dc:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800e0e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e0e4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800e0e8:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 800e0ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	4864      	ldr	r0, [pc, #400]	; (800e284 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 800e0f4:	f7fb fdd0 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 800e0f8:	4b63      	ldr	r3, [pc, #396]	; (800e288 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	4a62      	ldr	r2, [pc, #392]	; (800e288 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800e100:	6013      	str	r3, [r2, #0]
 800e102:	4b61      	ldr	r3, [pc, #388]	; (800e288 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2b01      	cmp	r3, #1
 800e108:	bf0c      	ite	eq
 800e10a:	2301      	moveq	r3, #1
 800e10c:	2300      	movne	r3, #0
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	d00e      	beq.n	800e132 <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 800e114:	2302      	movs	r3, #2
 800e116:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800e11a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e11e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800e122:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 800e126:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e12a:	4619      	mov	r1, r3
 800e12c:	4857      	ldr	r0, [pc, #348]	; (800e28c <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 800e12e:	f7fb fdb3 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 800e132:	4b57      	ldr	r3, [pc, #348]	; (800e290 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3301      	adds	r3, #1
 800e138:	4a55      	ldr	r2, [pc, #340]	; (800e290 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	4b54      	ldr	r3, [pc, #336]	; (800e290 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	2b01      	cmp	r3, #1
 800e142:	bf0c      	ite	eq
 800e144:	2301      	moveq	r3, #1
 800e146:	2300      	movne	r3, #0
 800e148:	b2db      	uxtb	r3, r3
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d00e      	beq.n	800e16c <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 800e14e:	2302      	movs	r3, #2
 800e150:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800e154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800e15c:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800e160:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800e164:	4619      	mov	r1, r3
 800e166:	484b      	ldr	r0, [pc, #300]	; (800e294 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 800e168:	f7fb fd96 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 800e16c:	4b4a      	ldr	r3, [pc, #296]	; (800e298 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	3301      	adds	r3, #1
 800e172:	4a49      	ldr	r2, [pc, #292]	; (800e298 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800e174:	6013      	str	r3, [r2, #0]
 800e176:	4b48      	ldr	r3, [pc, #288]	; (800e298 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	bf0c      	ite	eq
 800e17e:	2301      	moveq	r3, #1
 800e180:	2300      	movne	r3, #0
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b00      	cmp	r3, #0
 800e186:	d00e      	beq.n	800e1a6 <_Z41__static_initialization_and_destruction_0ii+0xb66>
 800e188:	2302      	movs	r3, #2
 800e18a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800e18e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e192:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800e196:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 800e19a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800e19e:	4619      	mov	r1, r3
 800e1a0:	483e      	ldr	r0, [pc, #248]	; (800e29c <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 800e1a2:	f7fb fd79 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port D. */
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 800e1a6:	4b3e      	ldr	r3, [pc, #248]	; (800e2a0 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	4a3c      	ldr	r2, [pc, #240]	; (800e2a0 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800e1ae:	6013      	str	r3, [r2, #0]
 800e1b0:	4b3b      	ldr	r3, [pc, #236]	; (800e2a0 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	bf0c      	ite	eq
 800e1b8:	2301      	moveq	r3, #1
 800e1ba:	2300      	movne	r3, #0
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00d      	beq.n	800e1de <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 800e1c2:	2303      	movs	r3, #3
 800e1c4:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800e1ce:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 800e1d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	4832      	ldr	r0, [pc, #200]	; (800e2a4 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 800e1da:	f7fb fd5d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port H. */
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 800e1de:	4b32      	ldr	r3, [pc, #200]	; (800e2a8 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	4a30      	ldr	r2, [pc, #192]	; (800e2a8 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800e1e6:	6013      	str	r3, [r2, #0]
 800e1e8:	4b2f      	ldr	r3, [pc, #188]	; (800e2a8 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	bf0c      	ite	eq
 800e1f0:	2301      	moveq	r3, #1
 800e1f2:	2300      	movne	r3, #0
 800e1f4:	b2db      	uxtb	r3, r3
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00d      	beq.n	800e216 <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 800e1fa:	2307      	movs	r3, #7
 800e1fc:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800e200:	2301      	movs	r3, #1
 800e202:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800e206:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 800e20a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800e20e:	4619      	mov	r1, r3
 800e210:	4826      	ldr	r0, [pc, #152]	; (800e2ac <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 800e212:	f7fb fd41 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 800e216:	4b26      	ldr	r3, [pc, #152]	; (800e2b0 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	3301      	adds	r3, #1
 800e21c:	4a24      	ldr	r2, [pc, #144]	; (800e2b0 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800e21e:	6013      	str	r3, [r2, #0]
 800e220:	4b23      	ldr	r3, [pc, #140]	; (800e2b0 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b01      	cmp	r3, #1
 800e226:	bf0c      	ite	eq
 800e228:	2301      	moveq	r3, #1
 800e22a:	2300      	movne	r3, #0
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00d      	beq.n	800e24e <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800e232:	2307      	movs	r3, #7
 800e234:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800e238:	2302      	movs	r3, #2
 800e23a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800e23e:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 800e242:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e246:	4619      	mov	r1, r3
 800e248:	481a      	ldr	r0, [pc, #104]	; (800e2b4 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 800e24a:	f7fb fd25 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 800e24e:	bf00      	nop
 800e250:	37d0      	adds	r7, #208	; 0xd0
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	20000d04 	.word	0x20000d04
 800e25c:	200009c0 	.word	0x200009c0
 800e260:	20000d08 	.word	0x20000d08
 800e264:	200009c8 	.word	0x200009c8
 800e268:	20000d0c 	.word	0x20000d0c
 800e26c:	200009d0 	.word	0x200009d0
 800e270:	20000d10 	.word	0x20000d10
 800e274:	200009d8 	.word	0x200009d8
 800e278:	20000d14 	.word	0x20000d14
 800e27c:	200009e0 	.word	0x200009e0
 800e280:	20000d18 	.word	0x20000d18
 800e284:	200009e8 	.word	0x200009e8
 800e288:	20000d1c 	.word	0x20000d1c
 800e28c:	200009f0 	.word	0x200009f0
 800e290:	20000d20 	.word	0x20000d20
 800e294:	200009f8 	.word	0x200009f8
 800e298:	20000d24 	.word	0x20000d24
 800e29c:	20000a00 	.word	0x20000a00
 800e2a0:	20000d28 	.word	0x20000d28
 800e2a4:	20000a08 	.word	0x20000a08
 800e2a8:	20000d2c 	.word	0x20000d2c
 800e2ac:	20000a10 	.word	0x20000a10
 800e2b0:	20000d30 	.word	0x20000d30
 800e2b4:	20000a18 	.word	0x20000a18

0800e2b8 <_GLOBAL__sub_I__Z6cs_selv>:
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	f7ff f9bd 	bl	800d640 <_Z41__static_initialization_and_destruction_0ii>
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <_ZN6SDTaskC1EPKct10osPriorityb>:
  //some variables for FatFs
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

SDTask::SDTask(const char * const name,
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b086      	sub	sp, #24
 800e2cc:	af02      	add	r7, sp, #8
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	461a      	mov	r2, r3
 800e2d6:	460b      	mov	r3, r1
 800e2d8:	80fb      	strh	r3, [r7, #6]
 800e2da:	4613      	mov	r3, r2
 800e2dc:	80bb      	strh	r3, [r7, #4]
            uint16_t    stackDepth,
			osPriority priority,
            bool        immidiateStart):Task(name, stackDepth, priority, immidiateStart){
 800e2de:	68f8      	ldr	r0, [r7, #12]
 800e2e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800e2e4:	88fa      	ldrh	r2, [r7, #6]
 800e2e6:	7e3b      	ldrb	r3, [r7, #24]
 800e2e8:	9300      	str	r3, [sp, #0]
 800e2ea:	460b      	mov	r3, r1
 800e2ec:	68b9      	ldr	r1, [r7, #8]
 800e2ee:	f7fe fc63 	bl	800cbb8 <_ZN4RTOS4TaskC1EPKct10osPriorityb>
 800e2f2:	4a04      	ldr	r2, [pc, #16]	; (800e304 <_ZN6SDTaskC1EPKct10osPriorityb+0x3c>)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	601a      	str	r2, [r3, #0]
}
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	08013ce8 	.word	0x08013ce8

0800e308 <_ZN6SDTask6m_taskEv>:
        buffer[bytesRead] = '\0'; // Nullterminierung, um den String korrekt zu beenden.
        f_close(&file);
    }
}

void SDTask::m_task(){
 800e308:	b5b0      	push	{r4, r5, r7, lr}
 800e30a:	b090      	sub	sp, #64	; 0x40
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800e310:	4861      	ldr	r0, [pc, #388]	; (800e498 <_ZN6SDTask6m_taskEv+0x190>)
 800e312:	f003 f955 	bl	80115c0 <puts>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 800e316:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e31a:	f7f3 fa5d 	bl	80017d8 <HAL_Delay>


  //Open the file system
  fres = f_mount(&FatFs, "/", 1); //1=mount now
 800e31e:	2201      	movs	r2, #1
 800e320:	495e      	ldr	r1, [pc, #376]	; (800e49c <_ZN6SDTask6m_taskEv+0x194>)
 800e322:	485f      	ldr	r0, [pc, #380]	; (800e4a0 <_ZN6SDTask6m_taskEv+0x198>)
 800e324:	f7fa f9f8 	bl	8008718 <f_mount>
 800e328:	4603      	mov	r3, r0
 800e32a:	461a      	mov	r2, r3
 800e32c:	4b5d      	ldr	r3, [pc, #372]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e32e:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800e330:	4b5c      	ldr	r3, [pc, #368]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d006      	beq.n	800e346 <_ZN6SDTask6m_taskEv+0x3e>
	printf("f_mount error (%i)\r\n", fres);
 800e338:	4b5a      	ldr	r3, [pc, #360]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	4619      	mov	r1, r3
 800e33e:	485a      	ldr	r0, [pc, #360]	; (800e4a8 <_ZN6SDTask6m_taskEv+0x1a0>)
 800e340:	f003 f8b8 	bl	80114b4 <iprintf>
	while(1);
 800e344:	e7fe      	b.n	800e344 <_ZN6SDTask6m_taskEv+0x3c>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 800e346:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e34a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e34e:	4619      	mov	r1, r3
 800e350:	4856      	ldr	r0, [pc, #344]	; (800e4ac <_ZN6SDTask6m_taskEv+0x1a4>)
 800e352:	f7fa ff41 	bl	80091d8 <f_getfree>
 800e356:	4603      	mov	r3, r0
 800e358:	461a      	mov	r2, r3
 800e35a:	4b52      	ldr	r3, [pc, #328]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e35c:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800e35e:	4b51      	ldr	r3, [pc, #324]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d006      	beq.n	800e374 <_ZN6SDTask6m_taskEv+0x6c>
	printf("f_getfree error (%i)\r\n", fres);
 800e366:	4b4f      	ldr	r3, [pc, #316]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	4619      	mov	r1, r3
 800e36c:	4850      	ldr	r0, [pc, #320]	; (800e4b0 <_ZN6SDTask6m_taskEv+0x1a8>)
 800e36e:	f003 f8a1 	bl	80114b4 <iprintf>
	while(1);
 800e372:	e7fe      	b.n	800e372 <_ZN6SDTask6m_taskEv+0x6a>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 800e374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e376:	695b      	ldr	r3, [r3, #20]
 800e378:	3b02      	subs	r3, #2
 800e37a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e37c:	8952      	ldrh	r2, [r2, #10]
 800e37e:	fb02 f303 	mul.w	r3, r2, r3
 800e382:	63fb      	str	r3, [r7, #60]	; 0x3c
  free_sectors = free_clusters * getFreeFs->csize;
 800e384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e386:	895b      	ldrh	r3, [r3, #10]
 800e388:	461a      	mov	r2, r3
 800e38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38c:	fb02 f303 	mul.w	r3, r2, r3
 800e390:	63bb      	str	r3, [r7, #56]	; 0x38

  printf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800e392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e394:	0859      	lsrs	r1, r3, #1
 800e396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e398:	085b      	lsrs	r3, r3, #1
 800e39a:	461a      	mov	r2, r3
 800e39c:	4845      	ldr	r0, [pc, #276]	; (800e4b4 <_ZN6SDTask6m_taskEv+0x1ac>)
 800e39e:	f003 f889 	bl	80114b4 <iprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	4944      	ldr	r1, [pc, #272]	; (800e4b8 <_ZN6SDTask6m_taskEv+0x1b0>)
 800e3a6:	4845      	ldr	r0, [pc, #276]	; (800e4bc <_ZN6SDTask6m_taskEv+0x1b4>)
 800e3a8:	f7fa f9fc 	bl	80087a4 <f_open>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	4b3c      	ldr	r3, [pc, #240]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e3b2:	701a      	strb	r2, [r3, #0]
  if (fres != FR_OK) {
 800e3b4:	4b3b      	ldr	r3, [pc, #236]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e3b6:	781b      	ldrb	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d006      	beq.n	800e3ca <_ZN6SDTask6m_taskEv+0xc2>
	printf("f_open error (%i)\r\n", fres);
 800e3bc:	4b39      	ldr	r3, [pc, #228]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e3be:	781b      	ldrb	r3, [r3, #0]
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	483f      	ldr	r0, [pc, #252]	; (800e4c0 <_ZN6SDTask6m_taskEv+0x1b8>)
 800e3c4:	f003 f876 	bl	80114b4 <iprintf>
	while(1);
 800e3c8:	e7fe      	b.n	800e3c8 <_ZN6SDTask6m_taskEv+0xc0>
  }
  printf("I was able to open 'test.txt' for reading!\r\n");
 800e3ca:	483e      	ldr	r0, [pc, #248]	; (800e4c4 <_ZN6SDTask6m_taskEv+0x1bc>)
 800e3cc:	f003 f8f8 	bl	80115c0 <puts>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 800e3d0:	f107 030c 	add.w	r3, r7, #12
 800e3d4:	4a39      	ldr	r2, [pc, #228]	; (800e4bc <_ZN6SDTask6m_taskEv+0x1b4>)
 800e3d6:	211e      	movs	r1, #30
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7fa ffb2 	bl	8009342 <f_gets>
 800e3de:	6378      	str	r0, [r7, #52]	; 0x34
  if(rres != 0) {
 800e3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d006      	beq.n	800e3f4 <_ZN6SDTask6m_taskEv+0xec>
	printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 800e3e6:	f107 030c 	add.w	r3, r7, #12
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	4836      	ldr	r0, [pc, #216]	; (800e4c8 <_ZN6SDTask6m_taskEv+0x1c0>)
 800e3ee:	f003 f861 	bl	80114b4 <iprintf>
 800e3f2:	e005      	b.n	800e400 <_ZN6SDTask6m_taskEv+0xf8>
  } else {
	printf("f_gets error (%i)\r\n", fres);
 800e3f4:	4b2b      	ldr	r3, [pc, #172]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	4834      	ldr	r0, [pc, #208]	; (800e4cc <_ZN6SDTask6m_taskEv+0x1c4>)
 800e3fc:	f003 f85a 	bl	80114b4 <iprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800e400:	482e      	ldr	r0, [pc, #184]	; (800e4bc <_ZN6SDTask6m_taskEv+0x1b4>)
 800e402:	f7fa febf 	bl	8009184 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 800e406:	221a      	movs	r2, #26
 800e408:	4931      	ldr	r1, [pc, #196]	; (800e4d0 <_ZN6SDTask6m_taskEv+0x1c8>)
 800e40a:	482c      	ldr	r0, [pc, #176]	; (800e4bc <_ZN6SDTask6m_taskEv+0x1b4>)
 800e40c:	f7fa f9ca 	bl	80087a4 <f_open>
 800e410:	4603      	mov	r3, r0
 800e412:	461a      	mov	r2, r3
 800e414:	4b23      	ldr	r3, [pc, #140]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e416:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 800e418:	4b22      	ldr	r3, [pc, #136]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d103      	bne.n	800e428 <_ZN6SDTask6m_taskEv+0x120>
	printf("I was able to open 'write.txt' for writing\r\n");
 800e420:	482c      	ldr	r0, [pc, #176]	; (800e4d4 <_ZN6SDTask6m_taskEv+0x1cc>)
 800e422:	f003 f8cd 	bl	80115c0 <puts>
 800e426:	e005      	b.n	800e434 <_ZN6SDTask6m_taskEv+0x12c>
  } else {
	printf("f_open error (%i)\r\n", fres);
 800e428:	4b1e      	ldr	r3, [pc, #120]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	4619      	mov	r1, r3
 800e42e:	4824      	ldr	r0, [pc, #144]	; (800e4c0 <_ZN6SDTask6m_taskEv+0x1b8>)
 800e430:	f003 f840 	bl	80114b4 <iprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 800e434:	f107 030c 	add.w	r3, r7, #12
 800e438:	4a27      	ldr	r2, [pc, #156]	; (800e4d8 <_ZN6SDTask6m_taskEv+0x1d0>)
 800e43a:	461c      	mov	r4, r3
 800e43c:	4615      	mov	r5, r2
 800e43e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e442:	682b      	ldr	r3, [r5, #0]
 800e444:	461a      	mov	r2, r3
 800e446:	8022      	strh	r2, [r4, #0]
 800e448:	3402      	adds	r4, #2
 800e44a:	0c1b      	lsrs	r3, r3, #16
 800e44c:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800e44e:	f107 0308 	add.w	r3, r7, #8
 800e452:	f107 010c 	add.w	r1, r7, #12
 800e456:	2213      	movs	r2, #19
 800e458:	4818      	ldr	r0, [pc, #96]	; (800e4bc <_ZN6SDTask6m_taskEv+0x1b4>)
 800e45a:	f7fa fca0 	bl	8008d9e <f_write>
 800e45e:	4603      	mov	r3, r0
 800e460:	461a      	mov	r2, r3
 800e462:	4b10      	ldr	r3, [pc, #64]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e464:	701a      	strb	r2, [r3, #0]
  if(fres == FR_OK) {
 800e466:	4b0f      	ldr	r3, [pc, #60]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d105      	bne.n	800e47a <_ZN6SDTask6m_taskEv+0x172>
	printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	4619      	mov	r1, r3
 800e472:	481a      	ldr	r0, [pc, #104]	; (800e4dc <_ZN6SDTask6m_taskEv+0x1d4>)
 800e474:	f003 f81e 	bl	80114b4 <iprintf>
 800e478:	e005      	b.n	800e486 <_ZN6SDTask6m_taskEv+0x17e>
  } else {
	printf("f_write error (%i)\r\n", fres);
 800e47a:	4b0a      	ldr	r3, [pc, #40]	; (800e4a4 <_ZN6SDTask6m_taskEv+0x19c>)
 800e47c:	781b      	ldrb	r3, [r3, #0]
 800e47e:	4619      	mov	r1, r3
 800e480:	4817      	ldr	r0, [pc, #92]	; (800e4e0 <_ZN6SDTask6m_taskEv+0x1d8>)
 800e482:	f003 f817 	bl	80114b4 <iprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800e486:	480d      	ldr	r0, [pc, #52]	; (800e4bc <_ZN6SDTask6m_taskEv+0x1b4>)
 800e488:	f7fa fe7c 	bl	8009184 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 800e48c:	2200      	movs	r2, #0
 800e48e:	4907      	ldr	r1, [pc, #28]	; (800e4ac <_ZN6SDTask6m_taskEv+0x1a4>)
 800e490:	2000      	movs	r0, #0
 800e492:	f7fa f941 	bl	8008718 <f_mount>
	while(1){
 800e496:	e7fe      	b.n	800e496 <_ZN6SDTask6m_taskEv+0x18e>
 800e498:	08013a34 	.word	0x08013a34
 800e49c:	08013a54 	.word	0x08013a54
 800e4a0:	20000d34 	.word	0x20000d34
 800e4a4:	20001194 	.word	0x20001194
 800e4a8:	08013a58 	.word	0x08013a58
 800e4ac:	08013a70 	.word	0x08013a70
 800e4b0:	08013a74 	.word	0x08013a74
 800e4b4:	08013a8c 	.word	0x08013a8c
 800e4b8:	08013ad4 	.word	0x08013ad4
 800e4bc:	20000f64 	.word	0x20000f64
 800e4c0:	08013ae0 	.word	0x08013ae0
 800e4c4:	08013af4 	.word	0x08013af4
 800e4c8:	08013b20 	.word	0x08013b20
 800e4cc:	08013b4c 	.word	0x08013b4c
 800e4d0:	08013b60 	.word	0x08013b60
 800e4d4:	08013b6c 	.word	0x08013b6c
 800e4d8:	08013b98 	.word	0x08013b98
 800e4dc:	08013bac 	.word	0x08013bac
 800e4e0:	08013bd0 	.word	0x08013bd0

0800e4e4 <_ZN6SDTaskD1Ev>:

#define	SD_CS_GPIO_PORT			GPIOB
#define SD_CS_PIN			GPIO_PIN_5


class SDTask: public RTOS::Task{
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
 800e4ec:	4a05      	ldr	r2, [pc, #20]	; (800e504 <_ZN6SDTaskD1Ev+0x20>)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	601a      	str	r2, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7fe fba5 	bl	800cc44 <_ZN4RTOS4TaskD1Ev>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}
 800e504:	08013ce8 	.word	0x08013ce8

0800e508 <_ZN6SDTaskD0Ev>:
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff ffe7 	bl	800e4e4 <_ZN6SDTaskD1Ev>
 800e516:	f44f 7113 	mov.w	r1, #588	; 0x24c
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f002 fad2 	bl	8010ac4 <_ZdlPvj>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <_Z41__static_initialization_and_destruction_0ii>:

	}
}
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b0b4      	sub	sp, #208	; 0xd0
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2b01      	cmp	r3, #1
 800e53a:	f040 85fe 	bne.w	800f13a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e544:	4293      	cmp	r3, r2
 800e546:	f040 85f8 	bne.w	800f13a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	/* --Short-cuts for GPIOs. */
	using _Port=Port::Select;
	using _Pin=Pin::BitMask;

	/* --Port A. */
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 800e54a:	4ba1      	ldr	r3, [pc, #644]	; (800e7d0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	3301      	adds	r3, #1
 800e550:	4a9f      	ldr	r2, [pc, #636]	; (800e7d0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800e552:	6013      	str	r3, [r2, #0]
 800e554:	4b9e      	ldr	r3, [pc, #632]	; (800e7d0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b01      	cmp	r3, #1
 800e55a:	bf0c      	ite	eq
 800e55c:	2301      	moveq	r3, #1
 800e55e:	2300      	movne	r3, #0
 800e560:	b2db      	uxtb	r3, r3
 800e562:	2b00      	cmp	r3, #0
 800e564:	d00b      	beq.n	800e57e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800e566:	2300      	movs	r3, #0
 800e568:	81bb      	strh	r3, [r7, #12]
 800e56a:	2301      	movs	r3, #1
 800e56c:	81fb      	strh	r3, [r7, #14]
 800e56e:	f107 020e 	add.w	r2, r7, #14
 800e572:	f107 030c 	add.w	r3, r7, #12
 800e576:	4619      	mov	r1, r3
 800e578:	4896      	ldr	r0, [pc, #600]	; (800e7d4 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800e57a:	f7fb fb8d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 800e57e:	4b96      	ldr	r3, [pc, #600]	; (800e7d8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	3301      	adds	r3, #1
 800e584:	4a94      	ldr	r2, [pc, #592]	; (800e7d8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	4b93      	ldr	r3, [pc, #588]	; (800e7d8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	bf0c      	ite	eq
 800e590:	2301      	moveq	r3, #1
 800e592:	2300      	movne	r3, #0
 800e594:	b2db      	uxtb	r3, r3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00b      	beq.n	800e5b2 <_Z41__static_initialization_and_destruction_0ii+0x86>
 800e59a:	2300      	movs	r3, #0
 800e59c:	823b      	strh	r3, [r7, #16]
 800e59e:	2302      	movs	r3, #2
 800e5a0:	827b      	strh	r3, [r7, #18]
 800e5a2:	f107 0212 	add.w	r2, r7, #18
 800e5a6:	f107 0310 	add.w	r3, r7, #16
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	488b      	ldr	r0, [pc, #556]	; (800e7dc <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800e5ae:	f7fb fb73 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 800e5b2:	4b8b      	ldr	r3, [pc, #556]	; (800e7e0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	4a89      	ldr	r2, [pc, #548]	; (800e7e0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800e5ba:	6013      	str	r3, [r2, #0]
 800e5bc:	4b88      	ldr	r3, [pc, #544]	; (800e7e0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b01      	cmp	r3, #1
 800e5c2:	bf0c      	ite	eq
 800e5c4:	2301      	moveq	r3, #1
 800e5c6:	2300      	movne	r3, #0
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d00b      	beq.n	800e5e6 <_Z41__static_initialization_and_destruction_0ii+0xba>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	82bb      	strh	r3, [r7, #20]
 800e5d2:	2304      	movs	r3, #4
 800e5d4:	82fb      	strh	r3, [r7, #22]
 800e5d6:	f107 0216 	add.w	r2, r7, #22
 800e5da:	f107 0314 	add.w	r3, r7, #20
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4880      	ldr	r0, [pc, #512]	; (800e7e4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800e5e2:	f7fb fb59 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 800e5e6:	4b80      	ldr	r3, [pc, #512]	; (800e7e8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	3301      	adds	r3, #1
 800e5ec:	4a7e      	ldr	r2, [pc, #504]	; (800e7e8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	4b7d      	ldr	r3, [pc, #500]	; (800e7e8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	bf0c      	ite	eq
 800e5f8:	2301      	moveq	r3, #1
 800e5fa:	2300      	movne	r3, #0
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d00b      	beq.n	800e61a <_Z41__static_initialization_and_destruction_0ii+0xee>
 800e602:	2300      	movs	r3, #0
 800e604:	833b      	strh	r3, [r7, #24]
 800e606:	2308      	movs	r3, #8
 800e608:	837b      	strh	r3, [r7, #26]
 800e60a:	f107 021a 	add.w	r2, r7, #26
 800e60e:	f107 0318 	add.w	r3, r7, #24
 800e612:	4619      	mov	r1, r3
 800e614:	4875      	ldr	r0, [pc, #468]	; (800e7ec <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800e616:	f7fb fb3f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 800e61a:	4b75      	ldr	r3, [pc, #468]	; (800e7f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	3301      	adds	r3, #1
 800e620:	4a73      	ldr	r2, [pc, #460]	; (800e7f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	4b72      	ldr	r3, [pc, #456]	; (800e7f0 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	bf0c      	ite	eq
 800e62c:	2301      	moveq	r3, #1
 800e62e:	2300      	movne	r3, #0
 800e630:	b2db      	uxtb	r3, r3
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00b      	beq.n	800e64e <_Z41__static_initialization_and_destruction_0ii+0x122>
 800e636:	2300      	movs	r3, #0
 800e638:	83bb      	strh	r3, [r7, #28]
 800e63a:	2310      	movs	r3, #16
 800e63c:	83fb      	strh	r3, [r7, #30]
 800e63e:	f107 021e 	add.w	r2, r7, #30
 800e642:	f107 031c 	add.w	r3, r7, #28
 800e646:	4619      	mov	r1, r3
 800e648:	486a      	ldr	r0, [pc, #424]	; (800e7f4 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800e64a:	f7fb fb25 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 800e64e:	4b6a      	ldr	r3, [pc, #424]	; (800e7f8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	3301      	adds	r3, #1
 800e654:	4a68      	ldr	r2, [pc, #416]	; (800e7f8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800e656:	6013      	str	r3, [r2, #0]
 800e658:	4b67      	ldr	r3, [pc, #412]	; (800e7f8 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	bf0c      	ite	eq
 800e660:	2301      	moveq	r3, #1
 800e662:	2300      	movne	r3, #0
 800e664:	b2db      	uxtb	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d00b      	beq.n	800e682 <_Z41__static_initialization_and_destruction_0ii+0x156>
 800e66a:	2300      	movs	r3, #0
 800e66c:	843b      	strh	r3, [r7, #32]
 800e66e:	2320      	movs	r3, #32
 800e670:	847b      	strh	r3, [r7, #34]	; 0x22
 800e672:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800e676:	f107 0320 	add.w	r3, r7, #32
 800e67a:	4619      	mov	r1, r3
 800e67c:	485f      	ldr	r0, [pc, #380]	; (800e7fc <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800e67e:	f7fb fb0b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 800e682:	4b5f      	ldr	r3, [pc, #380]	; (800e800 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	3301      	adds	r3, #1
 800e688:	4a5d      	ldr	r2, [pc, #372]	; (800e800 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	4b5c      	ldr	r3, [pc, #368]	; (800e800 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b01      	cmp	r3, #1
 800e692:	bf0c      	ite	eq
 800e694:	2301      	moveq	r3, #1
 800e696:	2300      	movne	r3, #0
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00b      	beq.n	800e6b6 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800e69e:	2300      	movs	r3, #0
 800e6a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e6a2:	2340      	movs	r3, #64	; 0x40
 800e6a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e6a6:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800e6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	4854      	ldr	r0, [pc, #336]	; (800e804 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800e6b2:	f7fb faf1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 800e6b6:	4b54      	ldr	r3, [pc, #336]	; (800e808 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	4a52      	ldr	r2, [pc, #328]	; (800e808 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800e6be:	6013      	str	r3, [r2, #0]
 800e6c0:	4b51      	ldr	r3, [pc, #324]	; (800e808 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	bf0c      	ite	eq
 800e6c8:	2301      	moveq	r3, #1
 800e6ca:	2300      	movne	r3, #0
 800e6cc:	b2db      	uxtb	r3, r3
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00b      	beq.n	800e6ea <_Z41__static_initialization_and_destruction_0ii+0x1be>
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	853b      	strh	r3, [r7, #40]	; 0x28
 800e6d6:	2380      	movs	r3, #128	; 0x80
 800e6d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800e6da:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800e6de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	4849      	ldr	r0, [pc, #292]	; (800e80c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800e6e6:	f7fb fad7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 800e6ea:	4b49      	ldr	r3, [pc, #292]	; (800e810 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	3301      	adds	r3, #1
 800e6f0:	4a47      	ldr	r2, [pc, #284]	; (800e810 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800e6f2:	6013      	str	r3, [r2, #0]
 800e6f4:	4b46      	ldr	r3, [pc, #280]	; (800e810 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	bf0c      	ite	eq
 800e6fc:	2301      	moveq	r3, #1
 800e6fe:	2300      	movne	r3, #0
 800e700:	b2db      	uxtb	r3, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	d00c      	beq.n	800e720 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 800e706:	2300      	movs	r3, #0
 800e708:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800e70a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e70e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800e710:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800e714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e718:	4619      	mov	r1, r3
 800e71a:	483e      	ldr	r0, [pc, #248]	; (800e814 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800e71c:	f7fb fabc 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 800e720:	4b3d      	ldr	r3, [pc, #244]	; (800e818 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	3301      	adds	r3, #1
 800e726:	4a3c      	ldr	r2, [pc, #240]	; (800e818 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	4b3b      	ldr	r3, [pc, #236]	; (800e818 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2b01      	cmp	r3, #1
 800e730:	bf0c      	ite	eq
 800e732:	2301      	moveq	r3, #1
 800e734:	2300      	movne	r3, #0
 800e736:	b2db      	uxtb	r3, r3
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00c      	beq.n	800e756 <_Z41__static_initialization_and_destruction_0ii+0x22a>
 800e73c:	2300      	movs	r3, #0
 800e73e:	863b      	strh	r3, [r7, #48]	; 0x30
 800e740:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e744:	867b      	strh	r3, [r7, #50]	; 0x32
 800e746:	f107 0232 	add.w	r2, r7, #50	; 0x32
 800e74a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e74e:	4619      	mov	r1, r3
 800e750:	4832      	ldr	r0, [pc, #200]	; (800e81c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800e752:	f7fb faa1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 800e756:	4b32      	ldr	r3, [pc, #200]	; (800e820 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3301      	adds	r3, #1
 800e75c:	4a30      	ldr	r2, [pc, #192]	; (800e820 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800e75e:	6013      	str	r3, [r2, #0]
 800e760:	4b2f      	ldr	r3, [pc, #188]	; (800e820 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	2b01      	cmp	r3, #1
 800e766:	bf0c      	ite	eq
 800e768:	2301      	moveq	r3, #1
 800e76a:	2300      	movne	r3, #0
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d00c      	beq.n	800e78c <_Z41__static_initialization_and_destruction_0ii+0x260>
 800e772:	2300      	movs	r3, #0
 800e774:	86bb      	strh	r3, [r7, #52]	; 0x34
 800e776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e77a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e77c:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800e780:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800e784:	4619      	mov	r1, r3
 800e786:	4827      	ldr	r0, [pc, #156]	; (800e824 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800e788:	f7fb fa86 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 800e78c:	4b26      	ldr	r3, [pc, #152]	; (800e828 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3301      	adds	r3, #1
 800e792:	4a25      	ldr	r2, [pc, #148]	; (800e828 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	4b24      	ldr	r3, [pc, #144]	; (800e828 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	bf0c      	ite	eq
 800e79e:	2301      	moveq	r3, #1
 800e7a0:	2300      	movne	r3, #0
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00c      	beq.n	800e7c2 <_Z41__static_initialization_and_destruction_0ii+0x296>
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	873b      	strh	r3, [r7, #56]	; 0x38
 800e7ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 800e7b2:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 800e7b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	481b      	ldr	r0, [pc, #108]	; (800e82c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800e7be:	f7fb fa6b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 800e7c2:	4b1b      	ldr	r3, [pc, #108]	; (800e830 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	3301      	adds	r3, #1
 800e7c8:	4a19      	ldr	r2, [pc, #100]	; (800e830 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800e7ca:	6013      	str	r3, [r2, #0]
 800e7cc:	e032      	b.n	800e834 <_Z41__static_initialization_and_destruction_0ii+0x308>
 800e7ce:	bf00      	nop
 800e7d0:	20000c70 	.word	0x20000c70
 800e7d4:	20000898 	.word	0x20000898
 800e7d8:	20000c74 	.word	0x20000c74
 800e7dc:	200008a0 	.word	0x200008a0
 800e7e0:	20000c78 	.word	0x20000c78
 800e7e4:	200008a8 	.word	0x200008a8
 800e7e8:	20000c7c 	.word	0x20000c7c
 800e7ec:	200008b0 	.word	0x200008b0
 800e7f0:	20000c80 	.word	0x20000c80
 800e7f4:	200008b8 	.word	0x200008b8
 800e7f8:	20000c84 	.word	0x20000c84
 800e7fc:	200008c0 	.word	0x200008c0
 800e800:	20000c88 	.word	0x20000c88
 800e804:	200008c8 	.word	0x200008c8
 800e808:	20000c8c 	.word	0x20000c8c
 800e80c:	200008d0 	.word	0x200008d0
 800e810:	20000c90 	.word	0x20000c90
 800e814:	200008d8 	.word	0x200008d8
 800e818:	20000c94 	.word	0x20000c94
 800e81c:	200008e0 	.word	0x200008e0
 800e820:	20000c98 	.word	0x20000c98
 800e824:	200008e8 	.word	0x200008e8
 800e828:	20000c9c 	.word	0x20000c9c
 800e82c:	200008f0 	.word	0x200008f0
 800e830:	20000ca0 	.word	0x20000ca0
 800e834:	4bac      	ldr	r3, [pc, #688]	; (800eae8 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	bf0c      	ite	eq
 800e83c:	2301      	moveq	r3, #1
 800e83e:	2300      	movne	r3, #0
 800e840:	b2db      	uxtb	r3, r3
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00c      	beq.n	800e860 <_Z41__static_initialization_and_destruction_0ii+0x334>
 800e846:	2300      	movs	r3, #0
 800e848:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e84a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e84e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800e850:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800e854:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e858:	4619      	mov	r1, r3
 800e85a:	48a4      	ldr	r0, [pc, #656]	; (800eaec <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800e85c:	f7fb fa1c 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 800e860:	4ba3      	ldr	r3, [pc, #652]	; (800eaf0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	3301      	adds	r3, #1
 800e866:	4aa2      	ldr	r2, [pc, #648]	; (800eaf0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800e868:	6013      	str	r3, [r2, #0]
 800e86a:	4ba1      	ldr	r3, [pc, #644]	; (800eaf0 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b01      	cmp	r3, #1
 800e870:	bf0c      	ite	eq
 800e872:	2301      	moveq	r3, #1
 800e874:	2300      	movne	r3, #0
 800e876:	b2db      	uxtb	r3, r3
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d00e      	beq.n	800e89a <_Z41__static_initialization_and_destruction_0ii+0x36e>
 800e87c:	2300      	movs	r3, #0
 800e87e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e886:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e88a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800e88e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e892:	4619      	mov	r1, r3
 800e894:	4897      	ldr	r0, [pc, #604]	; (800eaf4 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800e896:	f7fb f9ff 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 800e89a:	4b97      	ldr	r3, [pc, #604]	; (800eaf8 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	3301      	adds	r3, #1
 800e8a0:	4a95      	ldr	r2, [pc, #596]	; (800eaf8 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800e8a2:	6013      	str	r3, [r2, #0]
 800e8a4:	4b94      	ldr	r3, [pc, #592]	; (800eaf8 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	bf0c      	ite	eq
 800e8ac:	2301      	moveq	r3, #1
 800e8ae:	2300      	movne	r3, #0
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00e      	beq.n	800e8d4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e8bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e8c0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800e8c4:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800e8c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	488b      	ldr	r0, [pc, #556]	; (800eafc <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800e8d0:	f7fb f9e2 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 800e8d4:	4b8a      	ldr	r3, [pc, #552]	; (800eb00 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	4a89      	ldr	r2, [pc, #548]	; (800eb00 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800e8dc:	6013      	str	r3, [r2, #0]
 800e8de:	4b88      	ldr	r3, [pc, #544]	; (800eb00 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	bf0c      	ite	eq
 800e8e6:	2301      	moveq	r3, #1
 800e8e8:	2300      	movne	r3, #0
 800e8ea:	b2db      	uxtb	r3, r3
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d00e      	beq.n	800e90e <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800e8f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8fa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800e8fe:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 800e902:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e906:	4619      	mov	r1, r3
 800e908:	487e      	ldr	r0, [pc, #504]	; (800eb04 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800e90a:	f7fb f9c5 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port B. */
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 800e90e:	4b7e      	ldr	r3, [pc, #504]	; (800eb08 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	3301      	adds	r3, #1
 800e914:	4a7c      	ldr	r2, [pc, #496]	; (800eb08 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	4b7b      	ldr	r3, [pc, #492]	; (800eb08 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	bf0c      	ite	eq
 800e920:	2301      	moveq	r3, #1
 800e922:	2300      	movne	r3, #0
 800e924:	b2db      	uxtb	r3, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00d      	beq.n	800e946 <_Z41__static_initialization_and_destruction_0ii+0x41a>
 800e92a:	2301      	movs	r3, #1
 800e92c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800e930:	2301      	movs	r3, #1
 800e932:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800e936:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800e93a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e93e:	4619      	mov	r1, r3
 800e940:	4872      	ldr	r0, [pc, #456]	; (800eb0c <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800e942:	f7fb f9a9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 800e946:	4b72      	ldr	r3, [pc, #456]	; (800eb10 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3301      	adds	r3, #1
 800e94c:	4a70      	ldr	r2, [pc, #448]	; (800eb10 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800e94e:	6013      	str	r3, [r2, #0]
 800e950:	4b6f      	ldr	r3, [pc, #444]	; (800eb10 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b01      	cmp	r3, #1
 800e956:	bf0c      	ite	eq
 800e958:	2301      	moveq	r3, #1
 800e95a:	2300      	movne	r3, #0
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00d      	beq.n	800e97e <_Z41__static_initialization_and_destruction_0ii+0x452>
 800e962:	2301      	movs	r3, #1
 800e964:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800e968:	2302      	movs	r3, #2
 800e96a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800e96e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800e972:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e976:	4619      	mov	r1, r3
 800e978:	4866      	ldr	r0, [pc, #408]	; (800eb14 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800e97a:	f7fb f98d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 800e97e:	4b66      	ldr	r3, [pc, #408]	; (800eb18 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	3301      	adds	r3, #1
 800e984:	4a64      	ldr	r2, [pc, #400]	; (800eb18 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800e986:	6013      	str	r3, [r2, #0]
 800e988:	4b63      	ldr	r3, [pc, #396]	; (800eb18 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	bf0c      	ite	eq
 800e990:	2301      	moveq	r3, #1
 800e992:	2300      	movne	r3, #0
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d00d      	beq.n	800e9b6 <_Z41__static_initialization_and_destruction_0ii+0x48a>
 800e99a:	2301      	movs	r3, #1
 800e99c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800e9a0:	2304      	movs	r3, #4
 800e9a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800e9a6:	f107 0256 	add.w	r2, r7, #86	; 0x56
 800e9aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	485a      	ldr	r0, [pc, #360]	; (800eb1c <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800e9b2:	f7fb f971 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 800e9b6:	4b5a      	ldr	r3, [pc, #360]	; (800eb20 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	3301      	adds	r3, #1
 800e9bc:	4a58      	ldr	r2, [pc, #352]	; (800eb20 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800e9be:	6013      	str	r3, [r2, #0]
 800e9c0:	4b57      	ldr	r3, [pc, #348]	; (800eb20 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	bf0c      	ite	eq
 800e9c8:	2301      	moveq	r3, #1
 800e9ca:	2300      	movne	r3, #0
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d00d      	beq.n	800e9ee <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 800e9d2:	2301      	movs	r3, #1
 800e9d4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800e9d8:	2308      	movs	r3, #8
 800e9da:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800e9de:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 800e9e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	484e      	ldr	r0, [pc, #312]	; (800eb24 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800e9ea:	f7fb f955 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 800e9ee:	4b4e      	ldr	r3, [pc, #312]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	4a4c      	ldr	r2, [pc, #304]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800e9f6:	6013      	str	r3, [r2, #0]
 800e9f8:	4b4b      	ldr	r3, [pc, #300]	; (800eb28 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	bf0c      	ite	eq
 800ea00:	2301      	moveq	r3, #1
 800ea02:	2300      	movne	r3, #0
 800ea04:	b2db      	uxtb	r3, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d00d      	beq.n	800ea26 <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800ea10:	2310      	movs	r3, #16
 800ea12:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800ea16:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 800ea1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4842      	ldr	r0, [pc, #264]	; (800eb2c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800ea22:	f7fb f939 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 800ea26:	4b42      	ldr	r3, [pc, #264]	; (800eb30 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	4a40      	ldr	r2, [pc, #256]	; (800eb30 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800ea2e:	6013      	str	r3, [r2, #0]
 800ea30:	4b3f      	ldr	r3, [pc, #252]	; (800eb30 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	bf0c      	ite	eq
 800ea38:	2301      	moveq	r3, #1
 800ea3a:	2300      	movne	r3, #0
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d00d      	beq.n	800ea5e <_Z41__static_initialization_and_destruction_0ii+0x532>
 800ea42:	2301      	movs	r3, #1
 800ea44:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800ea48:	2320      	movs	r3, #32
 800ea4a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ea4e:	f107 0262 	add.w	r2, r7, #98	; 0x62
 800ea52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800ea56:	4619      	mov	r1, r3
 800ea58:	4836      	ldr	r0, [pc, #216]	; (800eb34 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800ea5a:	f7fb f91d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 800ea5e:	4b36      	ldr	r3, [pc, #216]	; (800eb38 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3301      	adds	r3, #1
 800ea64:	4a34      	ldr	r2, [pc, #208]	; (800eb38 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800ea66:	6013      	str	r3, [r2, #0]
 800ea68:	4b33      	ldr	r3, [pc, #204]	; (800eb38 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	bf0c      	ite	eq
 800ea70:	2301      	moveq	r3, #1
 800ea72:	2300      	movne	r3, #0
 800ea74:	b2db      	uxtb	r3, r3
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00e      	beq.n	800ea98 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800ea80:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea84:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ea88:	f107 0266 	add.w	r2, r7, #102	; 0x66
 800ea8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ea90:	4619      	mov	r1, r3
 800ea92:	482a      	ldr	r0, [pc, #168]	; (800eb3c <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800ea94:	f7fb f900 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 800ea98:	4b29      	ldr	r3, [pc, #164]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	4a28      	ldr	r2, [pc, #160]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800eaa0:	6013      	str	r3, [r2, #0]
 800eaa2:	4b27      	ldr	r3, [pc, #156]	; (800eb40 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b01      	cmp	r3, #1
 800eaa8:	bf0c      	ite	eq
 800eaaa:	2301      	moveq	r3, #1
 800eaac:	2300      	movne	r3, #0
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00e      	beq.n	800ead2 <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 800eab4:	2301      	movs	r3, #1
 800eab6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800eaba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eabe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800eac2:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 800eac6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800eaca:	4619      	mov	r1, r3
 800eacc:	481d      	ldr	r0, [pc, #116]	; (800eb44 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800eace:	f7fb f8e3 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 800ead2:	4b1d      	ldr	r3, [pc, #116]	; (800eb48 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	3301      	adds	r3, #1
 800ead8:	4a1b      	ldr	r2, [pc, #108]	; (800eb48 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800eada:	6013      	str	r3, [r2, #0]
 800eadc:	4b1a      	ldr	r3, [pc, #104]	; (800eb48 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	bf08      	it	eq
 800eae4:	2301      	moveq	r3, #1
 800eae6:	e031      	b.n	800eb4c <_Z41__static_initialization_and_destruction_0ii+0x620>
 800eae8:	20000ca0 	.word	0x20000ca0
 800eaec:	200008f8 	.word	0x200008f8
 800eaf0:	20000ca4 	.word	0x20000ca4
 800eaf4:	20000900 	.word	0x20000900
 800eaf8:	20000ca8 	.word	0x20000ca8
 800eafc:	20000908 	.word	0x20000908
 800eb00:	20000cac 	.word	0x20000cac
 800eb04:	20000910 	.word	0x20000910
 800eb08:	20000cb0 	.word	0x20000cb0
 800eb0c:	20000918 	.word	0x20000918
 800eb10:	20000cb4 	.word	0x20000cb4
 800eb14:	20000920 	.word	0x20000920
 800eb18:	20000cb8 	.word	0x20000cb8
 800eb1c:	20000928 	.word	0x20000928
 800eb20:	20000cbc 	.word	0x20000cbc
 800eb24:	20000930 	.word	0x20000930
 800eb28:	20000cc0 	.word	0x20000cc0
 800eb2c:	20000938 	.word	0x20000938
 800eb30:	20000cc4 	.word	0x20000cc4
 800eb34:	20000940 	.word	0x20000940
 800eb38:	20000cc8 	.word	0x20000cc8
 800eb3c:	20000948 	.word	0x20000948
 800eb40:	20000ccc 	.word	0x20000ccc
 800eb44:	20000950 	.word	0x20000950
 800eb48:	20000cd0 	.word	0x20000cd0
 800eb4c:	bf18      	it	ne
 800eb4e:	2300      	movne	r3, #0
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d00e      	beq.n	800eb74 <_Z41__static_initialization_and_destruction_0ii+0x648>
 800eb56:	2301      	movs	r3, #1
 800eb58:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800eb5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800eb64:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800eb68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	48ae      	ldr	r0, [pc, #696]	; (800ee28 <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 800eb70:	f7fb f892 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 800eb74:	4bad      	ldr	r3, [pc, #692]	; (800ee2c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	4aac      	ldr	r2, [pc, #688]	; (800ee2c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	4bab      	ldr	r3, [pc, #684]	; (800ee2c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	bf0c      	ite	eq
 800eb86:	2301      	moveq	r3, #1
 800eb88:	2300      	movne	r3, #0
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00e      	beq.n	800ebae <_Z41__static_initialization_and_destruction_0ii+0x682>
 800eb90:	2301      	movs	r3, #1
 800eb92:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800eb96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb9a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800eb9e:	f107 0272 	add.w	r2, r7, #114	; 0x72
 800eba2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800eba6:	4619      	mov	r1, r3
 800eba8:	48a1      	ldr	r0, [pc, #644]	; (800ee30 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 800ebaa:	f7fb f875 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 800ebae:	4ba1      	ldr	r3, [pc, #644]	; (800ee34 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	4a9f      	ldr	r2, [pc, #636]	; (800ee34 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800ebb6:	6013      	str	r3, [r2, #0]
 800ebb8:	4b9e      	ldr	r3, [pc, #632]	; (800ee34 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	bf0c      	ite	eq
 800ebc0:	2301      	moveq	r3, #1
 800ebc2:	2300      	movne	r3, #0
 800ebc4:	b2db      	uxtb	r3, r3
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d00e      	beq.n	800ebe8 <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800ebd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800ebd8:	f107 0276 	add.w	r2, r7, #118	; 0x76
 800ebdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	4895      	ldr	r0, [pc, #596]	; (800ee38 <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 800ebe4:	f7fb f858 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 800ebe8:	4b94      	ldr	r3, [pc, #592]	; (800ee3c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	3301      	adds	r3, #1
 800ebee:	4a93      	ldr	r2, [pc, #588]	; (800ee3c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	4b92      	ldr	r3, [pc, #584]	; (800ee3c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2b01      	cmp	r3, #1
 800ebf8:	bf0c      	ite	eq
 800ebfa:	2301      	moveq	r3, #1
 800ebfc:	2300      	movne	r3, #0
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00e      	beq.n	800ec22 <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 800ec04:	2301      	movs	r3, #1
 800ec06:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800ec0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ec0e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800ec12:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 800ec16:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	4888      	ldr	r0, [pc, #544]	; (800ee40 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 800ec1e:	f7fb f83b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 800ec22:	4b88      	ldr	r3, [pc, #544]	; (800ee44 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	3301      	adds	r3, #1
 800ec28:	4a86      	ldr	r2, [pc, #536]	; (800ee44 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800ec2a:	6013      	str	r3, [r2, #0]
 800ec2c:	4b85      	ldr	r3, [pc, #532]	; (800ee44 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	bf0c      	ite	eq
 800ec34:	2301      	moveq	r3, #1
 800ec36:	2300      	movne	r3, #0
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00e      	beq.n	800ec5c <_Z41__static_initialization_and_destruction_0ii+0x730>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800ec44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ec48:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800ec4c:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 800ec50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800ec54:	4619      	mov	r1, r3
 800ec56:	487c      	ldr	r0, [pc, #496]	; (800ee48 <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 800ec58:	f7fb f81e 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 800ec5c:	4b7b      	ldr	r3, [pc, #492]	; (800ee4c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3301      	adds	r3, #1
 800ec62:	4a7a      	ldr	r2, [pc, #488]	; (800ee4c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800ec64:	6013      	str	r3, [r2, #0]
 800ec66:	4b79      	ldr	r3, [pc, #484]	; (800ee4c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	bf0c      	ite	eq
 800ec6e:	2301      	moveq	r3, #1
 800ec70:	2300      	movne	r3, #0
 800ec72:	b2db      	uxtb	r3, r3
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d00e      	beq.n	800ec96 <_Z41__static_initialization_and_destruction_0ii+0x76a>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 800ec7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec82:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800ec86:	f107 0282 	add.w	r2, r7, #130	; 0x82
 800ec8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ec8e:	4619      	mov	r1, r3
 800ec90:	486f      	ldr	r0, [pc, #444]	; (800ee50 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 800ec92:	f7fb f801 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port C. */
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 800ec96:	4b6f      	ldr	r3, [pc, #444]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	4a6d      	ldr	r2, [pc, #436]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800ec9e:	6013      	str	r3, [r2, #0]
 800eca0:	4b6c      	ldr	r3, [pc, #432]	; (800ee54 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b01      	cmp	r3, #1
 800eca6:	bf0c      	ite	eq
 800eca8:	2301      	moveq	r3, #1
 800ecaa:	2300      	movne	r3, #0
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00d      	beq.n	800ecce <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 800ecb2:	2302      	movs	r3, #2
 800ecb4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800ecb8:	2301      	movs	r3, #1
 800ecba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800ecbe:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800ecc2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ecc6:	4619      	mov	r1, r3
 800ecc8:	4863      	ldr	r0, [pc, #396]	; (800ee58 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800ecca:	f7fa ffe5 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 800ecce:	4b63      	ldr	r3, [pc, #396]	; (800ee5c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	3301      	adds	r3, #1
 800ecd4:	4a61      	ldr	r2, [pc, #388]	; (800ee5c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800ecd6:	6013      	str	r3, [r2, #0]
 800ecd8:	4b60      	ldr	r3, [pc, #384]	; (800ee5c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	bf0c      	ite	eq
 800ece0:	2301      	moveq	r3, #1
 800ece2:	2300      	movne	r3, #0
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00d      	beq.n	800ed06 <_Z41__static_initialization_and_destruction_0ii+0x7da>
 800ecea:	2302      	movs	r3, #2
 800ecec:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800ecf0:	2302      	movs	r3, #2
 800ecf2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ecf6:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800ecfa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800ecfe:	4619      	mov	r1, r3
 800ed00:	4857      	ldr	r0, [pc, #348]	; (800ee60 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 800ed02:	f7fa ffc9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 800ed06:	4b57      	ldr	r3, [pc, #348]	; (800ee64 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	4a55      	ldr	r2, [pc, #340]	; (800ee64 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800ed0e:	6013      	str	r3, [r2, #0]
 800ed10:	4b54      	ldr	r3, [pc, #336]	; (800ee64 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	bf0c      	ite	eq
 800ed18:	2301      	moveq	r3, #1
 800ed1a:	2300      	movne	r3, #0
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00d      	beq.n	800ed3e <_Z41__static_initialization_and_destruction_0ii+0x812>
 800ed22:	2302      	movs	r3, #2
 800ed24:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800ed28:	2304      	movs	r3, #4
 800ed2a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800ed2e:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 800ed32:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800ed36:	4619      	mov	r1, r3
 800ed38:	484b      	ldr	r0, [pc, #300]	; (800ee68 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 800ed3a:	f7fa ffad 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 800ed3e:	4b4b      	ldr	r3, [pc, #300]	; (800ee6c <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	3301      	adds	r3, #1
 800ed44:	4a49      	ldr	r2, [pc, #292]	; (800ee6c <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800ed46:	6013      	str	r3, [r2, #0]
 800ed48:	4b48      	ldr	r3, [pc, #288]	; (800ee6c <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	bf0c      	ite	eq
 800ed50:	2301      	moveq	r3, #1
 800ed52:	2300      	movne	r3, #0
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d00d      	beq.n	800ed76 <_Z41__static_initialization_and_destruction_0ii+0x84a>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800ed60:	2308      	movs	r3, #8
 800ed62:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800ed66:	f107 0292 	add.w	r2, r7, #146	; 0x92
 800ed6a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ed6e:	4619      	mov	r1, r3
 800ed70:	483f      	ldr	r0, [pc, #252]	; (800ee70 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 800ed72:	f7fa ff91 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 800ed76:	4b3f      	ldr	r3, [pc, #252]	; (800ee74 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	3301      	adds	r3, #1
 800ed7c:	4a3d      	ldr	r2, [pc, #244]	; (800ee74 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800ed7e:	6013      	str	r3, [r2, #0]
 800ed80:	4b3c      	ldr	r3, [pc, #240]	; (800ee74 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	bf0c      	ite	eq
 800ed88:	2301      	moveq	r3, #1
 800ed8a:	2300      	movne	r3, #0
 800ed8c:	b2db      	uxtb	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d00d      	beq.n	800edae <_Z41__static_initialization_and_destruction_0ii+0x882>
 800ed92:	2302      	movs	r3, #2
 800ed94:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ed98:	2310      	movs	r3, #16
 800ed9a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800ed9e:	f107 0296 	add.w	r2, r7, #150	; 0x96
 800eda2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800eda6:	4619      	mov	r1, r3
 800eda8:	4833      	ldr	r0, [pc, #204]	; (800ee78 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800edaa:	f7fa ff75 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 800edae:	4b33      	ldr	r3, [pc, #204]	; (800ee7c <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	3301      	adds	r3, #1
 800edb4:	4a31      	ldr	r2, [pc, #196]	; (800ee7c <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800edb6:	6013      	str	r3, [r2, #0]
 800edb8:	4b30      	ldr	r3, [pc, #192]	; (800ee7c <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b01      	cmp	r3, #1
 800edbe:	bf0c      	ite	eq
 800edc0:	2301      	moveq	r3, #1
 800edc2:	2300      	movne	r3, #0
 800edc4:	b2db      	uxtb	r3, r3
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00d      	beq.n	800ede6 <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 800edca:	2302      	movs	r3, #2
 800edcc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800edd0:	2320      	movs	r3, #32
 800edd2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800edd6:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 800edda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800edde:	4619      	mov	r1, r3
 800ede0:	4827      	ldr	r0, [pc, #156]	; (800ee80 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 800ede2:	f7fa ff59 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 800ede6:	4b27      	ldr	r3, [pc, #156]	; (800ee84 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	3301      	adds	r3, #1
 800edec:	4a25      	ldr	r2, [pc, #148]	; (800ee84 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800edee:	6013      	str	r3, [r2, #0]
 800edf0:	4b24      	ldr	r3, [pc, #144]	; (800ee84 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	bf0c      	ite	eq
 800edf8:	2301      	moveq	r3, #1
 800edfa:	2300      	movne	r3, #0
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d00d      	beq.n	800ee1e <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 800ee02:	2302      	movs	r3, #2
 800ee04:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800ee08:	2340      	movs	r3, #64	; 0x40
 800ee0a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800ee0e:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 800ee12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ee16:	4619      	mov	r1, r3
 800ee18:	481b      	ldr	r0, [pc, #108]	; (800ee88 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 800ee1a:	f7fa ff3d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 800ee1e:	4b1b      	ldr	r3, [pc, #108]	; (800ee8c <_Z41__static_initialization_and_destruction_0ii+0x960>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	3301      	adds	r3, #1
 800ee24:	e034      	b.n	800ee90 <_Z41__static_initialization_and_destruction_0ii+0x964>
 800ee26:	bf00      	nop
 800ee28:	20000958 	.word	0x20000958
 800ee2c:	20000cd4 	.word	0x20000cd4
 800ee30:	20000960 	.word	0x20000960
 800ee34:	20000cd8 	.word	0x20000cd8
 800ee38:	20000968 	.word	0x20000968
 800ee3c:	20000cdc 	.word	0x20000cdc
 800ee40:	20000970 	.word	0x20000970
 800ee44:	20000ce0 	.word	0x20000ce0
 800ee48:	20000978 	.word	0x20000978
 800ee4c:	20000ce4 	.word	0x20000ce4
 800ee50:	20000980 	.word	0x20000980
 800ee54:	20000ce8 	.word	0x20000ce8
 800ee58:	20000988 	.word	0x20000988
 800ee5c:	20000cec 	.word	0x20000cec
 800ee60:	20000990 	.word	0x20000990
 800ee64:	20000cf0 	.word	0x20000cf0
 800ee68:	20000998 	.word	0x20000998
 800ee6c:	20000cf4 	.word	0x20000cf4
 800ee70:	200009a0 	.word	0x200009a0
 800ee74:	20000cf8 	.word	0x20000cf8
 800ee78:	200009a8 	.word	0x200009a8
 800ee7c:	20000cfc 	.word	0x20000cfc
 800ee80:	200009b0 	.word	0x200009b0
 800ee84:	20000d00 	.word	0x20000d00
 800ee88:	200009b8 	.word	0x200009b8
 800ee8c:	20000d04 	.word	0x20000d04
 800ee90:	4aac      	ldr	r2, [pc, #688]	; (800f144 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800ee92:	6013      	str	r3, [r2, #0]
 800ee94:	4bab      	ldr	r3, [pc, #684]	; (800f144 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b01      	cmp	r3, #1
 800ee9a:	bf0c      	ite	eq
 800ee9c:	2301      	moveq	r3, #1
 800ee9e:	2300      	movne	r3, #0
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00d      	beq.n	800eec2 <_Z41__static_initialization_and_destruction_0ii+0x996>
 800eea6:	2302      	movs	r3, #2
 800eea8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800eeac:	2380      	movs	r3, #128	; 0x80
 800eeae:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 800eeb2:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 800eeb6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800eeba:	4619      	mov	r1, r3
 800eebc:	48a2      	ldr	r0, [pc, #648]	; (800f148 <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 800eebe:	f7fa feeb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 800eec2:	4ba2      	ldr	r3, [pc, #648]	; (800f14c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	3301      	adds	r3, #1
 800eec8:	4aa0      	ldr	r2, [pc, #640]	; (800f14c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	4b9f      	ldr	r3, [pc, #636]	; (800f14c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	bf0c      	ite	eq
 800eed4:	2301      	moveq	r3, #1
 800eed6:	2300      	movne	r3, #0
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d00e      	beq.n	800eefc <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 800eede:	2302      	movs	r3, #2
 800eee0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800eee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eee8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800eeec:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 800eef0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800eef4:	4619      	mov	r1, r3
 800eef6:	4896      	ldr	r0, [pc, #600]	; (800f150 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 800eef8:	f7fa fece 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 800eefc:	4b95      	ldr	r3, [pc, #596]	; (800f154 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	3301      	adds	r3, #1
 800ef02:	4a94      	ldr	r2, [pc, #592]	; (800f154 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800ef04:	6013      	str	r3, [r2, #0]
 800ef06:	4b93      	ldr	r3, [pc, #588]	; (800f154 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	bf0c      	ite	eq
 800ef0e:	2301      	moveq	r3, #1
 800ef10:	2300      	movne	r3, #0
 800ef12:	b2db      	uxtb	r3, r3
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00e      	beq.n	800ef36 <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 800ef18:	2302      	movs	r3, #2
 800ef1a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800ef1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800ef26:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 800ef2a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4889      	ldr	r0, [pc, #548]	; (800f158 <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 800ef32:	f7fa feb1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 800ef36:	4b89      	ldr	r3, [pc, #548]	; (800f15c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3301      	adds	r3, #1
 800ef3c:	4a87      	ldr	r2, [pc, #540]	; (800f15c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800ef3e:	6013      	str	r3, [r2, #0]
 800ef40:	4b86      	ldr	r3, [pc, #536]	; (800f15c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	bf0c      	ite	eq
 800ef48:	2301      	moveq	r3, #1
 800ef4a:	2300      	movne	r3, #0
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00e      	beq.n	800ef70 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 800ef52:	2302      	movs	r3, #2
 800ef54:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800ef58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef5c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800ef60:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 800ef64:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800ef68:	4619      	mov	r1, r3
 800ef6a:	487d      	ldr	r0, [pc, #500]	; (800f160 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 800ef6c:	f7fa fe94 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 800ef70:	4b7c      	ldr	r3, [pc, #496]	; (800f164 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	3301      	adds	r3, #1
 800ef76:	4a7b      	ldr	r2, [pc, #492]	; (800f164 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800ef78:	6013      	str	r3, [r2, #0]
 800ef7a:	4b7a      	ldr	r3, [pc, #488]	; (800f164 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	2b01      	cmp	r3, #1
 800ef80:	bf0c      	ite	eq
 800ef82:	2301      	moveq	r3, #1
 800ef84:	2300      	movne	r3, #0
 800ef86:	b2db      	uxtb	r3, r3
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00e      	beq.n	800efaa <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 800ef8c:	2302      	movs	r3, #2
 800ef8e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800ef92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef96:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800ef9a:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 800ef9e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800efa2:	4619      	mov	r1, r3
 800efa4:	4870      	ldr	r0, [pc, #448]	; (800f168 <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 800efa6:	f7fa fe77 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 800efaa:	4b70      	ldr	r3, [pc, #448]	; (800f16c <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	3301      	adds	r3, #1
 800efb0:	4a6e      	ldr	r2, [pc, #440]	; (800f16c <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800efb2:	6013      	str	r3, [r2, #0]
 800efb4:	4b6d      	ldr	r3, [pc, #436]	; (800f16c <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b01      	cmp	r3, #1
 800efba:	bf0c      	ite	eq
 800efbc:	2301      	moveq	r3, #1
 800efbe:	2300      	movne	r3, #0
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00e      	beq.n	800efe4 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 800efc6:	2302      	movs	r3, #2
 800efc8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800efcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efd0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800efd4:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 800efd8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800efdc:	4619      	mov	r1, r3
 800efde:	4864      	ldr	r0, [pc, #400]	; (800f170 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 800efe0:	f7fa fe5a 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 800efe4:	4b63      	ldr	r3, [pc, #396]	; (800f174 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	3301      	adds	r3, #1
 800efea:	4a62      	ldr	r2, [pc, #392]	; (800f174 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800efec:	6013      	str	r3, [r2, #0]
 800efee:	4b61      	ldr	r3, [pc, #388]	; (800f174 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	bf0c      	ite	eq
 800eff6:	2301      	moveq	r3, #1
 800eff8:	2300      	movne	r3, #0
 800effa:	b2db      	uxtb	r3, r3
 800effc:	2b00      	cmp	r3, #0
 800effe:	d00e      	beq.n	800f01e <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 800f000:	2302      	movs	r3, #2
 800f002:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800f006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f00a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800f00e:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 800f012:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800f016:	4619      	mov	r1, r3
 800f018:	4857      	ldr	r0, [pc, #348]	; (800f178 <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 800f01a:	f7fa fe3d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 800f01e:	4b57      	ldr	r3, [pc, #348]	; (800f17c <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	3301      	adds	r3, #1
 800f024:	4a55      	ldr	r2, [pc, #340]	; (800f17c <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800f026:	6013      	str	r3, [r2, #0]
 800f028:	4b54      	ldr	r3, [pc, #336]	; (800f17c <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2b01      	cmp	r3, #1
 800f02e:	bf0c      	ite	eq
 800f030:	2301      	moveq	r3, #1
 800f032:	2300      	movne	r3, #0
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00e      	beq.n	800f058 <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 800f03a:	2302      	movs	r3, #2
 800f03c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800f040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f044:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800f048:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800f04c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800f050:	4619      	mov	r1, r3
 800f052:	484b      	ldr	r0, [pc, #300]	; (800f180 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 800f054:	f7fa fe20 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 800f058:	4b4a      	ldr	r3, [pc, #296]	; (800f184 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	3301      	adds	r3, #1
 800f05e:	4a49      	ldr	r2, [pc, #292]	; (800f184 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800f060:	6013      	str	r3, [r2, #0]
 800f062:	4b48      	ldr	r3, [pc, #288]	; (800f184 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	2b01      	cmp	r3, #1
 800f068:	bf0c      	ite	eq
 800f06a:	2301      	moveq	r3, #1
 800f06c:	2300      	movne	r3, #0
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	2b00      	cmp	r3, #0
 800f072:	d00e      	beq.n	800f092 <_Z41__static_initialization_and_destruction_0ii+0xb66>
 800f074:	2302      	movs	r3, #2
 800f076:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800f07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f07e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800f082:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 800f086:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800f08a:	4619      	mov	r1, r3
 800f08c:	483e      	ldr	r0, [pc, #248]	; (800f188 <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 800f08e:	f7fa fe03 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port D. */
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 800f092:	4b3e      	ldr	r3, [pc, #248]	; (800f18c <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	3301      	adds	r3, #1
 800f098:	4a3c      	ldr	r2, [pc, #240]	; (800f18c <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800f09a:	6013      	str	r3, [r2, #0]
 800f09c:	4b3b      	ldr	r3, [pc, #236]	; (800f18c <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	2b01      	cmp	r3, #1
 800f0a2:	bf0c      	ite	eq
 800f0a4:	2301      	moveq	r3, #1
 800f0a6:	2300      	movne	r3, #0
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d00d      	beq.n	800f0ca <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 800f0ae:	2303      	movs	r3, #3
 800f0b0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800f0b4:	2304      	movs	r3, #4
 800f0b6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800f0ba:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 800f0be:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800f0c2:	4619      	mov	r1, r3
 800f0c4:	4832      	ldr	r0, [pc, #200]	; (800f190 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 800f0c6:	f7fa fde7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port H. */
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 800f0ca:	4b32      	ldr	r3, [pc, #200]	; (800f194 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	3301      	adds	r3, #1
 800f0d0:	4a30      	ldr	r2, [pc, #192]	; (800f194 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	4b2f      	ldr	r3, [pc, #188]	; (800f194 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	2b01      	cmp	r3, #1
 800f0da:	bf0c      	ite	eq
 800f0dc:	2301      	moveq	r3, #1
 800f0de:	2300      	movne	r3, #0
 800f0e0:	b2db      	uxtb	r3, r3
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d00d      	beq.n	800f102 <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 800f0e6:	2307      	movs	r3, #7
 800f0e8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800f0f2:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 800f0f6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4826      	ldr	r0, [pc, #152]	; (800f198 <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 800f0fe:	f7fa fdcb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 800f102:	4b26      	ldr	r3, [pc, #152]	; (800f19c <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	3301      	adds	r3, #1
 800f108:	4a24      	ldr	r2, [pc, #144]	; (800f19c <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800f10a:	6013      	str	r3, [r2, #0]
 800f10c:	4b23      	ldr	r3, [pc, #140]	; (800f19c <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	2b01      	cmp	r3, #1
 800f112:	bf0c      	ite	eq
 800f114:	2301      	moveq	r3, #1
 800f116:	2300      	movne	r3, #0
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00d      	beq.n	800f13a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800f11e:	2307      	movs	r3, #7
 800f120:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800f124:	2302      	movs	r3, #2
 800f126:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800f12a:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 800f12e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f132:	4619      	mov	r1, r3
 800f134:	481a      	ldr	r0, [pc, #104]	; (800f1a0 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 800f136:	f7fa fdaf 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 800f13a:	bf00      	nop
 800f13c:	37d0      	adds	r7, #208	; 0xd0
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20000d04 	.word	0x20000d04
 800f148:	200009c0 	.word	0x200009c0
 800f14c:	20000d08 	.word	0x20000d08
 800f150:	200009c8 	.word	0x200009c8
 800f154:	20000d0c 	.word	0x20000d0c
 800f158:	200009d0 	.word	0x200009d0
 800f15c:	20000d10 	.word	0x20000d10
 800f160:	200009d8 	.word	0x200009d8
 800f164:	20000d14 	.word	0x20000d14
 800f168:	200009e0 	.word	0x200009e0
 800f16c:	20000d18 	.word	0x20000d18
 800f170:	200009e8 	.word	0x200009e8
 800f174:	20000d1c 	.word	0x20000d1c
 800f178:	200009f0 	.word	0x200009f0
 800f17c:	20000d20 	.word	0x20000d20
 800f180:	200009f8 	.word	0x200009f8
 800f184:	20000d24 	.word	0x20000d24
 800f188:	20000a00 	.word	0x20000a00
 800f18c:	20000d28 	.word	0x20000d28
 800f190:	20000a08 	.word	0x20000a08
 800f194:	20000d2c 	.word	0x20000d2c
 800f198:	20000a10 	.word	0x20000a10
 800f19c:	20000d30 	.word	0x20000d30
 800f1a0:	20000a18 	.word	0x20000a18

0800f1a4 <_GLOBAL__sub_I_FatFs>:
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f1ac:	2001      	movs	r0, #1
 800f1ae:	f7ff f9bd 	bl	800e52c <_Z41__static_initialization_and_destruction_0ii>
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <_Z41__static_initialization_and_destruction_0ii>:
			values.z = z;
			//Daten an SD-Task senden
			//osMessagePut(sensorMessageId, values, 0);
		//}
	}
}
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b0b4      	sub	sp, #208	; 0xd0
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	f040 85fe 	bne.w	800fdc2 <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	f040 85f8 	bne.w	800fdc2 <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	/* --Short-cuts for GPIOs. */
	using _Port=Port::Select;
	using _Pin=Pin::BitMask;

	/* --Port A. */
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 800f1d2:	4ba1      	ldr	r3, [pc, #644]	; (800f458 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	4a9f      	ldr	r2, [pc, #636]	; (800f458 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	4b9e      	ldr	r3, [pc, #632]	; (800f458 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	bf0c      	ite	eq
 800f1e4:	2301      	moveq	r3, #1
 800f1e6:	2300      	movne	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00b      	beq.n	800f206 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	81bb      	strh	r3, [r7, #12]
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	81fb      	strh	r3, [r7, #14]
 800f1f6:	f107 020e 	add.w	r2, r7, #14
 800f1fa:	f107 030c 	add.w	r3, r7, #12
 800f1fe:	4619      	mov	r1, r3
 800f200:	4896      	ldr	r0, [pc, #600]	; (800f45c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800f202:	f7fa fd49 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 800f206:	4b96      	ldr	r3, [pc, #600]	; (800f460 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	3301      	adds	r3, #1
 800f20c:	4a94      	ldr	r2, [pc, #592]	; (800f460 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	4b93      	ldr	r3, [pc, #588]	; (800f460 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b01      	cmp	r3, #1
 800f216:	bf0c      	ite	eq
 800f218:	2301      	moveq	r3, #1
 800f21a:	2300      	movne	r3, #0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00b      	beq.n	800f23a <_Z41__static_initialization_and_destruction_0ii+0x86>
 800f222:	2300      	movs	r3, #0
 800f224:	823b      	strh	r3, [r7, #16]
 800f226:	2302      	movs	r3, #2
 800f228:	827b      	strh	r3, [r7, #18]
 800f22a:	f107 0212 	add.w	r2, r7, #18
 800f22e:	f107 0310 	add.w	r3, r7, #16
 800f232:	4619      	mov	r1, r3
 800f234:	488b      	ldr	r0, [pc, #556]	; (800f464 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800f236:	f7fa fd2f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 800f23a:	4b8b      	ldr	r3, [pc, #556]	; (800f468 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3301      	adds	r3, #1
 800f240:	4a89      	ldr	r2, [pc, #548]	; (800f468 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	4b88      	ldr	r3, [pc, #544]	; (800f468 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	bf0c      	ite	eq
 800f24c:	2301      	moveq	r3, #1
 800f24e:	2300      	movne	r3, #0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00b      	beq.n	800f26e <_Z41__static_initialization_and_destruction_0ii+0xba>
 800f256:	2300      	movs	r3, #0
 800f258:	82bb      	strh	r3, [r7, #20]
 800f25a:	2304      	movs	r3, #4
 800f25c:	82fb      	strh	r3, [r7, #22]
 800f25e:	f107 0216 	add.w	r2, r7, #22
 800f262:	f107 0314 	add.w	r3, r7, #20
 800f266:	4619      	mov	r1, r3
 800f268:	4880      	ldr	r0, [pc, #512]	; (800f46c <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800f26a:	f7fa fd15 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 800f26e:	4b80      	ldr	r3, [pc, #512]	; (800f470 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3301      	adds	r3, #1
 800f274:	4a7e      	ldr	r2, [pc, #504]	; (800f470 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800f276:	6013      	str	r3, [r2, #0]
 800f278:	4b7d      	ldr	r3, [pc, #500]	; (800f470 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	bf0c      	ite	eq
 800f280:	2301      	moveq	r3, #1
 800f282:	2300      	movne	r3, #0
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00b      	beq.n	800f2a2 <_Z41__static_initialization_and_destruction_0ii+0xee>
 800f28a:	2300      	movs	r3, #0
 800f28c:	833b      	strh	r3, [r7, #24]
 800f28e:	2308      	movs	r3, #8
 800f290:	837b      	strh	r3, [r7, #26]
 800f292:	f107 021a 	add.w	r2, r7, #26
 800f296:	f107 0318 	add.w	r3, r7, #24
 800f29a:	4619      	mov	r1, r3
 800f29c:	4875      	ldr	r0, [pc, #468]	; (800f474 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800f29e:	f7fa fcfb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 800f2a2:	4b75      	ldr	r3, [pc, #468]	; (800f478 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	4a73      	ldr	r2, [pc, #460]	; (800f478 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	4b72      	ldr	r3, [pc, #456]	; (800f478 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	bf0c      	ite	eq
 800f2b4:	2301      	moveq	r3, #1
 800f2b6:	2300      	movne	r3, #0
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00b      	beq.n	800f2d6 <_Z41__static_initialization_and_destruction_0ii+0x122>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	83bb      	strh	r3, [r7, #28]
 800f2c2:	2310      	movs	r3, #16
 800f2c4:	83fb      	strh	r3, [r7, #30]
 800f2c6:	f107 021e 	add.w	r2, r7, #30
 800f2ca:	f107 031c 	add.w	r3, r7, #28
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	486a      	ldr	r0, [pc, #424]	; (800f47c <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800f2d2:	f7fa fce1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 800f2d6:	4b6a      	ldr	r3, [pc, #424]	; (800f480 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	4a68      	ldr	r2, [pc, #416]	; (800f480 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	4b67      	ldr	r3, [pc, #412]	; (800f480 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	bf0c      	ite	eq
 800f2e8:	2301      	moveq	r3, #1
 800f2ea:	2300      	movne	r3, #0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00b      	beq.n	800f30a <_Z41__static_initialization_and_destruction_0ii+0x156>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	843b      	strh	r3, [r7, #32]
 800f2f6:	2320      	movs	r3, #32
 800f2f8:	847b      	strh	r3, [r7, #34]	; 0x22
 800f2fa:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800f2fe:	f107 0320 	add.w	r3, r7, #32
 800f302:	4619      	mov	r1, r3
 800f304:	485f      	ldr	r0, [pc, #380]	; (800f484 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800f306:	f7fa fcc7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 800f30a:	4b5f      	ldr	r3, [pc, #380]	; (800f488 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3301      	adds	r3, #1
 800f310:	4a5d      	ldr	r2, [pc, #372]	; (800f488 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	4b5c      	ldr	r3, [pc, #368]	; (800f488 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	bf0c      	ite	eq
 800f31c:	2301      	moveq	r3, #1
 800f31e:	2300      	movne	r3, #0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00b      	beq.n	800f33e <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800f326:	2300      	movs	r3, #0
 800f328:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f32a:	2340      	movs	r3, #64	; 0x40
 800f32c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f32e:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800f332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f336:	4619      	mov	r1, r3
 800f338:	4854      	ldr	r0, [pc, #336]	; (800f48c <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800f33a:	f7fa fcad 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 800f33e:	4b54      	ldr	r3, [pc, #336]	; (800f490 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	3301      	adds	r3, #1
 800f344:	4a52      	ldr	r2, [pc, #328]	; (800f490 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800f346:	6013      	str	r3, [r2, #0]
 800f348:	4b51      	ldr	r3, [pc, #324]	; (800f490 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	bf0c      	ite	eq
 800f350:	2301      	moveq	r3, #1
 800f352:	2300      	movne	r3, #0
 800f354:	b2db      	uxtb	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00b      	beq.n	800f372 <_Z41__static_initialization_and_destruction_0ii+0x1be>
 800f35a:	2300      	movs	r3, #0
 800f35c:	853b      	strh	r3, [r7, #40]	; 0x28
 800f35e:	2380      	movs	r3, #128	; 0x80
 800f360:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f362:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800f366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f36a:	4619      	mov	r1, r3
 800f36c:	4849      	ldr	r0, [pc, #292]	; (800f494 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800f36e:	f7fa fc93 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 800f372:	4b49      	ldr	r3, [pc, #292]	; (800f498 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	3301      	adds	r3, #1
 800f378:	4a47      	ldr	r2, [pc, #284]	; (800f498 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800f37a:	6013      	str	r3, [r2, #0]
 800f37c:	4b46      	ldr	r3, [pc, #280]	; (800f498 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2b01      	cmp	r3, #1
 800f382:	bf0c      	ite	eq
 800f384:	2301      	moveq	r3, #1
 800f386:	2300      	movne	r3, #0
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d00c      	beq.n	800f3a8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 800f38e:	2300      	movs	r3, #0
 800f390:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f392:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f396:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f398:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800f39c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	483e      	ldr	r0, [pc, #248]	; (800f49c <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800f3a4:	f7fa fc78 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 800f3a8:	4b3d      	ldr	r3, [pc, #244]	; (800f4a0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	3301      	adds	r3, #1
 800f3ae:	4a3c      	ldr	r2, [pc, #240]	; (800f4a0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800f3b0:	6013      	str	r3, [r2, #0]
 800f3b2:	4b3b      	ldr	r3, [pc, #236]	; (800f4a0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	bf0c      	ite	eq
 800f3ba:	2301      	moveq	r3, #1
 800f3bc:	2300      	movne	r3, #0
 800f3be:	b2db      	uxtb	r3, r3
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d00c      	beq.n	800f3de <_Z41__static_initialization_and_destruction_0ii+0x22a>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	863b      	strh	r3, [r7, #48]	; 0x30
 800f3c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f3cc:	867b      	strh	r3, [r7, #50]	; 0x32
 800f3ce:	f107 0232 	add.w	r2, r7, #50	; 0x32
 800f3d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	4832      	ldr	r0, [pc, #200]	; (800f4a4 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800f3da:	f7fa fc5d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 800f3de:	4b32      	ldr	r3, [pc, #200]	; (800f4a8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	4a30      	ldr	r2, [pc, #192]	; (800f4a8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800f3e6:	6013      	str	r3, [r2, #0]
 800f3e8:	4b2f      	ldr	r3, [pc, #188]	; (800f4a8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	bf0c      	ite	eq
 800f3f0:	2301      	moveq	r3, #1
 800f3f2:	2300      	movne	r3, #0
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <_Z41__static_initialization_and_destruction_0ii+0x260>
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 800f3fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f402:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f404:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800f408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f40c:	4619      	mov	r1, r3
 800f40e:	4827      	ldr	r0, [pc, #156]	; (800f4ac <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800f410:	f7fa fc42 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 800f414:	4b26      	ldr	r3, [pc, #152]	; (800f4b0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	3301      	adds	r3, #1
 800f41a:	4a25      	ldr	r2, [pc, #148]	; (800f4b0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800f41c:	6013      	str	r3, [r2, #0]
 800f41e:	4b24      	ldr	r3, [pc, #144]	; (800f4b0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	2b01      	cmp	r3, #1
 800f424:	bf0c      	ite	eq
 800f426:	2301      	moveq	r3, #1
 800f428:	2300      	movne	r3, #0
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d00c      	beq.n	800f44a <_Z41__static_initialization_and_destruction_0ii+0x296>
 800f430:	2300      	movs	r3, #0
 800f432:	873b      	strh	r3, [r7, #56]	; 0x38
 800f434:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f438:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f43a:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 800f43e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f442:	4619      	mov	r1, r3
 800f444:	481b      	ldr	r0, [pc, #108]	; (800f4b4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800f446:	f7fa fc27 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 800f44a:	4b1b      	ldr	r3, [pc, #108]	; (800f4b8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	3301      	adds	r3, #1
 800f450:	4a19      	ldr	r2, [pc, #100]	; (800f4b8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800f452:	6013      	str	r3, [r2, #0]
 800f454:	e032      	b.n	800f4bc <_Z41__static_initialization_and_destruction_0ii+0x308>
 800f456:	bf00      	nop
 800f458:	20000c70 	.word	0x20000c70
 800f45c:	20000898 	.word	0x20000898
 800f460:	20000c74 	.word	0x20000c74
 800f464:	200008a0 	.word	0x200008a0
 800f468:	20000c78 	.word	0x20000c78
 800f46c:	200008a8 	.word	0x200008a8
 800f470:	20000c7c 	.word	0x20000c7c
 800f474:	200008b0 	.word	0x200008b0
 800f478:	20000c80 	.word	0x20000c80
 800f47c:	200008b8 	.word	0x200008b8
 800f480:	20000c84 	.word	0x20000c84
 800f484:	200008c0 	.word	0x200008c0
 800f488:	20000c88 	.word	0x20000c88
 800f48c:	200008c8 	.word	0x200008c8
 800f490:	20000c8c 	.word	0x20000c8c
 800f494:	200008d0 	.word	0x200008d0
 800f498:	20000c90 	.word	0x20000c90
 800f49c:	200008d8 	.word	0x200008d8
 800f4a0:	20000c94 	.word	0x20000c94
 800f4a4:	200008e0 	.word	0x200008e0
 800f4a8:	20000c98 	.word	0x20000c98
 800f4ac:	200008e8 	.word	0x200008e8
 800f4b0:	20000c9c 	.word	0x20000c9c
 800f4b4:	200008f0 	.word	0x200008f0
 800f4b8:	20000ca0 	.word	0x20000ca0
 800f4bc:	4bac      	ldr	r3, [pc, #688]	; (800f770 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	bf0c      	ite	eq
 800f4c4:	2301      	moveq	r3, #1
 800f4c6:	2300      	movne	r3, #0
 800f4c8:	b2db      	uxtb	r3, r3
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d00c      	beq.n	800f4e8 <_Z41__static_initialization_and_destruction_0ii+0x334>
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f4d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f4d8:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800f4dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	48a4      	ldr	r0, [pc, #656]	; (800f774 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800f4e4:	f7fa fbd8 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 800f4e8:	4ba3      	ldr	r3, [pc, #652]	; (800f778 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	4aa2      	ldr	r2, [pc, #648]	; (800f778 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800f4f0:	6013      	str	r3, [r2, #0]
 800f4f2:	4ba1      	ldr	r3, [pc, #644]	; (800f778 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	bf0c      	ite	eq
 800f4fa:	2301      	moveq	r3, #1
 800f4fc:	2300      	movne	r3, #0
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00e      	beq.n	800f522 <_Z41__static_initialization_and_destruction_0ii+0x36e>
 800f504:	2300      	movs	r3, #0
 800f506:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f50a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f50e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f512:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800f516:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f51a:	4619      	mov	r1, r3
 800f51c:	4897      	ldr	r0, [pc, #604]	; (800f77c <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800f51e:	f7fa fbbb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 800f522:	4b97      	ldr	r3, [pc, #604]	; (800f780 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	3301      	adds	r3, #1
 800f528:	4a95      	ldr	r2, [pc, #596]	; (800f780 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800f52a:	6013      	str	r3, [r2, #0]
 800f52c:	4b94      	ldr	r3, [pc, #592]	; (800f780 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	2b01      	cmp	r3, #1
 800f532:	bf0c      	ite	eq
 800f534:	2301      	moveq	r3, #1
 800f536:	2300      	movne	r3, #0
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00e      	beq.n	800f55c <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 800f53e:	2300      	movs	r3, #0
 800f540:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f544:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f548:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f54c:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800f550:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f554:	4619      	mov	r1, r3
 800f556:	488b      	ldr	r0, [pc, #556]	; (800f784 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800f558:	f7fa fb9e 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 800f55c:	4b8a      	ldr	r3, [pc, #552]	; (800f788 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	3301      	adds	r3, #1
 800f562:	4a89      	ldr	r2, [pc, #548]	; (800f788 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800f564:	6013      	str	r3, [r2, #0]
 800f566:	4b88      	ldr	r3, [pc, #544]	; (800f788 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	2b01      	cmp	r3, #1
 800f56c:	bf0c      	ite	eq
 800f56e:	2301      	moveq	r3, #1
 800f570:	2300      	movne	r3, #0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00e      	beq.n	800f596 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 800f578:	2300      	movs	r3, #0
 800f57a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f57e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f582:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f586:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 800f58a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f58e:	4619      	mov	r1, r3
 800f590:	487e      	ldr	r0, [pc, #504]	; (800f78c <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800f592:	f7fa fb81 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port B. */
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 800f596:	4b7e      	ldr	r3, [pc, #504]	; (800f790 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	3301      	adds	r3, #1
 800f59c:	4a7c      	ldr	r2, [pc, #496]	; (800f790 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800f59e:	6013      	str	r3, [r2, #0]
 800f5a0:	4b7b      	ldr	r3, [pc, #492]	; (800f790 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	bf0c      	ite	eq
 800f5a8:	2301      	moveq	r3, #1
 800f5aa:	2300      	movne	r3, #0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d00d      	beq.n	800f5ce <_Z41__static_initialization_and_destruction_0ii+0x41a>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f5b8:	2301      	movs	r3, #1
 800f5ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f5be:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800f5c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	4872      	ldr	r0, [pc, #456]	; (800f794 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800f5ca:	f7fa fb65 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 800f5ce:	4b72      	ldr	r3, [pc, #456]	; (800f798 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	4a70      	ldr	r2, [pc, #448]	; (800f798 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800f5d6:	6013      	str	r3, [r2, #0]
 800f5d8:	4b6f      	ldr	r3, [pc, #444]	; (800f798 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	2b01      	cmp	r3, #1
 800f5de:	bf0c      	ite	eq
 800f5e0:	2301      	moveq	r3, #1
 800f5e2:	2300      	movne	r3, #0
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00d      	beq.n	800f606 <_Z41__static_initialization_and_destruction_0ii+0x452>
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800f5f0:	2302      	movs	r3, #2
 800f5f2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800f5f6:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800f5fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f5fe:	4619      	mov	r1, r3
 800f600:	4866      	ldr	r0, [pc, #408]	; (800f79c <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800f602:	f7fa fb49 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 800f606:	4b66      	ldr	r3, [pc, #408]	; (800f7a0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	3301      	adds	r3, #1
 800f60c:	4a64      	ldr	r2, [pc, #400]	; (800f7a0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800f60e:	6013      	str	r3, [r2, #0]
 800f610:	4b63      	ldr	r3, [pc, #396]	; (800f7a0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	2b01      	cmp	r3, #1
 800f616:	bf0c      	ite	eq
 800f618:	2301      	moveq	r3, #1
 800f61a:	2300      	movne	r3, #0
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00d      	beq.n	800f63e <_Z41__static_initialization_and_destruction_0ii+0x48a>
 800f622:	2301      	movs	r3, #1
 800f624:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800f628:	2304      	movs	r3, #4
 800f62a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f62e:	f107 0256 	add.w	r2, r7, #86	; 0x56
 800f632:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f636:	4619      	mov	r1, r3
 800f638:	485a      	ldr	r0, [pc, #360]	; (800f7a4 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800f63a:	f7fa fb2d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 800f63e:	4b5a      	ldr	r3, [pc, #360]	; (800f7a8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	3301      	adds	r3, #1
 800f644:	4a58      	ldr	r2, [pc, #352]	; (800f7a8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800f646:	6013      	str	r3, [r2, #0]
 800f648:	4b57      	ldr	r3, [pc, #348]	; (800f7a8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	bf0c      	ite	eq
 800f650:	2301      	moveq	r3, #1
 800f652:	2300      	movne	r3, #0
 800f654:	b2db      	uxtb	r3, r3
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00d      	beq.n	800f676 <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 800f65a:	2301      	movs	r3, #1
 800f65c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800f660:	2308      	movs	r3, #8
 800f662:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800f666:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 800f66a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f66e:	4619      	mov	r1, r3
 800f670:	484e      	ldr	r0, [pc, #312]	; (800f7ac <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800f672:	f7fa fb11 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 800f676:	4b4e      	ldr	r3, [pc, #312]	; (800f7b0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	3301      	adds	r3, #1
 800f67c:	4a4c      	ldr	r2, [pc, #304]	; (800f7b0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800f67e:	6013      	str	r3, [r2, #0]
 800f680:	4b4b      	ldr	r3, [pc, #300]	; (800f7b0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	2b01      	cmp	r3, #1
 800f686:	bf0c      	ite	eq
 800f688:	2301      	moveq	r3, #1
 800f68a:	2300      	movne	r3, #0
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d00d      	beq.n	800f6ae <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 800f692:	2301      	movs	r3, #1
 800f694:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800f698:	2310      	movs	r3, #16
 800f69a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f69e:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 800f6a2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4842      	ldr	r0, [pc, #264]	; (800f7b4 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800f6aa:	f7fa faf5 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 800f6ae:	4b42      	ldr	r3, [pc, #264]	; (800f7b8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	4a40      	ldr	r2, [pc, #256]	; (800f7b8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800f6b6:	6013      	str	r3, [r2, #0]
 800f6b8:	4b3f      	ldr	r3, [pc, #252]	; (800f7b8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	bf0c      	ite	eq
 800f6c0:	2301      	moveq	r3, #1
 800f6c2:	2300      	movne	r3, #0
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00d      	beq.n	800f6e6 <_Z41__static_initialization_and_destruction_0ii+0x532>
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800f6d0:	2320      	movs	r3, #32
 800f6d2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f6d6:	f107 0262 	add.w	r2, r7, #98	; 0x62
 800f6da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6de:	4619      	mov	r1, r3
 800f6e0:	4836      	ldr	r0, [pc, #216]	; (800f7bc <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800f6e2:	f7fa fad9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 800f6e6:	4b36      	ldr	r3, [pc, #216]	; (800f7c0 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	4a34      	ldr	r2, [pc, #208]	; (800f7c0 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800f6ee:	6013      	str	r3, [r2, #0]
 800f6f0:	4b33      	ldr	r3, [pc, #204]	; (800f7c0 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	2b01      	cmp	r3, #1
 800f6f6:	bf0c      	ite	eq
 800f6f8:	2301      	moveq	r3, #1
 800f6fa:	2300      	movne	r3, #0
 800f6fc:	b2db      	uxtb	r3, r3
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d00e      	beq.n	800f720 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800f702:	2301      	movs	r3, #1
 800f704:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f70c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f710:	f107 0266 	add.w	r2, r7, #102	; 0x66
 800f714:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f718:	4619      	mov	r1, r3
 800f71a:	482a      	ldr	r0, [pc, #168]	; (800f7c4 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800f71c:	f7fa fabc 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 800f720:	4b29      	ldr	r3, [pc, #164]	; (800f7c8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	3301      	adds	r3, #1
 800f726:	4a28      	ldr	r2, [pc, #160]	; (800f7c8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800f728:	6013      	str	r3, [r2, #0]
 800f72a:	4b27      	ldr	r3, [pc, #156]	; (800f7c8 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	bf0c      	ite	eq
 800f732:	2301      	moveq	r3, #1
 800f734:	2300      	movne	r3, #0
 800f736:	b2db      	uxtb	r3, r3
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d00e      	beq.n	800f75a <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 800f73c:	2301      	movs	r3, #1
 800f73e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800f742:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f746:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800f74a:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 800f74e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f752:	4619      	mov	r1, r3
 800f754:	481d      	ldr	r0, [pc, #116]	; (800f7cc <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800f756:	f7fa fa9f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 800f75a:	4b1d      	ldr	r3, [pc, #116]	; (800f7d0 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	3301      	adds	r3, #1
 800f760:	4a1b      	ldr	r2, [pc, #108]	; (800f7d0 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800f762:	6013      	str	r3, [r2, #0]
 800f764:	4b1a      	ldr	r3, [pc, #104]	; (800f7d0 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2b01      	cmp	r3, #1
 800f76a:	bf08      	it	eq
 800f76c:	2301      	moveq	r3, #1
 800f76e:	e031      	b.n	800f7d4 <_Z41__static_initialization_and_destruction_0ii+0x620>
 800f770:	20000ca0 	.word	0x20000ca0
 800f774:	200008f8 	.word	0x200008f8
 800f778:	20000ca4 	.word	0x20000ca4
 800f77c:	20000900 	.word	0x20000900
 800f780:	20000ca8 	.word	0x20000ca8
 800f784:	20000908 	.word	0x20000908
 800f788:	20000cac 	.word	0x20000cac
 800f78c:	20000910 	.word	0x20000910
 800f790:	20000cb0 	.word	0x20000cb0
 800f794:	20000918 	.word	0x20000918
 800f798:	20000cb4 	.word	0x20000cb4
 800f79c:	20000920 	.word	0x20000920
 800f7a0:	20000cb8 	.word	0x20000cb8
 800f7a4:	20000928 	.word	0x20000928
 800f7a8:	20000cbc 	.word	0x20000cbc
 800f7ac:	20000930 	.word	0x20000930
 800f7b0:	20000cc0 	.word	0x20000cc0
 800f7b4:	20000938 	.word	0x20000938
 800f7b8:	20000cc4 	.word	0x20000cc4
 800f7bc:	20000940 	.word	0x20000940
 800f7c0:	20000cc8 	.word	0x20000cc8
 800f7c4:	20000948 	.word	0x20000948
 800f7c8:	20000ccc 	.word	0x20000ccc
 800f7cc:	20000950 	.word	0x20000950
 800f7d0:	20000cd0 	.word	0x20000cd0
 800f7d4:	bf18      	it	ne
 800f7d6:	2300      	movne	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d00e      	beq.n	800f7fc <_Z41__static_initialization_and_destruction_0ii+0x648>
 800f7de:	2301      	movs	r3, #1
 800f7e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7e8:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800f7ec:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800f7f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	48ae      	ldr	r0, [pc, #696]	; (800fab0 <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 800f7f8:	f7fa fa4e 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 800f7fc:	4bad      	ldr	r3, [pc, #692]	; (800fab4 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	3301      	adds	r3, #1
 800f802:	4aac      	ldr	r2, [pc, #688]	; (800fab4 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800f804:	6013      	str	r3, [r2, #0]
 800f806:	4bab      	ldr	r3, [pc, #684]	; (800fab4 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	2b01      	cmp	r3, #1
 800f80c:	bf0c      	ite	eq
 800f80e:	2301      	moveq	r3, #1
 800f810:	2300      	movne	r3, #0
 800f812:	b2db      	uxtb	r3, r3
 800f814:	2b00      	cmp	r3, #0
 800f816:	d00e      	beq.n	800f836 <_Z41__static_initialization_and_destruction_0ii+0x682>
 800f818:	2301      	movs	r3, #1
 800f81a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800f81e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f822:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800f826:	f107 0272 	add.w	r2, r7, #114	; 0x72
 800f82a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f82e:	4619      	mov	r1, r3
 800f830:	48a1      	ldr	r0, [pc, #644]	; (800fab8 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 800f832:	f7fa fa31 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 800f836:	4ba1      	ldr	r3, [pc, #644]	; (800fabc <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	3301      	adds	r3, #1
 800f83c:	4a9f      	ldr	r2, [pc, #636]	; (800fabc <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800f83e:	6013      	str	r3, [r2, #0]
 800f840:	4b9e      	ldr	r3, [pc, #632]	; (800fabc <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	2b01      	cmp	r3, #1
 800f846:	bf0c      	ite	eq
 800f848:	2301      	moveq	r3, #1
 800f84a:	2300      	movne	r3, #0
 800f84c:	b2db      	uxtb	r3, r3
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00e      	beq.n	800f870 <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 800f852:	2301      	movs	r3, #1
 800f854:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800f858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f85c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800f860:	f107 0276 	add.w	r2, r7, #118	; 0x76
 800f864:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f868:	4619      	mov	r1, r3
 800f86a:	4895      	ldr	r0, [pc, #596]	; (800fac0 <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 800f86c:	f7fa fa14 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 800f870:	4b94      	ldr	r3, [pc, #592]	; (800fac4 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	3301      	adds	r3, #1
 800f876:	4a93      	ldr	r2, [pc, #588]	; (800fac4 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800f878:	6013      	str	r3, [r2, #0]
 800f87a:	4b92      	ldr	r3, [pc, #584]	; (800fac4 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	bf0c      	ite	eq
 800f882:	2301      	moveq	r3, #1
 800f884:	2300      	movne	r3, #0
 800f886:	b2db      	uxtb	r3, r3
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00e      	beq.n	800f8aa <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 800f88c:	2301      	movs	r3, #1
 800f88e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800f892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f896:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800f89a:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 800f89e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4888      	ldr	r0, [pc, #544]	; (800fac8 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 800f8a6:	f7fa f9f7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 800f8aa:	4b88      	ldr	r3, [pc, #544]	; (800facc <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	4a86      	ldr	r2, [pc, #536]	; (800facc <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800f8b2:	6013      	str	r3, [r2, #0]
 800f8b4:	4b85      	ldr	r3, [pc, #532]	; (800facc <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b01      	cmp	r3, #1
 800f8ba:	bf0c      	ite	eq
 800f8bc:	2301      	moveq	r3, #1
 800f8be:	2300      	movne	r3, #0
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d00e      	beq.n	800f8e4 <_Z41__static_initialization_and_destruction_0ii+0x730>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800f8cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8d0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800f8d4:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 800f8d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8dc:	4619      	mov	r1, r3
 800f8de:	487c      	ldr	r0, [pc, #496]	; (800fad0 <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 800f8e0:	f7fa f9da 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 800f8e4:	4b7b      	ldr	r3, [pc, #492]	; (800fad4 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	3301      	adds	r3, #1
 800f8ea:	4a7a      	ldr	r2, [pc, #488]	; (800fad4 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800f8ec:	6013      	str	r3, [r2, #0]
 800f8ee:	4b79      	ldr	r3, [pc, #484]	; (800fad4 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	bf0c      	ite	eq
 800f8f6:	2301      	moveq	r3, #1
 800f8f8:	2300      	movne	r3, #0
 800f8fa:	b2db      	uxtb	r3, r3
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d00e      	beq.n	800f91e <_Z41__static_initialization_and_destruction_0ii+0x76a>
 800f900:	2301      	movs	r3, #1
 800f902:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 800f906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f90a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800f90e:	f107 0282 	add.w	r2, r7, #130	; 0x82
 800f912:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f916:	4619      	mov	r1, r3
 800f918:	486f      	ldr	r0, [pc, #444]	; (800fad8 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 800f91a:	f7fa f9bd 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port C. */
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 800f91e:	4b6f      	ldr	r3, [pc, #444]	; (800fadc <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	3301      	adds	r3, #1
 800f924:	4a6d      	ldr	r2, [pc, #436]	; (800fadc <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	4b6c      	ldr	r3, [pc, #432]	; (800fadc <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	bf0c      	ite	eq
 800f930:	2301      	moveq	r3, #1
 800f932:	2300      	movne	r3, #0
 800f934:	b2db      	uxtb	r3, r3
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00d      	beq.n	800f956 <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 800f93a:	2302      	movs	r3, #2
 800f93c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800f940:	2301      	movs	r3, #1
 800f942:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800f946:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800f94a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f94e:	4619      	mov	r1, r3
 800f950:	4863      	ldr	r0, [pc, #396]	; (800fae0 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800f952:	f7fa f9a1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 800f956:	4b63      	ldr	r3, [pc, #396]	; (800fae4 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	3301      	adds	r3, #1
 800f95c:	4a61      	ldr	r2, [pc, #388]	; (800fae4 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800f95e:	6013      	str	r3, [r2, #0]
 800f960:	4b60      	ldr	r3, [pc, #384]	; (800fae4 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b01      	cmp	r3, #1
 800f966:	bf0c      	ite	eq
 800f968:	2301      	moveq	r3, #1
 800f96a:	2300      	movne	r3, #0
 800f96c:	b2db      	uxtb	r3, r3
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00d      	beq.n	800f98e <_Z41__static_initialization_and_destruction_0ii+0x7da>
 800f972:	2302      	movs	r3, #2
 800f974:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800f978:	2302      	movs	r3, #2
 800f97a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f97e:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800f982:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f986:	4619      	mov	r1, r3
 800f988:	4857      	ldr	r0, [pc, #348]	; (800fae8 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 800f98a:	f7fa f985 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 800f98e:	4b57      	ldr	r3, [pc, #348]	; (800faec <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	3301      	adds	r3, #1
 800f994:	4a55      	ldr	r2, [pc, #340]	; (800faec <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	4b54      	ldr	r3, [pc, #336]	; (800faec <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	2b01      	cmp	r3, #1
 800f99e:	bf0c      	ite	eq
 800f9a0:	2301      	moveq	r3, #1
 800f9a2:	2300      	movne	r3, #0
 800f9a4:	b2db      	uxtb	r3, r3
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00d      	beq.n	800f9c6 <_Z41__static_initialization_and_destruction_0ii+0x812>
 800f9aa:	2302      	movs	r3, #2
 800f9ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800f9b0:	2304      	movs	r3, #4
 800f9b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800f9b6:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 800f9ba:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f9be:	4619      	mov	r1, r3
 800f9c0:	484b      	ldr	r0, [pc, #300]	; (800faf0 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 800f9c2:	f7fa f969 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 800f9c6:	4b4b      	ldr	r3, [pc, #300]	; (800faf4 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	4a49      	ldr	r2, [pc, #292]	; (800faf4 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800f9ce:	6013      	str	r3, [r2, #0]
 800f9d0:	4b48      	ldr	r3, [pc, #288]	; (800faf4 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	bf0c      	ite	eq
 800f9d8:	2301      	moveq	r3, #1
 800f9da:	2300      	movne	r3, #0
 800f9dc:	b2db      	uxtb	r3, r3
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d00d      	beq.n	800f9fe <_Z41__static_initialization_and_destruction_0ii+0x84a>
 800f9e2:	2302      	movs	r3, #2
 800f9e4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800f9e8:	2308      	movs	r3, #8
 800f9ea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800f9ee:	f107 0292 	add.w	r2, r7, #146	; 0x92
 800f9f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	483f      	ldr	r0, [pc, #252]	; (800faf8 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 800f9fa:	f7fa f94d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 800f9fe:	4b3f      	ldr	r3, [pc, #252]	; (800fafc <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	3301      	adds	r3, #1
 800fa04:	4a3d      	ldr	r2, [pc, #244]	; (800fafc <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800fa06:	6013      	str	r3, [r2, #0]
 800fa08:	4b3c      	ldr	r3, [pc, #240]	; (800fafc <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	bf0c      	ite	eq
 800fa10:	2301      	moveq	r3, #1
 800fa12:	2300      	movne	r3, #0
 800fa14:	b2db      	uxtb	r3, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00d      	beq.n	800fa36 <_Z41__static_initialization_and_destruction_0ii+0x882>
 800fa1a:	2302      	movs	r3, #2
 800fa1c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800fa20:	2310      	movs	r3, #16
 800fa22:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800fa26:	f107 0296 	add.w	r2, r7, #150	; 0x96
 800fa2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4833      	ldr	r0, [pc, #204]	; (800fb00 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800fa32:	f7fa f931 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 800fa36:	4b33      	ldr	r3, [pc, #204]	; (800fb04 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	4a31      	ldr	r2, [pc, #196]	; (800fb04 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800fa3e:	6013      	str	r3, [r2, #0]
 800fa40:	4b30      	ldr	r3, [pc, #192]	; (800fb04 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	bf0c      	ite	eq
 800fa48:	2301      	moveq	r3, #1
 800fa4a:	2300      	movne	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d00d      	beq.n	800fa6e <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 800fa52:	2302      	movs	r3, #2
 800fa54:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800fa58:	2320      	movs	r3, #32
 800fa5a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800fa5e:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 800fa62:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fa66:	4619      	mov	r1, r3
 800fa68:	4827      	ldr	r0, [pc, #156]	; (800fb08 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 800fa6a:	f7fa f915 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 800fa6e:	4b27      	ldr	r3, [pc, #156]	; (800fb0c <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	3301      	adds	r3, #1
 800fa74:	4a25      	ldr	r2, [pc, #148]	; (800fb0c <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800fa76:	6013      	str	r3, [r2, #0]
 800fa78:	4b24      	ldr	r3, [pc, #144]	; (800fb0c <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	bf0c      	ite	eq
 800fa80:	2301      	moveq	r3, #1
 800fa82:	2300      	movne	r3, #0
 800fa84:	b2db      	uxtb	r3, r3
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d00d      	beq.n	800faa6 <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 800fa8a:	2302      	movs	r3, #2
 800fa8c:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800fa90:	2340      	movs	r3, #64	; 0x40
 800fa92:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800fa96:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 800fa9a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fa9e:	4619      	mov	r1, r3
 800faa0:	481b      	ldr	r0, [pc, #108]	; (800fb10 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 800faa2:	f7fa f8f9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 800faa6:	4b1b      	ldr	r3, [pc, #108]	; (800fb14 <_Z41__static_initialization_and_destruction_0ii+0x960>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	3301      	adds	r3, #1
 800faac:	e034      	b.n	800fb18 <_Z41__static_initialization_and_destruction_0ii+0x964>
 800faae:	bf00      	nop
 800fab0:	20000958 	.word	0x20000958
 800fab4:	20000cd4 	.word	0x20000cd4
 800fab8:	20000960 	.word	0x20000960
 800fabc:	20000cd8 	.word	0x20000cd8
 800fac0:	20000968 	.word	0x20000968
 800fac4:	20000cdc 	.word	0x20000cdc
 800fac8:	20000970 	.word	0x20000970
 800facc:	20000ce0 	.word	0x20000ce0
 800fad0:	20000978 	.word	0x20000978
 800fad4:	20000ce4 	.word	0x20000ce4
 800fad8:	20000980 	.word	0x20000980
 800fadc:	20000ce8 	.word	0x20000ce8
 800fae0:	20000988 	.word	0x20000988
 800fae4:	20000cec 	.word	0x20000cec
 800fae8:	20000990 	.word	0x20000990
 800faec:	20000cf0 	.word	0x20000cf0
 800faf0:	20000998 	.word	0x20000998
 800faf4:	20000cf4 	.word	0x20000cf4
 800faf8:	200009a0 	.word	0x200009a0
 800fafc:	20000cf8 	.word	0x20000cf8
 800fb00:	200009a8 	.word	0x200009a8
 800fb04:	20000cfc 	.word	0x20000cfc
 800fb08:	200009b0 	.word	0x200009b0
 800fb0c:	20000d00 	.word	0x20000d00
 800fb10:	200009b8 	.word	0x200009b8
 800fb14:	20000d04 	.word	0x20000d04
 800fb18:	4aac      	ldr	r2, [pc, #688]	; (800fdcc <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800fb1a:	6013      	str	r3, [r2, #0]
 800fb1c:	4bab      	ldr	r3, [pc, #684]	; (800fdcc <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	bf0c      	ite	eq
 800fb24:	2301      	moveq	r3, #1
 800fb26:	2300      	movne	r3, #0
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d00d      	beq.n	800fb4a <_Z41__static_initialization_and_destruction_0ii+0x996>
 800fb2e:	2302      	movs	r3, #2
 800fb30:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800fb34:	2380      	movs	r3, #128	; 0x80
 800fb36:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 800fb3a:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 800fb3e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800fb42:	4619      	mov	r1, r3
 800fb44:	48a2      	ldr	r0, [pc, #648]	; (800fdd0 <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 800fb46:	f7fa f8a7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 800fb4a:	4ba2      	ldr	r3, [pc, #648]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3301      	adds	r3, #1
 800fb50:	4aa0      	ldr	r2, [pc, #640]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800fb52:	6013      	str	r3, [r2, #0]
 800fb54:	4b9f      	ldr	r3, [pc, #636]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	bf0c      	ite	eq
 800fb5c:	2301      	moveq	r3, #1
 800fb5e:	2300      	movne	r3, #0
 800fb60:	b2db      	uxtb	r3, r3
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d00e      	beq.n	800fb84 <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 800fb66:	2302      	movs	r3, #2
 800fb68:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800fb6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb70:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800fb74:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 800fb78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	4896      	ldr	r0, [pc, #600]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 800fb80:	f7fa f88a 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 800fb84:	4b95      	ldr	r3, [pc, #596]	; (800fddc <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	3301      	adds	r3, #1
 800fb8a:	4a94      	ldr	r2, [pc, #592]	; (800fddc <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800fb8c:	6013      	str	r3, [r2, #0]
 800fb8e:	4b93      	ldr	r3, [pc, #588]	; (800fddc <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	bf0c      	ite	eq
 800fb96:	2301      	moveq	r3, #1
 800fb98:	2300      	movne	r3, #0
 800fb9a:	b2db      	uxtb	r3, r3
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d00e      	beq.n	800fbbe <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 800fba0:	2302      	movs	r3, #2
 800fba2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800fba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fbaa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800fbae:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 800fbb2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	4889      	ldr	r0, [pc, #548]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 800fbba:	f7fa f86d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 800fbbe:	4b89      	ldr	r3, [pc, #548]	; (800fde4 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	4a87      	ldr	r2, [pc, #540]	; (800fde4 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800fbc6:	6013      	str	r3, [r2, #0]
 800fbc8:	4b86      	ldr	r3, [pc, #536]	; (800fde4 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	bf0c      	ite	eq
 800fbd0:	2301      	moveq	r3, #1
 800fbd2:	2300      	movne	r3, #0
 800fbd4:	b2db      	uxtb	r3, r3
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d00e      	beq.n	800fbf8 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 800fbda:	2302      	movs	r3, #2
 800fbdc:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800fbe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbe4:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800fbe8:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 800fbec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	487d      	ldr	r0, [pc, #500]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 800fbf4:	f7fa f850 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 800fbf8:	4b7c      	ldr	r3, [pc, #496]	; (800fdec <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	3301      	adds	r3, #1
 800fbfe:	4a7b      	ldr	r2, [pc, #492]	; (800fdec <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800fc00:	6013      	str	r3, [r2, #0]
 800fc02:	4b7a      	ldr	r3, [pc, #488]	; (800fdec <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	bf0c      	ite	eq
 800fc0a:	2301      	moveq	r3, #1
 800fc0c:	2300      	movne	r3, #0
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d00e      	beq.n	800fc32 <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 800fc14:	2302      	movs	r3, #2
 800fc16:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800fc1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fc1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800fc22:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 800fc26:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	4870      	ldr	r0, [pc, #448]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 800fc2e:	f7fa f833 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 800fc32:	4b70      	ldr	r3, [pc, #448]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	3301      	adds	r3, #1
 800fc38:	4a6e      	ldr	r2, [pc, #440]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800fc3a:	6013      	str	r3, [r2, #0]
 800fc3c:	4b6d      	ldr	r3, [pc, #436]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	bf0c      	ite	eq
 800fc44:	2301      	moveq	r3, #1
 800fc46:	2300      	movne	r3, #0
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d00e      	beq.n	800fc6c <_Z41__static_initialization_and_destruction_0ii+0xab8>
 800fc4e:	2302      	movs	r3, #2
 800fc50:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fc54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc58:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800fc5c:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 800fc60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fc64:	4619      	mov	r1, r3
 800fc66:	4864      	ldr	r0, [pc, #400]	; (800fdf8 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 800fc68:	f7fa f816 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 800fc6c:	4b63      	ldr	r3, [pc, #396]	; (800fdfc <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	3301      	adds	r3, #1
 800fc72:	4a62      	ldr	r2, [pc, #392]	; (800fdfc <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800fc74:	6013      	str	r3, [r2, #0]
 800fc76:	4b61      	ldr	r3, [pc, #388]	; (800fdfc <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	bf0c      	ite	eq
 800fc7e:	2301      	moveq	r3, #1
 800fc80:	2300      	movne	r3, #0
 800fc82:	b2db      	uxtb	r3, r3
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d00e      	beq.n	800fca6 <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 800fc88:	2302      	movs	r3, #2
 800fc8a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800fc8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc92:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800fc96:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 800fc9a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fc9e:	4619      	mov	r1, r3
 800fca0:	4857      	ldr	r0, [pc, #348]	; (800fe00 <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 800fca2:	f7f9 fff9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 800fca6:	4b57      	ldr	r3, [pc, #348]	; (800fe04 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	4a55      	ldr	r2, [pc, #340]	; (800fe04 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800fcae:	6013      	str	r3, [r2, #0]
 800fcb0:	4b54      	ldr	r3, [pc, #336]	; (800fe04 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b01      	cmp	r3, #1
 800fcb6:	bf0c      	ite	eq
 800fcb8:	2301      	moveq	r3, #1
 800fcba:	2300      	movne	r3, #0
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00e      	beq.n	800fce0 <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 800fcc2:	2302      	movs	r3, #2
 800fcc4:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800fcc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fccc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800fcd0:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800fcd4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fcd8:	4619      	mov	r1, r3
 800fcda:	484b      	ldr	r0, [pc, #300]	; (800fe08 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 800fcdc:	f7f9 ffdc 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 800fce0:	4b4a      	ldr	r3, [pc, #296]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3301      	adds	r3, #1
 800fce6:	4a49      	ldr	r2, [pc, #292]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800fce8:	6013      	str	r3, [r2, #0]
 800fcea:	4b48      	ldr	r3, [pc, #288]	; (800fe0c <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	bf0c      	ite	eq
 800fcf2:	2301      	moveq	r3, #1
 800fcf4:	2300      	movne	r3, #0
 800fcf6:	b2db      	uxtb	r3, r3
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00e      	beq.n	800fd1a <_Z41__static_initialization_and_destruction_0ii+0xb66>
 800fcfc:	2302      	movs	r3, #2
 800fcfe:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800fd02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd06:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800fd0a:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 800fd0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800fd12:	4619      	mov	r1, r3
 800fd14:	483e      	ldr	r0, [pc, #248]	; (800fe10 <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 800fd16:	f7f9 ffbf 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port D. */
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 800fd1a:	4b3e      	ldr	r3, [pc, #248]	; (800fe14 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	3301      	adds	r3, #1
 800fd20:	4a3c      	ldr	r2, [pc, #240]	; (800fe14 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800fd22:	6013      	str	r3, [r2, #0]
 800fd24:	4b3b      	ldr	r3, [pc, #236]	; (800fe14 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	bf0c      	ite	eq
 800fd2c:	2301      	moveq	r3, #1
 800fd2e:	2300      	movne	r3, #0
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d00d      	beq.n	800fd52 <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 800fd36:	2303      	movs	r3, #3
 800fd38:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800fd3c:	2304      	movs	r3, #4
 800fd3e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800fd42:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 800fd46:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	4832      	ldr	r0, [pc, #200]	; (800fe18 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 800fd4e:	f7f9 ffa3 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port H. */
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 800fd52:	4b32      	ldr	r3, [pc, #200]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	3301      	adds	r3, #1
 800fd58:	4a30      	ldr	r2, [pc, #192]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	4b2f      	ldr	r3, [pc, #188]	; (800fe1c <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	bf0c      	ite	eq
 800fd64:	2301      	moveq	r3, #1
 800fd66:	2300      	movne	r3, #0
 800fd68:	b2db      	uxtb	r3, r3
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00d      	beq.n	800fd8a <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 800fd6e:	2307      	movs	r3, #7
 800fd70:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800fd74:	2301      	movs	r3, #1
 800fd76:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800fd7a:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 800fd7e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800fd82:	4619      	mov	r1, r3
 800fd84:	4826      	ldr	r0, [pc, #152]	; (800fe20 <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 800fd86:	f7f9 ff87 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 800fd8a:	4b26      	ldr	r3, [pc, #152]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	3301      	adds	r3, #1
 800fd90:	4a24      	ldr	r2, [pc, #144]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800fd92:	6013      	str	r3, [r2, #0]
 800fd94:	4b23      	ldr	r3, [pc, #140]	; (800fe24 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	2b01      	cmp	r3, #1
 800fd9a:	bf0c      	ite	eq
 800fd9c:	2301      	moveq	r3, #1
 800fd9e:	2300      	movne	r3, #0
 800fda0:	b2db      	uxtb	r3, r3
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d00d      	beq.n	800fdc2 <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800fda6:	2307      	movs	r3, #7
 800fda8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800fdac:	2302      	movs	r3, #2
 800fdae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800fdb2:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 800fdb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fdba:	4619      	mov	r1, r3
 800fdbc:	481a      	ldr	r0, [pc, #104]	; (800fe28 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 800fdbe:	f7f9 ff6b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 800fdc2:	bf00      	nop
 800fdc4:	37d0      	adds	r7, #208	; 0xd0
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	20000d04 	.word	0x20000d04
 800fdd0:	200009c0 	.word	0x200009c0
 800fdd4:	20000d08 	.word	0x20000d08
 800fdd8:	200009c8 	.word	0x200009c8
 800fddc:	20000d0c 	.word	0x20000d0c
 800fde0:	200009d0 	.word	0x200009d0
 800fde4:	20000d10 	.word	0x20000d10
 800fde8:	200009d8 	.word	0x200009d8
 800fdec:	20000d14 	.word	0x20000d14
 800fdf0:	200009e0 	.word	0x200009e0
 800fdf4:	20000d18 	.word	0x20000d18
 800fdf8:	200009e8 	.word	0x200009e8
 800fdfc:	20000d1c 	.word	0x20000d1c
 800fe00:	200009f0 	.word	0x200009f0
 800fe04:	20000d20 	.word	0x20000d20
 800fe08:	200009f8 	.word	0x200009f8
 800fe0c:	20000d24 	.word	0x20000d24
 800fe10:	20000a00 	.word	0x20000a00
 800fe14:	20000d28 	.word	0x20000d28
 800fe18:	20000a08 	.word	0x20000a08
 800fe1c:	20000d2c 	.word	0x20000d2c
 800fe20:	20000a10 	.word	0x20000a10
 800fe24:	20000d30 	.word	0x20000d30
 800fe28:	20000a18 	.word	0x20000a18

0800fe2c <_GLOBAL__sub_I__ZN10SensorTaskC2EPKct10osPrioritybP14os_messageQ_cb>:
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	af00      	add	r7, sp, #0
 800fe30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe34:	2001      	movs	r0, #1
 800fe36:	f7ff f9bd 	bl	800f1b4 <_Z41__static_initialization_and_destruction_0ii>
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <_Z41__static_initialization_and_destruction_0ii>:
		loopback_tcps(0, RX_BUF, 5000);
		// LwIP-Aufgaben bearbeiten
		//sys_check_timeouts();
	}

}
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b0b4      	sub	sp, #208	; 0xd0
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	f040 85fe 	bne.w	8010a4a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fe54:	4293      	cmp	r3, r2
 800fe56:	f040 85f8 	bne.w	8010a4a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 800fe5a:	4ba1      	ldr	r3, [pc, #644]	; (80100e0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	4a9f      	ldr	r2, [pc, #636]	; (80100e0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800fe62:	6013      	str	r3, [r2, #0]
 800fe64:	4b9e      	ldr	r3, [pc, #632]	; (80100e0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	bf0c      	ite	eq
 800fe6c:	2301      	moveq	r3, #1
 800fe6e:	2300      	movne	r3, #0
 800fe70:	b2db      	uxtb	r3, r3
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d00b      	beq.n	800fe8e <_Z41__static_initialization_and_destruction_0ii+0x52>
 800fe76:	2300      	movs	r3, #0
 800fe78:	81bb      	strh	r3, [r7, #12]
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	81fb      	strh	r3, [r7, #14]
 800fe7e:	f107 020e 	add.w	r2, r7, #14
 800fe82:	f107 030c 	add.w	r3, r7, #12
 800fe86:	4619      	mov	r1, r3
 800fe88:	4896      	ldr	r0, [pc, #600]	; (80100e4 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800fe8a:	f7f9 ff05 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 800fe8e:	4b96      	ldr	r3, [pc, #600]	; (80100e8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	3301      	adds	r3, #1
 800fe94:	4a94      	ldr	r2, [pc, #592]	; (80100e8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800fe96:	6013      	str	r3, [r2, #0]
 800fe98:	4b93      	ldr	r3, [pc, #588]	; (80100e8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	bf0c      	ite	eq
 800fea0:	2301      	moveq	r3, #1
 800fea2:	2300      	movne	r3, #0
 800fea4:	b2db      	uxtb	r3, r3
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d00b      	beq.n	800fec2 <_Z41__static_initialization_and_destruction_0ii+0x86>
 800feaa:	2300      	movs	r3, #0
 800feac:	823b      	strh	r3, [r7, #16]
 800feae:	2302      	movs	r3, #2
 800feb0:	827b      	strh	r3, [r7, #18]
 800feb2:	f107 0212 	add.w	r2, r7, #18
 800feb6:	f107 0310 	add.w	r3, r7, #16
 800feba:	4619      	mov	r1, r3
 800febc:	488b      	ldr	r0, [pc, #556]	; (80100ec <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800febe:	f7f9 feeb 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 800fec2:	4b8b      	ldr	r3, [pc, #556]	; (80100f0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	3301      	adds	r3, #1
 800fec8:	4a89      	ldr	r2, [pc, #548]	; (80100f0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800feca:	6013      	str	r3, [r2, #0]
 800fecc:	4b88      	ldr	r3, [pc, #544]	; (80100f0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	bf0c      	ite	eq
 800fed4:	2301      	moveq	r3, #1
 800fed6:	2300      	movne	r3, #0
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d00b      	beq.n	800fef6 <_Z41__static_initialization_and_destruction_0ii+0xba>
 800fede:	2300      	movs	r3, #0
 800fee0:	82bb      	strh	r3, [r7, #20]
 800fee2:	2304      	movs	r3, #4
 800fee4:	82fb      	strh	r3, [r7, #22]
 800fee6:	f107 0216 	add.w	r2, r7, #22
 800feea:	f107 0314 	add.w	r3, r7, #20
 800feee:	4619      	mov	r1, r3
 800fef0:	4880      	ldr	r0, [pc, #512]	; (80100f4 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800fef2:	f7f9 fed1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 800fef6:	4b80      	ldr	r3, [pc, #512]	; (80100f8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	3301      	adds	r3, #1
 800fefc:	4a7e      	ldr	r2, [pc, #504]	; (80100f8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800fefe:	6013      	str	r3, [r2, #0]
 800ff00:	4b7d      	ldr	r3, [pc, #500]	; (80100f8 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	bf0c      	ite	eq
 800ff08:	2301      	moveq	r3, #1
 800ff0a:	2300      	movne	r3, #0
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d00b      	beq.n	800ff2a <_Z41__static_initialization_and_destruction_0ii+0xee>
 800ff12:	2300      	movs	r3, #0
 800ff14:	833b      	strh	r3, [r7, #24]
 800ff16:	2308      	movs	r3, #8
 800ff18:	837b      	strh	r3, [r7, #26]
 800ff1a:	f107 021a 	add.w	r2, r7, #26
 800ff1e:	f107 0318 	add.w	r3, r7, #24
 800ff22:	4619      	mov	r1, r3
 800ff24:	4875      	ldr	r0, [pc, #468]	; (80100fc <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800ff26:	f7f9 feb7 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 800ff2a:	4b75      	ldr	r3, [pc, #468]	; (8010100 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	4a73      	ldr	r2, [pc, #460]	; (8010100 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800ff32:	6013      	str	r3, [r2, #0]
 800ff34:	4b72      	ldr	r3, [pc, #456]	; (8010100 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	bf0c      	ite	eq
 800ff3c:	2301      	moveq	r3, #1
 800ff3e:	2300      	movne	r3, #0
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00b      	beq.n	800ff5e <_Z41__static_initialization_and_destruction_0ii+0x122>
 800ff46:	2300      	movs	r3, #0
 800ff48:	83bb      	strh	r3, [r7, #28]
 800ff4a:	2310      	movs	r3, #16
 800ff4c:	83fb      	strh	r3, [r7, #30]
 800ff4e:	f107 021e 	add.w	r2, r7, #30
 800ff52:	f107 031c 	add.w	r3, r7, #28
 800ff56:	4619      	mov	r1, r3
 800ff58:	486a      	ldr	r0, [pc, #424]	; (8010104 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800ff5a:	f7f9 fe9d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 800ff5e:	4b6a      	ldr	r3, [pc, #424]	; (8010108 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	3301      	adds	r3, #1
 800ff64:	4a68      	ldr	r2, [pc, #416]	; (8010108 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800ff66:	6013      	str	r3, [r2, #0]
 800ff68:	4b67      	ldr	r3, [pc, #412]	; (8010108 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	bf0c      	ite	eq
 800ff70:	2301      	moveq	r3, #1
 800ff72:	2300      	movne	r3, #0
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d00b      	beq.n	800ff92 <_Z41__static_initialization_and_destruction_0ii+0x156>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	843b      	strh	r3, [r7, #32]
 800ff7e:	2320      	movs	r3, #32
 800ff80:	847b      	strh	r3, [r7, #34]	; 0x22
 800ff82:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800ff86:	f107 0320 	add.w	r3, r7, #32
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	485f      	ldr	r0, [pc, #380]	; (801010c <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800ff8e:	f7f9 fe83 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 800ff92:	4b5f      	ldr	r3, [pc, #380]	; (8010110 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3301      	adds	r3, #1
 800ff98:	4a5d      	ldr	r2, [pc, #372]	; (8010110 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	4b5c      	ldr	r3, [pc, #368]	; (8010110 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	bf0c      	ite	eq
 800ffa4:	2301      	moveq	r3, #1
 800ffa6:	2300      	movne	r3, #0
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00b      	beq.n	800ffc6 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800ffae:	2300      	movs	r3, #0
 800ffb0:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ffb2:	2340      	movs	r3, #64	; 0x40
 800ffb4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ffb6:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800ffba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffbe:	4619      	mov	r1, r3
 800ffc0:	4854      	ldr	r0, [pc, #336]	; (8010114 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800ffc2:	f7f9 fe69 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 800ffc6:	4b54      	ldr	r3, [pc, #336]	; (8010118 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	3301      	adds	r3, #1
 800ffcc:	4a52      	ldr	r2, [pc, #328]	; (8010118 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800ffce:	6013      	str	r3, [r2, #0]
 800ffd0:	4b51      	ldr	r3, [pc, #324]	; (8010118 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	2b01      	cmp	r3, #1
 800ffd6:	bf0c      	ite	eq
 800ffd8:	2301      	moveq	r3, #1
 800ffda:	2300      	movne	r3, #0
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d00b      	beq.n	800fffa <_Z41__static_initialization_and_destruction_0ii+0x1be>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	853b      	strh	r3, [r7, #40]	; 0x28
 800ffe6:	2380      	movs	r3, #128	; 0x80
 800ffe8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800ffea:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800ffee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fff2:	4619      	mov	r1, r3
 800fff4:	4849      	ldr	r0, [pc, #292]	; (801011c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800fff6:	f7f9 fe4f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 800fffa:	4b49      	ldr	r3, [pc, #292]	; (8010120 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	3301      	adds	r3, #1
 8010000:	4a47      	ldr	r2, [pc, #284]	; (8010120 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	4b46      	ldr	r3, [pc, #280]	; (8010120 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2b01      	cmp	r3, #1
 801000a:	bf0c      	ite	eq
 801000c:	2301      	moveq	r3, #1
 801000e:	2300      	movne	r3, #0
 8010010:	b2db      	uxtb	r3, r3
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00c      	beq.n	8010030 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 8010016:	2300      	movs	r3, #0
 8010018:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801001a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801001e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010020:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8010024:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010028:	4619      	mov	r1, r3
 801002a:	483e      	ldr	r0, [pc, #248]	; (8010124 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 801002c:	f7f9 fe34 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 8010030:	4b3d      	ldr	r3, [pc, #244]	; (8010128 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3301      	adds	r3, #1
 8010036:	4a3c      	ldr	r2, [pc, #240]	; (8010128 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010038:	6013      	str	r3, [r2, #0]
 801003a:	4b3b      	ldr	r3, [pc, #236]	; (8010128 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2b01      	cmp	r3, #1
 8010040:	bf0c      	ite	eq
 8010042:	2301      	moveq	r3, #1
 8010044:	2300      	movne	r3, #0
 8010046:	b2db      	uxtb	r3, r3
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00c      	beq.n	8010066 <_Z41__static_initialization_and_destruction_0ii+0x22a>
 801004c:	2300      	movs	r3, #0
 801004e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010054:	867b      	strh	r3, [r7, #50]	; 0x32
 8010056:	f107 0232 	add.w	r2, r7, #50	; 0x32
 801005a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801005e:	4619      	mov	r1, r3
 8010060:	4832      	ldr	r0, [pc, #200]	; (801012c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8010062:	f7f9 fe19 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 8010066:	4b32      	ldr	r3, [pc, #200]	; (8010130 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	3301      	adds	r3, #1
 801006c:	4a30      	ldr	r2, [pc, #192]	; (8010130 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 801006e:	6013      	str	r3, [r2, #0]
 8010070:	4b2f      	ldr	r3, [pc, #188]	; (8010130 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	2b01      	cmp	r3, #1
 8010076:	bf0c      	ite	eq
 8010078:	2301      	moveq	r3, #1
 801007a:	2300      	movne	r3, #0
 801007c:	b2db      	uxtb	r3, r3
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00c      	beq.n	801009c <_Z41__static_initialization_and_destruction_0ii+0x260>
 8010082:	2300      	movs	r3, #0
 8010084:	86bb      	strh	r3, [r7, #52]	; 0x34
 8010086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801008a:	86fb      	strh	r3, [r7, #54]	; 0x36
 801008c:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8010090:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010094:	4619      	mov	r1, r3
 8010096:	4827      	ldr	r0, [pc, #156]	; (8010134 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8010098:	f7f9 fdfe 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 801009c:	4b26      	ldr	r3, [pc, #152]	; (8010138 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	3301      	adds	r3, #1
 80100a2:	4a25      	ldr	r2, [pc, #148]	; (8010138 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80100a4:	6013      	str	r3, [r2, #0]
 80100a6:	4b24      	ldr	r3, [pc, #144]	; (8010138 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	bf0c      	ite	eq
 80100ae:	2301      	moveq	r3, #1
 80100b0:	2300      	movne	r3, #0
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00c      	beq.n	80100d2 <_Z41__static_initialization_and_destruction_0ii+0x296>
 80100b8:	2300      	movs	r3, #0
 80100ba:	873b      	strh	r3, [r7, #56]	; 0x38
 80100bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100c0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80100c2:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80100c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80100ca:	4619      	mov	r1, r3
 80100cc:	481b      	ldr	r0, [pc, #108]	; (801013c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80100ce:	f7f9 fde3 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 80100d2:	4b1b      	ldr	r3, [pc, #108]	; (8010140 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	3301      	adds	r3, #1
 80100d8:	4a19      	ldr	r2, [pc, #100]	; (8010140 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 80100da:	6013      	str	r3, [r2, #0]
 80100dc:	e032      	b.n	8010144 <_Z41__static_initialization_and_destruction_0ii+0x308>
 80100de:	bf00      	nop
 80100e0:	20000c70 	.word	0x20000c70
 80100e4:	20000898 	.word	0x20000898
 80100e8:	20000c74 	.word	0x20000c74
 80100ec:	200008a0 	.word	0x200008a0
 80100f0:	20000c78 	.word	0x20000c78
 80100f4:	200008a8 	.word	0x200008a8
 80100f8:	20000c7c 	.word	0x20000c7c
 80100fc:	200008b0 	.word	0x200008b0
 8010100:	20000c80 	.word	0x20000c80
 8010104:	200008b8 	.word	0x200008b8
 8010108:	20000c84 	.word	0x20000c84
 801010c:	200008c0 	.word	0x200008c0
 8010110:	20000c88 	.word	0x20000c88
 8010114:	200008c8 	.word	0x200008c8
 8010118:	20000c8c 	.word	0x20000c8c
 801011c:	200008d0 	.word	0x200008d0
 8010120:	20000c90 	.word	0x20000c90
 8010124:	200008d8 	.word	0x200008d8
 8010128:	20000c94 	.word	0x20000c94
 801012c:	200008e0 	.word	0x200008e0
 8010130:	20000c98 	.word	0x20000c98
 8010134:	200008e8 	.word	0x200008e8
 8010138:	20000c9c 	.word	0x20000c9c
 801013c:	200008f0 	.word	0x200008f0
 8010140:	20000ca0 	.word	0x20000ca0
 8010144:	4bac      	ldr	r3, [pc, #688]	; (80103f8 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b01      	cmp	r3, #1
 801014a:	bf0c      	ite	eq
 801014c:	2301      	moveq	r3, #1
 801014e:	2300      	movne	r3, #0
 8010150:	b2db      	uxtb	r3, r3
 8010152:	2b00      	cmp	r3, #0
 8010154:	d00c      	beq.n	8010170 <_Z41__static_initialization_and_destruction_0ii+0x334>
 8010156:	2300      	movs	r3, #0
 8010158:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801015a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801015e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010160:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 8010164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010168:	4619      	mov	r1, r3
 801016a:	48a4      	ldr	r0, [pc, #656]	; (80103fc <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 801016c:	f7f9 fd94 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 8010170:	4ba3      	ldr	r3, [pc, #652]	; (8010400 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	3301      	adds	r3, #1
 8010176:	4aa2      	ldr	r2, [pc, #648]	; (8010400 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8010178:	6013      	str	r3, [r2, #0]
 801017a:	4ba1      	ldr	r3, [pc, #644]	; (8010400 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	2b01      	cmp	r3, #1
 8010180:	bf0c      	ite	eq
 8010182:	2301      	moveq	r3, #1
 8010184:	2300      	movne	r3, #0
 8010186:	b2db      	uxtb	r3, r3
 8010188:	2b00      	cmp	r3, #0
 801018a:	d00e      	beq.n	80101aa <_Z41__static_initialization_and_destruction_0ii+0x36e>
 801018c:	2300      	movs	r3, #0
 801018e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010192:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010196:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801019a:	f107 0242 	add.w	r2, r7, #66	; 0x42
 801019e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80101a2:	4619      	mov	r1, r3
 80101a4:	4897      	ldr	r0, [pc, #604]	; (8010404 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 80101a6:	f7f9 fd77 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 80101aa:	4b97      	ldr	r3, [pc, #604]	; (8010408 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	3301      	adds	r3, #1
 80101b0:	4a95      	ldr	r2, [pc, #596]	; (8010408 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 80101b2:	6013      	str	r3, [r2, #0]
 80101b4:	4b94      	ldr	r3, [pc, #592]	; (8010408 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	bf0c      	ite	eq
 80101bc:	2301      	moveq	r3, #1
 80101be:	2300      	movne	r3, #0
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00e      	beq.n	80101e4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 80101c6:	2300      	movs	r3, #0
 80101c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80101cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80101d0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80101d4:	f107 0246 	add.w	r2, r7, #70	; 0x46
 80101d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80101dc:	4619      	mov	r1, r3
 80101de:	488b      	ldr	r0, [pc, #556]	; (801040c <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 80101e0:	f7f9 fd5a 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 80101e4:	4b8a      	ldr	r3, [pc, #552]	; (8010410 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3301      	adds	r3, #1
 80101ea:	4a89      	ldr	r2, [pc, #548]	; (8010410 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80101ec:	6013      	str	r3, [r2, #0]
 80101ee:	4b88      	ldr	r3, [pc, #544]	; (8010410 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2b01      	cmp	r3, #1
 80101f4:	bf0c      	ite	eq
 80101f6:	2301      	moveq	r3, #1
 80101f8:	2300      	movne	r3, #0
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00e      	beq.n	801021e <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 8010200:	2300      	movs	r3, #0
 8010202:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801020a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801020e:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 8010212:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010216:	4619      	mov	r1, r3
 8010218:	487e      	ldr	r0, [pc, #504]	; (8010414 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 801021a:	f7f9 fd3d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 801021e:	4b7e      	ldr	r3, [pc, #504]	; (8010418 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	3301      	adds	r3, #1
 8010224:	4a7c      	ldr	r2, [pc, #496]	; (8010418 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8010226:	6013      	str	r3, [r2, #0]
 8010228:	4b7b      	ldr	r3, [pc, #492]	; (8010418 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2b01      	cmp	r3, #1
 801022e:	bf0c      	ite	eq
 8010230:	2301      	moveq	r3, #1
 8010232:	2300      	movne	r3, #0
 8010234:	b2db      	uxtb	r3, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	d00d      	beq.n	8010256 <_Z41__static_initialization_and_destruction_0ii+0x41a>
 801023a:	2301      	movs	r3, #1
 801023c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010240:	2301      	movs	r3, #1
 8010242:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010246:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 801024a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801024e:	4619      	mov	r1, r3
 8010250:	4872      	ldr	r0, [pc, #456]	; (801041c <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8010252:	f7f9 fd21 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 8010256:	4b72      	ldr	r3, [pc, #456]	; (8010420 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	4a70      	ldr	r2, [pc, #448]	; (8010420 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 801025e:	6013      	str	r3, [r2, #0]
 8010260:	4b6f      	ldr	r3, [pc, #444]	; (8010420 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	2b01      	cmp	r3, #1
 8010266:	bf0c      	ite	eq
 8010268:	2301      	moveq	r3, #1
 801026a:	2300      	movne	r3, #0
 801026c:	b2db      	uxtb	r3, r3
 801026e:	2b00      	cmp	r3, #0
 8010270:	d00d      	beq.n	801028e <_Z41__static_initialization_and_destruction_0ii+0x452>
 8010272:	2301      	movs	r3, #1
 8010274:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8010278:	2302      	movs	r3, #2
 801027a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 801027e:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8010282:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010286:	4619      	mov	r1, r3
 8010288:	4866      	ldr	r0, [pc, #408]	; (8010424 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 801028a:	f7f9 fd05 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 801028e:	4b66      	ldr	r3, [pc, #408]	; (8010428 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	3301      	adds	r3, #1
 8010294:	4a64      	ldr	r2, [pc, #400]	; (8010428 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8010296:	6013      	str	r3, [r2, #0]
 8010298:	4b63      	ldr	r3, [pc, #396]	; (8010428 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b01      	cmp	r3, #1
 801029e:	bf0c      	ite	eq
 80102a0:	2301      	moveq	r3, #1
 80102a2:	2300      	movne	r3, #0
 80102a4:	b2db      	uxtb	r3, r3
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00d      	beq.n	80102c6 <_Z41__static_initialization_and_destruction_0ii+0x48a>
 80102aa:	2301      	movs	r3, #1
 80102ac:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80102b0:	2304      	movs	r3, #4
 80102b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80102b6:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80102ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80102be:	4619      	mov	r1, r3
 80102c0:	485a      	ldr	r0, [pc, #360]	; (801042c <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80102c2:	f7f9 fce9 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 80102c6:	4b5a      	ldr	r3, [pc, #360]	; (8010430 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3301      	adds	r3, #1
 80102cc:	4a58      	ldr	r2, [pc, #352]	; (8010430 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80102ce:	6013      	str	r3, [r2, #0]
 80102d0:	4b57      	ldr	r3, [pc, #348]	; (8010430 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2b01      	cmp	r3, #1
 80102d6:	bf0c      	ite	eq
 80102d8:	2301      	moveq	r3, #1
 80102da:	2300      	movne	r3, #0
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00d      	beq.n	80102fe <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 80102e2:	2301      	movs	r3, #1
 80102e4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80102e8:	2308      	movs	r3, #8
 80102ea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80102ee:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80102f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80102f6:	4619      	mov	r1, r3
 80102f8:	484e      	ldr	r0, [pc, #312]	; (8010434 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80102fa:	f7f9 fccd 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 80102fe:	4b4e      	ldr	r3, [pc, #312]	; (8010438 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3301      	adds	r3, #1
 8010304:	4a4c      	ldr	r2, [pc, #304]	; (8010438 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8010306:	6013      	str	r3, [r2, #0]
 8010308:	4b4b      	ldr	r3, [pc, #300]	; (8010438 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b01      	cmp	r3, #1
 801030e:	bf0c      	ite	eq
 8010310:	2301      	moveq	r3, #1
 8010312:	2300      	movne	r3, #0
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d00d      	beq.n	8010336 <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 801031a:	2301      	movs	r3, #1
 801031c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010320:	2310      	movs	r3, #16
 8010322:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8010326:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 801032a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801032e:	4619      	mov	r1, r3
 8010330:	4842      	ldr	r0, [pc, #264]	; (801043c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8010332:	f7f9 fcb1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 8010336:	4b42      	ldr	r3, [pc, #264]	; (8010440 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	3301      	adds	r3, #1
 801033c:	4a40      	ldr	r2, [pc, #256]	; (8010440 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 801033e:	6013      	str	r3, [r2, #0]
 8010340:	4b3f      	ldr	r3, [pc, #252]	; (8010440 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	2b01      	cmp	r3, #1
 8010346:	bf0c      	ite	eq
 8010348:	2301      	moveq	r3, #1
 801034a:	2300      	movne	r3, #0
 801034c:	b2db      	uxtb	r3, r3
 801034e:	2b00      	cmp	r3, #0
 8010350:	d00d      	beq.n	801036e <_Z41__static_initialization_and_destruction_0ii+0x532>
 8010352:	2301      	movs	r3, #1
 8010354:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010358:	2320      	movs	r3, #32
 801035a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801035e:	f107 0262 	add.w	r2, r7, #98	; 0x62
 8010362:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010366:	4619      	mov	r1, r3
 8010368:	4836      	ldr	r0, [pc, #216]	; (8010444 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 801036a:	f7f9 fc95 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 801036e:	4b36      	ldr	r3, [pc, #216]	; (8010448 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	3301      	adds	r3, #1
 8010374:	4a34      	ldr	r2, [pc, #208]	; (8010448 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8010376:	6013      	str	r3, [r2, #0]
 8010378:	4b33      	ldr	r3, [pc, #204]	; (8010448 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	2b01      	cmp	r3, #1
 801037e:	bf0c      	ite	eq
 8010380:	2301      	moveq	r3, #1
 8010382:	2300      	movne	r3, #0
 8010384:	b2db      	uxtb	r3, r3
 8010386:	2b00      	cmp	r3, #0
 8010388:	d00e      	beq.n	80103a8 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 801038a:	2301      	movs	r3, #1
 801038c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8010390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010394:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8010398:	f107 0266 	add.w	r2, r7, #102	; 0x66
 801039c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80103a0:	4619      	mov	r1, r3
 80103a2:	482a      	ldr	r0, [pc, #168]	; (801044c <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80103a4:	f7f9 fc78 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 80103a8:	4b29      	ldr	r3, [pc, #164]	; (8010450 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	3301      	adds	r3, #1
 80103ae:	4a28      	ldr	r2, [pc, #160]	; (8010450 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80103b0:	6013      	str	r3, [r2, #0]
 80103b2:	4b27      	ldr	r3, [pc, #156]	; (8010450 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	2b01      	cmp	r3, #1
 80103b8:	bf0c      	ite	eq
 80103ba:	2301      	moveq	r3, #1
 80103bc:	2300      	movne	r3, #0
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d00e      	beq.n	80103e2 <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 80103c4:	2301      	movs	r3, #1
 80103c6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80103ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103ce:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80103d2:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 80103d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80103da:	4619      	mov	r1, r3
 80103dc:	481d      	ldr	r0, [pc, #116]	; (8010454 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 80103de:	f7f9 fc5b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 80103e2:	4b1d      	ldr	r3, [pc, #116]	; (8010458 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	3301      	adds	r3, #1
 80103e8:	4a1b      	ldr	r2, [pc, #108]	; (8010458 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80103ea:	6013      	str	r3, [r2, #0]
 80103ec:	4b1a      	ldr	r3, [pc, #104]	; (8010458 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	bf08      	it	eq
 80103f4:	2301      	moveq	r3, #1
 80103f6:	e031      	b.n	801045c <_Z41__static_initialization_and_destruction_0ii+0x620>
 80103f8:	20000ca0 	.word	0x20000ca0
 80103fc:	200008f8 	.word	0x200008f8
 8010400:	20000ca4 	.word	0x20000ca4
 8010404:	20000900 	.word	0x20000900
 8010408:	20000ca8 	.word	0x20000ca8
 801040c:	20000908 	.word	0x20000908
 8010410:	20000cac 	.word	0x20000cac
 8010414:	20000910 	.word	0x20000910
 8010418:	20000cb0 	.word	0x20000cb0
 801041c:	20000918 	.word	0x20000918
 8010420:	20000cb4 	.word	0x20000cb4
 8010424:	20000920 	.word	0x20000920
 8010428:	20000cb8 	.word	0x20000cb8
 801042c:	20000928 	.word	0x20000928
 8010430:	20000cbc 	.word	0x20000cbc
 8010434:	20000930 	.word	0x20000930
 8010438:	20000cc0 	.word	0x20000cc0
 801043c:	20000938 	.word	0x20000938
 8010440:	20000cc4 	.word	0x20000cc4
 8010444:	20000940 	.word	0x20000940
 8010448:	20000cc8 	.word	0x20000cc8
 801044c:	20000948 	.word	0x20000948
 8010450:	20000ccc 	.word	0x20000ccc
 8010454:	20000950 	.word	0x20000950
 8010458:	20000cd0 	.word	0x20000cd0
 801045c:	bf18      	it	ne
 801045e:	2300      	movne	r3, #0
 8010460:	b2db      	uxtb	r3, r3
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00e      	beq.n	8010484 <_Z41__static_initialization_and_destruction_0ii+0x648>
 8010466:	2301      	movs	r3, #1
 8010468:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801046c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010470:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8010474:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8010478:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801047c:	4619      	mov	r1, r3
 801047e:	48ae      	ldr	r0, [pc, #696]	; (8010738 <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 8010480:	f7f9 fc0a 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 8010484:	4bad      	ldr	r3, [pc, #692]	; (801073c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3301      	adds	r3, #1
 801048a:	4aac      	ldr	r2, [pc, #688]	; (801073c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 801048c:	6013      	str	r3, [r2, #0]
 801048e:	4bab      	ldr	r3, [pc, #684]	; (801073c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	2b01      	cmp	r3, #1
 8010494:	bf0c      	ite	eq
 8010496:	2301      	moveq	r3, #1
 8010498:	2300      	movne	r3, #0
 801049a:	b2db      	uxtb	r3, r3
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00e      	beq.n	80104be <_Z41__static_initialization_and_destruction_0ii+0x682>
 80104a0:	2301      	movs	r3, #1
 80104a2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80104a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104aa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80104ae:	f107 0272 	add.w	r2, r7, #114	; 0x72
 80104b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80104b6:	4619      	mov	r1, r3
 80104b8:	48a1      	ldr	r0, [pc, #644]	; (8010740 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 80104ba:	f7f9 fbed 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 80104be:	4ba1      	ldr	r3, [pc, #644]	; (8010744 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	3301      	adds	r3, #1
 80104c4:	4a9f      	ldr	r2, [pc, #636]	; (8010744 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 80104c6:	6013      	str	r3, [r2, #0]
 80104c8:	4b9e      	ldr	r3, [pc, #632]	; (8010744 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	bf0c      	ite	eq
 80104d0:	2301      	moveq	r3, #1
 80104d2:	2300      	movne	r3, #0
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d00e      	beq.n	80104f8 <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 80104da:	2301      	movs	r3, #1
 80104dc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80104e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80104e8:	f107 0276 	add.w	r2, r7, #118	; 0x76
 80104ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80104f0:	4619      	mov	r1, r3
 80104f2:	4895      	ldr	r0, [pc, #596]	; (8010748 <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 80104f4:	f7f9 fbd0 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 80104f8:	4b94      	ldr	r3, [pc, #592]	; (801074c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	3301      	adds	r3, #1
 80104fe:	4a93      	ldr	r2, [pc, #588]	; (801074c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 8010500:	6013      	str	r3, [r2, #0]
 8010502:	4b92      	ldr	r3, [pc, #584]	; (801074c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	2b01      	cmp	r3, #1
 8010508:	bf0c      	ite	eq
 801050a:	2301      	moveq	r3, #1
 801050c:	2300      	movne	r3, #0
 801050e:	b2db      	uxtb	r3, r3
 8010510:	2b00      	cmp	r3, #0
 8010512:	d00e      	beq.n	8010532 <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 8010514:	2301      	movs	r3, #1
 8010516:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801051a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801051e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8010522:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 8010526:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801052a:	4619      	mov	r1, r3
 801052c:	4888      	ldr	r0, [pc, #544]	; (8010750 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 801052e:	f7f9 fbb3 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 8010532:	4b88      	ldr	r3, [pc, #544]	; (8010754 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	3301      	adds	r3, #1
 8010538:	4a86      	ldr	r2, [pc, #536]	; (8010754 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 801053a:	6013      	str	r3, [r2, #0]
 801053c:	4b85      	ldr	r3, [pc, #532]	; (8010754 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b01      	cmp	r3, #1
 8010542:	bf0c      	ite	eq
 8010544:	2301      	moveq	r3, #1
 8010546:	2300      	movne	r3, #0
 8010548:	b2db      	uxtb	r3, r3
 801054a:	2b00      	cmp	r3, #0
 801054c:	d00e      	beq.n	801056c <_Z41__static_initialization_and_destruction_0ii+0x730>
 801054e:	2301      	movs	r3, #1
 8010550:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8010554:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010558:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801055c:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 8010560:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010564:	4619      	mov	r1, r3
 8010566:	487c      	ldr	r0, [pc, #496]	; (8010758 <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 8010568:	f7f9 fb96 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 801056c:	4b7b      	ldr	r3, [pc, #492]	; (801075c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	3301      	adds	r3, #1
 8010572:	4a7a      	ldr	r2, [pc, #488]	; (801075c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	4b79      	ldr	r3, [pc, #484]	; (801075c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	2b01      	cmp	r3, #1
 801057c:	bf0c      	ite	eq
 801057e:	2301      	moveq	r3, #1
 8010580:	2300      	movne	r3, #0
 8010582:	b2db      	uxtb	r3, r3
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00e      	beq.n	80105a6 <_Z41__static_initialization_and_destruction_0ii+0x76a>
 8010588:	2301      	movs	r3, #1
 801058a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 801058e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010592:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8010596:	f107 0282 	add.w	r2, r7, #130	; 0x82
 801059a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801059e:	4619      	mov	r1, r3
 80105a0:	486f      	ldr	r0, [pc, #444]	; (8010760 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 80105a2:	f7f9 fb79 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 80105a6:	4b6f      	ldr	r3, [pc, #444]	; (8010764 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	3301      	adds	r3, #1
 80105ac:	4a6d      	ldr	r2, [pc, #436]	; (8010764 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80105ae:	6013      	str	r3, [r2, #0]
 80105b0:	4b6c      	ldr	r3, [pc, #432]	; (8010764 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	bf0c      	ite	eq
 80105b8:	2301      	moveq	r3, #1
 80105ba:	2300      	movne	r3, #0
 80105bc:	b2db      	uxtb	r3, r3
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d00d      	beq.n	80105de <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 80105c2:	2302      	movs	r3, #2
 80105c4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80105c8:	2301      	movs	r3, #1
 80105ca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80105ce:	f107 0286 	add.w	r2, r7, #134	; 0x86
 80105d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80105d6:	4619      	mov	r1, r3
 80105d8:	4863      	ldr	r0, [pc, #396]	; (8010768 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 80105da:	f7f9 fb5d 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 80105de:	4b63      	ldr	r3, [pc, #396]	; (801076c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	3301      	adds	r3, #1
 80105e4:	4a61      	ldr	r2, [pc, #388]	; (801076c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	4b60      	ldr	r3, [pc, #384]	; (801076c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	bf0c      	ite	eq
 80105f0:	2301      	moveq	r3, #1
 80105f2:	2300      	movne	r3, #0
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d00d      	beq.n	8010616 <_Z41__static_initialization_and_destruction_0ii+0x7da>
 80105fa:	2302      	movs	r3, #2
 80105fc:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8010600:	2302      	movs	r3, #2
 8010602:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010606:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 801060a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801060e:	4619      	mov	r1, r3
 8010610:	4857      	ldr	r0, [pc, #348]	; (8010770 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 8010612:	f7f9 fb41 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 8010616:	4b57      	ldr	r3, [pc, #348]	; (8010774 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	3301      	adds	r3, #1
 801061c:	4a55      	ldr	r2, [pc, #340]	; (8010774 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 801061e:	6013      	str	r3, [r2, #0]
 8010620:	4b54      	ldr	r3, [pc, #336]	; (8010774 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	2b01      	cmp	r3, #1
 8010626:	bf0c      	ite	eq
 8010628:	2301      	moveq	r3, #1
 801062a:	2300      	movne	r3, #0
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d00d      	beq.n	801064e <_Z41__static_initialization_and_destruction_0ii+0x812>
 8010632:	2302      	movs	r3, #2
 8010634:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8010638:	2304      	movs	r3, #4
 801063a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801063e:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 8010642:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010646:	4619      	mov	r1, r3
 8010648:	484b      	ldr	r0, [pc, #300]	; (8010778 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 801064a:	f7f9 fb25 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 801064e:	4b4b      	ldr	r3, [pc, #300]	; (801077c <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3301      	adds	r3, #1
 8010654:	4a49      	ldr	r2, [pc, #292]	; (801077c <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8010656:	6013      	str	r3, [r2, #0]
 8010658:	4b48      	ldr	r3, [pc, #288]	; (801077c <_Z41__static_initialization_and_destruction_0ii+0x940>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b01      	cmp	r3, #1
 801065e:	bf0c      	ite	eq
 8010660:	2301      	moveq	r3, #1
 8010662:	2300      	movne	r3, #0
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00d      	beq.n	8010686 <_Z41__static_initialization_and_destruction_0ii+0x84a>
 801066a:	2302      	movs	r3, #2
 801066c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8010670:	2308      	movs	r3, #8
 8010672:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8010676:	f107 0292 	add.w	r2, r7, #146	; 0x92
 801067a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801067e:	4619      	mov	r1, r3
 8010680:	483f      	ldr	r0, [pc, #252]	; (8010780 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 8010682:	f7f9 fb09 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 8010686:	4b3f      	ldr	r3, [pc, #252]	; (8010784 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3301      	adds	r3, #1
 801068c:	4a3d      	ldr	r2, [pc, #244]	; (8010784 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	4b3c      	ldr	r3, [pc, #240]	; (8010784 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b01      	cmp	r3, #1
 8010696:	bf0c      	ite	eq
 8010698:	2301      	moveq	r3, #1
 801069a:	2300      	movne	r3, #0
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00d      	beq.n	80106be <_Z41__static_initialization_and_destruction_0ii+0x882>
 80106a2:	2302      	movs	r3, #2
 80106a4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80106a8:	2310      	movs	r3, #16
 80106aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80106ae:	f107 0296 	add.w	r2, r7, #150	; 0x96
 80106b2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80106b6:	4619      	mov	r1, r3
 80106b8:	4833      	ldr	r0, [pc, #204]	; (8010788 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 80106ba:	f7f9 faed 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 80106be:	4b33      	ldr	r3, [pc, #204]	; (801078c <_Z41__static_initialization_and_destruction_0ii+0x950>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3301      	adds	r3, #1
 80106c4:	4a31      	ldr	r2, [pc, #196]	; (801078c <_Z41__static_initialization_and_destruction_0ii+0x950>)
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	4b30      	ldr	r3, [pc, #192]	; (801078c <_Z41__static_initialization_and_destruction_0ii+0x950>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	bf0c      	ite	eq
 80106d0:	2301      	moveq	r3, #1
 80106d2:	2300      	movne	r3, #0
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00d      	beq.n	80106f6 <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 80106da:	2302      	movs	r3, #2
 80106dc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 80106e0:	2320      	movs	r3, #32
 80106e2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80106e6:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 80106ea:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80106ee:	4619      	mov	r1, r3
 80106f0:	4827      	ldr	r0, [pc, #156]	; (8010790 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 80106f2:	f7f9 fad1 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 80106f6:	4b27      	ldr	r3, [pc, #156]	; (8010794 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	3301      	adds	r3, #1
 80106fc:	4a25      	ldr	r2, [pc, #148]	; (8010794 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	4b24      	ldr	r3, [pc, #144]	; (8010794 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b01      	cmp	r3, #1
 8010706:	bf0c      	ite	eq
 8010708:	2301      	moveq	r3, #1
 801070a:	2300      	movne	r3, #0
 801070c:	b2db      	uxtb	r3, r3
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00d      	beq.n	801072e <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 8010712:	2302      	movs	r3, #2
 8010714:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8010718:	2340      	movs	r3, #64	; 0x40
 801071a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 801071e:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 8010722:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010726:	4619      	mov	r1, r3
 8010728:	481b      	ldr	r0, [pc, #108]	; (8010798 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 801072a:	f7f9 fab5 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 801072e:	4b1b      	ldr	r3, [pc, #108]	; (801079c <_Z41__static_initialization_and_destruction_0ii+0x960>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	e034      	b.n	80107a0 <_Z41__static_initialization_and_destruction_0ii+0x964>
 8010736:	bf00      	nop
 8010738:	20000958 	.word	0x20000958
 801073c:	20000cd4 	.word	0x20000cd4
 8010740:	20000960 	.word	0x20000960
 8010744:	20000cd8 	.word	0x20000cd8
 8010748:	20000968 	.word	0x20000968
 801074c:	20000cdc 	.word	0x20000cdc
 8010750:	20000970 	.word	0x20000970
 8010754:	20000ce0 	.word	0x20000ce0
 8010758:	20000978 	.word	0x20000978
 801075c:	20000ce4 	.word	0x20000ce4
 8010760:	20000980 	.word	0x20000980
 8010764:	20000ce8 	.word	0x20000ce8
 8010768:	20000988 	.word	0x20000988
 801076c:	20000cec 	.word	0x20000cec
 8010770:	20000990 	.word	0x20000990
 8010774:	20000cf0 	.word	0x20000cf0
 8010778:	20000998 	.word	0x20000998
 801077c:	20000cf4 	.word	0x20000cf4
 8010780:	200009a0 	.word	0x200009a0
 8010784:	20000cf8 	.word	0x20000cf8
 8010788:	200009a8 	.word	0x200009a8
 801078c:	20000cfc 	.word	0x20000cfc
 8010790:	200009b0 	.word	0x200009b0
 8010794:	20000d00 	.word	0x20000d00
 8010798:	200009b8 	.word	0x200009b8
 801079c:	20000d04 	.word	0x20000d04
 80107a0:	4aac      	ldr	r2, [pc, #688]	; (8010a54 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 80107a2:	6013      	str	r3, [r2, #0]
 80107a4:	4bab      	ldr	r3, [pc, #684]	; (8010a54 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	2b01      	cmp	r3, #1
 80107aa:	bf0c      	ite	eq
 80107ac:	2301      	moveq	r3, #1
 80107ae:	2300      	movne	r3, #0
 80107b0:	b2db      	uxtb	r3, r3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00d      	beq.n	80107d2 <_Z41__static_initialization_and_destruction_0ii+0x996>
 80107b6:	2302      	movs	r3, #2
 80107b8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 80107bc:	2380      	movs	r3, #128	; 0x80
 80107be:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 80107c2:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 80107c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80107ca:	4619      	mov	r1, r3
 80107cc:	48a2      	ldr	r0, [pc, #648]	; (8010a58 <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 80107ce:	f7f9 fa63 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 80107d2:	4ba2      	ldr	r3, [pc, #648]	; (8010a5c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	3301      	adds	r3, #1
 80107d8:	4aa0      	ldr	r2, [pc, #640]	; (8010a5c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 80107da:	6013      	str	r3, [r2, #0]
 80107dc:	4b9f      	ldr	r3, [pc, #636]	; (8010a5c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	bf0c      	ite	eq
 80107e4:	2301      	moveq	r3, #1
 80107e6:	2300      	movne	r3, #0
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00e      	beq.n	801080c <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 80107ee:	2302      	movs	r3, #2
 80107f0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80107f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107f8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80107fc:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 8010800:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010804:	4619      	mov	r1, r3
 8010806:	4896      	ldr	r0, [pc, #600]	; (8010a60 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 8010808:	f7f9 fa46 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 801080c:	4b95      	ldr	r3, [pc, #596]	; (8010a64 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	3301      	adds	r3, #1
 8010812:	4a94      	ldr	r2, [pc, #592]	; (8010a64 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8010814:	6013      	str	r3, [r2, #0]
 8010816:	4b93      	ldr	r3, [pc, #588]	; (8010a64 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	2b01      	cmp	r3, #1
 801081c:	bf0c      	ite	eq
 801081e:	2301      	moveq	r3, #1
 8010820:	2300      	movne	r3, #0
 8010822:	b2db      	uxtb	r3, r3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d00e      	beq.n	8010846 <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 8010828:	2302      	movs	r3, #2
 801082a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 801082e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010832:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8010836:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 801083a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801083e:	4619      	mov	r1, r3
 8010840:	4889      	ldr	r0, [pc, #548]	; (8010a68 <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 8010842:	f7f9 fa29 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 8010846:	4b89      	ldr	r3, [pc, #548]	; (8010a6c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	3301      	adds	r3, #1
 801084c:	4a87      	ldr	r2, [pc, #540]	; (8010a6c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 801084e:	6013      	str	r3, [r2, #0]
 8010850:	4b86      	ldr	r3, [pc, #536]	; (8010a6c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	2b01      	cmp	r3, #1
 8010856:	bf0c      	ite	eq
 8010858:	2301      	moveq	r3, #1
 801085a:	2300      	movne	r3, #0
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00e      	beq.n	8010880 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 8010862:	2302      	movs	r3, #2
 8010864:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8010868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801086c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8010870:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 8010874:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010878:	4619      	mov	r1, r3
 801087a:	487d      	ldr	r0, [pc, #500]	; (8010a70 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 801087c:	f7f9 fa0c 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 8010880:	4b7c      	ldr	r3, [pc, #496]	; (8010a74 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	3301      	adds	r3, #1
 8010886:	4a7b      	ldr	r2, [pc, #492]	; (8010a74 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8010888:	6013      	str	r3, [r2, #0]
 801088a:	4b7a      	ldr	r3, [pc, #488]	; (8010a74 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b01      	cmp	r3, #1
 8010890:	bf0c      	ite	eq
 8010892:	2301      	moveq	r3, #1
 8010894:	2300      	movne	r3, #0
 8010896:	b2db      	uxtb	r3, r3
 8010898:	2b00      	cmp	r3, #0
 801089a:	d00e      	beq.n	80108ba <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 801089c:	2302      	movs	r3, #2
 801089e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80108a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108a6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80108aa:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 80108ae:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80108b2:	4619      	mov	r1, r3
 80108b4:	4870      	ldr	r0, [pc, #448]	; (8010a78 <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 80108b6:	f7f9 f9ef 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 80108ba:	4b70      	ldr	r3, [pc, #448]	; (8010a7c <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	3301      	adds	r3, #1
 80108c0:	4a6e      	ldr	r2, [pc, #440]	; (8010a7c <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 80108c2:	6013      	str	r3, [r2, #0]
 80108c4:	4b6d      	ldr	r3, [pc, #436]	; (8010a7c <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	bf0c      	ite	eq
 80108cc:	2301      	moveq	r3, #1
 80108ce:	2300      	movne	r3, #0
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00e      	beq.n	80108f4 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 80108d6:	2302      	movs	r3, #2
 80108d8:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80108dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80108e0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80108e4:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 80108e8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80108ec:	4619      	mov	r1, r3
 80108ee:	4864      	ldr	r0, [pc, #400]	; (8010a80 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 80108f0:	f7f9 f9d2 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 80108f4:	4b63      	ldr	r3, [pc, #396]	; (8010a84 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3301      	adds	r3, #1
 80108fa:	4a62      	ldr	r2, [pc, #392]	; (8010a84 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 80108fc:	6013      	str	r3, [r2, #0]
 80108fe:	4b61      	ldr	r3, [pc, #388]	; (8010a84 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	2b01      	cmp	r3, #1
 8010904:	bf0c      	ite	eq
 8010906:	2301      	moveq	r3, #1
 8010908:	2300      	movne	r3, #0
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00e      	beq.n	801092e <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 8010910:	2302      	movs	r3, #2
 8010912:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8010916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801091a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 801091e:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 8010922:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010926:	4619      	mov	r1, r3
 8010928:	4857      	ldr	r0, [pc, #348]	; (8010a88 <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 801092a:	f7f9 f9b5 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 801092e:	4b57      	ldr	r3, [pc, #348]	; (8010a8c <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	3301      	adds	r3, #1
 8010934:	4a55      	ldr	r2, [pc, #340]	; (8010a8c <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8010936:	6013      	str	r3, [r2, #0]
 8010938:	4b54      	ldr	r3, [pc, #336]	; (8010a8c <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b01      	cmp	r3, #1
 801093e:	bf0c      	ite	eq
 8010940:	2301      	moveq	r3, #1
 8010942:	2300      	movne	r3, #0
 8010944:	b2db      	uxtb	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d00e      	beq.n	8010968 <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 801094a:	2302      	movs	r3, #2
 801094c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8010950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010954:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8010958:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 801095c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010960:	4619      	mov	r1, r3
 8010962:	484b      	ldr	r0, [pc, #300]	; (8010a90 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 8010964:	f7f9 f998 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 8010968:	4b4a      	ldr	r3, [pc, #296]	; (8010a94 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	3301      	adds	r3, #1
 801096e:	4a49      	ldr	r2, [pc, #292]	; (8010a94 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8010970:	6013      	str	r3, [r2, #0]
 8010972:	4b48      	ldr	r3, [pc, #288]	; (8010a94 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b01      	cmp	r3, #1
 8010978:	bf0c      	ite	eq
 801097a:	2301      	moveq	r3, #1
 801097c:	2300      	movne	r3, #0
 801097e:	b2db      	uxtb	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	d00e      	beq.n	80109a2 <_Z41__static_initialization_and_destruction_0ii+0xb66>
 8010984:	2302      	movs	r3, #2
 8010986:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 801098a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801098e:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8010992:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 8010996:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 801099a:	4619      	mov	r1, r3
 801099c:	483e      	ldr	r0, [pc, #248]	; (8010a98 <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 801099e:	f7f9 f97b 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 80109a2:	4b3e      	ldr	r3, [pc, #248]	; (8010a9c <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	3301      	adds	r3, #1
 80109a8:	4a3c      	ldr	r2, [pc, #240]	; (8010a9c <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 80109aa:	6013      	str	r3, [r2, #0]
 80109ac:	4b3b      	ldr	r3, [pc, #236]	; (8010a9c <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	bf0c      	ite	eq
 80109b4:	2301      	moveq	r3, #1
 80109b6:	2300      	movne	r3, #0
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d00d      	beq.n	80109da <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 80109be:	2303      	movs	r3, #3
 80109c0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 80109c4:	2304      	movs	r3, #4
 80109c6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 80109ca:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 80109ce:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80109d2:	4619      	mov	r1, r3
 80109d4:	4832      	ldr	r0, [pc, #200]	; (8010aa0 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 80109d6:	f7f9 f95f 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 80109da:	4b32      	ldr	r3, [pc, #200]	; (8010aa4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	3301      	adds	r3, #1
 80109e0:	4a30      	ldr	r2, [pc, #192]	; (8010aa4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 80109e2:	6013      	str	r3, [r2, #0]
 80109e4:	4b2f      	ldr	r3, [pc, #188]	; (8010aa4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	bf0c      	ite	eq
 80109ec:	2301      	moveq	r3, #1
 80109ee:	2300      	movne	r3, #0
 80109f0:	b2db      	uxtb	r3, r3
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00d      	beq.n	8010a12 <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 80109f6:	2307      	movs	r3, #7
 80109f8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 80109fc:	2301      	movs	r3, #1
 80109fe:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8010a02:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8010a06:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	4826      	ldr	r0, [pc, #152]	; (8010aa8 <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 8010a0e:	f7f9 f943 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 8010a12:	4b26      	ldr	r3, [pc, #152]	; (8010aac <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	3301      	adds	r3, #1
 8010a18:	4a24      	ldr	r2, [pc, #144]	; (8010aac <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8010a1a:	6013      	str	r3, [r2, #0]
 8010a1c:	4b23      	ldr	r3, [pc, #140]	; (8010aac <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	bf0c      	ite	eq
 8010a24:	2301      	moveq	r3, #1
 8010a26:	2300      	movne	r3, #0
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d00d      	beq.n	8010a4a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 8010a2e:	2307      	movs	r3, #7
 8010a30:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8010a34:	2302      	movs	r3, #2
 8010a36:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8010a3a:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 8010a3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010a42:	4619      	mov	r1, r3
 8010a44:	481a      	ldr	r0, [pc, #104]	; (8010ab0 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 8010a46:	f7f9 f927 	bl	8009c98 <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 8010a4a:	bf00      	nop
 8010a4c:	37d0      	adds	r7, #208	; 0xd0
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}
 8010a52:	bf00      	nop
 8010a54:	20000d04 	.word	0x20000d04
 8010a58:	200009c0 	.word	0x200009c0
 8010a5c:	20000d08 	.word	0x20000d08
 8010a60:	200009c8 	.word	0x200009c8
 8010a64:	20000d0c 	.word	0x20000d0c
 8010a68:	200009d0 	.word	0x200009d0
 8010a6c:	20000d10 	.word	0x20000d10
 8010a70:	200009d8 	.word	0x200009d8
 8010a74:	20000d14 	.word	0x20000d14
 8010a78:	200009e0 	.word	0x200009e0
 8010a7c:	20000d18 	.word	0x20000d18
 8010a80:	200009e8 	.word	0x200009e8
 8010a84:	20000d1c 	.word	0x20000d1c
 8010a88:	200009f0 	.word	0x200009f0
 8010a8c:	20000d20 	.word	0x20000d20
 8010a90:	200009f8 	.word	0x200009f8
 8010a94:	20000d24 	.word	0x20000d24
 8010a98:	20000a00 	.word	0x20000a00
 8010a9c:	20000d28 	.word	0x20000d28
 8010aa0:	20000a08 	.word	0x20000a08
 8010aa4:	20000d2c 	.word	0x20000d2c
 8010aa8:	20000a10 	.word	0x20000a10
 8010aac:	20000d30 	.word	0x20000d30
 8010ab0:	20000a18 	.word	0x20000a18

08010ab4 <_GLOBAL__sub_I_socknumlist>:
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010abc:	2001      	movs	r0, #1
 8010abe:	f7ff f9bd 	bl	800fe3c <_Z41__static_initialization_and_destruction_0ii>
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <_ZdlPvj>:
 8010ac4:	f000 b821 	b.w	8010b0a <_ZdlPv>

08010ac8 <_ZdaPv>:
 8010ac8:	f000 b81f 	b.w	8010b0a <_ZdlPv>

08010acc <__cxa_guard_acquire>:
 8010acc:	6803      	ldr	r3, [r0, #0]
 8010ace:	07db      	lsls	r3, r3, #31
 8010ad0:	d406      	bmi.n	8010ae0 <__cxa_guard_acquire+0x14>
 8010ad2:	7843      	ldrb	r3, [r0, #1]
 8010ad4:	b103      	cbz	r3, 8010ad8 <__cxa_guard_acquire+0xc>
 8010ad6:	deff      	udf	#255	; 0xff
 8010ad8:	2301      	movs	r3, #1
 8010ada:	7043      	strb	r3, [r0, #1]
 8010adc:	4618      	mov	r0, r3
 8010ade:	4770      	bx	lr
 8010ae0:	2000      	movs	r0, #0
 8010ae2:	4770      	bx	lr

08010ae4 <__cxa_guard_release>:
 8010ae4:	2301      	movs	r3, #1
 8010ae6:	6003      	str	r3, [r0, #0]
 8010ae8:	4770      	bx	lr
	...

08010aec <_ZSt15get_new_handlerv>:
 8010aec:	4b02      	ldr	r3, [pc, #8]	; (8010af8 <_ZSt15get_new_handlerv+0xc>)
 8010aee:	6818      	ldr	r0, [r3, #0]
 8010af0:	f3bf 8f5b 	dmb	ish
 8010af4:	4770      	bx	lr
 8010af6:	bf00      	nop
 8010af8:	20001198 	.word	0x20001198

08010afc <_Znaj>:
 8010afc:	f000 b819 	b.w	8010b32 <_Znwj>

08010b00 <_ZnajRKSt9nothrow_t>:
 8010b00:	f7ff bffc 	b.w	8010afc <_Znaj>

08010b04 <__cxa_pure_virtual>:
 8010b04:	b508      	push	{r3, lr}
 8010b06:	f000 f80f 	bl	8010b28 <_ZSt9terminatev>

08010b0a <_ZdlPv>:
 8010b0a:	f000 b8e7 	b.w	8010cdc <free>

08010b0e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8010b0e:	b508      	push	{r3, lr}
 8010b10:	4780      	blx	r0
 8010b12:	f000 f81f 	bl	8010b54 <abort>
	...

08010b18 <_ZSt13get_terminatev>:
 8010b18:	4b02      	ldr	r3, [pc, #8]	; (8010b24 <_ZSt13get_terminatev+0xc>)
 8010b1a:	6818      	ldr	r0, [r3, #0]
 8010b1c:	f3bf 8f5b 	dmb	ish
 8010b20:	4770      	bx	lr
 8010b22:	bf00      	nop
 8010b24:	2000003c 	.word	0x2000003c

08010b28 <_ZSt9terminatev>:
 8010b28:	b508      	push	{r3, lr}
 8010b2a:	f7ff fff5 	bl	8010b18 <_ZSt13get_terminatev>
 8010b2e:	f7ff ffee 	bl	8010b0e <_ZN10__cxxabiv111__terminateEPFvvE>

08010b32 <_Znwj>:
 8010b32:	2801      	cmp	r0, #1
 8010b34:	bf38      	it	cc
 8010b36:	2001      	movcc	r0, #1
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	4604      	mov	r4, r0
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f000 f8c5 	bl	8010ccc <malloc>
 8010b42:	b930      	cbnz	r0, 8010b52 <_Znwj+0x20>
 8010b44:	f7ff ffd2 	bl	8010aec <_ZSt15get_new_handlerv>
 8010b48:	b908      	cbnz	r0, 8010b4e <_Znwj+0x1c>
 8010b4a:	f000 f803 	bl	8010b54 <abort>
 8010b4e:	4780      	blx	r0
 8010b50:	e7f4      	b.n	8010b3c <_Znwj+0xa>
 8010b52:	bd10      	pop	{r4, pc}

08010b54 <abort>:
 8010b54:	b508      	push	{r3, lr}
 8010b56:	2006      	movs	r0, #6
 8010b58:	f000 fd72 	bl	8011640 <raise>
 8010b5c:	2001      	movs	r0, #1
 8010b5e:	f7f0 fd0f 	bl	8001580 <_exit>

08010b62 <atexit>:
 8010b62:	2300      	movs	r3, #0
 8010b64:	4601      	mov	r1, r0
 8010b66:	461a      	mov	r2, r3
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 bec9 	b.w	8011900 <__register_exitproc>
	...

08010b70 <__errno>:
 8010b70:	4b01      	ldr	r3, [pc, #4]	; (8010b78 <__errno+0x8>)
 8010b72:	6818      	ldr	r0, [r3, #0]
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop
 8010b78:	20000040 	.word	0x20000040

08010b7c <fiprintf>:
 8010b7c:	b40e      	push	{r1, r2, r3}
 8010b7e:	b503      	push	{r0, r1, lr}
 8010b80:	4601      	mov	r1, r0
 8010b82:	ab03      	add	r3, sp, #12
 8010b84:	4805      	ldr	r0, [pc, #20]	; (8010b9c <fiprintf+0x20>)
 8010b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b8a:	6800      	ldr	r0, [r0, #0]
 8010b8c:	9301      	str	r3, [sp, #4]
 8010b8e:	f000 f9cd 	bl	8010f2c <_vfiprintf_r>
 8010b92:	b002      	add	sp, #8
 8010b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b98:	b003      	add	sp, #12
 8010b9a:	4770      	bx	lr
 8010b9c:	20000040 	.word	0x20000040

08010ba0 <_fputs_r>:
 8010ba0:	b570      	push	{r4, r5, r6, lr}
 8010ba2:	460e      	mov	r6, r1
 8010ba4:	4614      	mov	r4, r2
 8010ba6:	4605      	mov	r5, r0
 8010ba8:	b118      	cbz	r0, 8010bb2 <_fputs_r+0x12>
 8010baa:	6983      	ldr	r3, [r0, #24]
 8010bac:	b90b      	cbnz	r3, 8010bb2 <_fputs_r+0x12>
 8010bae:	f001 f833 	bl	8011c18 <__sinit>
 8010bb2:	4b2b      	ldr	r3, [pc, #172]	; (8010c60 <_fputs_r+0xc0>)
 8010bb4:	429c      	cmp	r4, r3
 8010bb6:	d11e      	bne.n	8010bf6 <_fputs_r+0x56>
 8010bb8:	686c      	ldr	r4, [r5, #4]
 8010bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010bbc:	07da      	lsls	r2, r3, #31
 8010bbe:	d405      	bmi.n	8010bcc <_fputs_r+0x2c>
 8010bc0:	89a3      	ldrh	r3, [r4, #12]
 8010bc2:	059b      	lsls	r3, r3, #22
 8010bc4:	d402      	bmi.n	8010bcc <_fputs_r+0x2c>
 8010bc6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bc8:	f000 f87d 	bl	8010cc6 <__retarget_lock_acquire_recursive>
 8010bcc:	89a3      	ldrh	r3, [r4, #12]
 8010bce:	0718      	lsls	r0, r3, #28
 8010bd0:	d51b      	bpl.n	8010c0a <_fputs_r+0x6a>
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	b1cb      	cbz	r3, 8010c0a <_fputs_r+0x6a>
 8010bd6:	3e01      	subs	r6, #1
 8010bd8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010bdc:	bb39      	cbnz	r1, 8010c2e <_fputs_r+0x8e>
 8010bde:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8010be0:	f015 0501 	ands.w	r5, r5, #1
 8010be4:	d139      	bne.n	8010c5a <_fputs_r+0xba>
 8010be6:	89a3      	ldrh	r3, [r4, #12]
 8010be8:	0599      	lsls	r1, r3, #22
 8010bea:	d402      	bmi.n	8010bf2 <_fputs_r+0x52>
 8010bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010bee:	f000 f86c 	bl	8010cca <__retarget_lock_release_recursive>
 8010bf2:	4628      	mov	r0, r5
 8010bf4:	bd70      	pop	{r4, r5, r6, pc}
 8010bf6:	4b1b      	ldr	r3, [pc, #108]	; (8010c64 <_fputs_r+0xc4>)
 8010bf8:	429c      	cmp	r4, r3
 8010bfa:	d101      	bne.n	8010c00 <_fputs_r+0x60>
 8010bfc:	68ac      	ldr	r4, [r5, #8]
 8010bfe:	e7dc      	b.n	8010bba <_fputs_r+0x1a>
 8010c00:	4b19      	ldr	r3, [pc, #100]	; (8010c68 <_fputs_r+0xc8>)
 8010c02:	429c      	cmp	r4, r3
 8010c04:	bf08      	it	eq
 8010c06:	68ec      	ldreq	r4, [r5, #12]
 8010c08:	e7d7      	b.n	8010bba <_fputs_r+0x1a>
 8010c0a:	4621      	mov	r1, r4
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	f000 fe09 	bl	8011824 <__swsetup_r>
 8010c12:	2800      	cmp	r0, #0
 8010c14:	d0df      	beq.n	8010bd6 <_fputs_r+0x36>
 8010c16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010c18:	07da      	lsls	r2, r3, #31
 8010c1a:	d405      	bmi.n	8010c28 <_fputs_r+0x88>
 8010c1c:	89a3      	ldrh	r3, [r4, #12]
 8010c1e:	059b      	lsls	r3, r3, #22
 8010c20:	d402      	bmi.n	8010c28 <_fputs_r+0x88>
 8010c22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010c24:	f000 f851 	bl	8010cca <__retarget_lock_release_recursive>
 8010c28:	f04f 35ff 	mov.w	r5, #4294967295
 8010c2c:	e7e1      	b.n	8010bf2 <_fputs_r+0x52>
 8010c2e:	68a3      	ldr	r3, [r4, #8]
 8010c30:	3b01      	subs	r3, #1
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	60a3      	str	r3, [r4, #8]
 8010c36:	da04      	bge.n	8010c42 <_fputs_r+0xa2>
 8010c38:	69a2      	ldr	r2, [r4, #24]
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	db06      	blt.n	8010c4c <_fputs_r+0xac>
 8010c3e:	290a      	cmp	r1, #10
 8010c40:	d004      	beq.n	8010c4c <_fputs_r+0xac>
 8010c42:	6823      	ldr	r3, [r4, #0]
 8010c44:	1c5a      	adds	r2, r3, #1
 8010c46:	6022      	str	r2, [r4, #0]
 8010c48:	7019      	strb	r1, [r3, #0]
 8010c4a:	e7c5      	b.n	8010bd8 <_fputs_r+0x38>
 8010c4c:	4622      	mov	r2, r4
 8010c4e:	4628      	mov	r0, r5
 8010c50:	f000 fd84 	bl	801175c <__swbuf_r>
 8010c54:	3001      	adds	r0, #1
 8010c56:	d1bf      	bne.n	8010bd8 <_fputs_r+0x38>
 8010c58:	e7dd      	b.n	8010c16 <_fputs_r+0x76>
 8010c5a:	460d      	mov	r5, r1
 8010c5c:	e7c9      	b.n	8010bf2 <_fputs_r+0x52>
 8010c5e:	bf00      	nop
 8010c60:	08013d50 	.word	0x08013d50
 8010c64:	08013d70 	.word	0x08013d70
 8010c68:	08013d30 	.word	0x08013d30

08010c6c <fputs>:
 8010c6c:	4b02      	ldr	r3, [pc, #8]	; (8010c78 <fputs+0xc>)
 8010c6e:	460a      	mov	r2, r1
 8010c70:	4601      	mov	r1, r0
 8010c72:	6818      	ldr	r0, [r3, #0]
 8010c74:	f7ff bf94 	b.w	8010ba0 <_fputs_r>
 8010c78:	20000040 	.word	0x20000040

08010c7c <__libc_init_array>:
 8010c7c:	b570      	push	{r4, r5, r6, lr}
 8010c7e:	4d0d      	ldr	r5, [pc, #52]	; (8010cb4 <__libc_init_array+0x38>)
 8010c80:	4c0d      	ldr	r4, [pc, #52]	; (8010cb8 <__libc_init_array+0x3c>)
 8010c82:	1b64      	subs	r4, r4, r5
 8010c84:	10a4      	asrs	r4, r4, #2
 8010c86:	2600      	movs	r6, #0
 8010c88:	42a6      	cmp	r6, r4
 8010c8a:	d109      	bne.n	8010ca0 <__libc_init_array+0x24>
 8010c8c:	4d0b      	ldr	r5, [pc, #44]	; (8010cbc <__libc_init_array+0x40>)
 8010c8e:	4c0c      	ldr	r4, [pc, #48]	; (8010cc0 <__libc_init_array+0x44>)
 8010c90:	f001 fdd2 	bl	8012838 <_init>
 8010c94:	1b64      	subs	r4, r4, r5
 8010c96:	10a4      	asrs	r4, r4, #2
 8010c98:	2600      	movs	r6, #0
 8010c9a:	42a6      	cmp	r6, r4
 8010c9c:	d105      	bne.n	8010caa <__libc_init_array+0x2e>
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ca4:	4798      	blx	r3
 8010ca6:	3601      	adds	r6, #1
 8010ca8:	e7ee      	b.n	8010c88 <__libc_init_array+0xc>
 8010caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cae:	4798      	blx	r3
 8010cb0:	3601      	adds	r6, #1
 8010cb2:	e7f2      	b.n	8010c9a <__libc_init_array+0x1e>
 8010cb4:	08013eb4 	.word	0x08013eb4
 8010cb8:	08013eb4 	.word	0x08013eb4
 8010cbc:	08013eb4 	.word	0x08013eb4
 8010cc0:	08013ed4 	.word	0x08013ed4

08010cc4 <__retarget_lock_init_recursive>:
 8010cc4:	4770      	bx	lr

08010cc6 <__retarget_lock_acquire_recursive>:
 8010cc6:	4770      	bx	lr

08010cc8 <__retarget_lock_release>:
 8010cc8:	4770      	bx	lr

08010cca <__retarget_lock_release_recursive>:
 8010cca:	4770      	bx	lr

08010ccc <malloc>:
 8010ccc:	4b02      	ldr	r3, [pc, #8]	; (8010cd8 <malloc+0xc>)
 8010cce:	4601      	mov	r1, r0
 8010cd0:	6818      	ldr	r0, [r3, #0]
 8010cd2:	f000 b88d 	b.w	8010df0 <_malloc_r>
 8010cd6:	bf00      	nop
 8010cd8:	20000040 	.word	0x20000040

08010cdc <free>:
 8010cdc:	4b02      	ldr	r3, [pc, #8]	; (8010ce8 <free+0xc>)
 8010cde:	4601      	mov	r1, r0
 8010ce0:	6818      	ldr	r0, [r3, #0]
 8010ce2:	f000 b819 	b.w	8010d18 <_free_r>
 8010ce6:	bf00      	nop
 8010ce8:	20000040 	.word	0x20000040

08010cec <memcpy>:
 8010cec:	440a      	add	r2, r1
 8010cee:	4291      	cmp	r1, r2
 8010cf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010cf4:	d100      	bne.n	8010cf8 <memcpy+0xc>
 8010cf6:	4770      	bx	lr
 8010cf8:	b510      	push	{r4, lr}
 8010cfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cfe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010d02:	4291      	cmp	r1, r2
 8010d04:	d1f9      	bne.n	8010cfa <memcpy+0xe>
 8010d06:	bd10      	pop	{r4, pc}

08010d08 <memset>:
 8010d08:	4402      	add	r2, r0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d100      	bne.n	8010d12 <memset+0xa>
 8010d10:	4770      	bx	lr
 8010d12:	f803 1b01 	strb.w	r1, [r3], #1
 8010d16:	e7f9      	b.n	8010d0c <memset+0x4>

08010d18 <_free_r>:
 8010d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010d1a:	2900      	cmp	r1, #0
 8010d1c:	d044      	beq.n	8010da8 <_free_r+0x90>
 8010d1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d22:	9001      	str	r0, [sp, #4]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	f1a1 0404 	sub.w	r4, r1, #4
 8010d2a:	bfb8      	it	lt
 8010d2c:	18e4      	addlt	r4, r4, r3
 8010d2e:	f7fb fa63 	bl	800c1f8 <__malloc_lock>
 8010d32:	4a1e      	ldr	r2, [pc, #120]	; (8010dac <_free_r+0x94>)
 8010d34:	9801      	ldr	r0, [sp, #4]
 8010d36:	6813      	ldr	r3, [r2, #0]
 8010d38:	b933      	cbnz	r3, 8010d48 <_free_r+0x30>
 8010d3a:	6063      	str	r3, [r4, #4]
 8010d3c:	6014      	str	r4, [r2, #0]
 8010d3e:	b003      	add	sp, #12
 8010d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010d44:	f7fb ba62 	b.w	800c20c <__malloc_unlock>
 8010d48:	42a3      	cmp	r3, r4
 8010d4a:	d908      	bls.n	8010d5e <_free_r+0x46>
 8010d4c:	6825      	ldr	r5, [r4, #0]
 8010d4e:	1961      	adds	r1, r4, r5
 8010d50:	428b      	cmp	r3, r1
 8010d52:	bf01      	itttt	eq
 8010d54:	6819      	ldreq	r1, [r3, #0]
 8010d56:	685b      	ldreq	r3, [r3, #4]
 8010d58:	1949      	addeq	r1, r1, r5
 8010d5a:	6021      	streq	r1, [r4, #0]
 8010d5c:	e7ed      	b.n	8010d3a <_free_r+0x22>
 8010d5e:	461a      	mov	r2, r3
 8010d60:	685b      	ldr	r3, [r3, #4]
 8010d62:	b10b      	cbz	r3, 8010d68 <_free_r+0x50>
 8010d64:	42a3      	cmp	r3, r4
 8010d66:	d9fa      	bls.n	8010d5e <_free_r+0x46>
 8010d68:	6811      	ldr	r1, [r2, #0]
 8010d6a:	1855      	adds	r5, r2, r1
 8010d6c:	42a5      	cmp	r5, r4
 8010d6e:	d10b      	bne.n	8010d88 <_free_r+0x70>
 8010d70:	6824      	ldr	r4, [r4, #0]
 8010d72:	4421      	add	r1, r4
 8010d74:	1854      	adds	r4, r2, r1
 8010d76:	42a3      	cmp	r3, r4
 8010d78:	6011      	str	r1, [r2, #0]
 8010d7a:	d1e0      	bne.n	8010d3e <_free_r+0x26>
 8010d7c:	681c      	ldr	r4, [r3, #0]
 8010d7e:	685b      	ldr	r3, [r3, #4]
 8010d80:	6053      	str	r3, [r2, #4]
 8010d82:	4421      	add	r1, r4
 8010d84:	6011      	str	r1, [r2, #0]
 8010d86:	e7da      	b.n	8010d3e <_free_r+0x26>
 8010d88:	d902      	bls.n	8010d90 <_free_r+0x78>
 8010d8a:	230c      	movs	r3, #12
 8010d8c:	6003      	str	r3, [r0, #0]
 8010d8e:	e7d6      	b.n	8010d3e <_free_r+0x26>
 8010d90:	6825      	ldr	r5, [r4, #0]
 8010d92:	1961      	adds	r1, r4, r5
 8010d94:	428b      	cmp	r3, r1
 8010d96:	bf04      	itt	eq
 8010d98:	6819      	ldreq	r1, [r3, #0]
 8010d9a:	685b      	ldreq	r3, [r3, #4]
 8010d9c:	6063      	str	r3, [r4, #4]
 8010d9e:	bf04      	itt	eq
 8010da0:	1949      	addeq	r1, r1, r5
 8010da2:	6021      	streq	r1, [r4, #0]
 8010da4:	6054      	str	r4, [r2, #4]
 8010da6:	e7ca      	b.n	8010d3e <_free_r+0x26>
 8010da8:	b003      	add	sp, #12
 8010daa:	bd30      	pop	{r4, r5, pc}
 8010dac:	200011a0 	.word	0x200011a0

08010db0 <sbrk_aligned>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	4e0e      	ldr	r6, [pc, #56]	; (8010dec <sbrk_aligned+0x3c>)
 8010db4:	460c      	mov	r4, r1
 8010db6:	6831      	ldr	r1, [r6, #0]
 8010db8:	4605      	mov	r5, r0
 8010dba:	b911      	cbnz	r1, 8010dc2 <sbrk_aligned+0x12>
 8010dbc:	f000 fc08 	bl	80115d0 <_sbrk_r>
 8010dc0:	6030      	str	r0, [r6, #0]
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f000 fc03 	bl	80115d0 <_sbrk_r>
 8010dca:	1c43      	adds	r3, r0, #1
 8010dcc:	d00a      	beq.n	8010de4 <sbrk_aligned+0x34>
 8010dce:	1cc4      	adds	r4, r0, #3
 8010dd0:	f024 0403 	bic.w	r4, r4, #3
 8010dd4:	42a0      	cmp	r0, r4
 8010dd6:	d007      	beq.n	8010de8 <sbrk_aligned+0x38>
 8010dd8:	1a21      	subs	r1, r4, r0
 8010dda:	4628      	mov	r0, r5
 8010ddc:	f000 fbf8 	bl	80115d0 <_sbrk_r>
 8010de0:	3001      	adds	r0, #1
 8010de2:	d101      	bne.n	8010de8 <sbrk_aligned+0x38>
 8010de4:	f04f 34ff 	mov.w	r4, #4294967295
 8010de8:	4620      	mov	r0, r4
 8010dea:	bd70      	pop	{r4, r5, r6, pc}
 8010dec:	200011a4 	.word	0x200011a4

08010df0 <_malloc_r>:
 8010df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df4:	1ccd      	adds	r5, r1, #3
 8010df6:	f025 0503 	bic.w	r5, r5, #3
 8010dfa:	3508      	adds	r5, #8
 8010dfc:	2d0c      	cmp	r5, #12
 8010dfe:	bf38      	it	cc
 8010e00:	250c      	movcc	r5, #12
 8010e02:	2d00      	cmp	r5, #0
 8010e04:	4607      	mov	r7, r0
 8010e06:	db01      	blt.n	8010e0c <_malloc_r+0x1c>
 8010e08:	42a9      	cmp	r1, r5
 8010e0a:	d905      	bls.n	8010e18 <_malloc_r+0x28>
 8010e0c:	230c      	movs	r3, #12
 8010e0e:	603b      	str	r3, [r7, #0]
 8010e10:	2600      	movs	r6, #0
 8010e12:	4630      	mov	r0, r6
 8010e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e18:	4e2e      	ldr	r6, [pc, #184]	; (8010ed4 <_malloc_r+0xe4>)
 8010e1a:	f7fb f9ed 	bl	800c1f8 <__malloc_lock>
 8010e1e:	6833      	ldr	r3, [r6, #0]
 8010e20:	461c      	mov	r4, r3
 8010e22:	bb34      	cbnz	r4, 8010e72 <_malloc_r+0x82>
 8010e24:	4629      	mov	r1, r5
 8010e26:	4638      	mov	r0, r7
 8010e28:	f7ff ffc2 	bl	8010db0 <sbrk_aligned>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	4604      	mov	r4, r0
 8010e30:	d14d      	bne.n	8010ece <_malloc_r+0xde>
 8010e32:	6834      	ldr	r4, [r6, #0]
 8010e34:	4626      	mov	r6, r4
 8010e36:	2e00      	cmp	r6, #0
 8010e38:	d140      	bne.n	8010ebc <_malloc_r+0xcc>
 8010e3a:	6823      	ldr	r3, [r4, #0]
 8010e3c:	4631      	mov	r1, r6
 8010e3e:	4638      	mov	r0, r7
 8010e40:	eb04 0803 	add.w	r8, r4, r3
 8010e44:	f000 fbc4 	bl	80115d0 <_sbrk_r>
 8010e48:	4580      	cmp	r8, r0
 8010e4a:	d13a      	bne.n	8010ec2 <_malloc_r+0xd2>
 8010e4c:	6821      	ldr	r1, [r4, #0]
 8010e4e:	3503      	adds	r5, #3
 8010e50:	1a6d      	subs	r5, r5, r1
 8010e52:	f025 0503 	bic.w	r5, r5, #3
 8010e56:	3508      	adds	r5, #8
 8010e58:	2d0c      	cmp	r5, #12
 8010e5a:	bf38      	it	cc
 8010e5c:	250c      	movcc	r5, #12
 8010e5e:	4629      	mov	r1, r5
 8010e60:	4638      	mov	r0, r7
 8010e62:	f7ff ffa5 	bl	8010db0 <sbrk_aligned>
 8010e66:	3001      	adds	r0, #1
 8010e68:	d02b      	beq.n	8010ec2 <_malloc_r+0xd2>
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	442b      	add	r3, r5
 8010e6e:	6023      	str	r3, [r4, #0]
 8010e70:	e00e      	b.n	8010e90 <_malloc_r+0xa0>
 8010e72:	6822      	ldr	r2, [r4, #0]
 8010e74:	1b52      	subs	r2, r2, r5
 8010e76:	d41e      	bmi.n	8010eb6 <_malloc_r+0xc6>
 8010e78:	2a0b      	cmp	r2, #11
 8010e7a:	d916      	bls.n	8010eaa <_malloc_r+0xba>
 8010e7c:	1961      	adds	r1, r4, r5
 8010e7e:	42a3      	cmp	r3, r4
 8010e80:	6025      	str	r5, [r4, #0]
 8010e82:	bf18      	it	ne
 8010e84:	6059      	strne	r1, [r3, #4]
 8010e86:	6863      	ldr	r3, [r4, #4]
 8010e88:	bf08      	it	eq
 8010e8a:	6031      	streq	r1, [r6, #0]
 8010e8c:	5162      	str	r2, [r4, r5]
 8010e8e:	604b      	str	r3, [r1, #4]
 8010e90:	4638      	mov	r0, r7
 8010e92:	f104 060b 	add.w	r6, r4, #11
 8010e96:	f7fb f9b9 	bl	800c20c <__malloc_unlock>
 8010e9a:	f026 0607 	bic.w	r6, r6, #7
 8010e9e:	1d23      	adds	r3, r4, #4
 8010ea0:	1af2      	subs	r2, r6, r3
 8010ea2:	d0b6      	beq.n	8010e12 <_malloc_r+0x22>
 8010ea4:	1b9b      	subs	r3, r3, r6
 8010ea6:	50a3      	str	r3, [r4, r2]
 8010ea8:	e7b3      	b.n	8010e12 <_malloc_r+0x22>
 8010eaa:	6862      	ldr	r2, [r4, #4]
 8010eac:	42a3      	cmp	r3, r4
 8010eae:	bf0c      	ite	eq
 8010eb0:	6032      	streq	r2, [r6, #0]
 8010eb2:	605a      	strne	r2, [r3, #4]
 8010eb4:	e7ec      	b.n	8010e90 <_malloc_r+0xa0>
 8010eb6:	4623      	mov	r3, r4
 8010eb8:	6864      	ldr	r4, [r4, #4]
 8010eba:	e7b2      	b.n	8010e22 <_malloc_r+0x32>
 8010ebc:	4634      	mov	r4, r6
 8010ebe:	6876      	ldr	r6, [r6, #4]
 8010ec0:	e7b9      	b.n	8010e36 <_malloc_r+0x46>
 8010ec2:	230c      	movs	r3, #12
 8010ec4:	603b      	str	r3, [r7, #0]
 8010ec6:	4638      	mov	r0, r7
 8010ec8:	f7fb f9a0 	bl	800c20c <__malloc_unlock>
 8010ecc:	e7a1      	b.n	8010e12 <_malloc_r+0x22>
 8010ece:	6025      	str	r5, [r4, #0]
 8010ed0:	e7de      	b.n	8010e90 <_malloc_r+0xa0>
 8010ed2:	bf00      	nop
 8010ed4:	200011a0 	.word	0x200011a0

08010ed8 <__sfputc_r>:
 8010ed8:	6893      	ldr	r3, [r2, #8]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	b410      	push	{r4}
 8010ee0:	6093      	str	r3, [r2, #8]
 8010ee2:	da08      	bge.n	8010ef6 <__sfputc_r+0x1e>
 8010ee4:	6994      	ldr	r4, [r2, #24]
 8010ee6:	42a3      	cmp	r3, r4
 8010ee8:	db01      	blt.n	8010eee <__sfputc_r+0x16>
 8010eea:	290a      	cmp	r1, #10
 8010eec:	d103      	bne.n	8010ef6 <__sfputc_r+0x1e>
 8010eee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ef2:	f000 bc33 	b.w	801175c <__swbuf_r>
 8010ef6:	6813      	ldr	r3, [r2, #0]
 8010ef8:	1c58      	adds	r0, r3, #1
 8010efa:	6010      	str	r0, [r2, #0]
 8010efc:	7019      	strb	r1, [r3, #0]
 8010efe:	4608      	mov	r0, r1
 8010f00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f04:	4770      	bx	lr

08010f06 <__sfputs_r>:
 8010f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f08:	4606      	mov	r6, r0
 8010f0a:	460f      	mov	r7, r1
 8010f0c:	4614      	mov	r4, r2
 8010f0e:	18d5      	adds	r5, r2, r3
 8010f10:	42ac      	cmp	r4, r5
 8010f12:	d101      	bne.n	8010f18 <__sfputs_r+0x12>
 8010f14:	2000      	movs	r0, #0
 8010f16:	e007      	b.n	8010f28 <__sfputs_r+0x22>
 8010f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f1c:	463a      	mov	r2, r7
 8010f1e:	4630      	mov	r0, r6
 8010f20:	f7ff ffda 	bl	8010ed8 <__sfputc_r>
 8010f24:	1c43      	adds	r3, r0, #1
 8010f26:	d1f3      	bne.n	8010f10 <__sfputs_r+0xa>
 8010f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010f2c <_vfiprintf_r>:
 8010f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f30:	460d      	mov	r5, r1
 8010f32:	b09d      	sub	sp, #116	; 0x74
 8010f34:	4614      	mov	r4, r2
 8010f36:	4698      	mov	r8, r3
 8010f38:	4606      	mov	r6, r0
 8010f3a:	b118      	cbz	r0, 8010f44 <_vfiprintf_r+0x18>
 8010f3c:	6983      	ldr	r3, [r0, #24]
 8010f3e:	b90b      	cbnz	r3, 8010f44 <_vfiprintf_r+0x18>
 8010f40:	f000 fe6a 	bl	8011c18 <__sinit>
 8010f44:	4b89      	ldr	r3, [pc, #548]	; (801116c <_vfiprintf_r+0x240>)
 8010f46:	429d      	cmp	r5, r3
 8010f48:	d11b      	bne.n	8010f82 <_vfiprintf_r+0x56>
 8010f4a:	6875      	ldr	r5, [r6, #4]
 8010f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f4e:	07d9      	lsls	r1, r3, #31
 8010f50:	d405      	bmi.n	8010f5e <_vfiprintf_r+0x32>
 8010f52:	89ab      	ldrh	r3, [r5, #12]
 8010f54:	059a      	lsls	r2, r3, #22
 8010f56:	d402      	bmi.n	8010f5e <_vfiprintf_r+0x32>
 8010f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f5a:	f7ff feb4 	bl	8010cc6 <__retarget_lock_acquire_recursive>
 8010f5e:	89ab      	ldrh	r3, [r5, #12]
 8010f60:	071b      	lsls	r3, r3, #28
 8010f62:	d501      	bpl.n	8010f68 <_vfiprintf_r+0x3c>
 8010f64:	692b      	ldr	r3, [r5, #16]
 8010f66:	b9eb      	cbnz	r3, 8010fa4 <_vfiprintf_r+0x78>
 8010f68:	4629      	mov	r1, r5
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	f000 fc5a 	bl	8011824 <__swsetup_r>
 8010f70:	b1c0      	cbz	r0, 8010fa4 <_vfiprintf_r+0x78>
 8010f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010f74:	07dc      	lsls	r4, r3, #31
 8010f76:	d50e      	bpl.n	8010f96 <_vfiprintf_r+0x6a>
 8010f78:	f04f 30ff 	mov.w	r0, #4294967295
 8010f7c:	b01d      	add	sp, #116	; 0x74
 8010f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f82:	4b7b      	ldr	r3, [pc, #492]	; (8011170 <_vfiprintf_r+0x244>)
 8010f84:	429d      	cmp	r5, r3
 8010f86:	d101      	bne.n	8010f8c <_vfiprintf_r+0x60>
 8010f88:	68b5      	ldr	r5, [r6, #8]
 8010f8a:	e7df      	b.n	8010f4c <_vfiprintf_r+0x20>
 8010f8c:	4b79      	ldr	r3, [pc, #484]	; (8011174 <_vfiprintf_r+0x248>)
 8010f8e:	429d      	cmp	r5, r3
 8010f90:	bf08      	it	eq
 8010f92:	68f5      	ldreq	r5, [r6, #12]
 8010f94:	e7da      	b.n	8010f4c <_vfiprintf_r+0x20>
 8010f96:	89ab      	ldrh	r3, [r5, #12]
 8010f98:	0598      	lsls	r0, r3, #22
 8010f9a:	d4ed      	bmi.n	8010f78 <_vfiprintf_r+0x4c>
 8010f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010f9e:	f7ff fe94 	bl	8010cca <__retarget_lock_release_recursive>
 8010fa2:	e7e9      	b.n	8010f78 <_vfiprintf_r+0x4c>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8010fa8:	2320      	movs	r3, #32
 8010faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010fae:	f8cd 800c 	str.w	r8, [sp, #12]
 8010fb2:	2330      	movs	r3, #48	; 0x30
 8010fb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011178 <_vfiprintf_r+0x24c>
 8010fb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010fbc:	f04f 0901 	mov.w	r9, #1
 8010fc0:	4623      	mov	r3, r4
 8010fc2:	469a      	mov	sl, r3
 8010fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010fc8:	b10a      	cbz	r2, 8010fce <_vfiprintf_r+0xa2>
 8010fca:	2a25      	cmp	r2, #37	; 0x25
 8010fcc:	d1f9      	bne.n	8010fc2 <_vfiprintf_r+0x96>
 8010fce:	ebba 0b04 	subs.w	fp, sl, r4
 8010fd2:	d00b      	beq.n	8010fec <_vfiprintf_r+0xc0>
 8010fd4:	465b      	mov	r3, fp
 8010fd6:	4622      	mov	r2, r4
 8010fd8:	4629      	mov	r1, r5
 8010fda:	4630      	mov	r0, r6
 8010fdc:	f7ff ff93 	bl	8010f06 <__sfputs_r>
 8010fe0:	3001      	adds	r0, #1
 8010fe2:	f000 80aa 	beq.w	801113a <_vfiprintf_r+0x20e>
 8010fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010fe8:	445a      	add	r2, fp
 8010fea:	9209      	str	r2, [sp, #36]	; 0x24
 8010fec:	f89a 3000 	ldrb.w	r3, [sl]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 80a2 	beq.w	801113a <_vfiprintf_r+0x20e>
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8010ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011000:	f10a 0a01 	add.w	sl, sl, #1
 8011004:	9304      	str	r3, [sp, #16]
 8011006:	9307      	str	r3, [sp, #28]
 8011008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801100c:	931a      	str	r3, [sp, #104]	; 0x68
 801100e:	4654      	mov	r4, sl
 8011010:	2205      	movs	r2, #5
 8011012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011016:	4858      	ldr	r0, [pc, #352]	; (8011178 <_vfiprintf_r+0x24c>)
 8011018:	f7ef f912 	bl	8000240 <memchr>
 801101c:	9a04      	ldr	r2, [sp, #16]
 801101e:	b9d8      	cbnz	r0, 8011058 <_vfiprintf_r+0x12c>
 8011020:	06d1      	lsls	r1, r2, #27
 8011022:	bf44      	itt	mi
 8011024:	2320      	movmi	r3, #32
 8011026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801102a:	0713      	lsls	r3, r2, #28
 801102c:	bf44      	itt	mi
 801102e:	232b      	movmi	r3, #43	; 0x2b
 8011030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011034:	f89a 3000 	ldrb.w	r3, [sl]
 8011038:	2b2a      	cmp	r3, #42	; 0x2a
 801103a:	d015      	beq.n	8011068 <_vfiprintf_r+0x13c>
 801103c:	9a07      	ldr	r2, [sp, #28]
 801103e:	4654      	mov	r4, sl
 8011040:	2000      	movs	r0, #0
 8011042:	f04f 0c0a 	mov.w	ip, #10
 8011046:	4621      	mov	r1, r4
 8011048:	f811 3b01 	ldrb.w	r3, [r1], #1
 801104c:	3b30      	subs	r3, #48	; 0x30
 801104e:	2b09      	cmp	r3, #9
 8011050:	d94e      	bls.n	80110f0 <_vfiprintf_r+0x1c4>
 8011052:	b1b0      	cbz	r0, 8011082 <_vfiprintf_r+0x156>
 8011054:	9207      	str	r2, [sp, #28]
 8011056:	e014      	b.n	8011082 <_vfiprintf_r+0x156>
 8011058:	eba0 0308 	sub.w	r3, r0, r8
 801105c:	fa09 f303 	lsl.w	r3, r9, r3
 8011060:	4313      	orrs	r3, r2
 8011062:	9304      	str	r3, [sp, #16]
 8011064:	46a2      	mov	sl, r4
 8011066:	e7d2      	b.n	801100e <_vfiprintf_r+0xe2>
 8011068:	9b03      	ldr	r3, [sp, #12]
 801106a:	1d19      	adds	r1, r3, #4
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	9103      	str	r1, [sp, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	bfbb      	ittet	lt
 8011074:	425b      	neglt	r3, r3
 8011076:	f042 0202 	orrlt.w	r2, r2, #2
 801107a:	9307      	strge	r3, [sp, #28]
 801107c:	9307      	strlt	r3, [sp, #28]
 801107e:	bfb8      	it	lt
 8011080:	9204      	strlt	r2, [sp, #16]
 8011082:	7823      	ldrb	r3, [r4, #0]
 8011084:	2b2e      	cmp	r3, #46	; 0x2e
 8011086:	d10c      	bne.n	80110a2 <_vfiprintf_r+0x176>
 8011088:	7863      	ldrb	r3, [r4, #1]
 801108a:	2b2a      	cmp	r3, #42	; 0x2a
 801108c:	d135      	bne.n	80110fa <_vfiprintf_r+0x1ce>
 801108e:	9b03      	ldr	r3, [sp, #12]
 8011090:	1d1a      	adds	r2, r3, #4
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	9203      	str	r2, [sp, #12]
 8011096:	2b00      	cmp	r3, #0
 8011098:	bfb8      	it	lt
 801109a:	f04f 33ff 	movlt.w	r3, #4294967295
 801109e:	3402      	adds	r4, #2
 80110a0:	9305      	str	r3, [sp, #20]
 80110a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011188 <_vfiprintf_r+0x25c>
 80110a6:	7821      	ldrb	r1, [r4, #0]
 80110a8:	2203      	movs	r2, #3
 80110aa:	4650      	mov	r0, sl
 80110ac:	f7ef f8c8 	bl	8000240 <memchr>
 80110b0:	b140      	cbz	r0, 80110c4 <_vfiprintf_r+0x198>
 80110b2:	2340      	movs	r3, #64	; 0x40
 80110b4:	eba0 000a 	sub.w	r0, r0, sl
 80110b8:	fa03 f000 	lsl.w	r0, r3, r0
 80110bc:	9b04      	ldr	r3, [sp, #16]
 80110be:	4303      	orrs	r3, r0
 80110c0:	3401      	adds	r4, #1
 80110c2:	9304      	str	r3, [sp, #16]
 80110c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110c8:	482c      	ldr	r0, [pc, #176]	; (801117c <_vfiprintf_r+0x250>)
 80110ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80110ce:	2206      	movs	r2, #6
 80110d0:	f7ef f8b6 	bl	8000240 <memchr>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d03f      	beq.n	8011158 <_vfiprintf_r+0x22c>
 80110d8:	4b29      	ldr	r3, [pc, #164]	; (8011180 <_vfiprintf_r+0x254>)
 80110da:	bb1b      	cbnz	r3, 8011124 <_vfiprintf_r+0x1f8>
 80110dc:	9b03      	ldr	r3, [sp, #12]
 80110de:	3307      	adds	r3, #7
 80110e0:	f023 0307 	bic.w	r3, r3, #7
 80110e4:	3308      	adds	r3, #8
 80110e6:	9303      	str	r3, [sp, #12]
 80110e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110ea:	443b      	add	r3, r7
 80110ec:	9309      	str	r3, [sp, #36]	; 0x24
 80110ee:	e767      	b.n	8010fc0 <_vfiprintf_r+0x94>
 80110f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80110f4:	460c      	mov	r4, r1
 80110f6:	2001      	movs	r0, #1
 80110f8:	e7a5      	b.n	8011046 <_vfiprintf_r+0x11a>
 80110fa:	2300      	movs	r3, #0
 80110fc:	3401      	adds	r4, #1
 80110fe:	9305      	str	r3, [sp, #20]
 8011100:	4619      	mov	r1, r3
 8011102:	f04f 0c0a 	mov.w	ip, #10
 8011106:	4620      	mov	r0, r4
 8011108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801110c:	3a30      	subs	r2, #48	; 0x30
 801110e:	2a09      	cmp	r2, #9
 8011110:	d903      	bls.n	801111a <_vfiprintf_r+0x1ee>
 8011112:	2b00      	cmp	r3, #0
 8011114:	d0c5      	beq.n	80110a2 <_vfiprintf_r+0x176>
 8011116:	9105      	str	r1, [sp, #20]
 8011118:	e7c3      	b.n	80110a2 <_vfiprintf_r+0x176>
 801111a:	fb0c 2101 	mla	r1, ip, r1, r2
 801111e:	4604      	mov	r4, r0
 8011120:	2301      	movs	r3, #1
 8011122:	e7f0      	b.n	8011106 <_vfiprintf_r+0x1da>
 8011124:	ab03      	add	r3, sp, #12
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	462a      	mov	r2, r5
 801112a:	4b16      	ldr	r3, [pc, #88]	; (8011184 <_vfiprintf_r+0x258>)
 801112c:	a904      	add	r1, sp, #16
 801112e:	4630      	mov	r0, r6
 8011130:	f3af 8000 	nop.w
 8011134:	4607      	mov	r7, r0
 8011136:	1c78      	adds	r0, r7, #1
 8011138:	d1d6      	bne.n	80110e8 <_vfiprintf_r+0x1bc>
 801113a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801113c:	07d9      	lsls	r1, r3, #31
 801113e:	d405      	bmi.n	801114c <_vfiprintf_r+0x220>
 8011140:	89ab      	ldrh	r3, [r5, #12]
 8011142:	059a      	lsls	r2, r3, #22
 8011144:	d402      	bmi.n	801114c <_vfiprintf_r+0x220>
 8011146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011148:	f7ff fdbf 	bl	8010cca <__retarget_lock_release_recursive>
 801114c:	89ab      	ldrh	r3, [r5, #12]
 801114e:	065b      	lsls	r3, r3, #25
 8011150:	f53f af12 	bmi.w	8010f78 <_vfiprintf_r+0x4c>
 8011154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011156:	e711      	b.n	8010f7c <_vfiprintf_r+0x50>
 8011158:	ab03      	add	r3, sp, #12
 801115a:	9300      	str	r3, [sp, #0]
 801115c:	462a      	mov	r2, r5
 801115e:	4b09      	ldr	r3, [pc, #36]	; (8011184 <_vfiprintf_r+0x258>)
 8011160:	a904      	add	r1, sp, #16
 8011162:	4630      	mov	r0, r6
 8011164:	f000 f880 	bl	8011268 <_printf_i>
 8011168:	e7e4      	b.n	8011134 <_vfiprintf_r+0x208>
 801116a:	bf00      	nop
 801116c:	08013d50 	.word	0x08013d50
 8011170:	08013d70 	.word	0x08013d70
 8011174:	08013d30 	.word	0x08013d30
 8011178:	08013cfc 	.word	0x08013cfc
 801117c:	08013d06 	.word	0x08013d06
 8011180:	00000000 	.word	0x00000000
 8011184:	08010f07 	.word	0x08010f07
 8011188:	08013d02 	.word	0x08013d02

0801118c <_printf_common>:
 801118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011190:	4616      	mov	r6, r2
 8011192:	4699      	mov	r9, r3
 8011194:	688a      	ldr	r2, [r1, #8]
 8011196:	690b      	ldr	r3, [r1, #16]
 8011198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801119c:	4293      	cmp	r3, r2
 801119e:	bfb8      	it	lt
 80111a0:	4613      	movlt	r3, r2
 80111a2:	6033      	str	r3, [r6, #0]
 80111a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80111a8:	4607      	mov	r7, r0
 80111aa:	460c      	mov	r4, r1
 80111ac:	b10a      	cbz	r2, 80111b2 <_printf_common+0x26>
 80111ae:	3301      	adds	r3, #1
 80111b0:	6033      	str	r3, [r6, #0]
 80111b2:	6823      	ldr	r3, [r4, #0]
 80111b4:	0699      	lsls	r1, r3, #26
 80111b6:	bf42      	ittt	mi
 80111b8:	6833      	ldrmi	r3, [r6, #0]
 80111ba:	3302      	addmi	r3, #2
 80111bc:	6033      	strmi	r3, [r6, #0]
 80111be:	6825      	ldr	r5, [r4, #0]
 80111c0:	f015 0506 	ands.w	r5, r5, #6
 80111c4:	d106      	bne.n	80111d4 <_printf_common+0x48>
 80111c6:	f104 0a19 	add.w	sl, r4, #25
 80111ca:	68e3      	ldr	r3, [r4, #12]
 80111cc:	6832      	ldr	r2, [r6, #0]
 80111ce:	1a9b      	subs	r3, r3, r2
 80111d0:	42ab      	cmp	r3, r5
 80111d2:	dc26      	bgt.n	8011222 <_printf_common+0x96>
 80111d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80111d8:	1e13      	subs	r3, r2, #0
 80111da:	6822      	ldr	r2, [r4, #0]
 80111dc:	bf18      	it	ne
 80111de:	2301      	movne	r3, #1
 80111e0:	0692      	lsls	r2, r2, #26
 80111e2:	d42b      	bmi.n	801123c <_printf_common+0xb0>
 80111e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80111e8:	4649      	mov	r1, r9
 80111ea:	4638      	mov	r0, r7
 80111ec:	47c0      	blx	r8
 80111ee:	3001      	adds	r0, #1
 80111f0:	d01e      	beq.n	8011230 <_printf_common+0xa4>
 80111f2:	6823      	ldr	r3, [r4, #0]
 80111f4:	68e5      	ldr	r5, [r4, #12]
 80111f6:	6832      	ldr	r2, [r6, #0]
 80111f8:	f003 0306 	and.w	r3, r3, #6
 80111fc:	2b04      	cmp	r3, #4
 80111fe:	bf08      	it	eq
 8011200:	1aad      	subeq	r5, r5, r2
 8011202:	68a3      	ldr	r3, [r4, #8]
 8011204:	6922      	ldr	r2, [r4, #16]
 8011206:	bf0c      	ite	eq
 8011208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801120c:	2500      	movne	r5, #0
 801120e:	4293      	cmp	r3, r2
 8011210:	bfc4      	itt	gt
 8011212:	1a9b      	subgt	r3, r3, r2
 8011214:	18ed      	addgt	r5, r5, r3
 8011216:	2600      	movs	r6, #0
 8011218:	341a      	adds	r4, #26
 801121a:	42b5      	cmp	r5, r6
 801121c:	d11a      	bne.n	8011254 <_printf_common+0xc8>
 801121e:	2000      	movs	r0, #0
 8011220:	e008      	b.n	8011234 <_printf_common+0xa8>
 8011222:	2301      	movs	r3, #1
 8011224:	4652      	mov	r2, sl
 8011226:	4649      	mov	r1, r9
 8011228:	4638      	mov	r0, r7
 801122a:	47c0      	blx	r8
 801122c:	3001      	adds	r0, #1
 801122e:	d103      	bne.n	8011238 <_printf_common+0xac>
 8011230:	f04f 30ff 	mov.w	r0, #4294967295
 8011234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011238:	3501      	adds	r5, #1
 801123a:	e7c6      	b.n	80111ca <_printf_common+0x3e>
 801123c:	18e1      	adds	r1, r4, r3
 801123e:	1c5a      	adds	r2, r3, #1
 8011240:	2030      	movs	r0, #48	; 0x30
 8011242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011246:	4422      	add	r2, r4
 8011248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801124c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011250:	3302      	adds	r3, #2
 8011252:	e7c7      	b.n	80111e4 <_printf_common+0x58>
 8011254:	2301      	movs	r3, #1
 8011256:	4622      	mov	r2, r4
 8011258:	4649      	mov	r1, r9
 801125a:	4638      	mov	r0, r7
 801125c:	47c0      	blx	r8
 801125e:	3001      	adds	r0, #1
 8011260:	d0e6      	beq.n	8011230 <_printf_common+0xa4>
 8011262:	3601      	adds	r6, #1
 8011264:	e7d9      	b.n	801121a <_printf_common+0x8e>
	...

08011268 <_printf_i>:
 8011268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801126c:	7e0f      	ldrb	r7, [r1, #24]
 801126e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011270:	2f78      	cmp	r7, #120	; 0x78
 8011272:	4691      	mov	r9, r2
 8011274:	4680      	mov	r8, r0
 8011276:	460c      	mov	r4, r1
 8011278:	469a      	mov	sl, r3
 801127a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801127e:	d807      	bhi.n	8011290 <_printf_i+0x28>
 8011280:	2f62      	cmp	r7, #98	; 0x62
 8011282:	d80a      	bhi.n	801129a <_printf_i+0x32>
 8011284:	2f00      	cmp	r7, #0
 8011286:	f000 80d8 	beq.w	801143a <_printf_i+0x1d2>
 801128a:	2f58      	cmp	r7, #88	; 0x58
 801128c:	f000 80a3 	beq.w	80113d6 <_printf_i+0x16e>
 8011290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011298:	e03a      	b.n	8011310 <_printf_i+0xa8>
 801129a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801129e:	2b15      	cmp	r3, #21
 80112a0:	d8f6      	bhi.n	8011290 <_printf_i+0x28>
 80112a2:	a101      	add	r1, pc, #4	; (adr r1, 80112a8 <_printf_i+0x40>)
 80112a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80112a8:	08011301 	.word	0x08011301
 80112ac:	08011315 	.word	0x08011315
 80112b0:	08011291 	.word	0x08011291
 80112b4:	08011291 	.word	0x08011291
 80112b8:	08011291 	.word	0x08011291
 80112bc:	08011291 	.word	0x08011291
 80112c0:	08011315 	.word	0x08011315
 80112c4:	08011291 	.word	0x08011291
 80112c8:	08011291 	.word	0x08011291
 80112cc:	08011291 	.word	0x08011291
 80112d0:	08011291 	.word	0x08011291
 80112d4:	08011421 	.word	0x08011421
 80112d8:	08011345 	.word	0x08011345
 80112dc:	08011403 	.word	0x08011403
 80112e0:	08011291 	.word	0x08011291
 80112e4:	08011291 	.word	0x08011291
 80112e8:	08011443 	.word	0x08011443
 80112ec:	08011291 	.word	0x08011291
 80112f0:	08011345 	.word	0x08011345
 80112f4:	08011291 	.word	0x08011291
 80112f8:	08011291 	.word	0x08011291
 80112fc:	0801140b 	.word	0x0801140b
 8011300:	682b      	ldr	r3, [r5, #0]
 8011302:	1d1a      	adds	r2, r3, #4
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	602a      	str	r2, [r5, #0]
 8011308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801130c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011310:	2301      	movs	r3, #1
 8011312:	e0a3      	b.n	801145c <_printf_i+0x1f4>
 8011314:	6820      	ldr	r0, [r4, #0]
 8011316:	6829      	ldr	r1, [r5, #0]
 8011318:	0606      	lsls	r6, r0, #24
 801131a:	f101 0304 	add.w	r3, r1, #4
 801131e:	d50a      	bpl.n	8011336 <_printf_i+0xce>
 8011320:	680e      	ldr	r6, [r1, #0]
 8011322:	602b      	str	r3, [r5, #0]
 8011324:	2e00      	cmp	r6, #0
 8011326:	da03      	bge.n	8011330 <_printf_i+0xc8>
 8011328:	232d      	movs	r3, #45	; 0x2d
 801132a:	4276      	negs	r6, r6
 801132c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011330:	485e      	ldr	r0, [pc, #376]	; (80114ac <_printf_i+0x244>)
 8011332:	230a      	movs	r3, #10
 8011334:	e019      	b.n	801136a <_printf_i+0x102>
 8011336:	680e      	ldr	r6, [r1, #0]
 8011338:	602b      	str	r3, [r5, #0]
 801133a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801133e:	bf18      	it	ne
 8011340:	b236      	sxthne	r6, r6
 8011342:	e7ef      	b.n	8011324 <_printf_i+0xbc>
 8011344:	682b      	ldr	r3, [r5, #0]
 8011346:	6820      	ldr	r0, [r4, #0]
 8011348:	1d19      	adds	r1, r3, #4
 801134a:	6029      	str	r1, [r5, #0]
 801134c:	0601      	lsls	r1, r0, #24
 801134e:	d501      	bpl.n	8011354 <_printf_i+0xec>
 8011350:	681e      	ldr	r6, [r3, #0]
 8011352:	e002      	b.n	801135a <_printf_i+0xf2>
 8011354:	0646      	lsls	r6, r0, #25
 8011356:	d5fb      	bpl.n	8011350 <_printf_i+0xe8>
 8011358:	881e      	ldrh	r6, [r3, #0]
 801135a:	4854      	ldr	r0, [pc, #336]	; (80114ac <_printf_i+0x244>)
 801135c:	2f6f      	cmp	r7, #111	; 0x6f
 801135e:	bf0c      	ite	eq
 8011360:	2308      	moveq	r3, #8
 8011362:	230a      	movne	r3, #10
 8011364:	2100      	movs	r1, #0
 8011366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801136a:	6865      	ldr	r5, [r4, #4]
 801136c:	60a5      	str	r5, [r4, #8]
 801136e:	2d00      	cmp	r5, #0
 8011370:	bfa2      	ittt	ge
 8011372:	6821      	ldrge	r1, [r4, #0]
 8011374:	f021 0104 	bicge.w	r1, r1, #4
 8011378:	6021      	strge	r1, [r4, #0]
 801137a:	b90e      	cbnz	r6, 8011380 <_printf_i+0x118>
 801137c:	2d00      	cmp	r5, #0
 801137e:	d04d      	beq.n	801141c <_printf_i+0x1b4>
 8011380:	4615      	mov	r5, r2
 8011382:	fbb6 f1f3 	udiv	r1, r6, r3
 8011386:	fb03 6711 	mls	r7, r3, r1, r6
 801138a:	5dc7      	ldrb	r7, [r0, r7]
 801138c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011390:	4637      	mov	r7, r6
 8011392:	42bb      	cmp	r3, r7
 8011394:	460e      	mov	r6, r1
 8011396:	d9f4      	bls.n	8011382 <_printf_i+0x11a>
 8011398:	2b08      	cmp	r3, #8
 801139a:	d10b      	bne.n	80113b4 <_printf_i+0x14c>
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	07de      	lsls	r6, r3, #31
 80113a0:	d508      	bpl.n	80113b4 <_printf_i+0x14c>
 80113a2:	6923      	ldr	r3, [r4, #16]
 80113a4:	6861      	ldr	r1, [r4, #4]
 80113a6:	4299      	cmp	r1, r3
 80113a8:	bfde      	ittt	le
 80113aa:	2330      	movle	r3, #48	; 0x30
 80113ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80113b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80113b4:	1b52      	subs	r2, r2, r5
 80113b6:	6122      	str	r2, [r4, #16]
 80113b8:	f8cd a000 	str.w	sl, [sp]
 80113bc:	464b      	mov	r3, r9
 80113be:	aa03      	add	r2, sp, #12
 80113c0:	4621      	mov	r1, r4
 80113c2:	4640      	mov	r0, r8
 80113c4:	f7ff fee2 	bl	801118c <_printf_common>
 80113c8:	3001      	adds	r0, #1
 80113ca:	d14c      	bne.n	8011466 <_printf_i+0x1fe>
 80113cc:	f04f 30ff 	mov.w	r0, #4294967295
 80113d0:	b004      	add	sp, #16
 80113d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113d6:	4835      	ldr	r0, [pc, #212]	; (80114ac <_printf_i+0x244>)
 80113d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80113dc:	6829      	ldr	r1, [r5, #0]
 80113de:	6823      	ldr	r3, [r4, #0]
 80113e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80113e4:	6029      	str	r1, [r5, #0]
 80113e6:	061d      	lsls	r5, r3, #24
 80113e8:	d514      	bpl.n	8011414 <_printf_i+0x1ac>
 80113ea:	07df      	lsls	r7, r3, #31
 80113ec:	bf44      	itt	mi
 80113ee:	f043 0320 	orrmi.w	r3, r3, #32
 80113f2:	6023      	strmi	r3, [r4, #0]
 80113f4:	b91e      	cbnz	r6, 80113fe <_printf_i+0x196>
 80113f6:	6823      	ldr	r3, [r4, #0]
 80113f8:	f023 0320 	bic.w	r3, r3, #32
 80113fc:	6023      	str	r3, [r4, #0]
 80113fe:	2310      	movs	r3, #16
 8011400:	e7b0      	b.n	8011364 <_printf_i+0xfc>
 8011402:	6823      	ldr	r3, [r4, #0]
 8011404:	f043 0320 	orr.w	r3, r3, #32
 8011408:	6023      	str	r3, [r4, #0]
 801140a:	2378      	movs	r3, #120	; 0x78
 801140c:	4828      	ldr	r0, [pc, #160]	; (80114b0 <_printf_i+0x248>)
 801140e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011412:	e7e3      	b.n	80113dc <_printf_i+0x174>
 8011414:	0659      	lsls	r1, r3, #25
 8011416:	bf48      	it	mi
 8011418:	b2b6      	uxthmi	r6, r6
 801141a:	e7e6      	b.n	80113ea <_printf_i+0x182>
 801141c:	4615      	mov	r5, r2
 801141e:	e7bb      	b.n	8011398 <_printf_i+0x130>
 8011420:	682b      	ldr	r3, [r5, #0]
 8011422:	6826      	ldr	r6, [r4, #0]
 8011424:	6961      	ldr	r1, [r4, #20]
 8011426:	1d18      	adds	r0, r3, #4
 8011428:	6028      	str	r0, [r5, #0]
 801142a:	0635      	lsls	r5, r6, #24
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	d501      	bpl.n	8011434 <_printf_i+0x1cc>
 8011430:	6019      	str	r1, [r3, #0]
 8011432:	e002      	b.n	801143a <_printf_i+0x1d2>
 8011434:	0670      	lsls	r0, r6, #25
 8011436:	d5fb      	bpl.n	8011430 <_printf_i+0x1c8>
 8011438:	8019      	strh	r1, [r3, #0]
 801143a:	2300      	movs	r3, #0
 801143c:	6123      	str	r3, [r4, #16]
 801143e:	4615      	mov	r5, r2
 8011440:	e7ba      	b.n	80113b8 <_printf_i+0x150>
 8011442:	682b      	ldr	r3, [r5, #0]
 8011444:	1d1a      	adds	r2, r3, #4
 8011446:	602a      	str	r2, [r5, #0]
 8011448:	681d      	ldr	r5, [r3, #0]
 801144a:	6862      	ldr	r2, [r4, #4]
 801144c:	2100      	movs	r1, #0
 801144e:	4628      	mov	r0, r5
 8011450:	f7ee fef6 	bl	8000240 <memchr>
 8011454:	b108      	cbz	r0, 801145a <_printf_i+0x1f2>
 8011456:	1b40      	subs	r0, r0, r5
 8011458:	6060      	str	r0, [r4, #4]
 801145a:	6863      	ldr	r3, [r4, #4]
 801145c:	6123      	str	r3, [r4, #16]
 801145e:	2300      	movs	r3, #0
 8011460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011464:	e7a8      	b.n	80113b8 <_printf_i+0x150>
 8011466:	6923      	ldr	r3, [r4, #16]
 8011468:	462a      	mov	r2, r5
 801146a:	4649      	mov	r1, r9
 801146c:	4640      	mov	r0, r8
 801146e:	47d0      	blx	sl
 8011470:	3001      	adds	r0, #1
 8011472:	d0ab      	beq.n	80113cc <_printf_i+0x164>
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	079b      	lsls	r3, r3, #30
 8011478:	d413      	bmi.n	80114a2 <_printf_i+0x23a>
 801147a:	68e0      	ldr	r0, [r4, #12]
 801147c:	9b03      	ldr	r3, [sp, #12]
 801147e:	4298      	cmp	r0, r3
 8011480:	bfb8      	it	lt
 8011482:	4618      	movlt	r0, r3
 8011484:	e7a4      	b.n	80113d0 <_printf_i+0x168>
 8011486:	2301      	movs	r3, #1
 8011488:	4632      	mov	r2, r6
 801148a:	4649      	mov	r1, r9
 801148c:	4640      	mov	r0, r8
 801148e:	47d0      	blx	sl
 8011490:	3001      	adds	r0, #1
 8011492:	d09b      	beq.n	80113cc <_printf_i+0x164>
 8011494:	3501      	adds	r5, #1
 8011496:	68e3      	ldr	r3, [r4, #12]
 8011498:	9903      	ldr	r1, [sp, #12]
 801149a:	1a5b      	subs	r3, r3, r1
 801149c:	42ab      	cmp	r3, r5
 801149e:	dcf2      	bgt.n	8011486 <_printf_i+0x21e>
 80114a0:	e7eb      	b.n	801147a <_printf_i+0x212>
 80114a2:	2500      	movs	r5, #0
 80114a4:	f104 0619 	add.w	r6, r4, #25
 80114a8:	e7f5      	b.n	8011496 <_printf_i+0x22e>
 80114aa:	bf00      	nop
 80114ac:	08013d0d 	.word	0x08013d0d
 80114b0:	08013d1e 	.word	0x08013d1e

080114b4 <iprintf>:
 80114b4:	b40f      	push	{r0, r1, r2, r3}
 80114b6:	4b0a      	ldr	r3, [pc, #40]	; (80114e0 <iprintf+0x2c>)
 80114b8:	b513      	push	{r0, r1, r4, lr}
 80114ba:	681c      	ldr	r4, [r3, #0]
 80114bc:	b124      	cbz	r4, 80114c8 <iprintf+0x14>
 80114be:	69a3      	ldr	r3, [r4, #24]
 80114c0:	b913      	cbnz	r3, 80114c8 <iprintf+0x14>
 80114c2:	4620      	mov	r0, r4
 80114c4:	f000 fba8 	bl	8011c18 <__sinit>
 80114c8:	ab05      	add	r3, sp, #20
 80114ca:	9a04      	ldr	r2, [sp, #16]
 80114cc:	68a1      	ldr	r1, [r4, #8]
 80114ce:	9301      	str	r3, [sp, #4]
 80114d0:	4620      	mov	r0, r4
 80114d2:	f7ff fd2b 	bl	8010f2c <_vfiprintf_r>
 80114d6:	b002      	add	sp, #8
 80114d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114dc:	b004      	add	sp, #16
 80114de:	4770      	bx	lr
 80114e0:	20000040 	.word	0x20000040

080114e4 <_puts_r>:
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	460e      	mov	r6, r1
 80114e8:	4605      	mov	r5, r0
 80114ea:	b118      	cbz	r0, 80114f4 <_puts_r+0x10>
 80114ec:	6983      	ldr	r3, [r0, #24]
 80114ee:	b90b      	cbnz	r3, 80114f4 <_puts_r+0x10>
 80114f0:	f000 fb92 	bl	8011c18 <__sinit>
 80114f4:	69ab      	ldr	r3, [r5, #24]
 80114f6:	68ac      	ldr	r4, [r5, #8]
 80114f8:	b913      	cbnz	r3, 8011500 <_puts_r+0x1c>
 80114fa:	4628      	mov	r0, r5
 80114fc:	f000 fb8c 	bl	8011c18 <__sinit>
 8011500:	4b2c      	ldr	r3, [pc, #176]	; (80115b4 <_puts_r+0xd0>)
 8011502:	429c      	cmp	r4, r3
 8011504:	d120      	bne.n	8011548 <_puts_r+0x64>
 8011506:	686c      	ldr	r4, [r5, #4]
 8011508:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801150a:	07db      	lsls	r3, r3, #31
 801150c:	d405      	bmi.n	801151a <_puts_r+0x36>
 801150e:	89a3      	ldrh	r3, [r4, #12]
 8011510:	0598      	lsls	r0, r3, #22
 8011512:	d402      	bmi.n	801151a <_puts_r+0x36>
 8011514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011516:	f7ff fbd6 	bl	8010cc6 <__retarget_lock_acquire_recursive>
 801151a:	89a3      	ldrh	r3, [r4, #12]
 801151c:	0719      	lsls	r1, r3, #28
 801151e:	d51d      	bpl.n	801155c <_puts_r+0x78>
 8011520:	6923      	ldr	r3, [r4, #16]
 8011522:	b1db      	cbz	r3, 801155c <_puts_r+0x78>
 8011524:	3e01      	subs	r6, #1
 8011526:	68a3      	ldr	r3, [r4, #8]
 8011528:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801152c:	3b01      	subs	r3, #1
 801152e:	60a3      	str	r3, [r4, #8]
 8011530:	bb39      	cbnz	r1, 8011582 <_puts_r+0x9e>
 8011532:	2b00      	cmp	r3, #0
 8011534:	da38      	bge.n	80115a8 <_puts_r+0xc4>
 8011536:	4622      	mov	r2, r4
 8011538:	210a      	movs	r1, #10
 801153a:	4628      	mov	r0, r5
 801153c:	f000 f90e 	bl	801175c <__swbuf_r>
 8011540:	3001      	adds	r0, #1
 8011542:	d011      	beq.n	8011568 <_puts_r+0x84>
 8011544:	250a      	movs	r5, #10
 8011546:	e011      	b.n	801156c <_puts_r+0x88>
 8011548:	4b1b      	ldr	r3, [pc, #108]	; (80115b8 <_puts_r+0xd4>)
 801154a:	429c      	cmp	r4, r3
 801154c:	d101      	bne.n	8011552 <_puts_r+0x6e>
 801154e:	68ac      	ldr	r4, [r5, #8]
 8011550:	e7da      	b.n	8011508 <_puts_r+0x24>
 8011552:	4b1a      	ldr	r3, [pc, #104]	; (80115bc <_puts_r+0xd8>)
 8011554:	429c      	cmp	r4, r3
 8011556:	bf08      	it	eq
 8011558:	68ec      	ldreq	r4, [r5, #12]
 801155a:	e7d5      	b.n	8011508 <_puts_r+0x24>
 801155c:	4621      	mov	r1, r4
 801155e:	4628      	mov	r0, r5
 8011560:	f000 f960 	bl	8011824 <__swsetup_r>
 8011564:	2800      	cmp	r0, #0
 8011566:	d0dd      	beq.n	8011524 <_puts_r+0x40>
 8011568:	f04f 35ff 	mov.w	r5, #4294967295
 801156c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801156e:	07da      	lsls	r2, r3, #31
 8011570:	d405      	bmi.n	801157e <_puts_r+0x9a>
 8011572:	89a3      	ldrh	r3, [r4, #12]
 8011574:	059b      	lsls	r3, r3, #22
 8011576:	d402      	bmi.n	801157e <_puts_r+0x9a>
 8011578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801157a:	f7ff fba6 	bl	8010cca <__retarget_lock_release_recursive>
 801157e:	4628      	mov	r0, r5
 8011580:	bd70      	pop	{r4, r5, r6, pc}
 8011582:	2b00      	cmp	r3, #0
 8011584:	da04      	bge.n	8011590 <_puts_r+0xac>
 8011586:	69a2      	ldr	r2, [r4, #24]
 8011588:	429a      	cmp	r2, r3
 801158a:	dc06      	bgt.n	801159a <_puts_r+0xb6>
 801158c:	290a      	cmp	r1, #10
 801158e:	d004      	beq.n	801159a <_puts_r+0xb6>
 8011590:	6823      	ldr	r3, [r4, #0]
 8011592:	1c5a      	adds	r2, r3, #1
 8011594:	6022      	str	r2, [r4, #0]
 8011596:	7019      	strb	r1, [r3, #0]
 8011598:	e7c5      	b.n	8011526 <_puts_r+0x42>
 801159a:	4622      	mov	r2, r4
 801159c:	4628      	mov	r0, r5
 801159e:	f000 f8dd 	bl	801175c <__swbuf_r>
 80115a2:	3001      	adds	r0, #1
 80115a4:	d1bf      	bne.n	8011526 <_puts_r+0x42>
 80115a6:	e7df      	b.n	8011568 <_puts_r+0x84>
 80115a8:	6823      	ldr	r3, [r4, #0]
 80115aa:	250a      	movs	r5, #10
 80115ac:	1c5a      	adds	r2, r3, #1
 80115ae:	6022      	str	r2, [r4, #0]
 80115b0:	701d      	strb	r5, [r3, #0]
 80115b2:	e7db      	b.n	801156c <_puts_r+0x88>
 80115b4:	08013d50 	.word	0x08013d50
 80115b8:	08013d70 	.word	0x08013d70
 80115bc:	08013d30 	.word	0x08013d30

080115c0 <puts>:
 80115c0:	4b02      	ldr	r3, [pc, #8]	; (80115cc <puts+0xc>)
 80115c2:	4601      	mov	r1, r0
 80115c4:	6818      	ldr	r0, [r3, #0]
 80115c6:	f7ff bf8d 	b.w	80114e4 <_puts_r>
 80115ca:	bf00      	nop
 80115cc:	20000040 	.word	0x20000040

080115d0 <_sbrk_r>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4d06      	ldr	r5, [pc, #24]	; (80115ec <_sbrk_r+0x1c>)
 80115d4:	2300      	movs	r3, #0
 80115d6:	4604      	mov	r4, r0
 80115d8:	4608      	mov	r0, r1
 80115da:	602b      	str	r3, [r5, #0]
 80115dc:	f7f0 f80e 	bl	80015fc <_sbrk>
 80115e0:	1c43      	adds	r3, r0, #1
 80115e2:	d102      	bne.n	80115ea <_sbrk_r+0x1a>
 80115e4:	682b      	ldr	r3, [r5, #0]
 80115e6:	b103      	cbz	r3, 80115ea <_sbrk_r+0x1a>
 80115e8:	6023      	str	r3, [r4, #0]
 80115ea:	bd38      	pop	{r3, r4, r5, pc}
 80115ec:	20001238 	.word	0x20001238

080115f0 <_raise_r>:
 80115f0:	291f      	cmp	r1, #31
 80115f2:	b538      	push	{r3, r4, r5, lr}
 80115f4:	4604      	mov	r4, r0
 80115f6:	460d      	mov	r5, r1
 80115f8:	d904      	bls.n	8011604 <_raise_r+0x14>
 80115fa:	2316      	movs	r3, #22
 80115fc:	6003      	str	r3, [r0, #0]
 80115fe:	f04f 30ff 	mov.w	r0, #4294967295
 8011602:	bd38      	pop	{r3, r4, r5, pc}
 8011604:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011606:	b112      	cbz	r2, 801160e <_raise_r+0x1e>
 8011608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801160c:	b94b      	cbnz	r3, 8011622 <_raise_r+0x32>
 801160e:	4620      	mov	r0, r4
 8011610:	f000 f830 	bl	8011674 <_getpid_r>
 8011614:	462a      	mov	r2, r5
 8011616:	4601      	mov	r1, r0
 8011618:	4620      	mov	r0, r4
 801161a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801161e:	f000 b817 	b.w	8011650 <_kill_r>
 8011622:	2b01      	cmp	r3, #1
 8011624:	d00a      	beq.n	801163c <_raise_r+0x4c>
 8011626:	1c59      	adds	r1, r3, #1
 8011628:	d103      	bne.n	8011632 <_raise_r+0x42>
 801162a:	2316      	movs	r3, #22
 801162c:	6003      	str	r3, [r0, #0]
 801162e:	2001      	movs	r0, #1
 8011630:	e7e7      	b.n	8011602 <_raise_r+0x12>
 8011632:	2400      	movs	r4, #0
 8011634:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011638:	4628      	mov	r0, r5
 801163a:	4798      	blx	r3
 801163c:	2000      	movs	r0, #0
 801163e:	e7e0      	b.n	8011602 <_raise_r+0x12>

08011640 <raise>:
 8011640:	4b02      	ldr	r3, [pc, #8]	; (801164c <raise+0xc>)
 8011642:	4601      	mov	r1, r0
 8011644:	6818      	ldr	r0, [r3, #0]
 8011646:	f7ff bfd3 	b.w	80115f0 <_raise_r>
 801164a:	bf00      	nop
 801164c:	20000040 	.word	0x20000040

08011650 <_kill_r>:
 8011650:	b538      	push	{r3, r4, r5, lr}
 8011652:	4d07      	ldr	r5, [pc, #28]	; (8011670 <_kill_r+0x20>)
 8011654:	2300      	movs	r3, #0
 8011656:	4604      	mov	r4, r0
 8011658:	4608      	mov	r0, r1
 801165a:	4611      	mov	r1, r2
 801165c:	602b      	str	r3, [r5, #0]
 801165e:	f7ef ff7f 	bl	8001560 <_kill>
 8011662:	1c43      	adds	r3, r0, #1
 8011664:	d102      	bne.n	801166c <_kill_r+0x1c>
 8011666:	682b      	ldr	r3, [r5, #0]
 8011668:	b103      	cbz	r3, 801166c <_kill_r+0x1c>
 801166a:	6023      	str	r3, [r4, #0]
 801166c:	bd38      	pop	{r3, r4, r5, pc}
 801166e:	bf00      	nop
 8011670:	20001238 	.word	0x20001238

08011674 <_getpid_r>:
 8011674:	f7ef bf6c 	b.w	8001550 <_getpid>

08011678 <siscanf>:
 8011678:	b40e      	push	{r1, r2, r3}
 801167a:	b510      	push	{r4, lr}
 801167c:	b09f      	sub	sp, #124	; 0x7c
 801167e:	ac21      	add	r4, sp, #132	; 0x84
 8011680:	f44f 7101 	mov.w	r1, #516	; 0x204
 8011684:	f854 2b04 	ldr.w	r2, [r4], #4
 8011688:	9201      	str	r2, [sp, #4]
 801168a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801168e:	9004      	str	r0, [sp, #16]
 8011690:	9008      	str	r0, [sp, #32]
 8011692:	f7ee fe2f 	bl	80002f4 <strlen>
 8011696:	4b0c      	ldr	r3, [pc, #48]	; (80116c8 <siscanf+0x50>)
 8011698:	9005      	str	r0, [sp, #20]
 801169a:	9009      	str	r0, [sp, #36]	; 0x24
 801169c:	930d      	str	r3, [sp, #52]	; 0x34
 801169e:	480b      	ldr	r0, [pc, #44]	; (80116cc <siscanf+0x54>)
 80116a0:	9a01      	ldr	r2, [sp, #4]
 80116a2:	6800      	ldr	r0, [r0, #0]
 80116a4:	9403      	str	r4, [sp, #12]
 80116a6:	2300      	movs	r3, #0
 80116a8:	9311      	str	r3, [sp, #68]	; 0x44
 80116aa:	9316      	str	r3, [sp, #88]	; 0x58
 80116ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80116b4:	a904      	add	r1, sp, #16
 80116b6:	4623      	mov	r3, r4
 80116b8:	f000 fc4e 	bl	8011f58 <__ssvfiscanf_r>
 80116bc:	b01f      	add	sp, #124	; 0x7c
 80116be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80116c2:	b003      	add	sp, #12
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop
 80116c8:	080116f3 	.word	0x080116f3
 80116cc:	20000040 	.word	0x20000040

080116d0 <__sread>:
 80116d0:	b510      	push	{r4, lr}
 80116d2:	460c      	mov	r4, r1
 80116d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116d8:	f000 ff08 	bl	80124ec <_read_r>
 80116dc:	2800      	cmp	r0, #0
 80116de:	bfab      	itete	ge
 80116e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80116e2:	89a3      	ldrhlt	r3, [r4, #12]
 80116e4:	181b      	addge	r3, r3, r0
 80116e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80116ea:	bfac      	ite	ge
 80116ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80116ee:	81a3      	strhlt	r3, [r4, #12]
 80116f0:	bd10      	pop	{r4, pc}

080116f2 <__seofread>:
 80116f2:	2000      	movs	r0, #0
 80116f4:	4770      	bx	lr

080116f6 <__swrite>:
 80116f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116fa:	461f      	mov	r7, r3
 80116fc:	898b      	ldrh	r3, [r1, #12]
 80116fe:	05db      	lsls	r3, r3, #23
 8011700:	4605      	mov	r5, r0
 8011702:	460c      	mov	r4, r1
 8011704:	4616      	mov	r6, r2
 8011706:	d505      	bpl.n	8011714 <__swrite+0x1e>
 8011708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801170c:	2302      	movs	r3, #2
 801170e:	2200      	movs	r2, #0
 8011710:	f000 fb20 	bl	8011d54 <_lseek_r>
 8011714:	89a3      	ldrh	r3, [r4, #12]
 8011716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801171a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801171e:	81a3      	strh	r3, [r4, #12]
 8011720:	4632      	mov	r2, r6
 8011722:	463b      	mov	r3, r7
 8011724:	4628      	mov	r0, r5
 8011726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801172a:	f000 b869 	b.w	8011800 <_write_r>

0801172e <__sseek>:
 801172e:	b510      	push	{r4, lr}
 8011730:	460c      	mov	r4, r1
 8011732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011736:	f000 fb0d 	bl	8011d54 <_lseek_r>
 801173a:	1c43      	adds	r3, r0, #1
 801173c:	89a3      	ldrh	r3, [r4, #12]
 801173e:	bf15      	itete	ne
 8011740:	6560      	strne	r0, [r4, #84]	; 0x54
 8011742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801174a:	81a3      	strheq	r3, [r4, #12]
 801174c:	bf18      	it	ne
 801174e:	81a3      	strhne	r3, [r4, #12]
 8011750:	bd10      	pop	{r4, pc}

08011752 <__sclose>:
 8011752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011756:	f000 b935 	b.w	80119c4 <_close_r>
	...

0801175c <__swbuf_r>:
 801175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801175e:	460e      	mov	r6, r1
 8011760:	4614      	mov	r4, r2
 8011762:	4605      	mov	r5, r0
 8011764:	b118      	cbz	r0, 801176e <__swbuf_r+0x12>
 8011766:	6983      	ldr	r3, [r0, #24]
 8011768:	b90b      	cbnz	r3, 801176e <__swbuf_r+0x12>
 801176a:	f000 fa55 	bl	8011c18 <__sinit>
 801176e:	4b21      	ldr	r3, [pc, #132]	; (80117f4 <__swbuf_r+0x98>)
 8011770:	429c      	cmp	r4, r3
 8011772:	d12b      	bne.n	80117cc <__swbuf_r+0x70>
 8011774:	686c      	ldr	r4, [r5, #4]
 8011776:	69a3      	ldr	r3, [r4, #24]
 8011778:	60a3      	str	r3, [r4, #8]
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	071a      	lsls	r2, r3, #28
 801177e:	d52f      	bpl.n	80117e0 <__swbuf_r+0x84>
 8011780:	6923      	ldr	r3, [r4, #16]
 8011782:	b36b      	cbz	r3, 80117e0 <__swbuf_r+0x84>
 8011784:	6923      	ldr	r3, [r4, #16]
 8011786:	6820      	ldr	r0, [r4, #0]
 8011788:	1ac0      	subs	r0, r0, r3
 801178a:	6963      	ldr	r3, [r4, #20]
 801178c:	b2f6      	uxtb	r6, r6
 801178e:	4283      	cmp	r3, r0
 8011790:	4637      	mov	r7, r6
 8011792:	dc04      	bgt.n	801179e <__swbuf_r+0x42>
 8011794:	4621      	mov	r1, r4
 8011796:	4628      	mov	r0, r5
 8011798:	f000 f9aa 	bl	8011af0 <_fflush_r>
 801179c:	bb30      	cbnz	r0, 80117ec <__swbuf_r+0x90>
 801179e:	68a3      	ldr	r3, [r4, #8]
 80117a0:	3b01      	subs	r3, #1
 80117a2:	60a3      	str	r3, [r4, #8]
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	1c5a      	adds	r2, r3, #1
 80117a8:	6022      	str	r2, [r4, #0]
 80117aa:	701e      	strb	r6, [r3, #0]
 80117ac:	6963      	ldr	r3, [r4, #20]
 80117ae:	3001      	adds	r0, #1
 80117b0:	4283      	cmp	r3, r0
 80117b2:	d004      	beq.n	80117be <__swbuf_r+0x62>
 80117b4:	89a3      	ldrh	r3, [r4, #12]
 80117b6:	07db      	lsls	r3, r3, #31
 80117b8:	d506      	bpl.n	80117c8 <__swbuf_r+0x6c>
 80117ba:	2e0a      	cmp	r6, #10
 80117bc:	d104      	bne.n	80117c8 <__swbuf_r+0x6c>
 80117be:	4621      	mov	r1, r4
 80117c0:	4628      	mov	r0, r5
 80117c2:	f000 f995 	bl	8011af0 <_fflush_r>
 80117c6:	b988      	cbnz	r0, 80117ec <__swbuf_r+0x90>
 80117c8:	4638      	mov	r0, r7
 80117ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117cc:	4b0a      	ldr	r3, [pc, #40]	; (80117f8 <__swbuf_r+0x9c>)
 80117ce:	429c      	cmp	r4, r3
 80117d0:	d101      	bne.n	80117d6 <__swbuf_r+0x7a>
 80117d2:	68ac      	ldr	r4, [r5, #8]
 80117d4:	e7cf      	b.n	8011776 <__swbuf_r+0x1a>
 80117d6:	4b09      	ldr	r3, [pc, #36]	; (80117fc <__swbuf_r+0xa0>)
 80117d8:	429c      	cmp	r4, r3
 80117da:	bf08      	it	eq
 80117dc:	68ec      	ldreq	r4, [r5, #12]
 80117de:	e7ca      	b.n	8011776 <__swbuf_r+0x1a>
 80117e0:	4621      	mov	r1, r4
 80117e2:	4628      	mov	r0, r5
 80117e4:	f000 f81e 	bl	8011824 <__swsetup_r>
 80117e8:	2800      	cmp	r0, #0
 80117ea:	d0cb      	beq.n	8011784 <__swbuf_r+0x28>
 80117ec:	f04f 37ff 	mov.w	r7, #4294967295
 80117f0:	e7ea      	b.n	80117c8 <__swbuf_r+0x6c>
 80117f2:	bf00      	nop
 80117f4:	08013d50 	.word	0x08013d50
 80117f8:	08013d70 	.word	0x08013d70
 80117fc:	08013d30 	.word	0x08013d30

08011800 <_write_r>:
 8011800:	b538      	push	{r3, r4, r5, lr}
 8011802:	4d07      	ldr	r5, [pc, #28]	; (8011820 <_write_r+0x20>)
 8011804:	4604      	mov	r4, r0
 8011806:	4608      	mov	r0, r1
 8011808:	4611      	mov	r1, r2
 801180a:	2200      	movs	r2, #0
 801180c:	602a      	str	r2, [r5, #0]
 801180e:	461a      	mov	r2, r3
 8011810:	f7ef fb2a 	bl	8000e68 <_write>
 8011814:	1c43      	adds	r3, r0, #1
 8011816:	d102      	bne.n	801181e <_write_r+0x1e>
 8011818:	682b      	ldr	r3, [r5, #0]
 801181a:	b103      	cbz	r3, 801181e <_write_r+0x1e>
 801181c:	6023      	str	r3, [r4, #0]
 801181e:	bd38      	pop	{r3, r4, r5, pc}
 8011820:	20001238 	.word	0x20001238

08011824 <__swsetup_r>:
 8011824:	4b32      	ldr	r3, [pc, #200]	; (80118f0 <__swsetup_r+0xcc>)
 8011826:	b570      	push	{r4, r5, r6, lr}
 8011828:	681d      	ldr	r5, [r3, #0]
 801182a:	4606      	mov	r6, r0
 801182c:	460c      	mov	r4, r1
 801182e:	b125      	cbz	r5, 801183a <__swsetup_r+0x16>
 8011830:	69ab      	ldr	r3, [r5, #24]
 8011832:	b913      	cbnz	r3, 801183a <__swsetup_r+0x16>
 8011834:	4628      	mov	r0, r5
 8011836:	f000 f9ef 	bl	8011c18 <__sinit>
 801183a:	4b2e      	ldr	r3, [pc, #184]	; (80118f4 <__swsetup_r+0xd0>)
 801183c:	429c      	cmp	r4, r3
 801183e:	d10f      	bne.n	8011860 <__swsetup_r+0x3c>
 8011840:	686c      	ldr	r4, [r5, #4]
 8011842:	89a3      	ldrh	r3, [r4, #12]
 8011844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011848:	0719      	lsls	r1, r3, #28
 801184a:	d42c      	bmi.n	80118a6 <__swsetup_r+0x82>
 801184c:	06dd      	lsls	r5, r3, #27
 801184e:	d411      	bmi.n	8011874 <__swsetup_r+0x50>
 8011850:	2309      	movs	r3, #9
 8011852:	6033      	str	r3, [r6, #0]
 8011854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011858:	81a3      	strh	r3, [r4, #12]
 801185a:	f04f 30ff 	mov.w	r0, #4294967295
 801185e:	e03e      	b.n	80118de <__swsetup_r+0xba>
 8011860:	4b25      	ldr	r3, [pc, #148]	; (80118f8 <__swsetup_r+0xd4>)
 8011862:	429c      	cmp	r4, r3
 8011864:	d101      	bne.n	801186a <__swsetup_r+0x46>
 8011866:	68ac      	ldr	r4, [r5, #8]
 8011868:	e7eb      	b.n	8011842 <__swsetup_r+0x1e>
 801186a:	4b24      	ldr	r3, [pc, #144]	; (80118fc <__swsetup_r+0xd8>)
 801186c:	429c      	cmp	r4, r3
 801186e:	bf08      	it	eq
 8011870:	68ec      	ldreq	r4, [r5, #12]
 8011872:	e7e6      	b.n	8011842 <__swsetup_r+0x1e>
 8011874:	0758      	lsls	r0, r3, #29
 8011876:	d512      	bpl.n	801189e <__swsetup_r+0x7a>
 8011878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801187a:	b141      	cbz	r1, 801188e <__swsetup_r+0x6a>
 801187c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011880:	4299      	cmp	r1, r3
 8011882:	d002      	beq.n	801188a <__swsetup_r+0x66>
 8011884:	4630      	mov	r0, r6
 8011886:	f7ff fa47 	bl	8010d18 <_free_r>
 801188a:	2300      	movs	r3, #0
 801188c:	6363      	str	r3, [r4, #52]	; 0x34
 801188e:	89a3      	ldrh	r3, [r4, #12]
 8011890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011894:	81a3      	strh	r3, [r4, #12]
 8011896:	2300      	movs	r3, #0
 8011898:	6063      	str	r3, [r4, #4]
 801189a:	6923      	ldr	r3, [r4, #16]
 801189c:	6023      	str	r3, [r4, #0]
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	f043 0308 	orr.w	r3, r3, #8
 80118a4:	81a3      	strh	r3, [r4, #12]
 80118a6:	6923      	ldr	r3, [r4, #16]
 80118a8:	b94b      	cbnz	r3, 80118be <__swsetup_r+0x9a>
 80118aa:	89a3      	ldrh	r3, [r4, #12]
 80118ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80118b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80118b4:	d003      	beq.n	80118be <__swsetup_r+0x9a>
 80118b6:	4621      	mov	r1, r4
 80118b8:	4630      	mov	r0, r6
 80118ba:	f000 fa83 	bl	8011dc4 <__smakebuf_r>
 80118be:	89a0      	ldrh	r0, [r4, #12]
 80118c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80118c4:	f010 0301 	ands.w	r3, r0, #1
 80118c8:	d00a      	beq.n	80118e0 <__swsetup_r+0xbc>
 80118ca:	2300      	movs	r3, #0
 80118cc:	60a3      	str	r3, [r4, #8]
 80118ce:	6963      	ldr	r3, [r4, #20]
 80118d0:	425b      	negs	r3, r3
 80118d2:	61a3      	str	r3, [r4, #24]
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	b943      	cbnz	r3, 80118ea <__swsetup_r+0xc6>
 80118d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80118dc:	d1ba      	bne.n	8011854 <__swsetup_r+0x30>
 80118de:	bd70      	pop	{r4, r5, r6, pc}
 80118e0:	0781      	lsls	r1, r0, #30
 80118e2:	bf58      	it	pl
 80118e4:	6963      	ldrpl	r3, [r4, #20]
 80118e6:	60a3      	str	r3, [r4, #8]
 80118e8:	e7f4      	b.n	80118d4 <__swsetup_r+0xb0>
 80118ea:	2000      	movs	r0, #0
 80118ec:	e7f7      	b.n	80118de <__swsetup_r+0xba>
 80118ee:	bf00      	nop
 80118f0:	20000040 	.word	0x20000040
 80118f4:	08013d50 	.word	0x08013d50
 80118f8:	08013d70 	.word	0x08013d70
 80118fc:	08013d30 	.word	0x08013d30

08011900 <__register_exitproc>:
 8011900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011904:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80119c0 <__register_exitproc+0xc0>
 8011908:	4606      	mov	r6, r0
 801190a:	f8d8 0000 	ldr.w	r0, [r8]
 801190e:	461f      	mov	r7, r3
 8011910:	460d      	mov	r5, r1
 8011912:	4691      	mov	r9, r2
 8011914:	f7ff f9d7 	bl	8010cc6 <__retarget_lock_acquire_recursive>
 8011918:	4b25      	ldr	r3, [pc, #148]	; (80119b0 <__register_exitproc+0xb0>)
 801191a:	681c      	ldr	r4, [r3, #0]
 801191c:	b934      	cbnz	r4, 801192c <__register_exitproc+0x2c>
 801191e:	4c25      	ldr	r4, [pc, #148]	; (80119b4 <__register_exitproc+0xb4>)
 8011920:	601c      	str	r4, [r3, #0]
 8011922:	4b25      	ldr	r3, [pc, #148]	; (80119b8 <__register_exitproc+0xb8>)
 8011924:	b113      	cbz	r3, 801192c <__register_exitproc+0x2c>
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801192c:	6863      	ldr	r3, [r4, #4]
 801192e:	2b1f      	cmp	r3, #31
 8011930:	dd07      	ble.n	8011942 <__register_exitproc+0x42>
 8011932:	f8d8 0000 	ldr.w	r0, [r8]
 8011936:	f7ff f9c8 	bl	8010cca <__retarget_lock_release_recursive>
 801193a:	f04f 30ff 	mov.w	r0, #4294967295
 801193e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011942:	b34e      	cbz	r6, 8011998 <__register_exitproc+0x98>
 8011944:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8011948:	b988      	cbnz	r0, 801196e <__register_exitproc+0x6e>
 801194a:	4b1c      	ldr	r3, [pc, #112]	; (80119bc <__register_exitproc+0xbc>)
 801194c:	b923      	cbnz	r3, 8011958 <__register_exitproc+0x58>
 801194e:	f8d8 0000 	ldr.w	r0, [r8]
 8011952:	f7ff f9b9 	bl	8010cc8 <__retarget_lock_release>
 8011956:	e7f0      	b.n	801193a <__register_exitproc+0x3a>
 8011958:	f44f 7084 	mov.w	r0, #264	; 0x108
 801195c:	f7ff f9b6 	bl	8010ccc <malloc>
 8011960:	2800      	cmp	r0, #0
 8011962:	d0f4      	beq.n	801194e <__register_exitproc+0x4e>
 8011964:	2300      	movs	r3, #0
 8011966:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801196a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801196e:	6863      	ldr	r3, [r4, #4]
 8011970:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011974:	2201      	movs	r2, #1
 8011976:	409a      	lsls	r2, r3
 8011978:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801197c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8011980:	4313      	orrs	r3, r2
 8011982:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8011986:	2e02      	cmp	r6, #2
 8011988:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801198c:	bf02      	ittt	eq
 801198e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8011992:	4313      	orreq	r3, r2
 8011994:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8011998:	6863      	ldr	r3, [r4, #4]
 801199a:	f8d8 0000 	ldr.w	r0, [r8]
 801199e:	1c5a      	adds	r2, r3, #1
 80119a0:	3302      	adds	r3, #2
 80119a2:	6062      	str	r2, [r4, #4]
 80119a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80119a8:	f7ff f98f 	bl	8010cca <__retarget_lock_release_recursive>
 80119ac:	2000      	movs	r0, #0
 80119ae:	e7c6      	b.n	801193e <__register_exitproc+0x3e>
 80119b0:	20001234 	.word	0x20001234
 80119b4:	200011a8 	.word	0x200011a8
 80119b8:	00000000 	.word	0x00000000
 80119bc:	08010ccd 	.word	0x08010ccd
 80119c0:	200000a4 	.word	0x200000a4

080119c4 <_close_r>:
 80119c4:	b538      	push	{r3, r4, r5, lr}
 80119c6:	4d06      	ldr	r5, [pc, #24]	; (80119e0 <_close_r+0x1c>)
 80119c8:	2300      	movs	r3, #0
 80119ca:	4604      	mov	r4, r0
 80119cc:	4608      	mov	r0, r1
 80119ce:	602b      	str	r3, [r5, #0]
 80119d0:	f7ef fde0 	bl	8001594 <_close>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d102      	bne.n	80119de <_close_r+0x1a>
 80119d8:	682b      	ldr	r3, [r5, #0]
 80119da:	b103      	cbz	r3, 80119de <_close_r+0x1a>
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	bd38      	pop	{r3, r4, r5, pc}
 80119e0:	20001238 	.word	0x20001238

080119e4 <__sflush_r>:
 80119e4:	898a      	ldrh	r2, [r1, #12]
 80119e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119ea:	4605      	mov	r5, r0
 80119ec:	0710      	lsls	r0, r2, #28
 80119ee:	460c      	mov	r4, r1
 80119f0:	d458      	bmi.n	8011aa4 <__sflush_r+0xc0>
 80119f2:	684b      	ldr	r3, [r1, #4]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	dc05      	bgt.n	8011a04 <__sflush_r+0x20>
 80119f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	dc02      	bgt.n	8011a04 <__sflush_r+0x20>
 80119fe:	2000      	movs	r0, #0
 8011a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a06:	2e00      	cmp	r6, #0
 8011a08:	d0f9      	beq.n	80119fe <__sflush_r+0x1a>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a10:	682f      	ldr	r7, [r5, #0]
 8011a12:	602b      	str	r3, [r5, #0]
 8011a14:	d032      	beq.n	8011a7c <__sflush_r+0x98>
 8011a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a18:	89a3      	ldrh	r3, [r4, #12]
 8011a1a:	075a      	lsls	r2, r3, #29
 8011a1c:	d505      	bpl.n	8011a2a <__sflush_r+0x46>
 8011a1e:	6863      	ldr	r3, [r4, #4]
 8011a20:	1ac0      	subs	r0, r0, r3
 8011a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a24:	b10b      	cbz	r3, 8011a2a <__sflush_r+0x46>
 8011a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a28:	1ac0      	subs	r0, r0, r3
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4602      	mov	r2, r0
 8011a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a30:	6a21      	ldr	r1, [r4, #32]
 8011a32:	4628      	mov	r0, r5
 8011a34:	47b0      	blx	r6
 8011a36:	1c43      	adds	r3, r0, #1
 8011a38:	89a3      	ldrh	r3, [r4, #12]
 8011a3a:	d106      	bne.n	8011a4a <__sflush_r+0x66>
 8011a3c:	6829      	ldr	r1, [r5, #0]
 8011a3e:	291d      	cmp	r1, #29
 8011a40:	d82c      	bhi.n	8011a9c <__sflush_r+0xb8>
 8011a42:	4a2a      	ldr	r2, [pc, #168]	; (8011aec <__sflush_r+0x108>)
 8011a44:	40ca      	lsrs	r2, r1
 8011a46:	07d6      	lsls	r6, r2, #31
 8011a48:	d528      	bpl.n	8011a9c <__sflush_r+0xb8>
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	6062      	str	r2, [r4, #4]
 8011a4e:	04d9      	lsls	r1, r3, #19
 8011a50:	6922      	ldr	r2, [r4, #16]
 8011a52:	6022      	str	r2, [r4, #0]
 8011a54:	d504      	bpl.n	8011a60 <__sflush_r+0x7c>
 8011a56:	1c42      	adds	r2, r0, #1
 8011a58:	d101      	bne.n	8011a5e <__sflush_r+0x7a>
 8011a5a:	682b      	ldr	r3, [r5, #0]
 8011a5c:	b903      	cbnz	r3, 8011a60 <__sflush_r+0x7c>
 8011a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8011a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a62:	602f      	str	r7, [r5, #0]
 8011a64:	2900      	cmp	r1, #0
 8011a66:	d0ca      	beq.n	80119fe <__sflush_r+0x1a>
 8011a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a6c:	4299      	cmp	r1, r3
 8011a6e:	d002      	beq.n	8011a76 <__sflush_r+0x92>
 8011a70:	4628      	mov	r0, r5
 8011a72:	f7ff f951 	bl	8010d18 <_free_r>
 8011a76:	2000      	movs	r0, #0
 8011a78:	6360      	str	r0, [r4, #52]	; 0x34
 8011a7a:	e7c1      	b.n	8011a00 <__sflush_r+0x1c>
 8011a7c:	6a21      	ldr	r1, [r4, #32]
 8011a7e:	2301      	movs	r3, #1
 8011a80:	4628      	mov	r0, r5
 8011a82:	47b0      	blx	r6
 8011a84:	1c41      	adds	r1, r0, #1
 8011a86:	d1c7      	bne.n	8011a18 <__sflush_r+0x34>
 8011a88:	682b      	ldr	r3, [r5, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d0c4      	beq.n	8011a18 <__sflush_r+0x34>
 8011a8e:	2b1d      	cmp	r3, #29
 8011a90:	d001      	beq.n	8011a96 <__sflush_r+0xb2>
 8011a92:	2b16      	cmp	r3, #22
 8011a94:	d101      	bne.n	8011a9a <__sflush_r+0xb6>
 8011a96:	602f      	str	r7, [r5, #0]
 8011a98:	e7b1      	b.n	80119fe <__sflush_r+0x1a>
 8011a9a:	89a3      	ldrh	r3, [r4, #12]
 8011a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa0:	81a3      	strh	r3, [r4, #12]
 8011aa2:	e7ad      	b.n	8011a00 <__sflush_r+0x1c>
 8011aa4:	690f      	ldr	r7, [r1, #16]
 8011aa6:	2f00      	cmp	r7, #0
 8011aa8:	d0a9      	beq.n	80119fe <__sflush_r+0x1a>
 8011aaa:	0793      	lsls	r3, r2, #30
 8011aac:	680e      	ldr	r6, [r1, #0]
 8011aae:	bf08      	it	eq
 8011ab0:	694b      	ldreq	r3, [r1, #20]
 8011ab2:	600f      	str	r7, [r1, #0]
 8011ab4:	bf18      	it	ne
 8011ab6:	2300      	movne	r3, #0
 8011ab8:	eba6 0807 	sub.w	r8, r6, r7
 8011abc:	608b      	str	r3, [r1, #8]
 8011abe:	f1b8 0f00 	cmp.w	r8, #0
 8011ac2:	dd9c      	ble.n	80119fe <__sflush_r+0x1a>
 8011ac4:	6a21      	ldr	r1, [r4, #32]
 8011ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ac8:	4643      	mov	r3, r8
 8011aca:	463a      	mov	r2, r7
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b0      	blx	r6
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	dc06      	bgt.n	8011ae2 <__sflush_r+0xfe>
 8011ad4:	89a3      	ldrh	r3, [r4, #12]
 8011ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ada:	81a3      	strh	r3, [r4, #12]
 8011adc:	f04f 30ff 	mov.w	r0, #4294967295
 8011ae0:	e78e      	b.n	8011a00 <__sflush_r+0x1c>
 8011ae2:	4407      	add	r7, r0
 8011ae4:	eba8 0800 	sub.w	r8, r8, r0
 8011ae8:	e7e9      	b.n	8011abe <__sflush_r+0xda>
 8011aea:	bf00      	nop
 8011aec:	20400001 	.word	0x20400001

08011af0 <_fflush_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	690b      	ldr	r3, [r1, #16]
 8011af4:	4605      	mov	r5, r0
 8011af6:	460c      	mov	r4, r1
 8011af8:	b913      	cbnz	r3, 8011b00 <_fflush_r+0x10>
 8011afa:	2500      	movs	r5, #0
 8011afc:	4628      	mov	r0, r5
 8011afe:	bd38      	pop	{r3, r4, r5, pc}
 8011b00:	b118      	cbz	r0, 8011b0a <_fflush_r+0x1a>
 8011b02:	6983      	ldr	r3, [r0, #24]
 8011b04:	b90b      	cbnz	r3, 8011b0a <_fflush_r+0x1a>
 8011b06:	f000 f887 	bl	8011c18 <__sinit>
 8011b0a:	4b14      	ldr	r3, [pc, #80]	; (8011b5c <_fflush_r+0x6c>)
 8011b0c:	429c      	cmp	r4, r3
 8011b0e:	d11b      	bne.n	8011b48 <_fflush_r+0x58>
 8011b10:	686c      	ldr	r4, [r5, #4]
 8011b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d0ef      	beq.n	8011afa <_fflush_r+0xa>
 8011b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b1c:	07d0      	lsls	r0, r2, #31
 8011b1e:	d404      	bmi.n	8011b2a <_fflush_r+0x3a>
 8011b20:	0599      	lsls	r1, r3, #22
 8011b22:	d402      	bmi.n	8011b2a <_fflush_r+0x3a>
 8011b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b26:	f7ff f8ce 	bl	8010cc6 <__retarget_lock_acquire_recursive>
 8011b2a:	4628      	mov	r0, r5
 8011b2c:	4621      	mov	r1, r4
 8011b2e:	f7ff ff59 	bl	80119e4 <__sflush_r>
 8011b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b34:	07da      	lsls	r2, r3, #31
 8011b36:	4605      	mov	r5, r0
 8011b38:	d4e0      	bmi.n	8011afc <_fflush_r+0xc>
 8011b3a:	89a3      	ldrh	r3, [r4, #12]
 8011b3c:	059b      	lsls	r3, r3, #22
 8011b3e:	d4dd      	bmi.n	8011afc <_fflush_r+0xc>
 8011b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b42:	f7ff f8c2 	bl	8010cca <__retarget_lock_release_recursive>
 8011b46:	e7d9      	b.n	8011afc <_fflush_r+0xc>
 8011b48:	4b05      	ldr	r3, [pc, #20]	; (8011b60 <_fflush_r+0x70>)
 8011b4a:	429c      	cmp	r4, r3
 8011b4c:	d101      	bne.n	8011b52 <_fflush_r+0x62>
 8011b4e:	68ac      	ldr	r4, [r5, #8]
 8011b50:	e7df      	b.n	8011b12 <_fflush_r+0x22>
 8011b52:	4b04      	ldr	r3, [pc, #16]	; (8011b64 <_fflush_r+0x74>)
 8011b54:	429c      	cmp	r4, r3
 8011b56:	bf08      	it	eq
 8011b58:	68ec      	ldreq	r4, [r5, #12]
 8011b5a:	e7da      	b.n	8011b12 <_fflush_r+0x22>
 8011b5c:	08013d50 	.word	0x08013d50
 8011b60:	08013d70 	.word	0x08013d70
 8011b64:	08013d30 	.word	0x08013d30

08011b68 <std>:
 8011b68:	2300      	movs	r3, #0
 8011b6a:	b510      	push	{r4, lr}
 8011b6c:	4604      	mov	r4, r0
 8011b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8011b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011b76:	6083      	str	r3, [r0, #8]
 8011b78:	8181      	strh	r1, [r0, #12]
 8011b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8011b7c:	81c2      	strh	r2, [r0, #14]
 8011b7e:	6183      	str	r3, [r0, #24]
 8011b80:	4619      	mov	r1, r3
 8011b82:	2208      	movs	r2, #8
 8011b84:	305c      	adds	r0, #92	; 0x5c
 8011b86:	f7ff f8bf 	bl	8010d08 <memset>
 8011b8a:	4b05      	ldr	r3, [pc, #20]	; (8011ba0 <std+0x38>)
 8011b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8011b8e:	4b05      	ldr	r3, [pc, #20]	; (8011ba4 <std+0x3c>)
 8011b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8011b92:	4b05      	ldr	r3, [pc, #20]	; (8011ba8 <std+0x40>)
 8011b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011b96:	4b05      	ldr	r3, [pc, #20]	; (8011bac <std+0x44>)
 8011b98:	6224      	str	r4, [r4, #32]
 8011b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8011b9c:	bd10      	pop	{r4, pc}
 8011b9e:	bf00      	nop
 8011ba0:	080116d1 	.word	0x080116d1
 8011ba4:	080116f7 	.word	0x080116f7
 8011ba8:	0801172f 	.word	0x0801172f
 8011bac:	08011753 	.word	0x08011753

08011bb0 <_cleanup_r>:
 8011bb0:	4901      	ldr	r1, [pc, #4]	; (8011bb8 <_cleanup_r+0x8>)
 8011bb2:	f000 b8af 	b.w	8011d14 <_fwalk_reent>
 8011bb6:	bf00      	nop
 8011bb8:	08011af1 	.word	0x08011af1

08011bbc <__sfmoreglue>:
 8011bbc:	b570      	push	{r4, r5, r6, lr}
 8011bbe:	2268      	movs	r2, #104	; 0x68
 8011bc0:	1e4d      	subs	r5, r1, #1
 8011bc2:	4355      	muls	r5, r2
 8011bc4:	460e      	mov	r6, r1
 8011bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011bca:	f7ff f911 	bl	8010df0 <_malloc_r>
 8011bce:	4604      	mov	r4, r0
 8011bd0:	b140      	cbz	r0, 8011be4 <__sfmoreglue+0x28>
 8011bd2:	2100      	movs	r1, #0
 8011bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8011bd8:	300c      	adds	r0, #12
 8011bda:	60a0      	str	r0, [r4, #8]
 8011bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011be0:	f7ff f892 	bl	8010d08 <memset>
 8011be4:	4620      	mov	r0, r4
 8011be6:	bd70      	pop	{r4, r5, r6, pc}

08011be8 <__sfp_lock_acquire>:
 8011be8:	4801      	ldr	r0, [pc, #4]	; (8011bf0 <__sfp_lock_acquire+0x8>)
 8011bea:	f7ff b86c 	b.w	8010cc6 <__retarget_lock_acquire_recursive>
 8011bee:	bf00      	nop
 8011bf0:	2000119d 	.word	0x2000119d

08011bf4 <__sfp_lock_release>:
 8011bf4:	4801      	ldr	r0, [pc, #4]	; (8011bfc <__sfp_lock_release+0x8>)
 8011bf6:	f7ff b868 	b.w	8010cca <__retarget_lock_release_recursive>
 8011bfa:	bf00      	nop
 8011bfc:	2000119d 	.word	0x2000119d

08011c00 <__sinit_lock_acquire>:
 8011c00:	4801      	ldr	r0, [pc, #4]	; (8011c08 <__sinit_lock_acquire+0x8>)
 8011c02:	f7ff b860 	b.w	8010cc6 <__retarget_lock_acquire_recursive>
 8011c06:	bf00      	nop
 8011c08:	2000119e 	.word	0x2000119e

08011c0c <__sinit_lock_release>:
 8011c0c:	4801      	ldr	r0, [pc, #4]	; (8011c14 <__sinit_lock_release+0x8>)
 8011c0e:	f7ff b85c 	b.w	8010cca <__retarget_lock_release_recursive>
 8011c12:	bf00      	nop
 8011c14:	2000119e 	.word	0x2000119e

08011c18 <__sinit>:
 8011c18:	b510      	push	{r4, lr}
 8011c1a:	4604      	mov	r4, r0
 8011c1c:	f7ff fff0 	bl	8011c00 <__sinit_lock_acquire>
 8011c20:	69a3      	ldr	r3, [r4, #24]
 8011c22:	b11b      	cbz	r3, 8011c2c <__sinit+0x14>
 8011c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c28:	f7ff bff0 	b.w	8011c0c <__sinit_lock_release>
 8011c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011c30:	6523      	str	r3, [r4, #80]	; 0x50
 8011c32:	4b13      	ldr	r3, [pc, #76]	; (8011c80 <__sinit+0x68>)
 8011c34:	4a13      	ldr	r2, [pc, #76]	; (8011c84 <__sinit+0x6c>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8011c3a:	42a3      	cmp	r3, r4
 8011c3c:	bf04      	itt	eq
 8011c3e:	2301      	moveq	r3, #1
 8011c40:	61a3      	streq	r3, [r4, #24]
 8011c42:	4620      	mov	r0, r4
 8011c44:	f000 f820 	bl	8011c88 <__sfp>
 8011c48:	6060      	str	r0, [r4, #4]
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f000 f81c 	bl	8011c88 <__sfp>
 8011c50:	60a0      	str	r0, [r4, #8]
 8011c52:	4620      	mov	r0, r4
 8011c54:	f000 f818 	bl	8011c88 <__sfp>
 8011c58:	2200      	movs	r2, #0
 8011c5a:	60e0      	str	r0, [r4, #12]
 8011c5c:	2104      	movs	r1, #4
 8011c5e:	6860      	ldr	r0, [r4, #4]
 8011c60:	f7ff ff82 	bl	8011b68 <std>
 8011c64:	68a0      	ldr	r0, [r4, #8]
 8011c66:	2201      	movs	r2, #1
 8011c68:	2109      	movs	r1, #9
 8011c6a:	f7ff ff7d 	bl	8011b68 <std>
 8011c6e:	68e0      	ldr	r0, [r4, #12]
 8011c70:	2202      	movs	r2, #2
 8011c72:	2112      	movs	r1, #18
 8011c74:	f7ff ff78 	bl	8011b68 <std>
 8011c78:	2301      	movs	r3, #1
 8011c7a:	61a3      	str	r3, [r4, #24]
 8011c7c:	e7d2      	b.n	8011c24 <__sinit+0xc>
 8011c7e:	bf00      	nop
 8011c80:	08013cf8 	.word	0x08013cf8
 8011c84:	08011bb1 	.word	0x08011bb1

08011c88 <__sfp>:
 8011c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c8a:	4607      	mov	r7, r0
 8011c8c:	f7ff ffac 	bl	8011be8 <__sfp_lock_acquire>
 8011c90:	4b1e      	ldr	r3, [pc, #120]	; (8011d0c <__sfp+0x84>)
 8011c92:	681e      	ldr	r6, [r3, #0]
 8011c94:	69b3      	ldr	r3, [r6, #24]
 8011c96:	b913      	cbnz	r3, 8011c9e <__sfp+0x16>
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f7ff ffbd 	bl	8011c18 <__sinit>
 8011c9e:	3648      	adds	r6, #72	; 0x48
 8011ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ca4:	3b01      	subs	r3, #1
 8011ca6:	d503      	bpl.n	8011cb0 <__sfp+0x28>
 8011ca8:	6833      	ldr	r3, [r6, #0]
 8011caa:	b30b      	cbz	r3, 8011cf0 <__sfp+0x68>
 8011cac:	6836      	ldr	r6, [r6, #0]
 8011cae:	e7f7      	b.n	8011ca0 <__sfp+0x18>
 8011cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011cb4:	b9d5      	cbnz	r5, 8011cec <__sfp+0x64>
 8011cb6:	4b16      	ldr	r3, [pc, #88]	; (8011d10 <__sfp+0x88>)
 8011cb8:	60e3      	str	r3, [r4, #12]
 8011cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8011cc0:	f7ff f800 	bl	8010cc4 <__retarget_lock_init_recursive>
 8011cc4:	f7ff ff96 	bl	8011bf4 <__sfp_lock_release>
 8011cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011cd0:	6025      	str	r5, [r4, #0]
 8011cd2:	61a5      	str	r5, [r4, #24]
 8011cd4:	2208      	movs	r2, #8
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011cdc:	f7ff f814 	bl	8010d08 <memset>
 8011ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011ce8:	4620      	mov	r0, r4
 8011cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cec:	3468      	adds	r4, #104	; 0x68
 8011cee:	e7d9      	b.n	8011ca4 <__sfp+0x1c>
 8011cf0:	2104      	movs	r1, #4
 8011cf2:	4638      	mov	r0, r7
 8011cf4:	f7ff ff62 	bl	8011bbc <__sfmoreglue>
 8011cf8:	4604      	mov	r4, r0
 8011cfa:	6030      	str	r0, [r6, #0]
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d1d5      	bne.n	8011cac <__sfp+0x24>
 8011d00:	f7ff ff78 	bl	8011bf4 <__sfp_lock_release>
 8011d04:	230c      	movs	r3, #12
 8011d06:	603b      	str	r3, [r7, #0]
 8011d08:	e7ee      	b.n	8011ce8 <__sfp+0x60>
 8011d0a:	bf00      	nop
 8011d0c:	08013cf8 	.word	0x08013cf8
 8011d10:	ffff0001 	.word	0xffff0001

08011d14 <_fwalk_reent>:
 8011d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011d18:	4606      	mov	r6, r0
 8011d1a:	4688      	mov	r8, r1
 8011d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d20:	2700      	movs	r7, #0
 8011d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011d26:	f1b9 0901 	subs.w	r9, r9, #1
 8011d2a:	d505      	bpl.n	8011d38 <_fwalk_reent+0x24>
 8011d2c:	6824      	ldr	r4, [r4, #0]
 8011d2e:	2c00      	cmp	r4, #0
 8011d30:	d1f7      	bne.n	8011d22 <_fwalk_reent+0xe>
 8011d32:	4638      	mov	r0, r7
 8011d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d38:	89ab      	ldrh	r3, [r5, #12]
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d907      	bls.n	8011d4e <_fwalk_reent+0x3a>
 8011d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d42:	3301      	adds	r3, #1
 8011d44:	d003      	beq.n	8011d4e <_fwalk_reent+0x3a>
 8011d46:	4629      	mov	r1, r5
 8011d48:	4630      	mov	r0, r6
 8011d4a:	47c0      	blx	r8
 8011d4c:	4307      	orrs	r7, r0
 8011d4e:	3568      	adds	r5, #104	; 0x68
 8011d50:	e7e9      	b.n	8011d26 <_fwalk_reent+0x12>
	...

08011d54 <_lseek_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4d07      	ldr	r5, [pc, #28]	; (8011d74 <_lseek_r+0x20>)
 8011d58:	4604      	mov	r4, r0
 8011d5a:	4608      	mov	r0, r1
 8011d5c:	4611      	mov	r1, r2
 8011d5e:	2200      	movs	r2, #0
 8011d60:	602a      	str	r2, [r5, #0]
 8011d62:	461a      	mov	r2, r3
 8011d64:	f7ef fc3d 	bl	80015e2 <_lseek>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	d102      	bne.n	8011d72 <_lseek_r+0x1e>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	b103      	cbz	r3, 8011d72 <_lseek_r+0x1e>
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	20001238 	.word	0x20001238

08011d78 <__swhatbuf_r>:
 8011d78:	b570      	push	{r4, r5, r6, lr}
 8011d7a:	460e      	mov	r6, r1
 8011d7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d80:	2900      	cmp	r1, #0
 8011d82:	b096      	sub	sp, #88	; 0x58
 8011d84:	4614      	mov	r4, r2
 8011d86:	461d      	mov	r5, r3
 8011d88:	da08      	bge.n	8011d9c <__swhatbuf_r+0x24>
 8011d8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	602a      	str	r2, [r5, #0]
 8011d92:	061a      	lsls	r2, r3, #24
 8011d94:	d410      	bmi.n	8011db8 <__swhatbuf_r+0x40>
 8011d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d9a:	e00e      	b.n	8011dba <__swhatbuf_r+0x42>
 8011d9c:	466a      	mov	r2, sp
 8011d9e:	f000 fd21 	bl	80127e4 <_fstat_r>
 8011da2:	2800      	cmp	r0, #0
 8011da4:	dbf1      	blt.n	8011d8a <__swhatbuf_r+0x12>
 8011da6:	9a01      	ldr	r2, [sp, #4]
 8011da8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011dac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011db0:	425a      	negs	r2, r3
 8011db2:	415a      	adcs	r2, r3
 8011db4:	602a      	str	r2, [r5, #0]
 8011db6:	e7ee      	b.n	8011d96 <__swhatbuf_r+0x1e>
 8011db8:	2340      	movs	r3, #64	; 0x40
 8011dba:	2000      	movs	r0, #0
 8011dbc:	6023      	str	r3, [r4, #0]
 8011dbe:	b016      	add	sp, #88	; 0x58
 8011dc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08011dc4 <__smakebuf_r>:
 8011dc4:	898b      	ldrh	r3, [r1, #12]
 8011dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011dc8:	079d      	lsls	r5, r3, #30
 8011dca:	4606      	mov	r6, r0
 8011dcc:	460c      	mov	r4, r1
 8011dce:	d507      	bpl.n	8011de0 <__smakebuf_r+0x1c>
 8011dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011dd4:	6023      	str	r3, [r4, #0]
 8011dd6:	6123      	str	r3, [r4, #16]
 8011dd8:	2301      	movs	r3, #1
 8011dda:	6163      	str	r3, [r4, #20]
 8011ddc:	b002      	add	sp, #8
 8011dde:	bd70      	pop	{r4, r5, r6, pc}
 8011de0:	ab01      	add	r3, sp, #4
 8011de2:	466a      	mov	r2, sp
 8011de4:	f7ff ffc8 	bl	8011d78 <__swhatbuf_r>
 8011de8:	9900      	ldr	r1, [sp, #0]
 8011dea:	4605      	mov	r5, r0
 8011dec:	4630      	mov	r0, r6
 8011dee:	f7fe ffff 	bl	8010df0 <_malloc_r>
 8011df2:	b948      	cbnz	r0, 8011e08 <__smakebuf_r+0x44>
 8011df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011df8:	059a      	lsls	r2, r3, #22
 8011dfa:	d4ef      	bmi.n	8011ddc <__smakebuf_r+0x18>
 8011dfc:	f023 0303 	bic.w	r3, r3, #3
 8011e00:	f043 0302 	orr.w	r3, r3, #2
 8011e04:	81a3      	strh	r3, [r4, #12]
 8011e06:	e7e3      	b.n	8011dd0 <__smakebuf_r+0xc>
 8011e08:	4b0d      	ldr	r3, [pc, #52]	; (8011e40 <__smakebuf_r+0x7c>)
 8011e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8011e0c:	89a3      	ldrh	r3, [r4, #12]
 8011e0e:	6020      	str	r0, [r4, #0]
 8011e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e14:	81a3      	strh	r3, [r4, #12]
 8011e16:	9b00      	ldr	r3, [sp, #0]
 8011e18:	6163      	str	r3, [r4, #20]
 8011e1a:	9b01      	ldr	r3, [sp, #4]
 8011e1c:	6120      	str	r0, [r4, #16]
 8011e1e:	b15b      	cbz	r3, 8011e38 <__smakebuf_r+0x74>
 8011e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e24:	4630      	mov	r0, r6
 8011e26:	f000 fcef 	bl	8012808 <_isatty_r>
 8011e2a:	b128      	cbz	r0, 8011e38 <__smakebuf_r+0x74>
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	f023 0303 	bic.w	r3, r3, #3
 8011e32:	f043 0301 	orr.w	r3, r3, #1
 8011e36:	81a3      	strh	r3, [r4, #12]
 8011e38:	89a0      	ldrh	r0, [r4, #12]
 8011e3a:	4305      	orrs	r5, r0
 8011e3c:	81a5      	strh	r5, [r4, #12]
 8011e3e:	e7cd      	b.n	8011ddc <__smakebuf_r+0x18>
 8011e40:	08011bb1 	.word	0x08011bb1

08011e44 <_realloc_r>:
 8011e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e48:	4680      	mov	r8, r0
 8011e4a:	4614      	mov	r4, r2
 8011e4c:	460e      	mov	r6, r1
 8011e4e:	b921      	cbnz	r1, 8011e5a <_realloc_r+0x16>
 8011e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e54:	4611      	mov	r1, r2
 8011e56:	f7fe bfcb 	b.w	8010df0 <_malloc_r>
 8011e5a:	b92a      	cbnz	r2, 8011e68 <_realloc_r+0x24>
 8011e5c:	f7fe ff5c 	bl	8010d18 <_free_r>
 8011e60:	4625      	mov	r5, r4
 8011e62:	4628      	mov	r0, r5
 8011e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e68:	f000 fcde 	bl	8012828 <_malloc_usable_size_r>
 8011e6c:	4284      	cmp	r4, r0
 8011e6e:	4607      	mov	r7, r0
 8011e70:	d802      	bhi.n	8011e78 <_realloc_r+0x34>
 8011e72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011e76:	d812      	bhi.n	8011e9e <_realloc_r+0x5a>
 8011e78:	4621      	mov	r1, r4
 8011e7a:	4640      	mov	r0, r8
 8011e7c:	f7fe ffb8 	bl	8010df0 <_malloc_r>
 8011e80:	4605      	mov	r5, r0
 8011e82:	2800      	cmp	r0, #0
 8011e84:	d0ed      	beq.n	8011e62 <_realloc_r+0x1e>
 8011e86:	42bc      	cmp	r4, r7
 8011e88:	4622      	mov	r2, r4
 8011e8a:	4631      	mov	r1, r6
 8011e8c:	bf28      	it	cs
 8011e8e:	463a      	movcs	r2, r7
 8011e90:	f7fe ff2c 	bl	8010cec <memcpy>
 8011e94:	4631      	mov	r1, r6
 8011e96:	4640      	mov	r0, r8
 8011e98:	f7fe ff3e 	bl	8010d18 <_free_r>
 8011e9c:	e7e1      	b.n	8011e62 <_realloc_r+0x1e>
 8011e9e:	4635      	mov	r5, r6
 8011ea0:	e7df      	b.n	8011e62 <_realloc_r+0x1e>

08011ea2 <_sungetc_r>:
 8011ea2:	b538      	push	{r3, r4, r5, lr}
 8011ea4:	1c4b      	adds	r3, r1, #1
 8011ea6:	4614      	mov	r4, r2
 8011ea8:	d103      	bne.n	8011eb2 <_sungetc_r+0x10>
 8011eaa:	f04f 35ff 	mov.w	r5, #4294967295
 8011eae:	4628      	mov	r0, r5
 8011eb0:	bd38      	pop	{r3, r4, r5, pc}
 8011eb2:	8993      	ldrh	r3, [r2, #12]
 8011eb4:	f023 0320 	bic.w	r3, r3, #32
 8011eb8:	8193      	strh	r3, [r2, #12]
 8011eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011ebc:	6852      	ldr	r2, [r2, #4]
 8011ebe:	b2cd      	uxtb	r5, r1
 8011ec0:	b18b      	cbz	r3, 8011ee6 <_sungetc_r+0x44>
 8011ec2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	dd08      	ble.n	8011eda <_sungetc_r+0x38>
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	1e5a      	subs	r2, r3, #1
 8011ecc:	6022      	str	r2, [r4, #0]
 8011ece:	f803 5c01 	strb.w	r5, [r3, #-1]
 8011ed2:	6863      	ldr	r3, [r4, #4]
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	6063      	str	r3, [r4, #4]
 8011ed8:	e7e9      	b.n	8011eae <_sungetc_r+0xc>
 8011eda:	4621      	mov	r1, r4
 8011edc:	f000 fc48 	bl	8012770 <__submore>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	d0f1      	beq.n	8011ec8 <_sungetc_r+0x26>
 8011ee4:	e7e1      	b.n	8011eaa <_sungetc_r+0x8>
 8011ee6:	6921      	ldr	r1, [r4, #16]
 8011ee8:	6823      	ldr	r3, [r4, #0]
 8011eea:	b151      	cbz	r1, 8011f02 <_sungetc_r+0x60>
 8011eec:	4299      	cmp	r1, r3
 8011eee:	d208      	bcs.n	8011f02 <_sungetc_r+0x60>
 8011ef0:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8011ef4:	42a9      	cmp	r1, r5
 8011ef6:	d104      	bne.n	8011f02 <_sungetc_r+0x60>
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	3201      	adds	r2, #1
 8011efc:	6023      	str	r3, [r4, #0]
 8011efe:	6062      	str	r2, [r4, #4]
 8011f00:	e7d5      	b.n	8011eae <_sungetc_r+0xc>
 8011f02:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8011f06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f0a:	6363      	str	r3, [r4, #52]	; 0x34
 8011f0c:	2303      	movs	r3, #3
 8011f0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8011f10:	4623      	mov	r3, r4
 8011f12:	f803 5f46 	strb.w	r5, [r3, #70]!
 8011f16:	6023      	str	r3, [r4, #0]
 8011f18:	2301      	movs	r3, #1
 8011f1a:	e7dc      	b.n	8011ed6 <_sungetc_r+0x34>

08011f1c <__ssrefill_r>:
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	460c      	mov	r4, r1
 8011f20:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8011f22:	b169      	cbz	r1, 8011f40 <__ssrefill_r+0x24>
 8011f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f28:	4299      	cmp	r1, r3
 8011f2a:	d001      	beq.n	8011f30 <__ssrefill_r+0x14>
 8011f2c:	f7fe fef4 	bl	8010d18 <_free_r>
 8011f30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011f32:	6063      	str	r3, [r4, #4]
 8011f34:	2000      	movs	r0, #0
 8011f36:	6360      	str	r0, [r4, #52]	; 0x34
 8011f38:	b113      	cbz	r3, 8011f40 <__ssrefill_r+0x24>
 8011f3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011f3c:	6023      	str	r3, [r4, #0]
 8011f3e:	bd10      	pop	{r4, pc}
 8011f40:	6923      	ldr	r3, [r4, #16]
 8011f42:	6023      	str	r3, [r4, #0]
 8011f44:	2300      	movs	r3, #0
 8011f46:	6063      	str	r3, [r4, #4]
 8011f48:	89a3      	ldrh	r3, [r4, #12]
 8011f4a:	f043 0320 	orr.w	r3, r3, #32
 8011f4e:	81a3      	strh	r3, [r4, #12]
 8011f50:	f04f 30ff 	mov.w	r0, #4294967295
 8011f54:	e7f3      	b.n	8011f3e <__ssrefill_r+0x22>
	...

08011f58 <__ssvfiscanf_r>:
 8011f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f5c:	460c      	mov	r4, r1
 8011f5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011f62:	2100      	movs	r1, #0
 8011f64:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8011f68:	49a6      	ldr	r1, [pc, #664]	; (8012204 <__ssvfiscanf_r+0x2ac>)
 8011f6a:	91a0      	str	r1, [sp, #640]	; 0x280
 8011f6c:	f10d 0804 	add.w	r8, sp, #4
 8011f70:	49a5      	ldr	r1, [pc, #660]	; (8012208 <__ssvfiscanf_r+0x2b0>)
 8011f72:	4fa6      	ldr	r7, [pc, #664]	; (801220c <__ssvfiscanf_r+0x2b4>)
 8011f74:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8012210 <__ssvfiscanf_r+0x2b8>
 8011f78:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	91a1      	str	r1, [sp, #644]	; 0x284
 8011f80:	9300      	str	r3, [sp, #0]
 8011f82:	7813      	ldrb	r3, [r2, #0]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	f000 815a 	beq.w	801223e <__ssvfiscanf_r+0x2e6>
 8011f8a:	5dd9      	ldrb	r1, [r3, r7]
 8011f8c:	f011 0108 	ands.w	r1, r1, #8
 8011f90:	f102 0501 	add.w	r5, r2, #1
 8011f94:	d019      	beq.n	8011fca <__ssvfiscanf_r+0x72>
 8011f96:	6863      	ldr	r3, [r4, #4]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	dd0f      	ble.n	8011fbc <__ssvfiscanf_r+0x64>
 8011f9c:	6823      	ldr	r3, [r4, #0]
 8011f9e:	781a      	ldrb	r2, [r3, #0]
 8011fa0:	5cba      	ldrb	r2, [r7, r2]
 8011fa2:	0712      	lsls	r2, r2, #28
 8011fa4:	d401      	bmi.n	8011faa <__ssvfiscanf_r+0x52>
 8011fa6:	462a      	mov	r2, r5
 8011fa8:	e7eb      	b.n	8011f82 <__ssvfiscanf_r+0x2a>
 8011faa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8011fac:	3201      	adds	r2, #1
 8011fae:	9245      	str	r2, [sp, #276]	; 0x114
 8011fb0:	6862      	ldr	r2, [r4, #4]
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	3a01      	subs	r2, #1
 8011fb6:	6062      	str	r2, [r4, #4]
 8011fb8:	6023      	str	r3, [r4, #0]
 8011fba:	e7ec      	b.n	8011f96 <__ssvfiscanf_r+0x3e>
 8011fbc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011fbe:	4621      	mov	r1, r4
 8011fc0:	4630      	mov	r0, r6
 8011fc2:	4798      	blx	r3
 8011fc4:	2800      	cmp	r0, #0
 8011fc6:	d0e9      	beq.n	8011f9c <__ssvfiscanf_r+0x44>
 8011fc8:	e7ed      	b.n	8011fa6 <__ssvfiscanf_r+0x4e>
 8011fca:	2b25      	cmp	r3, #37	; 0x25
 8011fcc:	d012      	beq.n	8011ff4 <__ssvfiscanf_r+0x9c>
 8011fce:	469a      	mov	sl, r3
 8011fd0:	6863      	ldr	r3, [r4, #4]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	f340 8091 	ble.w	80120fa <__ssvfiscanf_r+0x1a2>
 8011fd8:	6822      	ldr	r2, [r4, #0]
 8011fda:	7813      	ldrb	r3, [r2, #0]
 8011fdc:	4553      	cmp	r3, sl
 8011fde:	f040 812e 	bne.w	801223e <__ssvfiscanf_r+0x2e6>
 8011fe2:	6863      	ldr	r3, [r4, #4]
 8011fe4:	3b01      	subs	r3, #1
 8011fe6:	6063      	str	r3, [r4, #4]
 8011fe8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8011fea:	3201      	adds	r2, #1
 8011fec:	3301      	adds	r3, #1
 8011fee:	6022      	str	r2, [r4, #0]
 8011ff0:	9345      	str	r3, [sp, #276]	; 0x114
 8011ff2:	e7d8      	b.n	8011fa6 <__ssvfiscanf_r+0x4e>
 8011ff4:	9141      	str	r1, [sp, #260]	; 0x104
 8011ff6:	9143      	str	r1, [sp, #268]	; 0x10c
 8011ff8:	7853      	ldrb	r3, [r2, #1]
 8011ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8011ffc:	bf02      	ittt	eq
 8011ffe:	2310      	moveq	r3, #16
 8012000:	1c95      	addeq	r5, r2, #2
 8012002:	9341      	streq	r3, [sp, #260]	; 0x104
 8012004:	220a      	movs	r2, #10
 8012006:	46aa      	mov	sl, r5
 8012008:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801200c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8012010:	2b09      	cmp	r3, #9
 8012012:	d91d      	bls.n	8012050 <__ssvfiscanf_r+0xf8>
 8012014:	487e      	ldr	r0, [pc, #504]	; (8012210 <__ssvfiscanf_r+0x2b8>)
 8012016:	2203      	movs	r2, #3
 8012018:	f7ee f912 	bl	8000240 <memchr>
 801201c:	b140      	cbz	r0, 8012030 <__ssvfiscanf_r+0xd8>
 801201e:	2301      	movs	r3, #1
 8012020:	eba0 0009 	sub.w	r0, r0, r9
 8012024:	fa03 f000 	lsl.w	r0, r3, r0
 8012028:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801202a:	4318      	orrs	r0, r3
 801202c:	9041      	str	r0, [sp, #260]	; 0x104
 801202e:	4655      	mov	r5, sl
 8012030:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012034:	2b78      	cmp	r3, #120	; 0x78
 8012036:	d806      	bhi.n	8012046 <__ssvfiscanf_r+0xee>
 8012038:	2b57      	cmp	r3, #87	; 0x57
 801203a:	d810      	bhi.n	801205e <__ssvfiscanf_r+0x106>
 801203c:	2b25      	cmp	r3, #37	; 0x25
 801203e:	d0c6      	beq.n	8011fce <__ssvfiscanf_r+0x76>
 8012040:	d856      	bhi.n	80120f0 <__ssvfiscanf_r+0x198>
 8012042:	2b00      	cmp	r3, #0
 8012044:	d064      	beq.n	8012110 <__ssvfiscanf_r+0x1b8>
 8012046:	2303      	movs	r3, #3
 8012048:	9347      	str	r3, [sp, #284]	; 0x11c
 801204a:	230a      	movs	r3, #10
 801204c:	9342      	str	r3, [sp, #264]	; 0x108
 801204e:	e071      	b.n	8012134 <__ssvfiscanf_r+0x1dc>
 8012050:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8012052:	fb02 1103 	mla	r1, r2, r3, r1
 8012056:	3930      	subs	r1, #48	; 0x30
 8012058:	9143      	str	r1, [sp, #268]	; 0x10c
 801205a:	4655      	mov	r5, sl
 801205c:	e7d3      	b.n	8012006 <__ssvfiscanf_r+0xae>
 801205e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8012062:	2a20      	cmp	r2, #32
 8012064:	d8ef      	bhi.n	8012046 <__ssvfiscanf_r+0xee>
 8012066:	a101      	add	r1, pc, #4	; (adr r1, 801206c <__ssvfiscanf_r+0x114>)
 8012068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801206c:	0801211f 	.word	0x0801211f
 8012070:	08012047 	.word	0x08012047
 8012074:	08012047 	.word	0x08012047
 8012078:	0801217d 	.word	0x0801217d
 801207c:	08012047 	.word	0x08012047
 8012080:	08012047 	.word	0x08012047
 8012084:	08012047 	.word	0x08012047
 8012088:	08012047 	.word	0x08012047
 801208c:	08012047 	.word	0x08012047
 8012090:	08012047 	.word	0x08012047
 8012094:	08012047 	.word	0x08012047
 8012098:	08012193 	.word	0x08012193
 801209c:	08012169 	.word	0x08012169
 80120a0:	080120f7 	.word	0x080120f7
 80120a4:	080120f7 	.word	0x080120f7
 80120a8:	080120f7 	.word	0x080120f7
 80120ac:	08012047 	.word	0x08012047
 80120b0:	0801216d 	.word	0x0801216d
 80120b4:	08012047 	.word	0x08012047
 80120b8:	08012047 	.word	0x08012047
 80120bc:	08012047 	.word	0x08012047
 80120c0:	08012047 	.word	0x08012047
 80120c4:	080121a3 	.word	0x080121a3
 80120c8:	08012175 	.word	0x08012175
 80120cc:	08012117 	.word	0x08012117
 80120d0:	08012047 	.word	0x08012047
 80120d4:	08012047 	.word	0x08012047
 80120d8:	0801219f 	.word	0x0801219f
 80120dc:	08012047 	.word	0x08012047
 80120e0:	08012169 	.word	0x08012169
 80120e4:	08012047 	.word	0x08012047
 80120e8:	08012047 	.word	0x08012047
 80120ec:	0801211f 	.word	0x0801211f
 80120f0:	3b45      	subs	r3, #69	; 0x45
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d8a7      	bhi.n	8012046 <__ssvfiscanf_r+0xee>
 80120f6:	2305      	movs	r3, #5
 80120f8:	e01b      	b.n	8012132 <__ssvfiscanf_r+0x1da>
 80120fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80120fc:	4621      	mov	r1, r4
 80120fe:	4630      	mov	r0, r6
 8012100:	4798      	blx	r3
 8012102:	2800      	cmp	r0, #0
 8012104:	f43f af68 	beq.w	8011fd8 <__ssvfiscanf_r+0x80>
 8012108:	9844      	ldr	r0, [sp, #272]	; 0x110
 801210a:	2800      	cmp	r0, #0
 801210c:	f040 808d 	bne.w	801222a <__ssvfiscanf_r+0x2d2>
 8012110:	f04f 30ff 	mov.w	r0, #4294967295
 8012114:	e08f      	b.n	8012236 <__ssvfiscanf_r+0x2de>
 8012116:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012118:	f042 0220 	orr.w	r2, r2, #32
 801211c:	9241      	str	r2, [sp, #260]	; 0x104
 801211e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8012120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012124:	9241      	str	r2, [sp, #260]	; 0x104
 8012126:	2210      	movs	r2, #16
 8012128:	2b6f      	cmp	r3, #111	; 0x6f
 801212a:	9242      	str	r2, [sp, #264]	; 0x108
 801212c:	bf34      	ite	cc
 801212e:	2303      	movcc	r3, #3
 8012130:	2304      	movcs	r3, #4
 8012132:	9347      	str	r3, [sp, #284]	; 0x11c
 8012134:	6863      	ldr	r3, [r4, #4]
 8012136:	2b00      	cmp	r3, #0
 8012138:	dd42      	ble.n	80121c0 <__ssvfiscanf_r+0x268>
 801213a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801213c:	0659      	lsls	r1, r3, #25
 801213e:	d404      	bmi.n	801214a <__ssvfiscanf_r+0x1f2>
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	781a      	ldrb	r2, [r3, #0]
 8012144:	5cba      	ldrb	r2, [r7, r2]
 8012146:	0712      	lsls	r2, r2, #28
 8012148:	d441      	bmi.n	80121ce <__ssvfiscanf_r+0x276>
 801214a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801214c:	2b02      	cmp	r3, #2
 801214e:	dc50      	bgt.n	80121f2 <__ssvfiscanf_r+0x29a>
 8012150:	466b      	mov	r3, sp
 8012152:	4622      	mov	r2, r4
 8012154:	a941      	add	r1, sp, #260	; 0x104
 8012156:	4630      	mov	r0, r6
 8012158:	f000 f876 	bl	8012248 <_scanf_chars>
 801215c:	2801      	cmp	r0, #1
 801215e:	d06e      	beq.n	801223e <__ssvfiscanf_r+0x2e6>
 8012160:	2802      	cmp	r0, #2
 8012162:	f47f af20 	bne.w	8011fa6 <__ssvfiscanf_r+0x4e>
 8012166:	e7cf      	b.n	8012108 <__ssvfiscanf_r+0x1b0>
 8012168:	220a      	movs	r2, #10
 801216a:	e7dd      	b.n	8012128 <__ssvfiscanf_r+0x1d0>
 801216c:	2300      	movs	r3, #0
 801216e:	9342      	str	r3, [sp, #264]	; 0x108
 8012170:	2303      	movs	r3, #3
 8012172:	e7de      	b.n	8012132 <__ssvfiscanf_r+0x1da>
 8012174:	2308      	movs	r3, #8
 8012176:	9342      	str	r3, [sp, #264]	; 0x108
 8012178:	2304      	movs	r3, #4
 801217a:	e7da      	b.n	8012132 <__ssvfiscanf_r+0x1da>
 801217c:	4629      	mov	r1, r5
 801217e:	4640      	mov	r0, r8
 8012180:	f000 f9c6 	bl	8012510 <__sccl>
 8012184:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012186:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801218a:	9341      	str	r3, [sp, #260]	; 0x104
 801218c:	4605      	mov	r5, r0
 801218e:	2301      	movs	r3, #1
 8012190:	e7cf      	b.n	8012132 <__ssvfiscanf_r+0x1da>
 8012192:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8012194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012198:	9341      	str	r3, [sp, #260]	; 0x104
 801219a:	2300      	movs	r3, #0
 801219c:	e7c9      	b.n	8012132 <__ssvfiscanf_r+0x1da>
 801219e:	2302      	movs	r3, #2
 80121a0:	e7c7      	b.n	8012132 <__ssvfiscanf_r+0x1da>
 80121a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80121a4:	06c3      	lsls	r3, r0, #27
 80121a6:	f53f aefe 	bmi.w	8011fa6 <__ssvfiscanf_r+0x4e>
 80121aa:	9b00      	ldr	r3, [sp, #0]
 80121ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80121ae:	1d19      	adds	r1, r3, #4
 80121b0:	9100      	str	r1, [sp, #0]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	f010 0f01 	tst.w	r0, #1
 80121b8:	bf14      	ite	ne
 80121ba:	801a      	strhne	r2, [r3, #0]
 80121bc:	601a      	streq	r2, [r3, #0]
 80121be:	e6f2      	b.n	8011fa6 <__ssvfiscanf_r+0x4e>
 80121c0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80121c2:	4621      	mov	r1, r4
 80121c4:	4630      	mov	r0, r6
 80121c6:	4798      	blx	r3
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d0b6      	beq.n	801213a <__ssvfiscanf_r+0x1e2>
 80121cc:	e79c      	b.n	8012108 <__ssvfiscanf_r+0x1b0>
 80121ce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80121d0:	3201      	adds	r2, #1
 80121d2:	9245      	str	r2, [sp, #276]	; 0x114
 80121d4:	6862      	ldr	r2, [r4, #4]
 80121d6:	3a01      	subs	r2, #1
 80121d8:	2a00      	cmp	r2, #0
 80121da:	6062      	str	r2, [r4, #4]
 80121dc:	dd02      	ble.n	80121e4 <__ssvfiscanf_r+0x28c>
 80121de:	3301      	adds	r3, #1
 80121e0:	6023      	str	r3, [r4, #0]
 80121e2:	e7ad      	b.n	8012140 <__ssvfiscanf_r+0x1e8>
 80121e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80121e6:	4621      	mov	r1, r4
 80121e8:	4630      	mov	r0, r6
 80121ea:	4798      	blx	r3
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d0a7      	beq.n	8012140 <__ssvfiscanf_r+0x1e8>
 80121f0:	e78a      	b.n	8012108 <__ssvfiscanf_r+0x1b0>
 80121f2:	2b04      	cmp	r3, #4
 80121f4:	dc0e      	bgt.n	8012214 <__ssvfiscanf_r+0x2bc>
 80121f6:	466b      	mov	r3, sp
 80121f8:	4622      	mov	r2, r4
 80121fa:	a941      	add	r1, sp, #260	; 0x104
 80121fc:	4630      	mov	r0, r6
 80121fe:	f000 f87d 	bl	80122fc <_scanf_i>
 8012202:	e7ab      	b.n	801215c <__ssvfiscanf_r+0x204>
 8012204:	08011ea3 	.word	0x08011ea3
 8012208:	08011f1d 	.word	0x08011f1d
 801220c:	08013dac 	.word	0x08013dac
 8012210:	08013d02 	.word	0x08013d02
 8012214:	4b0b      	ldr	r3, [pc, #44]	; (8012244 <__ssvfiscanf_r+0x2ec>)
 8012216:	2b00      	cmp	r3, #0
 8012218:	f43f aec5 	beq.w	8011fa6 <__ssvfiscanf_r+0x4e>
 801221c:	466b      	mov	r3, sp
 801221e:	4622      	mov	r2, r4
 8012220:	a941      	add	r1, sp, #260	; 0x104
 8012222:	4630      	mov	r0, r6
 8012224:	f3af 8000 	nop.w
 8012228:	e798      	b.n	801215c <__ssvfiscanf_r+0x204>
 801222a:	89a3      	ldrh	r3, [r4, #12]
 801222c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8012230:	bf18      	it	ne
 8012232:	f04f 30ff 	movne.w	r0, #4294967295
 8012236:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801223a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801223e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8012240:	e7f9      	b.n	8012236 <__ssvfiscanf_r+0x2de>
 8012242:	bf00      	nop
 8012244:	00000000 	.word	0x00000000

08012248 <_scanf_chars>:
 8012248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801224c:	4615      	mov	r5, r2
 801224e:	688a      	ldr	r2, [r1, #8]
 8012250:	4680      	mov	r8, r0
 8012252:	460c      	mov	r4, r1
 8012254:	b932      	cbnz	r2, 8012264 <_scanf_chars+0x1c>
 8012256:	698a      	ldr	r2, [r1, #24]
 8012258:	2a00      	cmp	r2, #0
 801225a:	bf0c      	ite	eq
 801225c:	2201      	moveq	r2, #1
 801225e:	f04f 32ff 	movne.w	r2, #4294967295
 8012262:	608a      	str	r2, [r1, #8]
 8012264:	6822      	ldr	r2, [r4, #0]
 8012266:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80122f8 <_scanf_chars+0xb0>
 801226a:	06d1      	lsls	r1, r2, #27
 801226c:	bf5f      	itttt	pl
 801226e:	681a      	ldrpl	r2, [r3, #0]
 8012270:	1d11      	addpl	r1, r2, #4
 8012272:	6019      	strpl	r1, [r3, #0]
 8012274:	6816      	ldrpl	r6, [r2, #0]
 8012276:	2700      	movs	r7, #0
 8012278:	69a0      	ldr	r0, [r4, #24]
 801227a:	b188      	cbz	r0, 80122a0 <_scanf_chars+0x58>
 801227c:	2801      	cmp	r0, #1
 801227e:	d107      	bne.n	8012290 <_scanf_chars+0x48>
 8012280:	682a      	ldr	r2, [r5, #0]
 8012282:	7811      	ldrb	r1, [r2, #0]
 8012284:	6962      	ldr	r2, [r4, #20]
 8012286:	5c52      	ldrb	r2, [r2, r1]
 8012288:	b952      	cbnz	r2, 80122a0 <_scanf_chars+0x58>
 801228a:	2f00      	cmp	r7, #0
 801228c:	d031      	beq.n	80122f2 <_scanf_chars+0xaa>
 801228e:	e022      	b.n	80122d6 <_scanf_chars+0x8e>
 8012290:	2802      	cmp	r0, #2
 8012292:	d120      	bne.n	80122d6 <_scanf_chars+0x8e>
 8012294:	682b      	ldr	r3, [r5, #0]
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	f813 3009 	ldrb.w	r3, [r3, r9]
 801229c:	071b      	lsls	r3, r3, #28
 801229e:	d41a      	bmi.n	80122d6 <_scanf_chars+0x8e>
 80122a0:	6823      	ldr	r3, [r4, #0]
 80122a2:	06da      	lsls	r2, r3, #27
 80122a4:	bf5e      	ittt	pl
 80122a6:	682b      	ldrpl	r3, [r5, #0]
 80122a8:	781b      	ldrbpl	r3, [r3, #0]
 80122aa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80122ae:	682a      	ldr	r2, [r5, #0]
 80122b0:	686b      	ldr	r3, [r5, #4]
 80122b2:	3201      	adds	r2, #1
 80122b4:	602a      	str	r2, [r5, #0]
 80122b6:	68a2      	ldr	r2, [r4, #8]
 80122b8:	3b01      	subs	r3, #1
 80122ba:	3a01      	subs	r2, #1
 80122bc:	606b      	str	r3, [r5, #4]
 80122be:	3701      	adds	r7, #1
 80122c0:	60a2      	str	r2, [r4, #8]
 80122c2:	b142      	cbz	r2, 80122d6 <_scanf_chars+0x8e>
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	dcd7      	bgt.n	8012278 <_scanf_chars+0x30>
 80122c8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80122cc:	4629      	mov	r1, r5
 80122ce:	4640      	mov	r0, r8
 80122d0:	4798      	blx	r3
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d0d0      	beq.n	8012278 <_scanf_chars+0x30>
 80122d6:	6823      	ldr	r3, [r4, #0]
 80122d8:	f013 0310 	ands.w	r3, r3, #16
 80122dc:	d105      	bne.n	80122ea <_scanf_chars+0xa2>
 80122de:	68e2      	ldr	r2, [r4, #12]
 80122e0:	3201      	adds	r2, #1
 80122e2:	60e2      	str	r2, [r4, #12]
 80122e4:	69a2      	ldr	r2, [r4, #24]
 80122e6:	b102      	cbz	r2, 80122ea <_scanf_chars+0xa2>
 80122e8:	7033      	strb	r3, [r6, #0]
 80122ea:	6923      	ldr	r3, [r4, #16]
 80122ec:	443b      	add	r3, r7
 80122ee:	6123      	str	r3, [r4, #16]
 80122f0:	2000      	movs	r0, #0
 80122f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80122f6:	bf00      	nop
 80122f8:	08013dac 	.word	0x08013dac

080122fc <_scanf_i>:
 80122fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012300:	4698      	mov	r8, r3
 8012302:	4b76      	ldr	r3, [pc, #472]	; (80124dc <_scanf_i+0x1e0>)
 8012304:	460c      	mov	r4, r1
 8012306:	4682      	mov	sl, r0
 8012308:	4616      	mov	r6, r2
 801230a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801230e:	b087      	sub	sp, #28
 8012310:	ab03      	add	r3, sp, #12
 8012312:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012316:	4b72      	ldr	r3, [pc, #456]	; (80124e0 <_scanf_i+0x1e4>)
 8012318:	69a1      	ldr	r1, [r4, #24]
 801231a:	4a72      	ldr	r2, [pc, #456]	; (80124e4 <_scanf_i+0x1e8>)
 801231c:	2903      	cmp	r1, #3
 801231e:	bf18      	it	ne
 8012320:	461a      	movne	r2, r3
 8012322:	68a3      	ldr	r3, [r4, #8]
 8012324:	9201      	str	r2, [sp, #4]
 8012326:	1e5a      	subs	r2, r3, #1
 8012328:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801232c:	bf88      	it	hi
 801232e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012332:	4627      	mov	r7, r4
 8012334:	bf82      	ittt	hi
 8012336:	eb03 0905 	addhi.w	r9, r3, r5
 801233a:	f240 135d 	movwhi	r3, #349	; 0x15d
 801233e:	60a3      	strhi	r3, [r4, #8]
 8012340:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012344:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8012348:	bf98      	it	ls
 801234a:	f04f 0900 	movls.w	r9, #0
 801234e:	6023      	str	r3, [r4, #0]
 8012350:	463d      	mov	r5, r7
 8012352:	f04f 0b00 	mov.w	fp, #0
 8012356:	6831      	ldr	r1, [r6, #0]
 8012358:	ab03      	add	r3, sp, #12
 801235a:	7809      	ldrb	r1, [r1, #0]
 801235c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012360:	2202      	movs	r2, #2
 8012362:	f7ed ff6d 	bl	8000240 <memchr>
 8012366:	b328      	cbz	r0, 80123b4 <_scanf_i+0xb8>
 8012368:	f1bb 0f01 	cmp.w	fp, #1
 801236c:	d159      	bne.n	8012422 <_scanf_i+0x126>
 801236e:	6862      	ldr	r2, [r4, #4]
 8012370:	b92a      	cbnz	r2, 801237e <_scanf_i+0x82>
 8012372:	6822      	ldr	r2, [r4, #0]
 8012374:	2308      	movs	r3, #8
 8012376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801237a:	6063      	str	r3, [r4, #4]
 801237c:	6022      	str	r2, [r4, #0]
 801237e:	6822      	ldr	r2, [r4, #0]
 8012380:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8012384:	6022      	str	r2, [r4, #0]
 8012386:	68a2      	ldr	r2, [r4, #8]
 8012388:	1e51      	subs	r1, r2, #1
 801238a:	60a1      	str	r1, [r4, #8]
 801238c:	b192      	cbz	r2, 80123b4 <_scanf_i+0xb8>
 801238e:	6832      	ldr	r2, [r6, #0]
 8012390:	1c51      	adds	r1, r2, #1
 8012392:	6031      	str	r1, [r6, #0]
 8012394:	7812      	ldrb	r2, [r2, #0]
 8012396:	f805 2b01 	strb.w	r2, [r5], #1
 801239a:	6872      	ldr	r2, [r6, #4]
 801239c:	3a01      	subs	r2, #1
 801239e:	2a00      	cmp	r2, #0
 80123a0:	6072      	str	r2, [r6, #4]
 80123a2:	dc07      	bgt.n	80123b4 <_scanf_i+0xb8>
 80123a4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80123a8:	4631      	mov	r1, r6
 80123aa:	4650      	mov	r0, sl
 80123ac:	4790      	blx	r2
 80123ae:	2800      	cmp	r0, #0
 80123b0:	f040 8085 	bne.w	80124be <_scanf_i+0x1c2>
 80123b4:	f10b 0b01 	add.w	fp, fp, #1
 80123b8:	f1bb 0f03 	cmp.w	fp, #3
 80123bc:	d1cb      	bne.n	8012356 <_scanf_i+0x5a>
 80123be:	6863      	ldr	r3, [r4, #4]
 80123c0:	b90b      	cbnz	r3, 80123c6 <_scanf_i+0xca>
 80123c2:	230a      	movs	r3, #10
 80123c4:	6063      	str	r3, [r4, #4]
 80123c6:	6863      	ldr	r3, [r4, #4]
 80123c8:	4947      	ldr	r1, [pc, #284]	; (80124e8 <_scanf_i+0x1ec>)
 80123ca:	6960      	ldr	r0, [r4, #20]
 80123cc:	1ac9      	subs	r1, r1, r3
 80123ce:	f000 f89f 	bl	8012510 <__sccl>
 80123d2:	f04f 0b00 	mov.w	fp, #0
 80123d6:	68a3      	ldr	r3, [r4, #8]
 80123d8:	6822      	ldr	r2, [r4, #0]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d03d      	beq.n	801245a <_scanf_i+0x15e>
 80123de:	6831      	ldr	r1, [r6, #0]
 80123e0:	6960      	ldr	r0, [r4, #20]
 80123e2:	f891 c000 	ldrb.w	ip, [r1]
 80123e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d035      	beq.n	801245a <_scanf_i+0x15e>
 80123ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80123f2:	d124      	bne.n	801243e <_scanf_i+0x142>
 80123f4:	0510      	lsls	r0, r2, #20
 80123f6:	d522      	bpl.n	801243e <_scanf_i+0x142>
 80123f8:	f10b 0b01 	add.w	fp, fp, #1
 80123fc:	f1b9 0f00 	cmp.w	r9, #0
 8012400:	d003      	beq.n	801240a <_scanf_i+0x10e>
 8012402:	3301      	adds	r3, #1
 8012404:	f109 39ff 	add.w	r9, r9, #4294967295
 8012408:	60a3      	str	r3, [r4, #8]
 801240a:	6873      	ldr	r3, [r6, #4]
 801240c:	3b01      	subs	r3, #1
 801240e:	2b00      	cmp	r3, #0
 8012410:	6073      	str	r3, [r6, #4]
 8012412:	dd1b      	ble.n	801244c <_scanf_i+0x150>
 8012414:	6833      	ldr	r3, [r6, #0]
 8012416:	3301      	adds	r3, #1
 8012418:	6033      	str	r3, [r6, #0]
 801241a:	68a3      	ldr	r3, [r4, #8]
 801241c:	3b01      	subs	r3, #1
 801241e:	60a3      	str	r3, [r4, #8]
 8012420:	e7d9      	b.n	80123d6 <_scanf_i+0xda>
 8012422:	f1bb 0f02 	cmp.w	fp, #2
 8012426:	d1ae      	bne.n	8012386 <_scanf_i+0x8a>
 8012428:	6822      	ldr	r2, [r4, #0]
 801242a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801242e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8012432:	d1bf      	bne.n	80123b4 <_scanf_i+0xb8>
 8012434:	2310      	movs	r3, #16
 8012436:	6063      	str	r3, [r4, #4]
 8012438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801243c:	e7a2      	b.n	8012384 <_scanf_i+0x88>
 801243e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8012442:	6022      	str	r2, [r4, #0]
 8012444:	780b      	ldrb	r3, [r1, #0]
 8012446:	f805 3b01 	strb.w	r3, [r5], #1
 801244a:	e7de      	b.n	801240a <_scanf_i+0x10e>
 801244c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012450:	4631      	mov	r1, r6
 8012452:	4650      	mov	r0, sl
 8012454:	4798      	blx	r3
 8012456:	2800      	cmp	r0, #0
 8012458:	d0df      	beq.n	801241a <_scanf_i+0x11e>
 801245a:	6823      	ldr	r3, [r4, #0]
 801245c:	05db      	lsls	r3, r3, #23
 801245e:	d50d      	bpl.n	801247c <_scanf_i+0x180>
 8012460:	42bd      	cmp	r5, r7
 8012462:	d909      	bls.n	8012478 <_scanf_i+0x17c>
 8012464:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8012468:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801246c:	4632      	mov	r2, r6
 801246e:	4650      	mov	r0, sl
 8012470:	4798      	blx	r3
 8012472:	f105 39ff 	add.w	r9, r5, #4294967295
 8012476:	464d      	mov	r5, r9
 8012478:	42bd      	cmp	r5, r7
 801247a:	d02d      	beq.n	80124d8 <_scanf_i+0x1dc>
 801247c:	6822      	ldr	r2, [r4, #0]
 801247e:	f012 0210 	ands.w	r2, r2, #16
 8012482:	d113      	bne.n	80124ac <_scanf_i+0x1b0>
 8012484:	702a      	strb	r2, [r5, #0]
 8012486:	6863      	ldr	r3, [r4, #4]
 8012488:	9e01      	ldr	r6, [sp, #4]
 801248a:	4639      	mov	r1, r7
 801248c:	4650      	mov	r0, sl
 801248e:	47b0      	blx	r6
 8012490:	6821      	ldr	r1, [r4, #0]
 8012492:	f8d8 3000 	ldr.w	r3, [r8]
 8012496:	f011 0f20 	tst.w	r1, #32
 801249a:	d013      	beq.n	80124c4 <_scanf_i+0x1c8>
 801249c:	1d1a      	adds	r2, r3, #4
 801249e:	f8c8 2000 	str.w	r2, [r8]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	6018      	str	r0, [r3, #0]
 80124a6:	68e3      	ldr	r3, [r4, #12]
 80124a8:	3301      	adds	r3, #1
 80124aa:	60e3      	str	r3, [r4, #12]
 80124ac:	1bed      	subs	r5, r5, r7
 80124ae:	44ab      	add	fp, r5
 80124b0:	6925      	ldr	r5, [r4, #16]
 80124b2:	445d      	add	r5, fp
 80124b4:	6125      	str	r5, [r4, #16]
 80124b6:	2000      	movs	r0, #0
 80124b8:	b007      	add	sp, #28
 80124ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124be:	f04f 0b00 	mov.w	fp, #0
 80124c2:	e7ca      	b.n	801245a <_scanf_i+0x15e>
 80124c4:	1d1a      	adds	r2, r3, #4
 80124c6:	f8c8 2000 	str.w	r2, [r8]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f011 0f01 	tst.w	r1, #1
 80124d0:	bf14      	ite	ne
 80124d2:	8018      	strhne	r0, [r3, #0]
 80124d4:	6018      	streq	r0, [r3, #0]
 80124d6:	e7e6      	b.n	80124a6 <_scanf_i+0x1aa>
 80124d8:	2001      	movs	r0, #1
 80124da:	e7ed      	b.n	80124b8 <_scanf_i+0x1bc>
 80124dc:	08013be8 	.word	0x08013be8
 80124e0:	0801276d 	.word	0x0801276d
 80124e4:	08012685 	.word	0x08012685
 80124e8:	08013da9 	.word	0x08013da9

080124ec <_read_r>:
 80124ec:	b538      	push	{r3, r4, r5, lr}
 80124ee:	4d07      	ldr	r5, [pc, #28]	; (801250c <_read_r+0x20>)
 80124f0:	4604      	mov	r4, r0
 80124f2:	4608      	mov	r0, r1
 80124f4:	4611      	mov	r1, r2
 80124f6:	2200      	movs	r2, #0
 80124f8:	602a      	str	r2, [r5, #0]
 80124fa:	461a      	mov	r2, r3
 80124fc:	f7ee fcca 	bl	8000e94 <_read>
 8012500:	1c43      	adds	r3, r0, #1
 8012502:	d102      	bne.n	801250a <_read_r+0x1e>
 8012504:	682b      	ldr	r3, [r5, #0]
 8012506:	b103      	cbz	r3, 801250a <_read_r+0x1e>
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	bd38      	pop	{r3, r4, r5, pc}
 801250c:	20001238 	.word	0x20001238

08012510 <__sccl>:
 8012510:	b570      	push	{r4, r5, r6, lr}
 8012512:	780b      	ldrb	r3, [r1, #0]
 8012514:	4604      	mov	r4, r0
 8012516:	2b5e      	cmp	r3, #94	; 0x5e
 8012518:	bf0b      	itete	eq
 801251a:	784b      	ldrbeq	r3, [r1, #1]
 801251c:	1c48      	addne	r0, r1, #1
 801251e:	1c88      	addeq	r0, r1, #2
 8012520:	2200      	movne	r2, #0
 8012522:	bf08      	it	eq
 8012524:	2201      	moveq	r2, #1
 8012526:	1e61      	subs	r1, r4, #1
 8012528:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801252c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8012530:	42a9      	cmp	r1, r5
 8012532:	d1fb      	bne.n	801252c <__sccl+0x1c>
 8012534:	b90b      	cbnz	r3, 801253a <__sccl+0x2a>
 8012536:	3801      	subs	r0, #1
 8012538:	bd70      	pop	{r4, r5, r6, pc}
 801253a:	f082 0201 	eor.w	r2, r2, #1
 801253e:	54e2      	strb	r2, [r4, r3]
 8012540:	4605      	mov	r5, r0
 8012542:	4628      	mov	r0, r5
 8012544:	f810 1b01 	ldrb.w	r1, [r0], #1
 8012548:	292d      	cmp	r1, #45	; 0x2d
 801254a:	d006      	beq.n	801255a <__sccl+0x4a>
 801254c:	295d      	cmp	r1, #93	; 0x5d
 801254e:	d0f3      	beq.n	8012538 <__sccl+0x28>
 8012550:	b909      	cbnz	r1, 8012556 <__sccl+0x46>
 8012552:	4628      	mov	r0, r5
 8012554:	e7f0      	b.n	8012538 <__sccl+0x28>
 8012556:	460b      	mov	r3, r1
 8012558:	e7f1      	b.n	801253e <__sccl+0x2e>
 801255a:	786e      	ldrb	r6, [r5, #1]
 801255c:	2e5d      	cmp	r6, #93	; 0x5d
 801255e:	d0fa      	beq.n	8012556 <__sccl+0x46>
 8012560:	42b3      	cmp	r3, r6
 8012562:	dcf8      	bgt.n	8012556 <__sccl+0x46>
 8012564:	3502      	adds	r5, #2
 8012566:	4619      	mov	r1, r3
 8012568:	3101      	adds	r1, #1
 801256a:	428e      	cmp	r6, r1
 801256c:	5462      	strb	r2, [r4, r1]
 801256e:	dcfb      	bgt.n	8012568 <__sccl+0x58>
 8012570:	1af1      	subs	r1, r6, r3
 8012572:	3901      	subs	r1, #1
 8012574:	1c58      	adds	r0, r3, #1
 8012576:	42b3      	cmp	r3, r6
 8012578:	bfa8      	it	ge
 801257a:	2100      	movge	r1, #0
 801257c:	1843      	adds	r3, r0, r1
 801257e:	e7e0      	b.n	8012542 <__sccl+0x32>

08012580 <_strtol_l.constprop.0>:
 8012580:	2b01      	cmp	r3, #1
 8012582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012586:	d001      	beq.n	801258c <_strtol_l.constprop.0+0xc>
 8012588:	2b24      	cmp	r3, #36	; 0x24
 801258a:	d906      	bls.n	801259a <_strtol_l.constprop.0+0x1a>
 801258c:	f7fe faf0 	bl	8010b70 <__errno>
 8012590:	2316      	movs	r3, #22
 8012592:	6003      	str	r3, [r0, #0]
 8012594:	2000      	movs	r0, #0
 8012596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801259a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012680 <_strtol_l.constprop.0+0x100>
 801259e:	460d      	mov	r5, r1
 80125a0:	462e      	mov	r6, r5
 80125a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80125a6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80125aa:	f017 0708 	ands.w	r7, r7, #8
 80125ae:	d1f7      	bne.n	80125a0 <_strtol_l.constprop.0+0x20>
 80125b0:	2c2d      	cmp	r4, #45	; 0x2d
 80125b2:	d132      	bne.n	801261a <_strtol_l.constprop.0+0x9a>
 80125b4:	782c      	ldrb	r4, [r5, #0]
 80125b6:	2701      	movs	r7, #1
 80125b8:	1cb5      	adds	r5, r6, #2
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d05b      	beq.n	8012676 <_strtol_l.constprop.0+0xf6>
 80125be:	2b10      	cmp	r3, #16
 80125c0:	d109      	bne.n	80125d6 <_strtol_l.constprop.0+0x56>
 80125c2:	2c30      	cmp	r4, #48	; 0x30
 80125c4:	d107      	bne.n	80125d6 <_strtol_l.constprop.0+0x56>
 80125c6:	782c      	ldrb	r4, [r5, #0]
 80125c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80125cc:	2c58      	cmp	r4, #88	; 0x58
 80125ce:	d14d      	bne.n	801266c <_strtol_l.constprop.0+0xec>
 80125d0:	786c      	ldrb	r4, [r5, #1]
 80125d2:	2310      	movs	r3, #16
 80125d4:	3502      	adds	r5, #2
 80125d6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80125da:	f108 38ff 	add.w	r8, r8, #4294967295
 80125de:	f04f 0c00 	mov.w	ip, #0
 80125e2:	fbb8 f9f3 	udiv	r9, r8, r3
 80125e6:	4666      	mov	r6, ip
 80125e8:	fb03 8a19 	mls	sl, r3, r9, r8
 80125ec:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80125f0:	f1be 0f09 	cmp.w	lr, #9
 80125f4:	d816      	bhi.n	8012624 <_strtol_l.constprop.0+0xa4>
 80125f6:	4674      	mov	r4, lr
 80125f8:	42a3      	cmp	r3, r4
 80125fa:	dd24      	ble.n	8012646 <_strtol_l.constprop.0+0xc6>
 80125fc:	f1bc 0f00 	cmp.w	ip, #0
 8012600:	db1e      	blt.n	8012640 <_strtol_l.constprop.0+0xc0>
 8012602:	45b1      	cmp	r9, r6
 8012604:	d31c      	bcc.n	8012640 <_strtol_l.constprop.0+0xc0>
 8012606:	d101      	bne.n	801260c <_strtol_l.constprop.0+0x8c>
 8012608:	45a2      	cmp	sl, r4
 801260a:	db19      	blt.n	8012640 <_strtol_l.constprop.0+0xc0>
 801260c:	fb06 4603 	mla	r6, r6, r3, r4
 8012610:	f04f 0c01 	mov.w	ip, #1
 8012614:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012618:	e7e8      	b.n	80125ec <_strtol_l.constprop.0+0x6c>
 801261a:	2c2b      	cmp	r4, #43	; 0x2b
 801261c:	bf04      	itt	eq
 801261e:	782c      	ldrbeq	r4, [r5, #0]
 8012620:	1cb5      	addeq	r5, r6, #2
 8012622:	e7ca      	b.n	80125ba <_strtol_l.constprop.0+0x3a>
 8012624:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8012628:	f1be 0f19 	cmp.w	lr, #25
 801262c:	d801      	bhi.n	8012632 <_strtol_l.constprop.0+0xb2>
 801262e:	3c37      	subs	r4, #55	; 0x37
 8012630:	e7e2      	b.n	80125f8 <_strtol_l.constprop.0+0x78>
 8012632:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8012636:	f1be 0f19 	cmp.w	lr, #25
 801263a:	d804      	bhi.n	8012646 <_strtol_l.constprop.0+0xc6>
 801263c:	3c57      	subs	r4, #87	; 0x57
 801263e:	e7db      	b.n	80125f8 <_strtol_l.constprop.0+0x78>
 8012640:	f04f 3cff 	mov.w	ip, #4294967295
 8012644:	e7e6      	b.n	8012614 <_strtol_l.constprop.0+0x94>
 8012646:	f1bc 0f00 	cmp.w	ip, #0
 801264a:	da05      	bge.n	8012658 <_strtol_l.constprop.0+0xd8>
 801264c:	2322      	movs	r3, #34	; 0x22
 801264e:	6003      	str	r3, [r0, #0]
 8012650:	4646      	mov	r6, r8
 8012652:	b942      	cbnz	r2, 8012666 <_strtol_l.constprop.0+0xe6>
 8012654:	4630      	mov	r0, r6
 8012656:	e79e      	b.n	8012596 <_strtol_l.constprop.0+0x16>
 8012658:	b107      	cbz	r7, 801265c <_strtol_l.constprop.0+0xdc>
 801265a:	4276      	negs	r6, r6
 801265c:	2a00      	cmp	r2, #0
 801265e:	d0f9      	beq.n	8012654 <_strtol_l.constprop.0+0xd4>
 8012660:	f1bc 0f00 	cmp.w	ip, #0
 8012664:	d000      	beq.n	8012668 <_strtol_l.constprop.0+0xe8>
 8012666:	1e69      	subs	r1, r5, #1
 8012668:	6011      	str	r1, [r2, #0]
 801266a:	e7f3      	b.n	8012654 <_strtol_l.constprop.0+0xd4>
 801266c:	2430      	movs	r4, #48	; 0x30
 801266e:	2b00      	cmp	r3, #0
 8012670:	d1b1      	bne.n	80125d6 <_strtol_l.constprop.0+0x56>
 8012672:	2308      	movs	r3, #8
 8012674:	e7af      	b.n	80125d6 <_strtol_l.constprop.0+0x56>
 8012676:	2c30      	cmp	r4, #48	; 0x30
 8012678:	d0a5      	beq.n	80125c6 <_strtol_l.constprop.0+0x46>
 801267a:	230a      	movs	r3, #10
 801267c:	e7ab      	b.n	80125d6 <_strtol_l.constprop.0+0x56>
 801267e:	bf00      	nop
 8012680:	08013dac 	.word	0x08013dac

08012684 <_strtol_r>:
 8012684:	f7ff bf7c 	b.w	8012580 <_strtol_l.constprop.0>

08012688 <_strtoul_l.constprop.0>:
 8012688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801268c:	4f36      	ldr	r7, [pc, #216]	; (8012768 <_strtoul_l.constprop.0+0xe0>)
 801268e:	4686      	mov	lr, r0
 8012690:	460d      	mov	r5, r1
 8012692:	4628      	mov	r0, r5
 8012694:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012698:	5de6      	ldrb	r6, [r4, r7]
 801269a:	f016 0608 	ands.w	r6, r6, #8
 801269e:	d1f8      	bne.n	8012692 <_strtoul_l.constprop.0+0xa>
 80126a0:	2c2d      	cmp	r4, #45	; 0x2d
 80126a2:	d12f      	bne.n	8012704 <_strtoul_l.constprop.0+0x7c>
 80126a4:	782c      	ldrb	r4, [r5, #0]
 80126a6:	2601      	movs	r6, #1
 80126a8:	1c85      	adds	r5, r0, #2
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d057      	beq.n	801275e <_strtoul_l.constprop.0+0xd6>
 80126ae:	2b10      	cmp	r3, #16
 80126b0:	d109      	bne.n	80126c6 <_strtoul_l.constprop.0+0x3e>
 80126b2:	2c30      	cmp	r4, #48	; 0x30
 80126b4:	d107      	bne.n	80126c6 <_strtoul_l.constprop.0+0x3e>
 80126b6:	7828      	ldrb	r0, [r5, #0]
 80126b8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80126bc:	2858      	cmp	r0, #88	; 0x58
 80126be:	d149      	bne.n	8012754 <_strtoul_l.constprop.0+0xcc>
 80126c0:	786c      	ldrb	r4, [r5, #1]
 80126c2:	2310      	movs	r3, #16
 80126c4:	3502      	adds	r5, #2
 80126c6:	f04f 38ff 	mov.w	r8, #4294967295
 80126ca:	2700      	movs	r7, #0
 80126cc:	fbb8 f8f3 	udiv	r8, r8, r3
 80126d0:	fb03 f908 	mul.w	r9, r3, r8
 80126d4:	ea6f 0909 	mvn.w	r9, r9
 80126d8:	4638      	mov	r0, r7
 80126da:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80126de:	f1bc 0f09 	cmp.w	ip, #9
 80126e2:	d814      	bhi.n	801270e <_strtoul_l.constprop.0+0x86>
 80126e4:	4664      	mov	r4, ip
 80126e6:	42a3      	cmp	r3, r4
 80126e8:	dd22      	ble.n	8012730 <_strtoul_l.constprop.0+0xa8>
 80126ea:	2f00      	cmp	r7, #0
 80126ec:	db1d      	blt.n	801272a <_strtoul_l.constprop.0+0xa2>
 80126ee:	4580      	cmp	r8, r0
 80126f0:	d31b      	bcc.n	801272a <_strtoul_l.constprop.0+0xa2>
 80126f2:	d101      	bne.n	80126f8 <_strtoul_l.constprop.0+0x70>
 80126f4:	45a1      	cmp	r9, r4
 80126f6:	db18      	blt.n	801272a <_strtoul_l.constprop.0+0xa2>
 80126f8:	fb00 4003 	mla	r0, r0, r3, r4
 80126fc:	2701      	movs	r7, #1
 80126fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012702:	e7ea      	b.n	80126da <_strtoul_l.constprop.0+0x52>
 8012704:	2c2b      	cmp	r4, #43	; 0x2b
 8012706:	bf04      	itt	eq
 8012708:	782c      	ldrbeq	r4, [r5, #0]
 801270a:	1c85      	addeq	r5, r0, #2
 801270c:	e7cd      	b.n	80126aa <_strtoul_l.constprop.0+0x22>
 801270e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012712:	f1bc 0f19 	cmp.w	ip, #25
 8012716:	d801      	bhi.n	801271c <_strtoul_l.constprop.0+0x94>
 8012718:	3c37      	subs	r4, #55	; 0x37
 801271a:	e7e4      	b.n	80126e6 <_strtoul_l.constprop.0+0x5e>
 801271c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012720:	f1bc 0f19 	cmp.w	ip, #25
 8012724:	d804      	bhi.n	8012730 <_strtoul_l.constprop.0+0xa8>
 8012726:	3c57      	subs	r4, #87	; 0x57
 8012728:	e7dd      	b.n	80126e6 <_strtoul_l.constprop.0+0x5e>
 801272a:	f04f 37ff 	mov.w	r7, #4294967295
 801272e:	e7e6      	b.n	80126fe <_strtoul_l.constprop.0+0x76>
 8012730:	2f00      	cmp	r7, #0
 8012732:	da07      	bge.n	8012744 <_strtoul_l.constprop.0+0xbc>
 8012734:	2322      	movs	r3, #34	; 0x22
 8012736:	f8ce 3000 	str.w	r3, [lr]
 801273a:	f04f 30ff 	mov.w	r0, #4294967295
 801273e:	b932      	cbnz	r2, 801274e <_strtoul_l.constprop.0+0xc6>
 8012740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012744:	b106      	cbz	r6, 8012748 <_strtoul_l.constprop.0+0xc0>
 8012746:	4240      	negs	r0, r0
 8012748:	2a00      	cmp	r2, #0
 801274a:	d0f9      	beq.n	8012740 <_strtoul_l.constprop.0+0xb8>
 801274c:	b107      	cbz	r7, 8012750 <_strtoul_l.constprop.0+0xc8>
 801274e:	1e69      	subs	r1, r5, #1
 8012750:	6011      	str	r1, [r2, #0]
 8012752:	e7f5      	b.n	8012740 <_strtoul_l.constprop.0+0xb8>
 8012754:	2430      	movs	r4, #48	; 0x30
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1b5      	bne.n	80126c6 <_strtoul_l.constprop.0+0x3e>
 801275a:	2308      	movs	r3, #8
 801275c:	e7b3      	b.n	80126c6 <_strtoul_l.constprop.0+0x3e>
 801275e:	2c30      	cmp	r4, #48	; 0x30
 8012760:	d0a9      	beq.n	80126b6 <_strtoul_l.constprop.0+0x2e>
 8012762:	230a      	movs	r3, #10
 8012764:	e7af      	b.n	80126c6 <_strtoul_l.constprop.0+0x3e>
 8012766:	bf00      	nop
 8012768:	08013dac 	.word	0x08013dac

0801276c <_strtoul_r>:
 801276c:	f7ff bf8c 	b.w	8012688 <_strtoul_l.constprop.0>

08012770 <__submore>:
 8012770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012774:	460c      	mov	r4, r1
 8012776:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012778:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801277c:	4299      	cmp	r1, r3
 801277e:	d11d      	bne.n	80127bc <__submore+0x4c>
 8012780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012784:	f7fe fb34 	bl	8010df0 <_malloc_r>
 8012788:	b918      	cbnz	r0, 8012792 <__submore+0x22>
 801278a:	f04f 30ff 	mov.w	r0, #4294967295
 801278e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012796:	63a3      	str	r3, [r4, #56]	; 0x38
 8012798:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801279c:	6360      	str	r0, [r4, #52]	; 0x34
 801279e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80127a2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80127a6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80127aa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80127ae:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80127b2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80127b6:	6020      	str	r0, [r4, #0]
 80127b8:	2000      	movs	r0, #0
 80127ba:	e7e8      	b.n	801278e <__submore+0x1e>
 80127bc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80127be:	0077      	lsls	r7, r6, #1
 80127c0:	463a      	mov	r2, r7
 80127c2:	f7ff fb3f 	bl	8011e44 <_realloc_r>
 80127c6:	4605      	mov	r5, r0
 80127c8:	2800      	cmp	r0, #0
 80127ca:	d0de      	beq.n	801278a <__submore+0x1a>
 80127cc:	eb00 0806 	add.w	r8, r0, r6
 80127d0:	4601      	mov	r1, r0
 80127d2:	4632      	mov	r2, r6
 80127d4:	4640      	mov	r0, r8
 80127d6:	f7fe fa89 	bl	8010cec <memcpy>
 80127da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80127de:	f8c4 8000 	str.w	r8, [r4]
 80127e2:	e7e9      	b.n	80127b8 <__submore+0x48>

080127e4 <_fstat_r>:
 80127e4:	b538      	push	{r3, r4, r5, lr}
 80127e6:	4d07      	ldr	r5, [pc, #28]	; (8012804 <_fstat_r+0x20>)
 80127e8:	2300      	movs	r3, #0
 80127ea:	4604      	mov	r4, r0
 80127ec:	4608      	mov	r0, r1
 80127ee:	4611      	mov	r1, r2
 80127f0:	602b      	str	r3, [r5, #0]
 80127f2:	f7ee fedb 	bl	80015ac <_fstat>
 80127f6:	1c43      	adds	r3, r0, #1
 80127f8:	d102      	bne.n	8012800 <_fstat_r+0x1c>
 80127fa:	682b      	ldr	r3, [r5, #0]
 80127fc:	b103      	cbz	r3, 8012800 <_fstat_r+0x1c>
 80127fe:	6023      	str	r3, [r4, #0]
 8012800:	bd38      	pop	{r3, r4, r5, pc}
 8012802:	bf00      	nop
 8012804:	20001238 	.word	0x20001238

08012808 <_isatty_r>:
 8012808:	b538      	push	{r3, r4, r5, lr}
 801280a:	4d06      	ldr	r5, [pc, #24]	; (8012824 <_isatty_r+0x1c>)
 801280c:	2300      	movs	r3, #0
 801280e:	4604      	mov	r4, r0
 8012810:	4608      	mov	r0, r1
 8012812:	602b      	str	r3, [r5, #0]
 8012814:	f7ee feda 	bl	80015cc <_isatty>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_isatty_r+0x1a>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_isatty_r+0x1a>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	20001238 	.word	0x20001238

08012828 <_malloc_usable_size_r>:
 8012828:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801282c:	1f18      	subs	r0, r3, #4
 801282e:	2b00      	cmp	r3, #0
 8012830:	bfbc      	itt	lt
 8012832:	580b      	ldrlt	r3, [r1, r0]
 8012834:	18c0      	addlt	r0, r0, r3
 8012836:	4770      	bx	lr

08012838 <_init>:
 8012838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801283a:	bf00      	nop
 801283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801283e:	bc08      	pop	{r3}
 8012840:	469e      	mov	lr, r3
 8012842:	4770      	bx	lr

08012844 <_fini>:
 8012844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012846:	bf00      	nop
 8012848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801284a:	bc08      	pop	{r3}
 801284c:	469e      	mov	lr, r3
 801284e:	4770      	bx	lr
