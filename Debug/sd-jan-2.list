
sd-jan-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014728  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b78  080148b8  080148b8  000248b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016430  08016430  000300a8  2**0
                  CONTENTS
  4 .ARM          00000008  08016430  08016430  00026430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016438  08016438  000300a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08016438  08016438  00026438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08016458  08016458  00026458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08016464  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a30  200000a8  0801650c  000300a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ad8  0801650c  00031ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049db3  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009b4c  00000000  00000000  00079e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002808  00000000  00000000  000839d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002540  00000000  00000000  000861e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033572  00000000  00000000  00088720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00039b7d  00000000  00000000  000bbc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012d1d4  00000000  00000000  000f580f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002229e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9a0  00000000  00000000  00222a34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080148a0 	.word	0x080148a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	080148a0 	.word	0x080148a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <strlen>:
 8000284:	4603      	mov	r3, r0
 8000286:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028a:	2a00      	cmp	r2, #0
 800028c:	d1fb      	bne.n	8000286 <strlen+0x2>
 800028e:	1a18      	subs	r0, r3, r0
 8000290:	3801      	subs	r0, #1
 8000292:	4770      	bx	lr

08000294 <__aeabi_dmul>:
 8000294:	b570      	push	{r4, r5, r6, lr}
 8000296:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800029a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002a2:	bf1d      	ittte	ne
 80002a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a8:	ea94 0f0c 	teqne	r4, ip
 80002ac:	ea95 0f0c 	teqne	r5, ip
 80002b0:	f000 f8de 	bleq	8000470 <__aeabi_dmul+0x1dc>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea81 0603 	eor.w	r6, r1, r3
 80002ba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002be:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002c2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c6:	bf18      	it	ne
 80002c8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d4:	d038      	beq.n	8000348 <__aeabi_dmul+0xb4>
 80002d6:	fba0 ce02 	umull	ip, lr, r0, r2
 80002da:	f04f 0500 	mov.w	r5, #0
 80002de:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002e2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ea:	f04f 0600 	mov.w	r6, #0
 80002ee:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002f2:	f09c 0f00 	teq	ip, #0
 80002f6:	bf18      	it	ne
 80002f8:	f04e 0e01 	orrne.w	lr, lr, #1
 80002fc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000300:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000304:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000308:	d204      	bcs.n	8000314 <__aeabi_dmul+0x80>
 800030a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030e:	416d      	adcs	r5, r5
 8000310:	eb46 0606 	adc.w	r6, r6, r6
 8000314:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000318:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800031c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000320:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000324:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000328:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800032c:	bf88      	it	hi
 800032e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000332:	d81e      	bhi.n	8000372 <__aeabi_dmul+0xde>
 8000334:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000338:	bf08      	it	eq
 800033a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033e:	f150 0000 	adcs.w	r0, r0, #0
 8000342:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000346:	bd70      	pop	{r4, r5, r6, pc}
 8000348:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800034c:	ea46 0101 	orr.w	r1, r6, r1
 8000350:	ea40 0002 	orr.w	r0, r0, r2
 8000354:	ea81 0103 	eor.w	r1, r1, r3
 8000358:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800035c:	bfc2      	ittt	gt
 800035e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000362:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000366:	bd70      	popgt	{r4, r5, r6, pc}
 8000368:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800036c:	f04f 0e00 	mov.w	lr, #0
 8000370:	3c01      	subs	r4, #1
 8000372:	f300 80ab 	bgt.w	80004cc <__aeabi_dmul+0x238>
 8000376:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800037a:	bfde      	ittt	le
 800037c:	2000      	movle	r0, #0
 800037e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000382:	bd70      	pople	{r4, r5, r6, pc}
 8000384:	f1c4 0400 	rsb	r4, r4, #0
 8000388:	3c20      	subs	r4, #32
 800038a:	da35      	bge.n	80003f8 <__aeabi_dmul+0x164>
 800038c:	340c      	adds	r4, #12
 800038e:	dc1b      	bgt.n	80003c8 <__aeabi_dmul+0x134>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f305 	lsl.w	r3, r0, r5
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f205 	lsl.w	r2, r1, r5
 80003a4:	ea40 0002 	orr.w	r0, r0, r2
 80003a8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b4:	fa21 f604 	lsr.w	r6, r1, r4
 80003b8:	eb42 0106 	adc.w	r1, r2, r6
 80003bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c0:	bf08      	it	eq
 80003c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c6:	bd70      	pop	{r4, r5, r6, pc}
 80003c8:	f1c4 040c 	rsb	r4, r4, #12
 80003cc:	f1c4 0520 	rsb	r5, r4, #32
 80003d0:	fa00 f304 	lsl.w	r3, r0, r4
 80003d4:	fa20 f005 	lsr.w	r0, r0, r5
 80003d8:	fa01 f204 	lsl.w	r2, r1, r4
 80003dc:	ea40 0002 	orr.w	r0, r0, r2
 80003e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e8:	f141 0100 	adc.w	r1, r1, #0
 80003ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003f0:	bf08      	it	eq
 80003f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f6:	bd70      	pop	{r4, r5, r6, pc}
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f205 	lsl.w	r2, r0, r5
 8000400:	ea4e 0e02 	orr.w	lr, lr, r2
 8000404:	fa20 f304 	lsr.w	r3, r0, r4
 8000408:	fa01 f205 	lsl.w	r2, r1, r5
 800040c:	ea43 0302 	orr.w	r3, r3, r2
 8000410:	fa21 f004 	lsr.w	r0, r1, r4
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	fa21 f204 	lsr.w	r2, r1, r4
 800041c:	ea20 0002 	bic.w	r0, r0, r2
 8000420:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000424:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000428:	bf08      	it	eq
 800042a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042e:	bd70      	pop	{r4, r5, r6, pc}
 8000430:	f094 0f00 	teq	r4, #0
 8000434:	d10f      	bne.n	8000456 <__aeabi_dmul+0x1c2>
 8000436:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800043a:	0040      	lsls	r0, r0, #1
 800043c:	eb41 0101 	adc.w	r1, r1, r1
 8000440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000444:	bf08      	it	eq
 8000446:	3c01      	subeq	r4, #1
 8000448:	d0f7      	beq.n	800043a <__aeabi_dmul+0x1a6>
 800044a:	ea41 0106 	orr.w	r1, r1, r6
 800044e:	f095 0f00 	teq	r5, #0
 8000452:	bf18      	it	ne
 8000454:	4770      	bxne	lr
 8000456:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800045a:	0052      	lsls	r2, r2, #1
 800045c:	eb43 0303 	adc.w	r3, r3, r3
 8000460:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000464:	bf08      	it	eq
 8000466:	3d01      	subeq	r5, #1
 8000468:	d0f7      	beq.n	800045a <__aeabi_dmul+0x1c6>
 800046a:	ea43 0306 	orr.w	r3, r3, r6
 800046e:	4770      	bx	lr
 8000470:	ea94 0f0c 	teq	r4, ip
 8000474:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000478:	bf18      	it	ne
 800047a:	ea95 0f0c 	teqne	r5, ip
 800047e:	d00c      	beq.n	800049a <__aeabi_dmul+0x206>
 8000480:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000484:	bf18      	it	ne
 8000486:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048a:	d1d1      	bne.n	8000430 <__aeabi_dmul+0x19c>
 800048c:	ea81 0103 	eor.w	r1, r1, r3
 8000490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd70      	pop	{r4, r5, r6, pc}
 800049a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049e:	bf06      	itte	eq
 80004a0:	4610      	moveq	r0, r2
 80004a2:	4619      	moveq	r1, r3
 80004a4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a8:	d019      	beq.n	80004de <__aeabi_dmul+0x24a>
 80004aa:	ea94 0f0c 	teq	r4, ip
 80004ae:	d102      	bne.n	80004b6 <__aeabi_dmul+0x222>
 80004b0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b4:	d113      	bne.n	80004de <__aeabi_dmul+0x24a>
 80004b6:	ea95 0f0c 	teq	r5, ip
 80004ba:	d105      	bne.n	80004c8 <__aeabi_dmul+0x234>
 80004bc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004c0:	bf1c      	itt	ne
 80004c2:	4610      	movne	r0, r2
 80004c4:	4619      	movne	r1, r3
 80004c6:	d10a      	bne.n	80004de <__aeabi_dmul+0x24a>
 80004c8:	ea81 0103 	eor.w	r1, r1, r3
 80004cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d8:	f04f 0000 	mov.w	r0, #0
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e6:	bd70      	pop	{r4, r5, r6, pc}

080004e8 <__aeabi_drsub>:
 80004e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e002      	b.n	80004f4 <__adddf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dsub>:
 80004f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f4 <__adddf3>:
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	bf1f      	itttt	ne
 800050a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051a:	f000 80e2 	beq.w	80006e2 <__adddf3+0x1ee>
 800051e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000526:	bfb8      	it	lt
 8000528:	426d      	neglt	r5, r5
 800052a:	dd0c      	ble.n	8000546 <__adddf3+0x52>
 800052c:	442c      	add	r4, r5
 800052e:	ea80 0202 	eor.w	r2, r0, r2
 8000532:	ea81 0303 	eor.w	r3, r1, r3
 8000536:	ea82 0000 	eor.w	r0, r2, r0
 800053a:	ea83 0101 	eor.w	r1, r3, r1
 800053e:	ea80 0202 	eor.w	r2, r0, r2
 8000542:	ea81 0303 	eor.w	r3, r1, r3
 8000546:	2d36      	cmp	r5, #54	; 0x36
 8000548:	bf88      	it	hi
 800054a:	bd30      	pophi	{r4, r5, pc}
 800054c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x70>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000568:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800056c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x84>
 8000572:	4252      	negs	r2, r2
 8000574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000578:	ea94 0f05 	teq	r4, r5
 800057c:	f000 80a7 	beq.w	80006ce <__adddf3+0x1da>
 8000580:	f1a4 0401 	sub.w	r4, r4, #1
 8000584:	f1d5 0e20 	rsbs	lr, r5, #32
 8000588:	db0d      	blt.n	80005a6 <__adddf3+0xb2>
 800058a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058e:	fa22 f205 	lsr.w	r2, r2, r5
 8000592:	1880      	adds	r0, r0, r2
 8000594:	f141 0100 	adc.w	r1, r1, #0
 8000598:	fa03 f20e 	lsl.w	r2, r3, lr
 800059c:	1880      	adds	r0, r0, r2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	4159      	adcs	r1, r3
 80005a4:	e00e      	b.n	80005c4 <__adddf3+0xd0>
 80005a6:	f1a5 0520 	sub.w	r5, r5, #32
 80005aa:	f10e 0e20 	add.w	lr, lr, #32
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b4:	bf28      	it	cs
 80005b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	d507      	bpl.n	80005da <__adddf3+0xe6>
 80005ca:	f04f 0e00 	mov.w	lr, #0
 80005ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005de:	d31b      	bcc.n	8000618 <__adddf3+0x124>
 80005e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e4:	d30c      	bcc.n	8000600 <__adddf3+0x10c>
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80005ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f0:	f104 0401 	add.w	r4, r4, #1
 80005f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005fc:	f080 809a 	bcs.w	8000734 <__adddf3+0x240>
 8000600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	ea41 0105 	orr.w	r1, r1, r5
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800061c:	4140      	adcs	r0, r0
 800061e:	eb41 0101 	adc.w	r1, r1, r1
 8000622:	3c01      	subs	r4, #1
 8000624:	bf28      	it	cs
 8000626:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800062a:	d2e9      	bcs.n	8000600 <__adddf3+0x10c>
 800062c:	f091 0f00 	teq	r1, #0
 8000630:	bf04      	itt	eq
 8000632:	4601      	moveq	r1, r0
 8000634:	2000      	moveq	r0, #0
 8000636:	fab1 f381 	clz	r3, r1
 800063a:	bf08      	it	eq
 800063c:	3320      	addeq	r3, #32
 800063e:	f1a3 030b 	sub.w	r3, r3, #11
 8000642:	f1b3 0220 	subs.w	r2, r3, #32
 8000646:	da0c      	bge.n	8000662 <__adddf3+0x16e>
 8000648:	320c      	adds	r2, #12
 800064a:	dd08      	ble.n	800065e <__adddf3+0x16a>
 800064c:	f102 0c14 	add.w	ip, r2, #20
 8000650:	f1c2 020c 	rsb	r2, r2, #12
 8000654:	fa01 f00c 	lsl.w	r0, r1, ip
 8000658:	fa21 f102 	lsr.w	r1, r1, r2
 800065c:	e00c      	b.n	8000678 <__adddf3+0x184>
 800065e:	f102 0214 	add.w	r2, r2, #20
 8000662:	bfd8      	it	le
 8000664:	f1c2 0c20 	rsble	ip, r2, #32
 8000668:	fa01 f102 	lsl.w	r1, r1, r2
 800066c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000670:	bfdc      	itt	le
 8000672:	ea41 010c 	orrle.w	r1, r1, ip
 8000676:	4090      	lslle	r0, r2
 8000678:	1ae4      	subs	r4, r4, r3
 800067a:	bfa2      	ittt	ge
 800067c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000680:	4329      	orrge	r1, r5
 8000682:	bd30      	popge	{r4, r5, pc}
 8000684:	ea6f 0404 	mvn.w	r4, r4
 8000688:	3c1f      	subs	r4, #31
 800068a:	da1c      	bge.n	80006c6 <__adddf3+0x1d2>
 800068c:	340c      	adds	r4, #12
 800068e:	dc0e      	bgt.n	80006ae <__adddf3+0x1ba>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0220 	rsb	r2, r4, #32
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f302 	lsl.w	r3, r1, r2
 80006a0:	ea40 0003 	orr.w	r0, r0, r3
 80006a4:	fa21 f304 	lsr.w	r3, r1, r4
 80006a8:	ea45 0103 	orr.w	r1, r5, r3
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	f1c4 040c 	rsb	r4, r4, #12
 80006b2:	f1c4 0220 	rsb	r2, r4, #32
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	fa01 f304 	lsl.w	r3, r1, r4
 80006be:	ea40 0003 	orr.w	r0, r0, r3
 80006c2:	4629      	mov	r1, r5
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ca:	4629      	mov	r1, r5
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f094 0f00 	teq	r4, #0
 80006d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d6:	bf06      	itte	eq
 80006d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006dc:	3401      	addeq	r4, #1
 80006de:	3d01      	subne	r5, #1
 80006e0:	e74e      	b.n	8000580 <__adddf3+0x8c>
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf18      	it	ne
 80006e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ec:	d029      	beq.n	8000742 <__adddf3+0x24e>
 80006ee:	ea94 0f05 	teq	r4, r5
 80006f2:	bf08      	it	eq
 80006f4:	ea90 0f02 	teqeq	r0, r2
 80006f8:	d005      	beq.n	8000706 <__adddf3+0x212>
 80006fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fe:	bf04      	itt	eq
 8000700:	4619      	moveq	r1, r3
 8000702:	4610      	moveq	r0, r2
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	ea91 0f03 	teq	r1, r3
 800070a:	bf1e      	ittt	ne
 800070c:	2100      	movne	r1, #0
 800070e:	2000      	movne	r0, #0
 8000710:	bd30      	popne	{r4, r5, pc}
 8000712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000716:	d105      	bne.n	8000724 <__adddf3+0x230>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	4149      	adcs	r1, r1
 800071c:	bf28      	it	cs
 800071e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000728:	bf3c      	itt	cc
 800072a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072e:	bd30      	popcc	{r4, r5, pc}
 8000730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000746:	bf1a      	itte	ne
 8000748:	4619      	movne	r1, r3
 800074a:	4610      	movne	r0, r2
 800074c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000750:	bf1c      	itt	ne
 8000752:	460b      	movne	r3, r1
 8000754:	4602      	movne	r2, r0
 8000756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075a:	bf06      	itte	eq
 800075c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000760:	ea91 0f03 	teqeq	r1, r3
 8000764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	bf00      	nop

0800076c <__aeabi_ui2d>:
 800076c:	f090 0f00 	teq	r0, #0
 8000770:	bf04      	itt	eq
 8000772:	2100      	moveq	r1, #0
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000780:	f04f 0500 	mov.w	r5, #0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e750      	b.n	800062c <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_i2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e73e      	b.n	800062c <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_f2d>:
 80007b0:	0042      	lsls	r2, r0, #1
 80007b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007be:	bf1f      	itttt	ne
 80007c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007cc:	4770      	bxne	lr
 80007ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007d2:	bf08      	it	eq
 80007d4:	4770      	bxeq	lr
 80007d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007da:	bf04      	itt	eq
 80007dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	e71c      	b.n	800062c <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_ul2d>:
 80007f4:	ea50 0201 	orrs.w	r2, r0, r1
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	b530      	push	{r4, r5, lr}
 80007fe:	f04f 0500 	mov.w	r5, #0
 8000802:	e00a      	b.n	800081a <__aeabi_l2d+0x16>

08000804 <__aeabi_l2d>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000812:	d502      	bpl.n	800081a <__aeabi_l2d+0x16>
 8000814:	4240      	negs	r0, r0
 8000816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000822:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000826:	f43f aed8 	beq.w	80005da <__adddf3+0xe6>
 800082a:	f04f 0203 	mov.w	r2, #3
 800082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000832:	bf18      	it	ne
 8000834:	3203      	addne	r2, #3
 8000836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083a:	bf18      	it	ne
 800083c:	3203      	addne	r2, #3
 800083e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	fa00 fc03 	lsl.w	ip, r0, r3
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000852:	ea40 000e 	orr.w	r0, r0, lr
 8000856:	fa21 f102 	lsr.w	r1, r1, r2
 800085a:	4414      	add	r4, r2
 800085c:	e6bd      	b.n	80005da <__adddf3+0xe6>
 800085e:	bf00      	nop

08000860 <__aeabi_d2uiz>:
 8000860:	004a      	lsls	r2, r1, #1
 8000862:	d211      	bcs.n	8000888 <__aeabi_d2uiz+0x28>
 8000864:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000868:	d211      	bcs.n	800088e <__aeabi_d2uiz+0x2e>
 800086a:	d50d      	bpl.n	8000888 <__aeabi_d2uiz+0x28>
 800086c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000870:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000874:	d40e      	bmi.n	8000894 <__aeabi_d2uiz+0x34>
 8000876:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800087a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	4770      	bx	lr
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	4770      	bx	lr
 800088e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000892:	d102      	bne.n	800089a <__aeabi_d2uiz+0x3a>
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	4770      	bx	lr
 800089a:	f04f 0000 	mov.w	r0, #0
 800089e:	4770      	bx	lr

080008a0 <__aeabi_uldivmod>:
 80008a0:	b953      	cbnz	r3, 80008b8 <__aeabi_uldivmod+0x18>
 80008a2:	b94a      	cbnz	r2, 80008b8 <__aeabi_uldivmod+0x18>
 80008a4:	2900      	cmp	r1, #0
 80008a6:	bf08      	it	eq
 80008a8:	2800      	cmpeq	r0, #0
 80008aa:	bf1c      	itt	ne
 80008ac:	f04f 31ff 	movne.w	r1, #4294967295
 80008b0:	f04f 30ff 	movne.w	r0, #4294967295
 80008b4:	f000 b974 	b.w	8000ba0 <__aeabi_idiv0>
 80008b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80008bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008c0:	f000 f806 	bl	80008d0 <__udivmoddi4>
 80008c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008cc:	b004      	add	sp, #16
 80008ce:	4770      	bx	lr

080008d0 <__udivmoddi4>:
 80008d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d4:	9d08      	ldr	r5, [sp, #32]
 80008d6:	4604      	mov	r4, r0
 80008d8:	468e      	mov	lr, r1
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d14d      	bne.n	800097a <__udivmoddi4+0xaa>
 80008de:	428a      	cmp	r2, r1
 80008e0:	4694      	mov	ip, r2
 80008e2:	d969      	bls.n	80009b8 <__udivmoddi4+0xe8>
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	b152      	cbz	r2, 8000900 <__udivmoddi4+0x30>
 80008ea:	fa01 f302 	lsl.w	r3, r1, r2
 80008ee:	f1c2 0120 	rsb	r1, r2, #32
 80008f2:	fa20 f101 	lsr.w	r1, r0, r1
 80008f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80008fa:	ea41 0e03 	orr.w	lr, r1, r3
 80008fe:	4094      	lsls	r4, r2
 8000900:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000904:	0c21      	lsrs	r1, r4, #16
 8000906:	fbbe f6f8 	udiv	r6, lr, r8
 800090a:	fa1f f78c 	uxth.w	r7, ip
 800090e:	fb08 e316 	mls	r3, r8, r6, lr
 8000912:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000916:	fb06 f107 	mul.w	r1, r6, r7
 800091a:	4299      	cmp	r1, r3
 800091c:	d90a      	bls.n	8000934 <__udivmoddi4+0x64>
 800091e:	eb1c 0303 	adds.w	r3, ip, r3
 8000922:	f106 30ff 	add.w	r0, r6, #4294967295
 8000926:	f080 811f 	bcs.w	8000b68 <__udivmoddi4+0x298>
 800092a:	4299      	cmp	r1, r3
 800092c:	f240 811c 	bls.w	8000b68 <__udivmoddi4+0x298>
 8000930:	3e02      	subs	r6, #2
 8000932:	4463      	add	r3, ip
 8000934:	1a5b      	subs	r3, r3, r1
 8000936:	b2a4      	uxth	r4, r4
 8000938:	fbb3 f0f8 	udiv	r0, r3, r8
 800093c:	fb08 3310 	mls	r3, r8, r0, r3
 8000940:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000944:	fb00 f707 	mul.w	r7, r0, r7
 8000948:	42a7      	cmp	r7, r4
 800094a:	d90a      	bls.n	8000962 <__udivmoddi4+0x92>
 800094c:	eb1c 0404 	adds.w	r4, ip, r4
 8000950:	f100 33ff 	add.w	r3, r0, #4294967295
 8000954:	f080 810a 	bcs.w	8000b6c <__udivmoddi4+0x29c>
 8000958:	42a7      	cmp	r7, r4
 800095a:	f240 8107 	bls.w	8000b6c <__udivmoddi4+0x29c>
 800095e:	4464      	add	r4, ip
 8000960:	3802      	subs	r0, #2
 8000962:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000966:	1be4      	subs	r4, r4, r7
 8000968:	2600      	movs	r6, #0
 800096a:	b11d      	cbz	r5, 8000974 <__udivmoddi4+0xa4>
 800096c:	40d4      	lsrs	r4, r2
 800096e:	2300      	movs	r3, #0
 8000970:	e9c5 4300 	strd	r4, r3, [r5]
 8000974:	4631      	mov	r1, r6
 8000976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800097a:	428b      	cmp	r3, r1
 800097c:	d909      	bls.n	8000992 <__udivmoddi4+0xc2>
 800097e:	2d00      	cmp	r5, #0
 8000980:	f000 80ef 	beq.w	8000b62 <__udivmoddi4+0x292>
 8000984:	2600      	movs	r6, #0
 8000986:	e9c5 0100 	strd	r0, r1, [r5]
 800098a:	4630      	mov	r0, r6
 800098c:	4631      	mov	r1, r6
 800098e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000992:	fab3 f683 	clz	r6, r3
 8000996:	2e00      	cmp	r6, #0
 8000998:	d14a      	bne.n	8000a30 <__udivmoddi4+0x160>
 800099a:	428b      	cmp	r3, r1
 800099c:	d302      	bcc.n	80009a4 <__udivmoddi4+0xd4>
 800099e:	4282      	cmp	r2, r0
 80009a0:	f200 80f9 	bhi.w	8000b96 <__udivmoddi4+0x2c6>
 80009a4:	1a84      	subs	r4, r0, r2
 80009a6:	eb61 0303 	sbc.w	r3, r1, r3
 80009aa:	2001      	movs	r0, #1
 80009ac:	469e      	mov	lr, r3
 80009ae:	2d00      	cmp	r5, #0
 80009b0:	d0e0      	beq.n	8000974 <__udivmoddi4+0xa4>
 80009b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80009b6:	e7dd      	b.n	8000974 <__udivmoddi4+0xa4>
 80009b8:	b902      	cbnz	r2, 80009bc <__udivmoddi4+0xec>
 80009ba:	deff      	udf	#255	; 0xff
 80009bc:	fab2 f282 	clz	r2, r2
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	f040 8092 	bne.w	8000aea <__udivmoddi4+0x21a>
 80009c6:	eba1 010c 	sub.w	r1, r1, ip
 80009ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ce:	fa1f fe8c 	uxth.w	lr, ip
 80009d2:	2601      	movs	r6, #1
 80009d4:	0c20      	lsrs	r0, r4, #16
 80009d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80009da:	fb07 1113 	mls	r1, r7, r3, r1
 80009de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009e2:	fb0e f003 	mul.w	r0, lr, r3
 80009e6:	4288      	cmp	r0, r1
 80009e8:	d908      	bls.n	80009fc <__udivmoddi4+0x12c>
 80009ea:	eb1c 0101 	adds.w	r1, ip, r1
 80009ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80009f2:	d202      	bcs.n	80009fa <__udivmoddi4+0x12a>
 80009f4:	4288      	cmp	r0, r1
 80009f6:	f200 80cb 	bhi.w	8000b90 <__udivmoddi4+0x2c0>
 80009fa:	4643      	mov	r3, r8
 80009fc:	1a09      	subs	r1, r1, r0
 80009fe:	b2a4      	uxth	r4, r4
 8000a00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a04:	fb07 1110 	mls	r1, r7, r0, r1
 8000a08:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000a10:	45a6      	cmp	lr, r4
 8000a12:	d908      	bls.n	8000a26 <__udivmoddi4+0x156>
 8000a14:	eb1c 0404 	adds.w	r4, ip, r4
 8000a18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a1c:	d202      	bcs.n	8000a24 <__udivmoddi4+0x154>
 8000a1e:	45a6      	cmp	lr, r4
 8000a20:	f200 80bb 	bhi.w	8000b9a <__udivmoddi4+0x2ca>
 8000a24:	4608      	mov	r0, r1
 8000a26:	eba4 040e 	sub.w	r4, r4, lr
 8000a2a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a2e:	e79c      	b.n	800096a <__udivmoddi4+0x9a>
 8000a30:	f1c6 0720 	rsb	r7, r6, #32
 8000a34:	40b3      	lsls	r3, r6
 8000a36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a3e:	fa20 f407 	lsr.w	r4, r0, r7
 8000a42:	fa01 f306 	lsl.w	r3, r1, r6
 8000a46:	431c      	orrs	r4, r3
 8000a48:	40f9      	lsrs	r1, r7
 8000a4a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a4e:	fa00 f306 	lsl.w	r3, r0, r6
 8000a52:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a56:	0c20      	lsrs	r0, r4, #16
 8000a58:	fa1f fe8c 	uxth.w	lr, ip
 8000a5c:	fb09 1118 	mls	r1, r9, r8, r1
 8000a60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a64:	fb08 f00e 	mul.w	r0, r8, lr
 8000a68:	4288      	cmp	r0, r1
 8000a6a:	fa02 f206 	lsl.w	r2, r2, r6
 8000a6e:	d90b      	bls.n	8000a88 <__udivmoddi4+0x1b8>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a78:	f080 8088 	bcs.w	8000b8c <__udivmoddi4+0x2bc>
 8000a7c:	4288      	cmp	r0, r1
 8000a7e:	f240 8085 	bls.w	8000b8c <__udivmoddi4+0x2bc>
 8000a82:	f1a8 0802 	sub.w	r8, r8, #2
 8000a86:	4461      	add	r1, ip
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a90:	fb09 1110 	mls	r1, r9, r0, r1
 8000a94:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a9c:	458e      	cmp	lr, r1
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x1e2>
 8000aa0:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aa8:	d26c      	bcs.n	8000b84 <__udivmoddi4+0x2b4>
 8000aaa:	458e      	cmp	lr, r1
 8000aac:	d96a      	bls.n	8000b84 <__udivmoddi4+0x2b4>
 8000aae:	3802      	subs	r0, #2
 8000ab0:	4461      	add	r1, ip
 8000ab2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ab6:	fba0 9402 	umull	r9, r4, r0, r2
 8000aba:	eba1 010e 	sub.w	r1, r1, lr
 8000abe:	42a1      	cmp	r1, r4
 8000ac0:	46c8      	mov	r8, r9
 8000ac2:	46a6      	mov	lr, r4
 8000ac4:	d356      	bcc.n	8000b74 <__udivmoddi4+0x2a4>
 8000ac6:	d053      	beq.n	8000b70 <__udivmoddi4+0x2a0>
 8000ac8:	b15d      	cbz	r5, 8000ae2 <__udivmoddi4+0x212>
 8000aca:	ebb3 0208 	subs.w	r2, r3, r8
 8000ace:	eb61 010e 	sbc.w	r1, r1, lr
 8000ad2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ad6:	fa22 f306 	lsr.w	r3, r2, r6
 8000ada:	40f1      	lsrs	r1, r6
 8000adc:	431f      	orrs	r7, r3
 8000ade:	e9c5 7100 	strd	r7, r1, [r5]
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	4631      	mov	r1, r6
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	f1c2 0320 	rsb	r3, r2, #32
 8000aee:	40d8      	lsrs	r0, r3
 8000af0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af4:	fa21 f303 	lsr.w	r3, r1, r3
 8000af8:	4091      	lsls	r1, r2
 8000afa:	4301      	orrs	r1, r0
 8000afc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b00:	fa1f fe8c 	uxth.w	lr, ip
 8000b04:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b08:	fb07 3610 	mls	r6, r7, r0, r3
 8000b0c:	0c0b      	lsrs	r3, r1, #16
 8000b0e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b12:	fb00 f60e 	mul.w	r6, r0, lr
 8000b16:	429e      	cmp	r6, r3
 8000b18:	fa04 f402 	lsl.w	r4, r4, r2
 8000b1c:	d908      	bls.n	8000b30 <__udivmoddi4+0x260>
 8000b1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b26:	d22f      	bcs.n	8000b88 <__udivmoddi4+0x2b8>
 8000b28:	429e      	cmp	r6, r3
 8000b2a:	d92d      	bls.n	8000b88 <__udivmoddi4+0x2b8>
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	b289      	uxth	r1, r1
 8000b34:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b38:	fb07 3316 	mls	r3, r7, r6, r3
 8000b3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b40:	fb06 f30e 	mul.w	r3, r6, lr
 8000b44:	428b      	cmp	r3, r1
 8000b46:	d908      	bls.n	8000b5a <__udivmoddi4+0x28a>
 8000b48:	eb1c 0101 	adds.w	r1, ip, r1
 8000b4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b50:	d216      	bcs.n	8000b80 <__udivmoddi4+0x2b0>
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d914      	bls.n	8000b80 <__udivmoddi4+0x2b0>
 8000b56:	3e02      	subs	r6, #2
 8000b58:	4461      	add	r1, ip
 8000b5a:	1ac9      	subs	r1, r1, r3
 8000b5c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b60:	e738      	b.n	80009d4 <__udivmoddi4+0x104>
 8000b62:	462e      	mov	r6, r5
 8000b64:	4628      	mov	r0, r5
 8000b66:	e705      	b.n	8000974 <__udivmoddi4+0xa4>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	e6e3      	b.n	8000934 <__udivmoddi4+0x64>
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	e6f8      	b.n	8000962 <__udivmoddi4+0x92>
 8000b70:	454b      	cmp	r3, r9
 8000b72:	d2a9      	bcs.n	8000ac8 <__udivmoddi4+0x1f8>
 8000b74:	ebb9 0802 	subs.w	r8, r9, r2
 8000b78:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	e7a3      	b.n	8000ac8 <__udivmoddi4+0x1f8>
 8000b80:	4646      	mov	r6, r8
 8000b82:	e7ea      	b.n	8000b5a <__udivmoddi4+0x28a>
 8000b84:	4620      	mov	r0, r4
 8000b86:	e794      	b.n	8000ab2 <__udivmoddi4+0x1e2>
 8000b88:	4640      	mov	r0, r8
 8000b8a:	e7d1      	b.n	8000b30 <__udivmoddi4+0x260>
 8000b8c:	46d0      	mov	r8, sl
 8000b8e:	e77b      	b.n	8000a88 <__udivmoddi4+0x1b8>
 8000b90:	3b02      	subs	r3, #2
 8000b92:	4461      	add	r1, ip
 8000b94:	e732      	b.n	80009fc <__udivmoddi4+0x12c>
 8000b96:	4630      	mov	r0, r6
 8000b98:	e709      	b.n	80009ae <__udivmoddi4+0xde>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	e742      	b.n	8000a26 <__udivmoddi4+0x156>

08000ba0 <__aeabi_idiv0>:
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2120      	movs	r1, #32
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <SELECT+0x18>)
 8000bae:	f001 ff8b 	bl	8002ac8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	f001 fca8 	bl	8002508 <HAL_Delay>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	48000400 	.word	0x48000400

08000bc0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2120      	movs	r1, #32
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <DESELECT+0x18>)
 8000bca:	f001 ff7d 	bl	8002ac8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f001 fc9a 	bl	8002508 <HAL_Delay>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	48000400 	.word	0x48000400

08000bdc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000be6:	bf00      	nop
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <SPI_TxByte+0x30>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d1f8      	bne.n	8000be8 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000bf6:	1df9      	adds	r1, r7, #7
 8000bf8:	2364      	movs	r3, #100	; 0x64
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <SPI_TxByte+0x30>)
 8000bfe:	f003 feba 	bl	8004976 <HAL_SPI_Transmit>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000140 	.word	0x20000140

08000c10 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c1c:	bf00      	nop
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SPI_TxBuffer+0x30>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f003 0302 	and.w	r3, r3, #2
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d1f8      	bne.n	8000c1e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c2c:	887a      	ldrh	r2, [r7, #2]
 8000c2e:	2364      	movs	r3, #100	; 0x64
 8000c30:	6879      	ldr	r1, [r7, #4]
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <SPI_TxBuffer+0x30>)
 8000c34:	f003 fe9f 	bl	8004976 <HAL_SPI_Transmit>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000140 	.word	0x20000140

08000c44 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000c4a:	23ff      	movs	r3, #255	; 0xff
 8000c4c:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c4e:	bf00      	nop
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <SPI_RxByte+0x34>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d1f8      	bne.n	8000c50 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c5e:	1dba      	adds	r2, r7, #6
 8000c60:	1df9      	adds	r1, r7, #7
 8000c62:	2364      	movs	r3, #100	; 0x64
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2301      	movs	r3, #1
 8000c68:	4803      	ldr	r0, [pc, #12]	; (8000c78 <SPI_RxByte+0x34>)
 8000c6a:	f003 fff2 	bl	8004c52 <HAL_SPI_TransmitReceive>

	return data;
 8000c6e:	79bb      	ldrb	r3, [r7, #6]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000140 	.word	0x20000140

08000c7c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000c84:	f7ff ffde 	bl	8000c44 <SPI_RxByte>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	701a      	strb	r2, [r3, #0]
}
 8000c90:	bf00      	nop
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000c9e:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <SD_ReadyWait+0x30>)
 8000ca0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ca4:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000ca6:	f7ff ffcd 	bl	8000c44 <SPI_RxByte>
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	2bff      	cmp	r3, #255	; 0xff
 8000cb2:	d004      	beq.n	8000cbe <SD_ReadyWait+0x26>
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SD_ReadyWait+0x30>)
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d1f3      	bne.n	8000ca6 <SD_ReadyWait+0xe>

	return res;
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	200003a9 	.word	0x200003a9

08000ccc <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000cd2:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000cd6:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000cd8:	f7ff ff72 	bl	8000bc0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	e005      	b.n	8000cee <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000ce2:	20ff      	movs	r0, #255	; 0xff
 8000ce4:	f7ff ff7a 	bl	8000bdc <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	ddf6      	ble.n	8000ce2 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000cf4:	f7ff ff56 	bl	8000ba4 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000cf8:	2340      	movs	r3, #64	; 0x40
 8000cfa:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000d0c:	2395      	movs	r3, #149	; 0x95
 8000d0e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000d10:	463b      	mov	r3, r7
 8000d12:	2106      	movs	r1, #6
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff7b 	bl	8000c10 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d1a:	e002      	b.n	8000d22 <SD_PowerOn+0x56>
	{
		cnt--;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000d22:	f7ff ff8f 	bl	8000c44 <SPI_RxByte>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d002      	beq.n	8000d32 <SD_PowerOn+0x66>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d1f4      	bne.n	8000d1c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000d32:	f7ff ff45 	bl	8000bc0 <DESELECT>
	SPI_TxByte(0XFF);
 8000d36:	20ff      	movs	r0, #255	; 0xff
 8000d38:	f7ff ff50 	bl	8000bdc <SPI_TxByte>

	PowerFlag = 1;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SD_PowerOn+0x80>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200000c5 	.word	0x200000c5

08000d50 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <SD_PowerOff+0x14>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	200000c5 	.word	0x200000c5

08000d68 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <SD_CheckPower+0x14>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	200000c5 	.word	0x200000c5

08000d80 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <SD_RxDataBlock+0x5c>)
 8000d8c:	22c8      	movs	r2, #200	; 0xc8
 8000d8e:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000d90:	f7ff ff58 	bl	8000c44 <SPI_RxByte>
 8000d94:	4603      	mov	r3, r0
 8000d96:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	2bff      	cmp	r3, #255	; 0xff
 8000d9c:	d104      	bne.n	8000da8 <SD_RxDataBlock+0x28>
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <SD_RxDataBlock+0x5c>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f3      	bne.n	8000d90 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000da8:	7bfb      	ldrb	r3, [r7, #15]
 8000daa:	2bfe      	cmp	r3, #254	; 0xfe
 8000dac:	d001      	beq.n	8000db2 <SD_RxDataBlock+0x32>
 8000dae:	2300      	movs	r3, #0
 8000db0:	e00f      	b.n	8000dd2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5f 	bl	8000c7c <SPI_RxBytePtr>
	} while(len--);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	603a      	str	r2, [r7, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1f4      	bne.n	8000db2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000dc8:	f7ff ff3c 	bl	8000c44 <SPI_RxByte>
	SPI_RxByte();
 8000dcc:	f7ff ff3a 	bl	8000c44 <SPI_RxByte>

	return TRUE;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200003a8 	.word	0x200003a8

08000de0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000df0:	f7ff ff52 	bl	8000c98 <SD_ReadyWait>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2bff      	cmp	r3, #255	; 0xff
 8000df8:	d001      	beq.n	8000dfe <SD_TxDataBlock+0x1e>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e02f      	b.n	8000e5e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000dfe:	78fb      	ldrb	r3, [r7, #3]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff feeb 	bl	8000bdc <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	2bfd      	cmp	r3, #253	; 0xfd
 8000e0a:	d020      	beq.n	8000e4e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff fefd 	bl	8000c10 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000e16:	f7ff ff15 	bl	8000c44 <SPI_RxByte>
		SPI_RxByte();
 8000e1a:	f7ff ff13 	bl	8000c44 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000e1e:	e00b      	b.n	8000e38 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000e20:	f7ff ff10 	bl	8000c44 <SPI_RxByte>
 8000e24:	4603      	mov	r3, r0
 8000e26:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	f003 031f 	and.w	r3, r3, #31
 8000e2e:	2b05      	cmp	r3, #5
 8000e30:	d006      	beq.n	8000e40 <SD_TxDataBlock+0x60>
			i++;
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	3301      	adds	r3, #1
 8000e36:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	2b40      	cmp	r3, #64	; 0x40
 8000e3c:	d9f0      	bls.n	8000e20 <SD_TxDataBlock+0x40>
 8000e3e:	e000      	b.n	8000e42 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000e40:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000e42:	bf00      	nop
 8000e44:	f7ff fefe 	bl	8000c44 <SPI_RxByte>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d0fa      	beq.n	8000e44 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000e4e:	7bfb      	ldrb	r3, [r7, #15]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	2b05      	cmp	r3, #5
 8000e56:	d101      	bne.n	8000e5c <SD_TxDataBlock+0x7c>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e000      	b.n	8000e5e <SD_TxDataBlock+0x7e>

	return FALSE;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b084      	sub	sp, #16
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	6039      	str	r1, [r7, #0]
 8000e70:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e72:	f7ff ff11 	bl	8000c98 <SD_ReadyWait>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	d001      	beq.n	8000e80 <SD_SendCmd+0x1a>
 8000e7c:	23ff      	movs	r3, #255	; 0xff
 8000e7e:	e042      	b.n	8000f06 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff feaa 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	0e1b      	lsrs	r3, r3, #24
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fea4 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	0c1b      	lsrs	r3, r3, #16
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff fe9e 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe98 	bl	8000bdc <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe93 	bl	8000bdc <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	2b40      	cmp	r3, #64	; 0x40
 8000eba:	d102      	bne.n	8000ec2 <SD_SendCmd+0x5c>
 8000ebc:	2395      	movs	r3, #149	; 0x95
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	e007      	b.n	8000ed2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b48      	cmp	r3, #72	; 0x48
 8000ec6:	d102      	bne.n	8000ece <SD_SendCmd+0x68>
 8000ec8:	2387      	movs	r3, #135	; 0x87
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	e001      	b.n	8000ed2 <SD_SendCmd+0x6c>
	else crc = 1;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe81 	bl	8000bdc <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	2b4c      	cmp	r3, #76	; 0x4c
 8000ede:	d101      	bne.n	8000ee4 <SD_SendCmd+0x7e>
 8000ee0:	f7ff feb0 	bl	8000c44 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000ee4:	230a      	movs	r3, #10
 8000ee6:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000ee8:	f7ff feac 	bl	8000c44 <SPI_RxByte>
 8000eec:	4603      	mov	r3, r0
 8000eee:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000ef0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	da05      	bge.n	8000f04 <SD_SendCmd+0x9e>
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	73bb      	strb	r3, [r7, #14]
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d1f1      	bne.n	8000ee8 <SD_SendCmd+0x82>

	return res;
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <SD_disk_initialize+0x14>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e0d6      	b.n	80010d2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000f24:	4b6d      	ldr	r3, [pc, #436]	; (80010dc <SD_disk_initialize+0x1cc>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <SD_disk_initialize+0x2a>
 8000f32:	4b6a      	ldr	r3, [pc, #424]	; (80010dc <SD_disk_initialize+0x1cc>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	e0cb      	b.n	80010d2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000f3a:	f7ff fec7 	bl	8000ccc <SD_PowerOn>

	/* slave select */
	SELECT();
 8000f3e:	f7ff fe31 	bl	8000ba4 <SELECT>

	/* check disk type */
	type = 0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000f46:	2100      	movs	r1, #0
 8000f48:	2040      	movs	r0, #64	; 0x40
 8000f4a:	f7ff ff8c 	bl	8000e66 <SD_SendCmd>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	f040 80a6 	bne.w	80010a2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000f56:	4b62      	ldr	r3, [pc, #392]	; (80010e0 <SD_disk_initialize+0x1d0>)
 8000f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f5e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f62:	2048      	movs	r0, #72	; 0x48
 8000f64:	f7ff ff7f 	bl	8000e66 <SD_SendCmd>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d158      	bne.n	8001020 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000f6e:	2300      	movs	r3, #0
 8000f70:	73fb      	strb	r3, [r7, #15]
 8000f72:	e00c      	b.n	8000f8e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000f74:	7bfc      	ldrb	r4, [r7, #15]
 8000f76:	f7ff fe65 	bl	8000c44 <SPI_RxByte>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f104 0310 	add.w	r3, r4, #16
 8000f82:	443b      	add	r3, r7
 8000f84:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d9ef      	bls.n	8000f74 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f94:	7abb      	ldrb	r3, [r7, #10]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	f040 8083 	bne.w	80010a2 <SD_disk_initialize+0x192>
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2baa      	cmp	r3, #170	; 0xaa
 8000fa0:	d17f      	bne.n	80010a2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2077      	movs	r0, #119	; 0x77
 8000fa6:	f7ff ff5e 	bl	8000e66 <SD_SendCmd>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d807      	bhi.n	8000fc0 <SD_disk_initialize+0xb0>
 8000fb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fb4:	2069      	movs	r0, #105	; 0x69
 8000fb6:	f7ff ff56 	bl	8000e66 <SD_SendCmd>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000fc0:	4b47      	ldr	r3, [pc, #284]	; (80010e0 <SD_disk_initialize+0x1d0>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1eb      	bne.n	8000fa2 <SD_disk_initialize+0x92>
 8000fca:	e000      	b.n	8000fce <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fcc:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <SD_disk_initialize+0x1d0>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d064      	beq.n	80010a2 <SD_disk_initialize+0x192>
 8000fd8:	2100      	movs	r1, #0
 8000fda:	207a      	movs	r0, #122	; 0x7a
 8000fdc:	f7ff ff43 	bl	8000e66 <SD_SendCmd>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d15d      	bne.n	80010a2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e00c      	b.n	8001006 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000fec:	7bfc      	ldrb	r4, [r7, #15]
 8000fee:	f7ff fe29 	bl	8000c44 <SPI_RxByte>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	f104 0310 	add.w	r3, r4, #16
 8000ffa:	443b      	add	r3, r7
 8000ffc:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3301      	adds	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d9ef      	bls.n	8000fec <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800100c:	7a3b      	ldrb	r3, [r7, #8]
 800100e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SD_disk_initialize+0x10a>
 8001016:	230c      	movs	r3, #12
 8001018:	e000      	b.n	800101c <SD_disk_initialize+0x10c>
 800101a:	2304      	movs	r3, #4
 800101c:	73bb      	strb	r3, [r7, #14]
 800101e:	e040      	b.n	80010a2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001020:	2100      	movs	r1, #0
 8001022:	2077      	movs	r0, #119	; 0x77
 8001024:	f7ff ff1f 	bl	8000e66 <SD_SendCmd>
 8001028:	4603      	mov	r3, r0
 800102a:	2b01      	cmp	r3, #1
 800102c:	d808      	bhi.n	8001040 <SD_disk_initialize+0x130>
 800102e:	2100      	movs	r1, #0
 8001030:	2069      	movs	r0, #105	; 0x69
 8001032:	f7ff ff18 	bl	8000e66 <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d801      	bhi.n	8001040 <SD_disk_initialize+0x130>
 800103c:	2302      	movs	r3, #2
 800103e:	e000      	b.n	8001042 <SD_disk_initialize+0x132>
 8001040:	2301      	movs	r3, #1
 8001042:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d10e      	bne.n	8001068 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800104a:	2100      	movs	r1, #0
 800104c:	2077      	movs	r0, #119	; 0x77
 800104e:	f7ff ff0a 	bl	8000e66 <SD_SendCmd>
 8001052:	4603      	mov	r3, r0
 8001054:	2b01      	cmp	r3, #1
 8001056:	d80e      	bhi.n	8001076 <SD_disk_initialize+0x166>
 8001058:	2100      	movs	r1, #0
 800105a:	2069      	movs	r0, #105	; 0x69
 800105c:	f7ff ff03 	bl	8000e66 <SD_SendCmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d107      	bne.n	8001076 <SD_disk_initialize+0x166>
 8001066:	e00d      	b.n	8001084 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001068:	2100      	movs	r1, #0
 800106a:	2041      	movs	r0, #65	; 0x41
 800106c:	f7ff fefb 	bl	8000e66 <SD_SendCmd>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d005      	beq.n	8001082 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <SD_disk_initialize+0x1d0>)
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	b29b      	uxth	r3, r3
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1e1      	bne.n	8001044 <SD_disk_initialize+0x134>
 8001080:	e000      	b.n	8001084 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001082:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001084:	4b16      	ldr	r3, [pc, #88]	; (80010e0 <SD_disk_initialize+0x1d0>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	b29b      	uxth	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <SD_disk_initialize+0x18e>
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	2050      	movs	r0, #80	; 0x50
 8001094:	f7ff fee7 	bl	8000e66 <SD_SendCmd>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SD_disk_initialize+0x192>
 800109e:	2300      	movs	r3, #0
 80010a0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <SD_disk_initialize+0x1d4>)
 80010a4:	7bbb      	ldrb	r3, [r7, #14]
 80010a6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80010a8:	f7ff fd8a 	bl	8000bc0 <DESELECT>
	SPI_RxByte();
 80010ac:	f7ff fdca 	bl	8000c44 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d008      	beq.n	80010c8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <SD_disk_initialize+0x1cc>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SD_disk_initialize+0x1cc>)
 80010c4:	701a      	strb	r2, [r3, #0]
 80010c6:	e001      	b.n	80010cc <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80010c8:	f7ff fe42 	bl	8000d50 <SD_PowerOff>
	}

	return Stat;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <SD_disk_initialize+0x1cc>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	b2db      	uxtb	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd90      	pop	{r4, r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000000 	.word	0x20000000
 80010e0:	200003a8 	.word	0x200003a8
 80010e4:	200000c4 	.word	0x200000c4

080010e8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SD_disk_status+0x14>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e002      	b.n	8001102 <SD_disk_status+0x1a>
	return Stat;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SD_disk_status+0x28>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b2db      	uxtb	r3, r3
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <SD_disk_read+0x1c>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <SD_disk_read+0x20>
 8001130:	2304      	movs	r3, #4
 8001132:	e051      	b.n	80011d8 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001134:	4b2a      	ldr	r3, [pc, #168]	; (80011e0 <SD_disk_read+0xcc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SD_disk_read+0x32>
 8001142:	2303      	movs	r3, #3
 8001144:	e048      	b.n	80011d8 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <SD_disk_read+0xd0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <SD_disk_read+0x44>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	025b      	lsls	r3, r3, #9
 8001156:	607b      	str	r3, [r7, #4]

	SELECT();
 8001158:	f7ff fd24 	bl	8000ba4 <SELECT>

	if (count == 1)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d111      	bne.n	8001186 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	2051      	movs	r0, #81	; 0x51
 8001166:	f7ff fe7e 	bl	8000e66 <SD_SendCmd>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d129      	bne.n	80011c4 <SD_disk_read+0xb0>
 8001170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001174:	68b8      	ldr	r0, [r7, #8]
 8001176:	f7ff fe03 	bl	8000d80 <SD_RxDataBlock>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d021      	beq.n	80011c4 <SD_disk_read+0xb0>
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	e01e      	b.n	80011c4 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	2052      	movs	r0, #82	; 0x52
 800118a:	f7ff fe6c 	bl	8000e66 <SD_SendCmd>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d117      	bne.n	80011c4 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	68b8      	ldr	r0, [r7, #8]
 800119a:	f7ff fdf1 	bl	8000d80 <SD_RxDataBlock>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00a      	beq.n	80011ba <SD_disk_read+0xa6>
				buff += 512;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80011aa:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ed      	bne.n	8001194 <SD_disk_read+0x80>
 80011b8:	e000      	b.n	80011bc <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80011ba:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80011bc:	2100      	movs	r1, #0
 80011be:	204c      	movs	r0, #76	; 0x4c
 80011c0:	f7ff fe51 	bl	8000e66 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80011c4:	f7ff fcfc 	bl	8000bc0 <DESELECT>
	SPI_RxByte();
 80011c8:	f7ff fd3c 	bl	8000c44 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	bf14      	ite	ne
 80011d2:	2301      	movne	r3, #1
 80011d4:	2300      	moveq	r3, #0
 80011d6:	b2db      	uxtb	r3, r3
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000000 	.word	0x20000000
 80011e4:	200000c4 	.word	0x200000c4

080011e8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <SD_disk_write+0x1c>
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <SD_disk_write+0x20>
 8001204:	2304      	movs	r3, #4
 8001206:	e06b      	b.n	80012e0 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001208:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <SD_disk_write+0x100>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SD_disk_write+0x32>
 8001216:	2303      	movs	r3, #3
 8001218:	e062      	b.n	80012e0 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800121a:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <SD_disk_write+0x100>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SD_disk_write+0x44>
 8001228:	2302      	movs	r3, #2
 800122a:	e059      	b.n	80012e0 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800122c:	4b2f      	ldr	r3, [pc, #188]	; (80012ec <SD_disk_write+0x104>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <SD_disk_write+0x56>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	607b      	str	r3, [r7, #4]

	SELECT();
 800123e:	f7ff fcb1 	bl	8000ba4 <SELECT>

	if (count == 1)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d110      	bne.n	800126a <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	2058      	movs	r0, #88	; 0x58
 800124c:	f7ff fe0b 	bl	8000e66 <SD_SendCmd>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d13a      	bne.n	80012cc <SD_disk_write+0xe4>
 8001256:	21fe      	movs	r1, #254	; 0xfe
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f7ff fdc1 	bl	8000de0 <SD_TxDataBlock>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d033      	beq.n	80012cc <SD_disk_write+0xe4>
			count = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	e030      	b.n	80012cc <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <SD_disk_write+0x104>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001276:	2100      	movs	r1, #0
 8001278:	2077      	movs	r0, #119	; 0x77
 800127a:	f7ff fdf4 	bl	8000e66 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800127e:	6839      	ldr	r1, [r7, #0]
 8001280:	2057      	movs	r0, #87	; 0x57
 8001282:	f7ff fdf0 	bl	8000e66 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	2059      	movs	r0, #89	; 0x59
 800128a:	f7ff fdec 	bl	8000e66 <SD_SendCmd>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11b      	bne.n	80012cc <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001294:	21fc      	movs	r1, #252	; 0xfc
 8001296:	68b8      	ldr	r0, [r7, #8]
 8001298:	f7ff fda2 	bl	8000de0 <SD_TxDataBlock>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00a      	beq.n	80012b8 <SD_disk_write+0xd0>
				buff += 512;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80012a8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ee      	bne.n	8001294 <SD_disk_write+0xac>
 80012b6:	e000      	b.n	80012ba <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012b8:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80012ba:	21fd      	movs	r1, #253	; 0xfd
 80012bc:	2000      	movs	r0, #0
 80012be:	f7ff fd8f 	bl	8000de0 <SD_TxDataBlock>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <SD_disk_write+0xe4>
			{
				count = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80012cc:	f7ff fc78 	bl	8000bc0 <DESELECT>
	SPI_RxByte();
 80012d0:	f7ff fcb8 	bl	8000c44 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bf14      	ite	ne
 80012da:	2301      	movne	r3, #1
 80012dc:	2300      	moveq	r3, #0
 80012de:	b2db      	uxtb	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	200000c4 	.word	0x200000c4

080012f0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b08b      	sub	sp, #44	; 0x2c
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	603a      	str	r2, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
 80012fc:	460b      	mov	r3, r1
 80012fe:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SD_disk_ioctl+0x1e>
 800130a:	2304      	movs	r3, #4
 800130c:	e115      	b.n	800153a <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001314:	79bb      	ldrb	r3, [r7, #6]
 8001316:	2b05      	cmp	r3, #5
 8001318:	d124      	bne.n	8001364 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d012      	beq.n	8001348 <SD_disk_ioctl+0x58>
 8001322:	2b02      	cmp	r3, #2
 8001324:	dc1a      	bgt.n	800135c <SD_disk_ioctl+0x6c>
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <SD_disk_ioctl+0x40>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d006      	beq.n	800133c <SD_disk_ioctl+0x4c>
 800132e:	e015      	b.n	800135c <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001330:	f7ff fd0e 	bl	8000d50 <SD_PowerOff>
			res = RES_OK;
 8001334:	2300      	movs	r3, #0
 8001336:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800133a:	e0fc      	b.n	8001536 <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 800133c:	f7ff fcc6 	bl	8000ccc <SD_PowerOn>
			res = RES_OK;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001346:	e0f6      	b.n	8001536 <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	1c5c      	adds	r4, r3, #1
 800134c:	f7ff fd0c 	bl	8000d68 <SD_CheckPower>
 8001350:	4603      	mov	r3, r0
 8001352:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001354:	2300      	movs	r3, #0
 8001356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 800135a:	e0ec      	b.n	8001536 <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 800135c:	2304      	movs	r3, #4
 800135e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001362:	e0e8      	b.n	8001536 <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001364:	4b77      	ldr	r3, [pc, #476]	; (8001544 <SD_disk_ioctl+0x254>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <SD_disk_ioctl+0x86>
 8001372:	2303      	movs	r3, #3
 8001374:	e0e1      	b.n	800153a <SD_disk_ioctl+0x24a>

		SELECT();
 8001376:	f7ff fc15 	bl	8000ba4 <SELECT>

		switch (ctrl)
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	2b0d      	cmp	r3, #13
 800137e:	f200 80cb 	bhi.w	8001518 <SD_disk_ioctl+0x228>
 8001382:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <SD_disk_ioctl+0x98>)
 8001384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001388:	08001483 	.word	0x08001483
 800138c:	080013c1 	.word	0x080013c1
 8001390:	08001473 	.word	0x08001473
 8001394:	08001519 	.word	0x08001519
 8001398:	08001519 	.word	0x08001519
 800139c:	08001519 	.word	0x08001519
 80013a0:	08001519 	.word	0x08001519
 80013a4:	08001519 	.word	0x08001519
 80013a8:	08001519 	.word	0x08001519
 80013ac:	08001519 	.word	0x08001519
 80013b0:	08001519 	.word	0x08001519
 80013b4:	08001495 	.word	0x08001495
 80013b8:	080014b9 	.word	0x080014b9
 80013bc:	080014dd 	.word	0x080014dd
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013c0:	2100      	movs	r1, #0
 80013c2:	2049      	movs	r0, #73	; 0x49
 80013c4:	f7ff fd4f 	bl	8000e66 <SD_SendCmd>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 80a8 	bne.w	8001520 <SD_disk_ioctl+0x230>
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2110      	movs	r1, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fcd2 	bl	8000d80 <SD_RxDataBlock>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 809e 	beq.w	8001520 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 80013e4:	7b3b      	ldrb	r3, [r7, #12]
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10e      	bne.n	800140c <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	7d3b      	ldrb	r3, [r7, #20]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001402:	8bfb      	ldrh	r3, [r7, #30]
 8001404:	029a      	lsls	r2, r3, #10
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e02e      	b.n	800146a <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	b2da      	uxtb	r2, r3
 8001414:	7dbb      	ldrb	r3, [r7, #22]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4413      	add	r3, r2
 800141c:	b2da      	uxtb	r2, r3
 800141e:	7d7b      	ldrb	r3, [r7, #21]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0306 	and.w	r3, r3, #6
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3302      	adds	r3, #2
 8001430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001434:	7d3b      	ldrb	r3, [r7, #20]
 8001436:	099b      	lsrs	r3, r3, #6
 8001438:	b2db      	uxtb	r3, r3
 800143a:	b29a      	uxth	r2, r3
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	b29b      	uxth	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b29a      	uxth	r2, r3
 8001448:	7cbb      	ldrb	r3, [r7, #18]
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	b29b      	uxth	r3, r3
 800144e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001452:	b29b      	uxth	r3, r3
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 800145c:	8bfa      	ldrh	r2, [r7, #30]
 800145e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001462:	3b09      	subs	r3, #9
 8001464:	409a      	lsls	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001470:	e056      	b.n	8001520 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001480:	e055      	b.n	800152e <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001482:	f7ff fc09 	bl	8000c98 <SD_ReadyWait>
 8001486:	4603      	mov	r3, r0
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d14b      	bne.n	8001524 <SD_disk_ioctl+0x234>
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001492:	e047      	b.n	8001524 <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001494:	2100      	movs	r1, #0
 8001496:	2049      	movs	r0, #73	; 0x49
 8001498:	f7ff fce5 	bl	8000e66 <SD_SendCmd>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d142      	bne.n	8001528 <SD_disk_ioctl+0x238>
 80014a2:	2110      	movs	r1, #16
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff fc6b 	bl	8000d80 <SD_RxDataBlock>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d03b      	beq.n	8001528 <SD_disk_ioctl+0x238>
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014b6:	e037      	b.n	8001528 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014b8:	2100      	movs	r1, #0
 80014ba:	204a      	movs	r0, #74	; 0x4a
 80014bc:	f7ff fcd3 	bl	8000e66 <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d132      	bne.n	800152c <SD_disk_ioctl+0x23c>
 80014c6:	2110      	movs	r1, #16
 80014c8:	6a38      	ldr	r0, [r7, #32]
 80014ca:	f7ff fc59 	bl	8000d80 <SD_RxDataBlock>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d02b      	beq.n	800152c <SD_disk_ioctl+0x23c>
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 80014da:	e027      	b.n	800152c <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80014dc:	2100      	movs	r1, #0
 80014de:	207a      	movs	r0, #122	; 0x7a
 80014e0:	f7ff fcc1 	bl	8000e66 <SD_SendCmd>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014f0:	e00b      	b.n	800150a <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 80014f2:	6a3c      	ldr	r4, [r7, #32]
 80014f4:	1c63      	adds	r3, r4, #1
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	f7ff fba4 	bl	8000c44 <SPI_RxByte>
 80014fc:	4603      	mov	r3, r0
 80014fe:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001504:	3301      	adds	r3, #1
 8001506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800150a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800150e:	2b03      	cmp	r3, #3
 8001510:	d9ef      	bls.n	80014f2 <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001518:	2304      	movs	r3, #4
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800151e:	e006      	b.n	800152e <SD_disk_ioctl+0x23e>
			break;
 8001520:	bf00      	nop
 8001522:	e004      	b.n	800152e <SD_disk_ioctl+0x23e>
			break;
 8001524:	bf00      	nop
 8001526:	e002      	b.n	800152e <SD_disk_ioctl+0x23e>
			break;
 8001528:	bf00      	nop
 800152a:	e000      	b.n	800152e <SD_disk_ioctl+0x23e>
			break;
 800152c:	bf00      	nop
		}

		DESELECT();
 800152e:	f7ff fb47 	bl	8000bc0 <DESELECT>
		SPI_RxByte();
 8001532:	f7ff fb87 	bl	8000c44 <SPI_RxByte>
	}

	return res;
 8001536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800153a:	4618      	mov	r0, r3
 800153c:	372c      	adds	r7, #44	; 0x2c
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000

08001548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b092      	sub	sp, #72	; 0x48
 800154c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154e:	f000 ff7f 	bl	8002450 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001552:	f000 f93b 	bl	80017cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  portNVIC_SYSTICK_CTRL_REG = 0; // Systick interrupt causes Hard Fault without OS running.
 8001556:	4b8a      	ldr	r3, [pc, #552]	; (8001780 <main+0x238>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
     // will be reenabled by OS
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 fbac 	bl	8001cb8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001560:	f000 fb7a 	bl	8001c58 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8001564:	f000 f9c6 	bl	80018f4 <MX_RTC_Init>
  MX_TIM8_Init();
 8001568:	f000 fab8 	bl	8001adc <MX_TIM8_Init>
  MX_TIM5_Init();
 800156c:	f000 fa66 	bl	8001a3c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8001570:	f000 fb42 	bl	8001bf8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001574:	f005 fe4a 	bl	800720c <MX_FATFS_Init>
  MX_SPI2_Init();
 8001578:	f000 fa22 	bl	80019c0 <MX_SPI2_Init>
  MX_SPI1_Init();
 800157c:	f000 f9e2 	bl	8001944 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001580:	f000 f978 	bl	8001874 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
#if defined HAL_RTC_MODULE_ENABLED
  {
   const char* date = __DATE__;
 8001584:	4b7f      	ldr	r3, [pc, #508]	; (8001784 <main+0x23c>)
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
   const char* time = __TIME__;
 8001588:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <main+0x240>)
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
    * with:  MMM: Three Letters for month
    *        dd two numbers for day (01 ... 31)
    *        yyyy four number for year
    */
   char     month[4];
   uint32_t day   = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
   uint32_t year  = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
   uint8_t monthNum = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
   sscanf(date,"%3s %" SCNu32 "%" SCNu32, month, &day, &year);
 800159a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800159e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80015a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	460b      	mov	r3, r1
 80015aa:	4978      	ldr	r1, [pc, #480]	; (800178c <main+0x244>)
 80015ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80015ae:	f011 ff3d 	bl	801342c <siscanf>
   if (0 == strcmp(month, "Jan") ) monthNum = RTC_MONTH_JANUARY;
 80015b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015b6:	4976      	ldr	r1, [pc, #472]	; (8001790 <main+0x248>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe fe59 	bl	8000270 <strcmp>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d103      	bne.n	80015cc <main+0x84>
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015ca:	e091      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Feb") ) monthNum = RTC_MONTH_FEBRUARY;
 80015cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d0:	4970      	ldr	r1, [pc, #448]	; (8001794 <main+0x24c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe fe4c 	bl	8000270 <strcmp>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <main+0x9e>
 80015de:	2302      	movs	r3, #2
 80015e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015e4:	e084      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Mar") ) monthNum = RTC_MONTH_MARCH;
 80015e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ea:	496b      	ldr	r1, [pc, #428]	; (8001798 <main+0x250>)
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe fe3f 	bl	8000270 <strcmp>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <main+0xb8>
 80015f8:	2303      	movs	r3, #3
 80015fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80015fe:	e077      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Apr") ) monthNum = RTC_MONTH_APRIL;
 8001600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001604:	4965      	ldr	r1, [pc, #404]	; (800179c <main+0x254>)
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe fe32 	bl	8000270 <strcmp>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d103      	bne.n	800161a <main+0xd2>
 8001612:	2304      	movs	r3, #4
 8001614:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001618:	e06a      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "May") ) monthNum = RTC_MONTH_MAY;
 800161a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800161e:	4960      	ldr	r1, [pc, #384]	; (80017a0 <main+0x258>)
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe fe25 	bl	8000270 <strcmp>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d103      	bne.n	8001634 <main+0xec>
 800162c:	2305      	movs	r3, #5
 800162e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001632:	e05d      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Jun") ) monthNum = RTC_MONTH_JUNE;
 8001634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001638:	495a      	ldr	r1, [pc, #360]	; (80017a4 <main+0x25c>)
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fe18 	bl	8000270 <strcmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <main+0x106>
 8001646:	2306      	movs	r3, #6
 8001648:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800164c:	e050      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Jul") ) monthNum = RTC_MONTH_JULY;
 800164e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001652:	4955      	ldr	r1, [pc, #340]	; (80017a8 <main+0x260>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe0b 	bl	8000270 <strcmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d103      	bne.n	8001668 <main+0x120>
 8001660:	2307      	movs	r3, #7
 8001662:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001666:	e043      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Aug") ) monthNum = RTC_MONTH_AUGUST;
 8001668:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166c:	494f      	ldr	r1, [pc, #316]	; (80017ac <main+0x264>)
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fdfe 	bl	8000270 <strcmp>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d103      	bne.n	8001682 <main+0x13a>
 800167a:	2308      	movs	r3, #8
 800167c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001680:	e036      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Sep") ) monthNum = RTC_MONTH_SEPTEMBER;
 8001682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001686:	494a      	ldr	r1, [pc, #296]	; (80017b0 <main+0x268>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fdf1 	bl	8000270 <strcmp>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <main+0x154>
 8001694:	2309      	movs	r3, #9
 8001696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800169a:	e029      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Oct") ) monthNum = 10;
 800169c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016a0:	4944      	ldr	r1, [pc, #272]	; (80017b4 <main+0x26c>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe fde4 	bl	8000270 <strcmp>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d103      	bne.n	80016b6 <main+0x16e>
 80016ae:	230a      	movs	r3, #10
 80016b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80016b4:	e01c      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Nov") ) monthNum = 11;
 80016b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ba:	493f      	ldr	r1, [pc, #252]	; (80017b8 <main+0x270>)
 80016bc:	4618      	mov	r0, r3
 80016be:	f7fe fdd7 	bl	8000270 <strcmp>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d103      	bne.n	80016d0 <main+0x188>
 80016c8:	230b      	movs	r3, #11
 80016ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80016ce:	e00f      	b.n	80016f0 <main+0x1a8>
   else if (0 == strcmp(month, "Dec") ) monthNum = 12;
 80016d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d4:	4939      	ldr	r1, [pc, #228]	; (80017bc <main+0x274>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fdca 	bl	8000270 <strcmp>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d103      	bne.n	80016ea <main+0x1a2>
 80016e2:	230c      	movs	r3, #12
 80016e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80016e8:	e002      	b.n	80016f0 <main+0x1a8>
   else monthNum = RTC_MONTH_DECEMBER; // error!!!
 80016ea:	2312      	movs	r3, #18
 80016ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

   RTC_DateTypeDef rtcDate;
   rtcDate.WeekDay =  RTC_WEEKDAY_MONDAY;  // We don:t know it!
 80016f0:	2301      	movs	r3, #1
 80016f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   rtcDate.Month   = monthNum;
 80016f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   rtcDate.Date    = day;
 80016fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   rtcDate.Year    = year%100;   // must be between 0 .. 99
 8001706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <main+0x278>)
 800170a:	fba3 1302 	umull	r1, r3, r3, r2
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2164      	movs	r1, #100	; 0x64
 8001712:	fb01 f303 	mul.w	r3, r1, r3
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN );
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	2200      	movs	r2, #0
 8001724:	4619      	mov	r1, r3
 8001726:	4827      	ldr	r0, [pc, #156]	; (80017c4 <main+0x27c>)
 8001728:	f002 ff44 	bl	80045b4 <HAL_RTC_SetDate>
    *
    * with:  hh: two numbers for hours
    *        mm: two numbers for minutes
    *        ss: two numbers for seconds
    */
   uint32_t hours   = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
   uint32_t minutes = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
   uint32_t seconds = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
   sscanf(time,"%" SCNu32 ":%" SCNu32 ":%" SCNu32, &hours, &minutes, &seconds);
 8001738:	f107 011c 	add.w	r1, r7, #28
 800173c:	f107 0220 	add.w	r2, r7, #32
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	460b      	mov	r3, r1
 8001748:	491f      	ldr	r1, [pc, #124]	; (80017c8 <main+0x280>)
 800174a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800174c:	f011 fe6e 	bl	801342c <siscanf>
   RTC_TimeTypeDef rtcTime;

   rtcTime.Hours          = hours;
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	b2db      	uxtb	r3, r3
 8001754:	713b      	strb	r3, [r7, #4]
   rtcTime.Minutes        = minutes;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	717b      	strb	r3, [r7, #5]
   rtcTime.Seconds        = seconds;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	71bb      	strb	r3, [r7, #6]
   rtcTime.TimeFormat     = RTC_HOURFORMAT12_AM;
 8001762:	2300      	movs	r3, #0
 8001764:	71fb      	strb	r3, [r7, #7]
   rtcTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
   rtcTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]

   HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN );
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	4813      	ldr	r0, [pc, #76]	; (80017c4 <main+0x27c>)
 8001776:	f002 fe80 	bl	800447a <HAL_RTC_SetTime>
  }
#endif
  startApplication();
 800177a:	f00d fce9 	bl	800f150 <startApplication>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177e:	e7fe      	b.n	800177e <main+0x236>
 8001780:	e000e010 	.word	0xe000e010
 8001784:	080148b8 	.word	0x080148b8
 8001788:	080148c4 	.word	0x080148c4
 800178c:	080148d0 	.word	0x080148d0
 8001790:	080148dc 	.word	0x080148dc
 8001794:	080148e0 	.word	0x080148e0
 8001798:	080148e4 	.word	0x080148e4
 800179c:	080148e8 	.word	0x080148e8
 80017a0:	080148ec 	.word	0x080148ec
 80017a4:	080148f0 	.word	0x080148f0
 80017a8:	080148f4 	.word	0x080148f4
 80017ac:	080148f8 	.word	0x080148f8
 80017b0:	080148fc 	.word	0x080148fc
 80017b4:	08014900 	.word	0x08014900
 80017b8:	08014904 	.word	0x08014904
 80017bc:	08014908 	.word	0x08014908
 80017c0:	51eb851f 	.word	0x51eb851f
 80017c4:	2000011c 	.word	0x2000011c
 80017c8:	0801490c 	.word	0x0801490c

080017cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b096      	sub	sp, #88	; 0x58
 80017d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	2244      	movs	r2, #68	; 0x44
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f011 f94e 	bl	8012a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017f2:	f001 fab5 	bl	8002d60 <HAL_PWREx_ControlVoltageScaling>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017fc:	f000 face 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001800:	230a      	movs	r3, #10
 8001802:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800180a:	2310      	movs	r3, #16
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800180e:	2301      	movs	r3, #1
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001812:	2302      	movs	r3, #2
 8001814:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001816:	2302      	movs	r3, #2
 8001818:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800181a:	2301      	movs	r3, #1
 800181c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800181e:	230a      	movs	r3, #10
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001822:	2307      	movs	r3, #7
 8001824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001826:	2302      	movs	r3, #2
 8001828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182a:	2302      	movs	r3, #2
 800182c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182e:	f107 0314 	add.w	r3, r7, #20
 8001832:	4618      	mov	r0, r3
 8001834:	f001 faea 	bl	8002e0c <HAL_RCC_OscConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0x76>
  {
    Error_Handler();
 800183e:	f000 faad 	bl	8001d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001842:	230f      	movs	r3, #15
 8001844:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001846:	2303      	movs	r3, #3
 8001848:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184a:	2300      	movs	r3, #0
 800184c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001856:	463b      	mov	r3, r7
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f001 feb2 	bl	80035c4 <HAL_RCC_ClockConfig>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001866:	f000 fa99 	bl	8001d9c <Error_Handler>
  }
}
 800186a:	bf00      	nop
 800186c:	3758      	adds	r7, #88	; 0x58
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_I2C1_Init+0x74>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <MX_I2C1_Init+0x78>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_I2C1_Init+0x74>)
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <MX_I2C1_Init+0x7c>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_I2C1_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_I2C1_Init+0x74>)
 800188c:	2201      	movs	r2, #1
 800188e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_I2C1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_I2C1_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x74>)
 80018b0:	f001 f922 	bl	8002af8 <HAL_I2C_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80018ba:	f000 fa6f 	bl	8001d9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x74>)
 80018c2:	f001 f9a8 	bl	8002c16 <HAL_I2CEx_ConfigAnalogFilter>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018cc:	f000 fa66 	bl	8001d9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_I2C1_Init+0x74>)
 80018d4:	f001 f9ea 	bl	8002cac <HAL_I2CEx_ConfigDigitalFilter>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018de:	f000 fa5d 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200000c8 	.word	0x200000c8
 80018ec:	40005400 	.word	0x40005400
 80018f0:	10909cec 	.word	0x10909cec

080018f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_RTC_Init+0x48>)
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <MX_RTC_Init+0x4c>)
 80018fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_RTC_Init+0x48>)
 8001900:	2200      	movs	r2, #0
 8001902:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001904:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_RTC_Init+0x48>)
 8001906:	227f      	movs	r2, #127	; 0x7f
 8001908:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_RTC_Init+0x48>)
 800190c:	22ff      	movs	r2, #255	; 0xff
 800190e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <MX_RTC_Init+0x48>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_RTC_Init+0x48>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <MX_RTC_Init+0x48>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_RTC_Init+0x48>)
 8001924:	2200      	movs	r2, #0
 8001926:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	; (800193c <MX_RTC_Init+0x48>)
 800192a:	f002 fd2b 	bl	8004384 <HAL_RTC_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001934:	f000 fa32 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000011c 	.word	0x2000011c
 8001940:	40002800 	.word	0x40002800

08001944 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <MX_SPI1_Init+0x74>)
 800194a:	4a1c      	ldr	r2, [pc, #112]	; (80019bc <MX_SPI1_Init+0x78>)
 800194c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800194e:	4b1a      	ldr	r3, [pc, #104]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001950:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001954:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_SPI1_Init+0x74>)
 800195e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001962:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001976:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI1_Init+0x74>)
 800197a:	2230      	movs	r2, #48	; 0x30
 800197c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_SPI1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001992:	2207      	movs	r2, #7
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_SPI1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI1_Init+0x74>)
 800199e:	2208      	movs	r2, #8
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_SPI1_Init+0x74>)
 80019a4:	f002 ff44 	bl	8004830 <HAL_SPI_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 f9f5 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000140 	.word	0x20000140
 80019bc:	40013000 	.word	0x40013000

080019c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019c4:	4b1b      	ldr	r3, [pc, #108]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019c6:	4a1c      	ldr	r2, [pc, #112]	; (8001a38 <MX_SPI2_Init+0x78>)
 80019c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019de:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80019ec:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019f6:	2230      	movs	r2, #48	; 0x30
 80019f8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_SPI2_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_SPI2_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <MX_SPI2_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_SPI2_Init+0x74>)
 8001a0e:	2207      	movs	r2, #7
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <MX_SPI2_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_SPI2_Init+0x74>)
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	; (8001a34 <MX_SPI2_Init+0x74>)
 8001a20:	f002 ff06 	bl	8004830 <HAL_SPI_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001a2a:	f000 f9b7 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001a4 	.word	0x200001a4
 8001a38:	40003800 	.word	0x40003800

08001a3c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <MX_TIM5_Init+0x9c>)
 8001a5e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 800;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a62:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a66:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a70:	f04f 32ff 	mov.w	r2, #4294967295
 8001a74:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001a84:	f003 fc5c 	bl	8005340 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001a8e:	f000 f985 	bl	8001d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001aa0:	f003 ff6e 	bl	8005980 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001aaa:	f000 f977 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM5_Init+0x98>)
 8001abc:	f004 fc66 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f000 f969 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000208 	.word	0x20000208
 8001ad8:	40000c00 	.word	0x40000c00

08001adc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b096      	sub	sp, #88	; 0x58
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
 8001afe:	615a      	str	r2, [r3, #20]
 8001b00:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	222c      	movs	r2, #44	; 0x2c
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f010 ffb7 	bl	8012a7c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b10:	4a38      	ldr	r2, [pc, #224]	; (8001bf4 <MX_TIM8_Init+0x118>)
 8001b12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b16:	220f      	movs	r2, #15
 8001b18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8001b3c:	482c      	ldr	r0, [pc, #176]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b3e:	f003 fd2f 	bl	80055a0 <HAL_TIM_OC_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM8_Init+0x70>
  {
    Error_Handler();
 8001b48:	f000 f928 	bl	8001d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b50:	2300      	movs	r3, #0
 8001b52:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4824      	ldr	r0, [pc, #144]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b60:	f004 fc14 	bl	800638c <HAL_TIMEx_MasterConfigSynchronization>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM8_Init+0x92>
  {
    Error_Handler();
 8001b6a:	f000 f917 	bl	8001d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b76:	2300      	movs	r3, #0
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b8e:	2208      	movs	r2, #8
 8001b90:	4619      	mov	r1, r3
 8001b92:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001b94:	f003 fe7a 	bl	800588c <HAL_TIM_OC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001b9e:	f000 f8fd 	bl	8001d9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <MX_TIM8_Init+0x114>)
 8001bd8:	f004 fc60 	bl	800649c <HAL_TIMEx_ConfigBreakDeadTime>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM8_Init+0x10a>
  {
    Error_Handler();
 8001be2:	f000 f8db 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001be6:	bf00      	nop
 8001be8:	3758      	adds	r7, #88	; 0x58
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	20000254 	.word	0x20000254
 8001bf4:	40013400 	.word	0x40013400

08001bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <MX_USART2_UART_Init+0x5c>)
 8001c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c16:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c1e:	220c      	movs	r2, #12
 8001c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_USART2_UART_Init+0x58>)
 8001c3c:	f004 fcca 	bl	80065d4 <HAL_UART_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c46:	f000 f8a9 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200002a0 	.word	0x200002a0
 8001c54:	40004400 	.word	0x40004400

08001c58 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <MX_USART3_UART_Init+0x5c>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c9a:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_USART3_UART_Init+0x58>)
 8001c9c:	f004 fc9a 	bl	80065d4 <HAL_UART_Init>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ca6:	f000 f879 	bl	8001d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000324 	.word	0x20000324
 8001cb4:	40004800 	.word	0x40004800

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
 8001ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	4a30      	ldr	r2, [pc, #192]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cda:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf2:	4b28      	ldr	r3, [pc, #160]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a24      	ldr	r2, [pc, #144]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <MX_GPIO_Init+0xdc>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|SD_CS_Pin|SPI1_SC_Pin, GPIO_PIN_RESET);
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2164      	movs	r1, #100	; 0x64
 8001d32:	4819      	ldr	r0, [pc, #100]	; (8001d98 <MX_GPIO_Init+0xe0>)
 8001d34:	f000 fec8 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f000 fd11 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d52:	2304      	movs	r3, #4
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	480b      	ldr	r0, [pc, #44]	; (8001d98 <MX_GPIO_Init+0xe0>)
 8001d6a:	f000 fd03 	bl	8002774 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin SPI1_SC_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|SPI1_SC_Pin;
 8001d6e:	2360      	movs	r3, #96	; 0x60
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d76:	2301      	movs	r3, #1
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <MX_GPIO_Init+0xe0>)
 8001d86:	f000 fcf5 	bl	8002774 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	48000400 	.word	0x48000400

08001d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <Error_Handler+0x8>
	...

08001da8 <_write>:

#define WRITEFUNC _write
#define READFUNC _read

int WRITEFUNC(int iFileHandle, char *pcBuffer, int iLength)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]

    HAL_UART_Transmit (stdio, (uint8_t *)pcBuffer, iLength, 0xFFFF);
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <_write+0x28>)
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	68b9      	ldr	r1, [r7, #8]
 8001dc2:	f004 fc55 	bl	8006670 <HAL_UART_Transmit>
    return iLength;
 8001dc6:	687b      	ldr	r3, [r7, #4]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <_read>:


int READFUNC (int iFileHandle, char *pcBuffer, int iLength)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
    HAL_UART_Receive (stdio, (uint8_t *)pcBuffer, iLength, 0xFFFF);
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <_read+0x28>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dec:	68b9      	ldr	r1, [r7, #8]
 8001dee:	f004 fcd3 	bl	8006798 <HAL_UART_Receive>
    return iLength;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_MspInit+0x44>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <HAL_MspInit+0x44>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6613      	str	r3, [r2, #96]	; 0x60
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_MspInit+0x44>)
 8001e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1e:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_MspInit+0x44>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a08      	ldr	r2, [pc, #32]	; (8001e44 <HAL_MspInit+0x44>)
 8001e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_MspInit+0x44>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e32:	603b      	str	r3, [r7, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000

08001e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b0ac      	sub	sp, #176	; 0xb0
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2288      	movs	r2, #136	; 0x88
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f010 fe07 	bl	8012a7c <memset>
  if(hi2c->Instance==I2C1)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_I2C_MspInit+0xc8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d147      	bne.n	8001f08 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e78:	2340      	movs	r3, #64	; 0x40
 8001e7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4618      	mov	r0, r3
 8001e86:	f001 fdc1 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e90:	f7ff ff84 	bl	8001d9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_I2C_MspInit+0xcc>)
 8001e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e98:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <HAL_I2C_MspInit+0xcc>)
 8001e9a:	f043 0302 	orr.w	r3, r3, #2
 8001e9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ea0:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <HAL_I2C_MspInit+0xcc>)
 8001ea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|HW_I2C_SDA_Pin;
 8001eac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eb4:	2312      	movs	r3, #18
 8001eb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4811      	ldr	r0, [pc, #68]	; (8001f18 <HAL_I2C_MspInit+0xd0>)
 8001ed4:	f000 fc4e 	bl	8002774 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_PB8);
 8001ed8:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_I2C_MspInit+0xd4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a0f      	ldr	r2, [pc, #60]	; (8001f1c <HAL_I2C_MspInit+0xd4>)
 8001ede:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee2:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_PB9);
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_I2C_MspInit+0xd4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <HAL_I2C_MspInit+0xd4>)
 8001eea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001eee:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0xcc>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_I2C_MspInit+0xcc>)
 8001ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efa:	6593      	str	r3, [r2, #88]	; 0x58
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_I2C_MspInit+0xcc>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f08:	bf00      	nop
 8001f0a:	37b0      	adds	r7, #176	; 0xb0
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000400 	.word	0x48000400
 8001f1c:	40010000 	.word	0x40010000

08001f20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b0a4      	sub	sp, #144	; 0x90
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	2288      	movs	r2, #136	; 0x88
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f010 fda3 	bl	8012a7c <memset>
  if(hrtc->Instance==RTC)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_RTC_MspInit+0x5c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d118      	bne.n	8001f72 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4e:	f107 0308 	add.w	r3, r7, #8
 8001f52:	4618      	mov	r0, r3
 8001f54:	f001 fd5a 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001f5e:	f7ff ff1d 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f62:	4b07      	ldr	r3, [pc, #28]	; (8001f80 <HAL_RTC_MspInit+0x60>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <HAL_RTC_MspInit+0x60>)
 8001f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3790      	adds	r7, #144	; 0x90
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40002800 	.word	0x40002800
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	; 0x30
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2f      	ldr	r2, [pc, #188]	; (8002060 <HAL_SPI_MspInit+0xdc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d129      	bne.n	8001ffa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fa6:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8001fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001faa:	4a2e      	ldr	r2, [pc, #184]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8001fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb0:	6613      	str	r3, [r2, #96]	; 0x60
 8001fb2:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8001fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a28      	ldr	r2, [pc, #160]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fd6:	23e0      	movs	r3, #224	; 0xe0
 8001fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	2302      	movs	r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fe6:	2305      	movs	r3, #5
 8001fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff4:	f000 fbbe 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ff8:	e02d      	b.n	8002056 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_SPI_MspInit+0xe4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d128      	bne.n	8002056 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002004:	4b17      	ldr	r3, [pc, #92]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a16      	ldr	r2, [pc, #88]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
 8002010:	4b14      	ldr	r3, [pc, #80]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	4a10      	ldr	r2, [pc, #64]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002028:	4b0e      	ldr	r3, [pc, #56]	; (8002064 <HAL_SPI_MspInit+0xe0>)
 800202a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002034:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002046:	2305      	movs	r3, #5
 8002048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4619      	mov	r1, r3
 8002050:	4806      	ldr	r0, [pc, #24]	; (800206c <HAL_SPI_MspInit+0xe8>)
 8002052:	f000 fb8f 	bl	8002774 <HAL_GPIO_Init>
}
 8002056:	bf00      	nop
 8002058:	3730      	adds	r7, #48	; 0x30
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40013000 	.word	0x40013000
 8002064:	40021000 	.word	0x40021000
 8002068:	40003800 	.word	0x40003800
 800206c:	48000400 	.word	0x48000400

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_TIM_Base_MspInit+0x38>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10b      	bne.n	800209a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_TIM_Base_MspInit+0x3c>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <HAL_TIM_Base_MspInit+0x3c>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_TIM_Base_MspInit+0x3c>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800209a:	bf00      	nop
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0d      	ldr	r2, [pc, #52]	; (80020f4 <HAL_TIM_OC_MspInit+0x44>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d113      	bne.n	80020ea <HAL_TIM_OC_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <HAL_TIM_OC_MspInit+0x48>)
 80020c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <HAL_TIM_OC_MspInit+0x48>)
 80020c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020cc:	6613      	str	r3, [r2, #96]	; 0x60
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_TIM_OC_MspInit+0x48>)
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2105      	movs	r1, #5
 80020de:	202e      	movs	r0, #46	; 0x2e
 80020e0:	f000 fb11 	bl	8002706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80020e4:	202e      	movs	r0, #46	; 0x2e
 80020e6:	f000 fb2a 	bl	800273e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40013400 	.word	0x40013400
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b0ae      	sub	sp, #184	; 0xb8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2288      	movs	r2, #136	; 0x88
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f010 fcad 	bl	8012a7c <memset>
  if(huart->Instance==USART2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a42      	ldr	r2, [pc, #264]	; (8002230 <HAL_UART_MspInit+0x134>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d13c      	bne.n	80021a6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800212c:	2302      	movs	r3, #2
 800212e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002130:	2300      	movs	r3, #0
 8002132:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002134:	f107 031c 	add.w	r3, r7, #28
 8002138:	4618      	mov	r0, r3
 800213a:	f001 fc67 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002144:	f7ff fe2a 	bl	8001d9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002148:	4b3a      	ldr	r3, [pc, #232]	; (8002234 <HAL_UART_MspInit+0x138>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	4a39      	ldr	r2, [pc, #228]	; (8002234 <HAL_UART_MspInit+0x138>)
 800214e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002152:	6593      	str	r3, [r2, #88]	; 0x58
 8002154:	4b37      	ldr	r3, [pc, #220]	; (8002234 <HAL_UART_MspInit+0x138>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_UART_MspInit+0x138>)
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	4a33      	ldr	r2, [pc, #204]	; (8002234 <HAL_UART_MspInit+0x138>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216c:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_UART_MspInit+0x138>)
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002178:	230c      	movs	r3, #12
 800217a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002190:	2307      	movs	r3, #7
 8002192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a0:	f000 fae8 	bl	8002774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021a4:	e040      	b.n	8002228 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART3)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a23      	ldr	r2, [pc, #140]	; (8002238 <HAL_UART_MspInit+0x13c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d13b      	bne.n	8002228 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021b0:	2304      	movs	r3, #4
 80021b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fc25 	bl	8003a0c <HAL_RCCEx_PeriphCLKConfig>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80021c8:	f7ff fde8 	bl	8001d9c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <HAL_UART_MspInit+0x138>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <HAL_UART_MspInit+0x138>)
 80021d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_UART_MspInit+0x138>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_UART_MspInit+0x138>)
 80021e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e8:	4a12      	ldr	r2, [pc, #72]	; (8002234 <HAL_UART_MspInit+0x138>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_UART_MspInit+0x138>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002200:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002210:	2303      	movs	r3, #3
 8002212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002216:	2307      	movs	r3, #7
 8002218:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <HAL_UART_MspInit+0x140>)
 8002224:	f000 faa6 	bl	8002774 <HAL_GPIO_Init>
}
 8002228:	bf00      	nop
 800222a:	37b8      	adds	r7, #184	; 0xb8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40004400 	.word	0x40004400
 8002234:	40021000 	.word	0x40021000
 8002238:	40004800 	.word	0x40004800
 800223c:	48000800 	.word	0x48000800

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <TIM8_CC_IRQHandler+0x10>)
 8002272:	f003 f9ec 	bl	800564e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000254 	.word	0x20000254

08002280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
	return 1;
 8002284:	2301      	movs	r3, #1
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <_kill>:

int _kill(int pid, int sig)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800229a:	f010 fb09 	bl	80128b0 <__errno>
 800229e:	4603      	mov	r3, r0
 80022a0:	2216      	movs	r2, #22
 80022a2:	601a      	str	r2, [r3, #0]
	return -1;
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_exit>:

void _exit (int status)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b8:	f04f 31ff 	mov.w	r1, #4294967295
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ffe7 	bl	8002290 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022c2:	e7fe      	b.n	80022c2 <_exit+0x12>

080022c4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
	return -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ec:	605a      	str	r2, [r3, #4]
	return 0;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_isatty>:

int _isatty(int file)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	return 1;
 8002304:	2301      	movs	r3, #1
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	60f8      	str	r0, [r7, #12]
 800231a:	60b9      	str	r1, [r7, #8]
 800231c:	607a      	str	r2, [r7, #4]
	return 0;
 800231e:	2300      	movs	r3, #0
}
 8002320:	4618      	mov	r0, r3
 8002322:	3714      	adds	r7, #20
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002334:	4a14      	ldr	r2, [pc, #80]	; (8002388 <_sbrk+0x5c>)
 8002336:	4b15      	ldr	r3, [pc, #84]	; (800238c <_sbrk+0x60>)
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002340:	4b13      	ldr	r3, [pc, #76]	; (8002390 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <_sbrk+0x64>)
 800234a:	4a12      	ldr	r2, [pc, #72]	; (8002394 <_sbrk+0x68>)
 800234c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <_sbrk+0x64>)
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4413      	add	r3, r2
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	429a      	cmp	r2, r3
 800235a:	d207      	bcs.n	800236c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800235c:	f010 faa8 	bl	80128b0 <__errno>
 8002360:	4603      	mov	r3, r0
 8002362:	220c      	movs	r2, #12
 8002364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	e009      	b.n	8002380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <_sbrk+0x64>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	4a05      	ldr	r2, [pc, #20]	; (8002390 <_sbrk+0x64>)
 800237c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800237e:	68fb      	ldr	r3, [r7, #12]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20018000 	.word	0x20018000
 800238c:	00000400 	.word	0x00000400
 8002390:	200003ac 	.word	0x200003ac
 8002394:	20001ad8 	.word	0x20001ad8

08002398 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800239c:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <SystemInit+0x5c>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <SystemInit+0x5c>)
 80023a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80023ac:	4b12      	ldr	r3, [pc, #72]	; (80023f8 <SystemInit+0x60>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <SystemInit+0x60>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <SystemInit+0x60>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <SystemInit+0x60>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <SystemInit+0x60>)
 80023c4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023c8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <SystemInit+0x60>)
 80023d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023d4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <SystemInit+0x60>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <SystemInit+0x60>)
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023e2:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SystemInit+0x60>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00
 80023f8:	40021000 	.word	0x40021000

080023fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002400:	f7ff ffca 	bl	8002398 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002406:	e003      	b.n	8002410 <LoopCopyDataInit>

08002408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002408:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800240a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800240c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800240e:	3104      	adds	r1, #4

08002410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002418:	d3f6      	bcc.n	8002408 <CopyDataInit>
	ldr	r2, =_sbss
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800241c:	e002      	b.n	8002424 <LoopFillZerobss>

0800241e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800241e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002420:	f842 3b04 	str.w	r3, [r2], #4

08002424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <LoopForever+0x16>)
	cmp	r2, r3
 8002426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002428:	d3f9      	bcc.n	800241e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242a:	f010 fac7 	bl	80129bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800242e:	f7ff f88b 	bl	8001548 <main>

08002432 <LoopForever>:

LoopForever:
    b LoopForever
 8002432:	e7fe      	b.n	8002432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002434:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002438:	08016464 	.word	0x08016464
	ldr	r0, =_sdata
 800243c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002440:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 8002444:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 8002448:	20001ad8 	.word	0x20001ad8

0800244c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800244c:	e7fe      	b.n	800244c <ADC1_2_IRQHandler>
	...

08002450 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_Init+0x3c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <HAL_Init+0x3c>)
 8002460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002464:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002466:	2003      	movs	r0, #3
 8002468:	f000 f942 	bl	80026f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800246c:	2000      	movs	r0, #0
 800246e:	f000 f80f 	bl	8002490 <HAL_InitTick>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	71fb      	strb	r3, [r7, #7]
 800247c:	e001      	b.n	8002482 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800247e:	f7ff fcbf 	bl	8001e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002482:	79fb      	ldrb	r3, [r7, #7]
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40022000 	.word	0x40022000

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HAL_InitTick+0x6c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <HAL_InitTick+0x70>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <HAL_InitTick+0x6c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 f94d 	bl	800275a <HAL_SYSTICK_Config>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b0f      	cmp	r3, #15
 80024ca:	d809      	bhi.n	80024e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024cc:	2200      	movs	r2, #0
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f000 f917 	bl	8002706 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_InitTick+0x74>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]
 80024de:	e007      	b.n	80024f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e004      	b.n	80024f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e001      	b.n	80024f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3710      	adds	r7, #16
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000010 	.word	0x20000010
 8002500:	20000008 	.word	0x20000008
 8002504:	2000000c 	.word	0x2000000c

08002508 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002510:	f00c fe16 	bl	800f140 <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002520:	d005      	beq.n	800252e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002522:	4b0a      	ldr	r3, [pc, #40]	; (800254c <HAL_Delay+0x44>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800252e:	bf00      	nop
 8002530:	f00c fe06 	bl	800f140 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	429a      	cmp	r2, r3
 800253e:	d8f7      	bhi.n	8002530 <HAL_Delay+0x28>
  {
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000010 	.word	0x20000010

08002550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800256c:	4013      	ands	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800257c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002582:	4a04      	ldr	r2, [pc, #16]	; (8002594 <__NVIC_SetPriorityGrouping+0x44>)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	60d3      	str	r3, [r2, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800259c:	4b04      	ldr	r3, [pc, #16]	; (80025b0 <__NVIC_GetPriorityGrouping+0x18>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	0a1b      	lsrs	r3, r3, #8
 80025a2:	f003 0307 	and.w	r3, r3, #7
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	4603      	mov	r3, r0
 80025bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	db0b      	blt.n	80025de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	f003 021f 	and.w	r2, r3, #31
 80025cc:	4907      	ldr	r1, [pc, #28]	; (80025ec <__NVIC_EnableIRQ+0x38>)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	2001      	movs	r0, #1
 80025d6:	fa00 f202 	lsl.w	r2, r0, r2
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000e100 	.word	0xe000e100

080025f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	6039      	str	r1, [r7, #0]
 80025fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002600:	2b00      	cmp	r3, #0
 8002602:	db0a      	blt.n	800261a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	490c      	ldr	r1, [pc, #48]	; (800263c <__NVIC_SetPriority+0x4c>)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	0112      	lsls	r2, r2, #4
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	440b      	add	r3, r1
 8002614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002618:	e00a      	b.n	8002630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	b2da      	uxtb	r2, r3
 800261e:	4908      	ldr	r1, [pc, #32]	; (8002640 <__NVIC_SetPriority+0x50>)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	3b04      	subs	r3, #4
 8002628:	0112      	lsls	r2, r2, #4
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	440b      	add	r3, r1
 800262e:	761a      	strb	r2, [r3, #24]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	e000e100 	.word	0xe000e100
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002644:	b480      	push	{r7}
 8002646:	b089      	sub	sp, #36	; 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2b04      	cmp	r3, #4
 8002660:	bf28      	it	cs
 8002662:	2304      	movcs	r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3304      	adds	r3, #4
 800266a:	2b06      	cmp	r3, #6
 800266c:	d902      	bls.n	8002674 <NVIC_EncodePriority+0x30>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3b03      	subs	r3, #3
 8002672:	e000      	b.n	8002676 <NVIC_EncodePriority+0x32>
 8002674:	2300      	movs	r3, #0
 8002676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43da      	mvns	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800268c:	f04f 31ff 	mov.w	r1, #4294967295
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	fa01 f303 	lsl.w	r3, r1, r3
 8002696:	43d9      	mvns	r1, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800269c:	4313      	orrs	r3, r2
         );
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026bc:	d301      	bcc.n	80026c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026be:	2301      	movs	r3, #1
 80026c0:	e00f      	b.n	80026e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026c2:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <SysTick_Config+0x40>)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ca:	210f      	movs	r1, #15
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f7ff ff8e 	bl	80025f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Config+0x40>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026da:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Config+0x40>)
 80026dc:	2207      	movs	r2, #7
 80026de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	e000e010 	.word	0xe000e010

080026f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ff29 	bl	8002550 <__NVIC_SetPriorityGrouping>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
 8002712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002718:	f7ff ff3e 	bl	8002598 <__NVIC_GetPriorityGrouping>
 800271c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	6978      	ldr	r0, [r7, #20]
 8002724:	f7ff ff8e 	bl	8002644 <NVIC_EncodePriority>
 8002728:	4602      	mov	r2, r0
 800272a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff5d 	bl	80025f0 <__NVIC_SetPriority>
}
 8002736:	bf00      	nop
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff31 	bl	80025b4 <__NVIC_EnableIRQ>
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ffa2 	bl	80026ac <SysTick_Config>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800277e:	2300      	movs	r3, #0
 8002780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002782:	e17f      	b.n	8002a84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2101      	movs	r1, #1
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	fa01 f303 	lsl.w	r3, r1, r3
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 8171 	beq.w	8002a7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d005      	beq.n	80027b4 <HAL_GPIO_Init+0x40>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d130      	bne.n	8002816 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ea:	2201      	movs	r2, #1
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0201 	and.w	r2, r3, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	2b03      	cmp	r3, #3
 8002820:	d118      	bne.n	8002854 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002828:	2201      	movs	r2, #1
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4013      	ands	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	f003 0201 	and.w	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	2b03      	cmp	r3, #3
 800285e:	d017      	beq.n	8002890 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d123      	bne.n	80028e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	08da      	lsrs	r2, r3, #3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3208      	adds	r2, #8
 80028a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	220f      	movs	r2, #15
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	2203      	movs	r2, #3
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0203 	and.w	r2, r3, #3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80ac 	beq.w	8002a7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 8002928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800292a:	4a5e      	ldr	r2, [pc, #376]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6613      	str	r3, [r2, #96]	; 0x60
 8002932:	4b5c      	ldr	r3, [pc, #368]	; (8002aa4 <HAL_GPIO_Init+0x330>)
 8002934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800293e:	4a5a      	ldr	r2, [pc, #360]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	089b      	lsrs	r3, r3, #2
 8002944:	3302      	adds	r3, #2
 8002946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	220f      	movs	r2, #15
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4013      	ands	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x242>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <HAL_GPIO_Init+0x338>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x23e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_GPIO_Init+0x33c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x23a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x340>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x236>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4c      	ldr	r2, [pc, #304]	; (8002ab8 <HAL_GPIO_Init+0x344>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x232>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_GPIO_Init+0x348>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x22e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_GPIO_Init+0x34c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x22a>
 800299a:	2306      	movs	r3, #6
 800299c:	e00c      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 800299e:	2307      	movs	r3, #7
 80029a0:	e00a      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029a2:	2305      	movs	r3, #5
 80029a4:	e008      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029a6:	2304      	movs	r3, #4
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029aa:	2303      	movs	r3, #3
 80029ac:	e004      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_GPIO_Init+0x244>
 80029b6:	2300      	movs	r3, #0
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	f002 0203 	and.w	r2, r2, #3
 80029be:	0092      	lsls	r2, r2, #2
 80029c0:	4093      	lsls	r3, r2
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029c8:	4937      	ldr	r1, [pc, #220]	; (8002aa8 <HAL_GPIO_Init+0x334>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	089b      	lsrs	r3, r3, #2
 80029ce:	3302      	adds	r3, #2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80029fa:	4a32      	ldr	r2, [pc, #200]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a00:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d003      	beq.n	8002a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a2a:	4b26      	ldr	r3, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	43db      	mvns	r3, r3
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a4e:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a78:	4a12      	ldr	r2, [pc, #72]	; (8002ac4 <HAL_GPIO_Init+0x350>)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f47f ae78 	bne.w	8002784 <HAL_GPIO_Init+0x10>
  }
}
 8002a94:	bf00      	nop
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	40010000 	.word	0x40010000
 8002aac:	48000400 	.word	0x48000400
 8002ab0:	48000800 	.word	0x48000800
 8002ab4:	48000c00 	.word	0x48000c00
 8002ab8:	48001000 	.word	0x48001000
 8002abc:	48001400 	.word	0x48001400
 8002ac0:	48001800 	.word	0x48001800
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ae4:	e002      	b.n	8002aec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e081      	b.n	8002c0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff f992 	bl	8001e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	; 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e006      	b.n	8002b80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	689a      	ldr	r2, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002b7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d104      	bne.n	8002b92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ba0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69d9      	ldr	r1, [r3, #28]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d138      	bne.n	8002c9e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e032      	b.n	8002ca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2224      	movs	r2, #36	; 0x24
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c68:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6819      	ldr	r1, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0201 	orr.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d139      	bne.n	8002d36 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e033      	b.n	8002d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2224      	movs	r2, #36	; 0x24
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0201 	bic.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002cfe:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HAL_PWREx_GetVoltageRange+0x18>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40007000 	.word	0x40007000

08002d60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6e:	d130      	bne.n	8002dd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	d038      	beq.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d86:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2232      	movs	r2, #50	; 0x32
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0c9b      	lsrs	r3, r3, #18
 8002da0:	3301      	adds	r3, #1
 8002da2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002da4:	e002      	b.n	8002dac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	3b01      	subs	r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dac:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dae:	695b      	ldr	r3, [r3, #20]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db8:	d102      	bne.n	8002dc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1f2      	bne.n	8002da6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dcc:	d110      	bne.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e00f      	b.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dde:	d007      	beq.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002de8:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40007000 	.word	0x40007000
 8002e04:	20000008 	.word	0x20000008
 8002e08:	431bde83 	.word	0x431bde83

08002e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e3ca      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1e:	4b97      	ldr	r3, [pc, #604]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f003 030c 	and.w	r3, r3, #12
 8002e26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e28:	4b94      	ldr	r3, [pc, #592]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0310 	and.w	r3, r3, #16
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f000 80e4 	beq.w	8003008 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <HAL_RCC_OscConfig+0x4a>
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	f040 808b 	bne.w	8002f64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	f040 8087 	bne.w	8002f64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e56:	4b89      	ldr	r3, [pc, #548]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x62>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e3a2      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1a      	ldr	r2, [r3, #32]
 8002e72:	4b82      	ldr	r3, [pc, #520]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <HAL_RCC_OscConfig+0x7c>
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e86:	e005      	b.n	8002e94 <HAL_RCC_OscConfig+0x88>
 8002e88:	4b7c      	ldr	r3, [pc, #496]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d223      	bcs.n	8002ee0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a1b      	ldr	r3, [r3, #32]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fd55 	bl	800394c <RCC_SetFlashLatencyFromMSIRange>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e383      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002eac:	4b73      	ldr	r3, [pc, #460]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a72      	ldr	r2, [pc, #456]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eb2:	f043 0308 	orr.w	r3, r3, #8
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4b70      	ldr	r3, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a1b      	ldr	r3, [r3, #32]
 8002ec4:	496d      	ldr	r1, [pc, #436]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eca:	4b6c      	ldr	r3, [pc, #432]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	4968      	ldr	r1, [pc, #416]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	604b      	str	r3, [r1, #4]
 8002ede:	e025      	b.n	8002f2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee0:	4b66      	ldr	r3, [pc, #408]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a65      	ldr	r2, [pc, #404]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ee6:	f043 0308 	orr.w	r3, r3, #8
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4960      	ldr	r1, [pc, #384]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	495b      	ldr	r1, [pc, #364]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fd15 	bl	800394c <RCC_SetFlashLatencyFromMSIRange>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e343      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f2c:	f000 fc4a 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b52      	ldr	r3, [pc, #328]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f003 030f 	and.w	r3, r3, #15
 8002f3c:	4950      	ldr	r1, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_RCC_OscConfig+0x278>)
 8002f4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f4c:	4b4e      	ldr	r3, [pc, #312]	; (8003088 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fa9d 	bl	8002490 <HAL_InitTick>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d052      	beq.n	8003006 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f60:	7bfb      	ldrb	r3, [r7, #15]
 8002f62:	e327      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d032      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a42      	ldr	r2, [pc, #264]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f78:	f00c f8e2 	bl	800f140 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f80:	f00c f8de 	bl	800f140 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e310      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f92:	4b3a      	ldr	r3, [pc, #232]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a36      	ldr	r2, [pc, #216]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4931      	ldr	r1, [pc, #196]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	492c      	ldr	r1, [pc, #176]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
 8002fd0:	e01a      	b.n	8003008 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002fd2:	4b2a      	ldr	r3, [pc, #168]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a29      	ldr	r2, [pc, #164]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002fd8:	f023 0301 	bic.w	r3, r3, #1
 8002fdc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fde:	f00c f8af 	bl	800f140 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fe4:	e008      	b.n	8002ff8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fe6:	f00c f8ab 	bl	800f140 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d901      	bls.n	8002ff8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e2dd      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ff8:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f0      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x1da>
 8003004:	e000      	b.n	8003008 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003006:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d074      	beq.n	80030fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2b08      	cmp	r3, #8
 8003018:	d005      	beq.n	8003026 <HAL_RCC_OscConfig+0x21a>
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d10e      	bne.n	800303e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d10b      	bne.n	800303e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d064      	beq.n	80030fc <HAL_RCC_OscConfig+0x2f0>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d160      	bne.n	80030fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e2ba      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x24a>
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0b      	ldr	r2, [pc, #44]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e026      	b.n	80030a4 <HAL_RCC_OscConfig+0x298>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800305e:	d115      	bne.n	800308c <HAL_RCC_OscConfig+0x280>
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a05      	ldr	r2, [pc, #20]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x270>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a02      	ldr	r2, [pc, #8]	; (800307c <HAL_RCC_OscConfig+0x270>)
 8003072:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	e014      	b.n	80030a4 <HAL_RCC_OscConfig+0x298>
 800307a:	bf00      	nop
 800307c:	40021000 	.word	0x40021000
 8003080:	08015db8 	.word	0x08015db8
 8003084:	20000008 	.word	0x20000008
 8003088:	2000000c 	.word	0x2000000c
 800308c:	4ba0      	ldr	r3, [pc, #640]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a9f      	ldr	r2, [pc, #636]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b9d      	ldr	r3, [pc, #628]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a9c      	ldr	r2, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f00c f848 	bl	800f140 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f00c f844 	bl	800f140 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e276      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c6:	4b92      	ldr	r3, [pc, #584]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0x2a8>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f00c f834 	bl	800f140 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f00c f830 	bl	800f140 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	; 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e262      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0x2d0>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d060      	beq.n	80031cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d005      	beq.n	800311c <HAL_RCC_OscConfig+0x310>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d119      	bne.n	800314a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d116      	bne.n	800314a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_OscConfig+0x328>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e23f      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b76      	ldr	r3, [pc, #472]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	061b      	lsls	r3, r3, #24
 8003142:	4973      	ldr	r1, [pc, #460]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003144:	4313      	orrs	r3, r2
 8003146:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003148:	e040      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d023      	beq.n	800319a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003152:	4b6f      	ldr	r3, [pc, #444]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a6e      	ldr	r2, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f00b ffef 	bl	800f140 <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003166:	f00b ffeb 	bl	800f140 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e21d      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003178:	4b65      	ldr	r3, [pc, #404]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003184:	4b62      	ldr	r3, [pc, #392]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	061b      	lsls	r3, r3, #24
 8003192:	495f      	ldr	r1, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003194:	4313      	orrs	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
 8003198:	e018      	b.n	80031cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800319a:	4b5d      	ldr	r3, [pc, #372]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a5c      	ldr	r2, [pc, #368]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a6:	f00b ffcb 	bl	800f140 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ae:	f00b ffc7 	bl	800f140 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e1f9      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031c0:	4b53      	ldr	r3, [pc, #332]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f0      	bne.n	80031ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d03c      	beq.n	8003252 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01c      	beq.n	800321a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e0:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	4a4a      	ldr	r2, [pc, #296]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f00b ffa6 	bl	800f140 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f00b ffa2 	bl	800f140 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1d4      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320a:	4b41      	ldr	r3, [pc, #260]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ef      	beq.n	80031f8 <HAL_RCC_OscConfig+0x3ec>
 8003218:	e01b      	b.n	8003252 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321a:	4b3d      	ldr	r3, [pc, #244]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800321c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003220:	4a3b      	ldr	r2, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322a:	f00b ff89 	bl	800f140 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003232:	f00b ff85 	bl	800f140 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1b7      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003244:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1ef      	bne.n	8003232 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 80a6 	beq.w	80033ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10d      	bne.n	800328c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	4b27      	ldr	r3, [pc, #156]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	4a26      	ldr	r2, [pc, #152]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327a:	6593      	str	r3, [r2, #88]	; 0x58
 800327c:	4b24      	ldr	r3, [pc, #144]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003284:	60bb      	str	r3, [r7, #8]
 8003286:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003288:	2301      	movs	r3, #1
 800328a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003294:	2b00      	cmp	r3, #0
 8003296:	d118      	bne.n	80032ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b1e      	ldr	r3, [pc, #120]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1d      	ldr	r2, [pc, #116]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032a4:	f00b ff4c 	bl	800f140 <HAL_GetTick>
 80032a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032aa:	e008      	b.n	80032be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f00b ff48 	bl	800f140 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e17a      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <HAL_RCC_OscConfig+0x508>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0f0      	beq.n	80032ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d108      	bne.n	80032e4 <HAL_RCC_OscConfig+0x4d8>
 80032d2:	4b0f      	ldr	r3, [pc, #60]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e2:	e029      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b05      	cmp	r3, #5
 80032ea:	d115      	bne.n	8003318 <HAL_RCC_OscConfig+0x50c>
 80032ec:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032fc:	4b04      	ldr	r3, [pc, #16]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4a03      	ldr	r2, [pc, #12]	; (8003310 <HAL_RCC_OscConfig+0x504>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800330c:	e014      	b.n	8003338 <HAL_RCC_OscConfig+0x52c>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
 8003314:	40007000 	.word	0x40007000
 8003318:	4b9c      	ldr	r3, [pc, #624]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a9b      	ldr	r2, [pc, #620]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003328:	4b98      	ldr	r3, [pc, #608]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800332a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332e:	4a97      	ldr	r2, [pc, #604]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003330:	f023 0304 	bic.w	r3, r3, #4
 8003334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d016      	beq.n	800336e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003340:	f00b fefe 	bl	800f140 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003346:	e00a      	b.n	800335e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003348:	f00b fefa 	bl	800f140 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	; 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e12a      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335e:	4b8b      	ldr	r3, [pc, #556]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0ed      	beq.n	8003348 <HAL_RCC_OscConfig+0x53c>
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f00b fee7 	bl	800f140 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f00b fee3 	bl	800f140 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e113      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	4b7f      	ldr	r3, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ed      	bne.n	8003376 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339a:	7ffb      	ldrb	r3, [r7, #31]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b7a      	ldr	r3, [pc, #488]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80033a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a4:	4a79      	ldr	r2, [pc, #484]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80fe 	beq.w	80035b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	f040 80d0 	bne.w	8003560 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033c0:	4b72      	ldr	r3, [pc, #456]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f003 0203 	and.w	r2, r3, #3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d130      	bne.n	8003436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	3b01      	subs	r3, #1
 80033e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d127      	bne.n	8003436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d11f      	bne.n	8003436 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003400:	2a07      	cmp	r2, #7
 8003402:	bf14      	ite	ne
 8003404:	2201      	movne	r2, #1
 8003406:	2200      	moveq	r2, #0
 8003408:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800340a:	4293      	cmp	r3, r2
 800340c:	d113      	bne.n	8003436 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	085b      	lsrs	r3, r3, #1
 800341a:	3b01      	subs	r3, #1
 800341c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800341e:	429a      	cmp	r2, r3
 8003420:	d109      	bne.n	8003436 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	3b01      	subs	r3, #1
 8003430:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003432:	429a      	cmp	r2, r3
 8003434:	d06e      	beq.n	8003514 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	2b0c      	cmp	r3, #12
 800343a:	d069      	beq.n	8003510 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800343c:	4b53      	ldr	r3, [pc, #332]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003448:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0ad      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003458:	4b4c      	ldr	r3, [pc, #304]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a4b      	ldr	r2, [pc, #300]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800345e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003462:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003464:	f00b fe6c 	bl	800f140 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346c:	f00b fe68 	bl	800f140 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b02      	cmp	r3, #2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e09a      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f0      	bne.n	800346c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348a:	4b40      	ldr	r3, [pc, #256]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_RCC_OscConfig+0x784>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800349a:	3a01      	subs	r2, #1
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034a4:	0212      	lsls	r2, r2, #8
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034ac:	0852      	lsrs	r2, r2, #1
 80034ae:	3a01      	subs	r2, #1
 80034b0:	0552      	lsls	r2, r2, #21
 80034b2:	4311      	orrs	r1, r2
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034b8:	0852      	lsrs	r2, r2, #1
 80034ba:	3a01      	subs	r2, #1
 80034bc:	0652      	lsls	r2, r2, #25
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c4:	0912      	lsrs	r2, r2, #4
 80034c6:	0452      	lsls	r2, r2, #17
 80034c8:	430a      	orrs	r2, r1
 80034ca:	4930      	ldr	r1, [pc, #192]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034d0:	4b2e      	ldr	r3, [pc, #184]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2d      	ldr	r2, [pc, #180]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80034d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034dc:	4b2b      	ldr	r3, [pc, #172]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <HAL_RCC_OscConfig+0x780>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034e8:	f00b fe2a 	bl	800f140 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f0:	f00b fe26 	bl	800f140 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e058      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800350e:	e050      	b.n	80035b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e04f      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003514:	4b1d      	ldr	r3, [pc, #116]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d148      	bne.n	80035b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003520:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a19      	ldr	r2, [pc, #100]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800352a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003532:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003538:	f00b fe02 	bl	800f140 <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003540:	f00b fdfe 	bl	800f140 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e030      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0x734>
 800355e:	e028      	b.n	80035b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b0c      	cmp	r3, #12
 8003564:	d023      	beq.n	80035ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_OscConfig+0x780>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_RCC_OscConfig+0x780>)
 800356c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f00b fde5 	bl	800f140 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003578:	e00c      	b.n	8003594 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f00b fde1 	bl	800f140 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d905      	bls.n	8003594 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e013      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
 800358c:	40021000 	.word	0x40021000
 8003590:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_RCC_OscConfig+0x7b0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ec      	bne.n	800357a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <HAL_RCC_OscConfig+0x7b0>)
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	4905      	ldr	r1, [pc, #20]	; (80035bc <HAL_RCC_OscConfig+0x7b0>)
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <HAL_RCC_OscConfig+0x7b4>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	60cb      	str	r3, [r1, #12]
 80035ac:	e001      	b.n	80035b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40021000 	.word	0x40021000
 80035c0:	feeefffc 	.word	0xfeeefffc

080035c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e0e7      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035d8:	4b75      	ldr	r3, [pc, #468]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d910      	bls.n	8003608 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e6:	4b72      	ldr	r3, [pc, #456]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 0207 	bic.w	r2, r3, #7
 80035ee:	4970      	ldr	r1, [pc, #448]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f6:	4b6e      	ldr	r3, [pc, #440]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0307 	and.w	r3, r3, #7
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0cf      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d010      	beq.n	8003636 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	4b66      	ldr	r3, [pc, #408]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003620:	429a      	cmp	r2, r3
 8003622:	d908      	bls.n	8003636 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003624:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	4960      	ldr	r1, [pc, #384]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d04c      	beq.n	80036dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b03      	cmp	r3, #3
 8003648:	d107      	bne.n	800365a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	4b5a      	ldr	r3, [pc, #360]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d121      	bne.n	800369a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e0a6      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d107      	bne.n	8003672 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003662:	4b54      	ldr	r3, [pc, #336]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d115      	bne.n	800369a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e09a      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800367a:	4b4e      	ldr	r3, [pc, #312]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e08e      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e086      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4943      	ldr	r1, [pc, #268]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ac:	f00b fd48 	bl	800f140 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f00b fd44 	bl	800f140 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	; 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e06e      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b3a      	ldr	r3, [pc, #232]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d010      	beq.n	800370a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d208      	bcs.n	800370a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036f8:	4b2e      	ldr	r3, [pc, #184]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	492b      	ldr	r1, [pc, #172]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800370a:	4b29      	ldr	r3, [pc, #164]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d210      	bcs.n	800373a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003718:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f023 0207 	bic.w	r2, r3, #7
 8003720:	4923      	ldr	r1, [pc, #140]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	4313      	orrs	r3, r2
 8003726:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_ClockConfig+0x1ec>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d001      	beq.n	800373a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e036      	b.n	80037a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003746:	4b1b      	ldr	r3, [pc, #108]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4918      	ldr	r1, [pc, #96]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d009      	beq.n	8003778 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003764:	4b13      	ldr	r3, [pc, #76]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	4910      	ldr	r1, [pc, #64]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003778:	f000 f824 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 800377c:	4602      	mov	r2, r0
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_RCC_ClockConfig+0x1f0>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	490b      	ldr	r1, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1f4>)
 800378a:	5ccb      	ldrb	r3, [r1, r3]
 800378c:	f003 031f 	and.w	r3, r3, #31
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	4a09      	ldr	r2, [pc, #36]	; (80037bc <HAL_RCC_ClockConfig+0x1f8>)
 8003796:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1fc>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fe77 	bl	8002490 <HAL_InitTick>
 80037a2:	4603      	mov	r3, r0
 80037a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80037a6:	7afb      	ldrb	r3, [r7, #11]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40022000 	.word	0x40022000
 80037b4:	40021000 	.word	0x40021000
 80037b8:	08015db8 	.word	0x08015db8
 80037bc:	20000008 	.word	0x20000008
 80037c0:	2000000c 	.word	0x2000000c

080037c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037d2:	4b3e      	ldr	r3, [pc, #248]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0303 	and.w	r3, r3, #3
 80037e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_GetSysClockFreq+0x34>
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b0c      	cmp	r3, #12
 80037f0:	d121      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d11e      	bne.n	8003836 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b00      	cmp	r3, #0
 8003802:	d107      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003806:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	e005      	b.n	8003820 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003814:	4b2d      	ldr	r3, [pc, #180]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003820:	4a2b      	ldr	r2, [pc, #172]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003828:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10d      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003834:	e00a      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b04      	cmp	r3, #4
 800383a:	d102      	bne.n	8003842 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e004      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b08      	cmp	r3, #8
 8003846:	d101      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800384a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b0c      	cmp	r3, #12
 8003850:	d134      	bne.n	80038bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003852:	4b1e      	ldr	r3, [pc, #120]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b02      	cmp	r3, #2
 8003860:	d003      	beq.n	800386a <HAL_RCC_GetSysClockFreq+0xa6>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b03      	cmp	r3, #3
 8003866:	d003      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0xac>
 8003868:	e005      	b.n	8003876 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800386a:	4b1a      	ldr	r3, [pc, #104]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800386c:	617b      	str	r3, [r7, #20]
      break;
 800386e:	e005      	b.n	800387c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003872:	617b      	str	r3, [r7, #20]
      break;
 8003874:	e002      	b.n	800387c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	617b      	str	r3, [r7, #20]
      break;
 800387a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	091b      	lsrs	r3, r3, #4
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	3301      	adds	r3, #1
 8003888:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	0a1b      	lsrs	r3, r3, #8
 8003890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	fb03 f202 	mul.w	r2, r3, r2
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038a2:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <HAL_RCC_GetSysClockFreq+0x108>)
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	0e5b      	lsrs	r3, r3, #25
 80038a8:	f003 0303 	and.w	r3, r3, #3
 80038ac:	3301      	adds	r3, #1
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038bc:	69bb      	ldr	r3, [r7, #24]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3724      	adds	r7, #36	; 0x24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08015dd0 	.word	0x08015dd0
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	02dc6c00 	.word	0x02dc6c00

080038dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038e2:	681b      	ldr	r3, [r3, #0]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	20000008 	.word	0x20000008

080038f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038f8:	f7ff fff0 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 80038fc:	4602      	mov	r2, r0
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	4904      	ldr	r1, [pc, #16]	; (800391c <HAL_RCC_GetPCLK1Freq+0x28>)
 800390a:	5ccb      	ldrb	r3, [r1, r3]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000
 800391c:	08015dc8 	.word	0x08015dc8

08003920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003924:	f7ff ffda 	bl	80038dc <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_GetPCLK2Freq+0x24>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	0adb      	lsrs	r3, r3, #11
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4904      	ldr	r1, [pc, #16]	; (8003948 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	f003 031f 	and.w	r3, r3, #31
 800393c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	bd80      	pop	{r7, pc}
 8003944:	40021000 	.word	0x40021000
 8003948:	08015dc8 	.word	0x08015dc8

0800394c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003958:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003964:	f7ff f9ee 	bl	8002d44 <HAL_PWREx_GetVoltageRange>
 8003968:	6178      	str	r0, [r7, #20]
 800396a:	e014      	b.n	8003996 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800396e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003970:	4a24      	ldr	r2, [pc, #144]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003976:	6593      	str	r3, [r2, #88]	; 0x58
 8003978:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800397a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003984:	f7ff f9de 	bl	8002d44 <HAL_PWREx_GetVoltageRange>
 8003988:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800398a:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003994:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399c:	d10b      	bne.n	80039b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b80      	cmp	r3, #128	; 0x80
 80039a2:	d919      	bls.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2ba0      	cmp	r3, #160	; 0xa0
 80039a8:	d902      	bls.n	80039b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039aa:	2302      	movs	r3, #2
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	e013      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039b0:	2301      	movs	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	e010      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b80      	cmp	r3, #128	; 0x80
 80039ba:	d902      	bls.n	80039c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80039bc:	2303      	movs	r3, #3
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	e00a      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b80      	cmp	r3, #128	; 0x80
 80039c6:	d102      	bne.n	80039ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80039c8:	2302      	movs	r3, #2
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	e004      	b.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b70      	cmp	r3, #112	; 0x70
 80039d2:	d101      	bne.n	80039d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80039d4:	2301      	movs	r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f023 0207 	bic.w	r2, r3, #7
 80039e0:	4909      	ldr	r1, [pc, #36]	; (8003a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80039e8:	4b07      	ldr	r3, [pc, #28]	; (8003a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d001      	beq.n	80039fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3718      	adds	r7, #24
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40022000 	.word	0x40022000

08003a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a14:	2300      	movs	r3, #0
 8003a16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a18:	2300      	movs	r3, #0
 8003a1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d041      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a30:	d02a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003a32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a36:	d824      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003a3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a42:	d81e      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4c:	d010      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003a4e:	e018      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a50:	4b86      	ldr	r3, [pc, #536]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a85      	ldr	r2, [pc, #532]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a5c:	e015      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3304      	adds	r3, #4
 8003a62:	2100      	movs	r1, #0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fabb 	bl	8003fe0 <RCCEx_PLLSAI1_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a6e:	e00c      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3320      	adds	r3, #32
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fba6 	bl	80041c8 <RCCEx_PLLSAI2_Config>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a80:	e003      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	74fb      	strb	r3, [r7, #19]
      break;
 8003a86:	e000      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8a:	7cfb      	ldrb	r3, [r7, #19]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10b      	bne.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a90:	4b76      	ldr	r3, [pc, #472]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9e:	4973      	ldr	r1, [pc, #460]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003aa6:	e001      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa8:	7cfb      	ldrb	r3, [r7, #19]
 8003aaa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d041      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ac0:	d02a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003ac2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ac6:	d824      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003acc:	d008      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad2:	d81e      	bhi.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003adc:	d010      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ade:	e018      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ae0:	4b62      	ldr	r3, [pc, #392]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a61      	ldr	r2, [pc, #388]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003aec:	e015      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	2100      	movs	r1, #0
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fa73 	bl	8003fe0 <RCCEx_PLLSAI1_Config>
 8003afa:	4603      	mov	r3, r0
 8003afc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003afe:	e00c      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3320      	adds	r3, #32
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fb5e 	bl	80041c8 <RCCEx_PLLSAI2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b10:	e003      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	74fb      	strb	r3, [r7, #19]
      break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1a:	7cfb      	ldrb	r3, [r7, #19]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10b      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b20:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b2e:	494f      	ldr	r1, [pc, #316]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a0 	beq.w	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003b4e:	4b47      	ldr	r3, [pc, #284]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00d      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b64:	4b41      	ldr	r3, [pc, #260]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	4a40      	ldr	r2, [pc, #256]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b70:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b80:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a3a      	ldr	r2, [pc, #232]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8c:	f00b fad8 	bl	800f140 <HAL_GetTick>
 8003b90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b92:	e009      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f00b fad4 	bl	800f140 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d902      	bls.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ba6:	e005      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ba8:	4b31      	ldr	r3, [pc, #196]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d0ef      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d15c      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01f      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003bd8:	4b24      	ldr	r3, [pc, #144]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003be4:	4b21      	ldr	r3, [pc, #132]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	4a20      	ldr	r2, [pc, #128]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf4:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfa:	4a1c      	ldr	r2, [pc, #112]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c04:	4a19      	ldr	r2, [pc, #100]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d016      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c16:	f00b fa93 	bl	800f140 <HAL_GetTick>
 8003c1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c1c:	e00b      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1e:	f00b fa8f 	bl	800f140 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d902      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	74fb      	strb	r3, [r7, #19]
            break;
 8003c34:	e006      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ec      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003c44:	7cfb      	ldrb	r3, [r7, #19]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10c      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c5a:	4904      	ldr	r1, [pc, #16]	; (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c62:	e009      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	74bb      	strb	r3, [r7, #18]
 8003c68:	e006      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c78:	7c7b      	ldrb	r3, [r7, #17]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d105      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7e:	4b9e      	ldr	r3, [pc, #632]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c82:	4a9d      	ldr	r2, [pc, #628]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c96:	4b98      	ldr	r3, [pc, #608]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f023 0203 	bic.w	r2, r3, #3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	4994      	ldr	r1, [pc, #592]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cb8:	4b8f      	ldr	r3, [pc, #572]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f023 020c 	bic.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc6:	498c      	ldr	r1, [pc, #560]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003cda:	4b87      	ldr	r3, [pc, #540]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	4983      	ldr	r1, [pc, #524]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003cfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	497b      	ldr	r1, [pc, #492]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d1e:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2c:	4972      	ldr	r1, [pc, #456]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d40:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	496a      	ldr	r1, [pc, #424]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d62:	4b65      	ldr	r3, [pc, #404]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d70:	4961      	ldr	r1, [pc, #388]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d84:	4b5c      	ldr	r3, [pc, #368]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d92:	4959      	ldr	r1, [pc, #356]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003da6:	4b54      	ldr	r3, [pc, #336]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	4950      	ldr	r1, [pc, #320]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd6:	4948      	ldr	r1, [pc, #288]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dea:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	493f      	ldr	r1, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d028      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0c:	4b3a      	ldr	r3, [pc, #232]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e1a:	4937      	ldr	r1, [pc, #220]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e2a:	d106      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e2c:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4a31      	ldr	r2, [pc, #196]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e36:	60d3      	str	r3, [r2, #12]
 8003e38:	e011      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e42:	d10c      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f8c8 	bl	8003fe0 <RCCEx_PLLSAI1_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e54:	7cfb      	ldrb	r3, [r7, #19]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d028      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	491f      	ldr	r1, [pc, #124]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e88:	d106      	bne.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	4a1a      	ldr	r2, [pc, #104]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e94:	60d3      	str	r3, [r2, #12]
 8003e96:	e011      	b.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ea0:	d10c      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f899 	bl	8003fe0 <RCCEx_PLLSAI1_Config>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003eb2:	7cfb      	ldrb	r3, [r7, #19]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d02b      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ec8:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ece:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed6:	4908      	ldr	r1, [pc, #32]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ee6:	d109      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	4a02      	ldr	r2, [pc, #8]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ef2:	60d3      	str	r3, [r2, #12]
 8003ef4:	e014      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003ef6:	bf00      	nop
 8003ef8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f867 	bl	8003fe0 <RCCEx_PLLSAI1_Config>
 8003f12:	4603      	mov	r3, r0
 8003f14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d02f      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f3a:	4928      	ldr	r1, [pc, #160]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f4a:	d10d      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	2102      	movs	r1, #2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 f844 	bl	8003fe0 <RCCEx_PLLSAI1_Config>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f5c:	7cfb      	ldrb	r3, [r7, #19]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d014      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f62:	7cfb      	ldrb	r3, [r7, #19]
 8003f64:	74bb      	strb	r3, [r7, #18]
 8003f66:	e011      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f70:	d10c      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3320      	adds	r3, #32
 8003f76:	2102      	movs	r1, #2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 f925 	bl	80041c8 <RCCEx_PLLSAI2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003f88:	7cfb      	ldrb	r3, [r7, #19]
 8003f8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f98:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa6:	490d      	ldr	r1, [pc, #52]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003fba:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fca:	4904      	ldr	r1, [pc, #16]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003fd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	40021000 	.word	0x40021000

08003fe0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003fee:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ffa:	4b72      	ldr	r3, [pc, #456]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0203 	and.w	r2, r3, #3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	429a      	cmp	r2, r3
 8004008:	d10d      	bne.n	8004026 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
       ||
 800400e:	2b00      	cmp	r3, #0
 8004010:	d009      	beq.n	8004026 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004012:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	1c5a      	adds	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
       ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d047      	beq.n	80040b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e044      	b.n	80040b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d018      	beq.n	8004066 <RCCEx_PLLSAI1_Config+0x86>
 8004034:	2b03      	cmp	r3, #3
 8004036:	d825      	bhi.n	8004084 <RCCEx_PLLSAI1_Config+0xa4>
 8004038:	2b01      	cmp	r3, #1
 800403a:	d002      	beq.n	8004042 <RCCEx_PLLSAI1_Config+0x62>
 800403c:	2b02      	cmp	r3, #2
 800403e:	d009      	beq.n	8004054 <RCCEx_PLLSAI1_Config+0x74>
 8004040:	e020      	b.n	8004084 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004042:	4b60      	ldr	r3, [pc, #384]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d11d      	bne.n	800408a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004052:	e01a      	b.n	800408a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004054:	4b5b      	ldr	r3, [pc, #364]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	2b00      	cmp	r3, #0
 800405e:	d116      	bne.n	800408e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004064:	e013      	b.n	800408e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004066:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004072:	4b54      	ldr	r3, [pc, #336]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d109      	bne.n	8004092 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004082:	e006      	b.n	8004092 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
      break;
 8004088:	e004      	b.n	8004094 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800408a:	bf00      	nop
 800408c:	e002      	b.n	8004094 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800408e:	bf00      	nop
 8004090:	e000      	b.n	8004094 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004092:	bf00      	nop
    }

    if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10d      	bne.n	80040b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6819      	ldr	r1, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	430b      	orrs	r3, r1
 80040b0:	4944      	ldr	r1, [pc, #272]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d17d      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80040bc:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c8:	f00b f83a 	bl	800f140 <HAL_GetTick>
 80040cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040ce:	e009      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d0:	f00b f836 	bl	800f140 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d902      	bls.n	80040e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	73fb      	strb	r3, [r7, #15]
        break;
 80040e2:	e005      	b.n	80040f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80040e4:	4b37      	ldr	r3, [pc, #220]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ef      	bne.n	80040d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d160      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d111      	bne.n	8004120 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040fc:	4b31      	ldr	r3, [pc, #196]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6892      	ldr	r2, [r2, #8]
 800410c:	0211      	lsls	r1, r2, #8
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68d2      	ldr	r2, [r2, #12]
 8004112:	0912      	lsrs	r2, r2, #4
 8004114:	0452      	lsls	r2, r2, #17
 8004116:	430a      	orrs	r2, r1
 8004118:	492a      	ldr	r1, [pc, #168]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	610b      	str	r3, [r1, #16]
 800411e:	e027      	b.n	8004170 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d112      	bne.n	800414c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004126:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800412e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6892      	ldr	r2, [r2, #8]
 8004136:	0211      	lsls	r1, r2, #8
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6912      	ldr	r2, [r2, #16]
 800413c:	0852      	lsrs	r2, r2, #1
 800413e:	3a01      	subs	r2, #1
 8004140:	0552      	lsls	r2, r2, #21
 8004142:	430a      	orrs	r2, r1
 8004144:	491f      	ldr	r1, [pc, #124]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	610b      	str	r3, [r1, #16]
 800414a:	e011      	b.n	8004170 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800414c:	4b1d      	ldr	r3, [pc, #116]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004154:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6892      	ldr	r2, [r2, #8]
 800415c:	0211      	lsls	r1, r2, #8
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6952      	ldr	r2, [r2, #20]
 8004162:	0852      	lsrs	r2, r2, #1
 8004164:	3a01      	subs	r2, #1
 8004166:	0652      	lsls	r2, r2, #25
 8004168:	430a      	orrs	r2, r1
 800416a:	4916      	ldr	r1, [pc, #88]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800416c:	4313      	orrs	r3, r2
 800416e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004170:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004176:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800417a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f00a ffe0 	bl	800f140 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004182:	e009      	b.n	8004198 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004184:	f00a ffdc 	bl	800f140 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d902      	bls.n	8004198 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	73fb      	strb	r3, [r7, #15]
          break;
 8004196:	e005      	b.n	80041a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ef      	beq.n	8004184 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d106      	bne.n	80041b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ac:	691a      	ldr	r2, [r3, #16]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	4904      	ldr	r1, [pc, #16]	; (80041c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40021000 	.word	0x40021000

080041c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80041d6:	4b6a      	ldr	r3, [pc, #424]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d018      	beq.n	8004214 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80041e2:	4b67      	ldr	r3, [pc, #412]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0203 	and.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d10d      	bne.n	800420e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
       ||
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d009      	beq.n	800420e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80041fa:	4b61      	ldr	r3, [pc, #388]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f003 0307 	and.w	r3, r3, #7
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
       ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d047      	beq.n	800429e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	73fb      	strb	r3, [r7, #15]
 8004212:	e044      	b.n	800429e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2b03      	cmp	r3, #3
 800421a:	d018      	beq.n	800424e <RCCEx_PLLSAI2_Config+0x86>
 800421c:	2b03      	cmp	r3, #3
 800421e:	d825      	bhi.n	800426c <RCCEx_PLLSAI2_Config+0xa4>
 8004220:	2b01      	cmp	r3, #1
 8004222:	d002      	beq.n	800422a <RCCEx_PLLSAI2_Config+0x62>
 8004224:	2b02      	cmp	r3, #2
 8004226:	d009      	beq.n	800423c <RCCEx_PLLSAI2_Config+0x74>
 8004228:	e020      	b.n	800426c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800422a:	4b55      	ldr	r3, [pc, #340]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d11d      	bne.n	8004272 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800423a:	e01a      	b.n	8004272 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004244:	2b00      	cmp	r3, #0
 8004246:	d116      	bne.n	8004276 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424c:	e013      	b.n	8004276 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800424e:	4b4c      	ldr	r3, [pc, #304]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10f      	bne.n	800427a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800425a:	4b49      	ldr	r3, [pc, #292]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800426a:	e006      	b.n	800427a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
      break;
 8004270:	e004      	b.n	800427c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800427a:	bf00      	nop
    }

    if(status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10d      	bne.n	800429e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004282:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	3b01      	subs	r3, #1
 8004294:	011b      	lsls	r3, r3, #4
 8004296:	430b      	orrs	r3, r1
 8004298:	4939      	ldr	r1, [pc, #228]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429a:	4313      	orrs	r3, r2
 800429c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d167      	bne.n	8004374 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a35      	ldr	r2, [pc, #212]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b0:	f00a ff46 	bl	800f140 <HAL_GetTick>
 80042b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042b6:	e009      	b.n	80042cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042b8:	f00a ff42 	bl	800f140 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d902      	bls.n	80042cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	73fb      	strb	r3, [r7, #15]
        break;
 80042ca:	e005      	b.n	80042d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80042cc:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ef      	bne.n	80042b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d14a      	bne.n	8004374 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d111      	bne.n	8004308 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80042e4:	4b26      	ldr	r3, [pc, #152]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80042ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6892      	ldr	r2, [r2, #8]
 80042f4:	0211      	lsls	r1, r2, #8
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	68d2      	ldr	r2, [r2, #12]
 80042fa:	0912      	lsrs	r2, r2, #4
 80042fc:	0452      	lsls	r2, r2, #17
 80042fe:	430a      	orrs	r2, r1
 8004300:	491f      	ldr	r1, [pc, #124]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004302:	4313      	orrs	r3, r2
 8004304:	614b      	str	r3, [r1, #20]
 8004306:	e011      	b.n	800432c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004308:	4b1d      	ldr	r3, [pc, #116]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004310:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	0211      	lsls	r1, r2, #8
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6912      	ldr	r2, [r2, #16]
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	3a01      	subs	r2, #1
 8004322:	0652      	lsls	r2, r2, #25
 8004324:	430a      	orrs	r2, r1
 8004326:	4916      	ldr	r1, [pc, #88]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800432c:	4b14      	ldr	r3, [pc, #80]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a13      	ldr	r2, [pc, #76]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004338:	f00a ff02 	bl	800f140 <HAL_GetTick>
 800433c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800433e:	e009      	b.n	8004354 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004340:	f00a fefe 	bl	800f140 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d902      	bls.n	8004354 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	73fb      	strb	r3, [r7, #15]
          break;
 8004352:	e005      	b.n	8004360 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004354:	4b0a      	ldr	r3, [pc, #40]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0ef      	beq.n	8004340 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004366:	4b06      	ldr	r3, [pc, #24]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	4904      	ldr	r1, [pc, #16]	; (8004380 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004370:	4313      	orrs	r3, r2
 8004372:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004374:	7bfb      	ldrb	r3, [r7, #15]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000

08004384 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d06c      	beq.n	8004470 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fdb8 	bl	8001f20 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2202      	movs	r2, #2
 80043b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	22ca      	movs	r2, #202	; 0xca
 80043be:	625a      	str	r2, [r3, #36]	; 0x24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2253      	movs	r2, #83	; 0x53
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f9a0 	bl	800470e <RTC_EnterInitMode>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d14b      	bne.n	8004470 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80043e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ea:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	431a      	orrs	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6919      	ldr	r1, [r3, #16]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	041a      	lsls	r2, r3, #16
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f9a3 	bl	8004774 <RTC_ExitInitMode>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004432:	7bfb      	ldrb	r3, [r7, #15]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d11b      	bne.n	8004470 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f022 0203 	bic.w	r2, r2, #3
 8004446:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	22ff      	movs	r2, #255	; 0xff
 8004466:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004470:	7bfb      	ldrb	r3, [r7, #15]
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800447a:	b590      	push	{r4, r7, lr}
 800447c:	b087      	sub	sp, #28
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_RTC_SetTime+0x1a>
 8004490:	2302      	movs	r3, #2
 8004492:	e08b      	b.n	80045ac <HAL_RTC_SetTime+0x132>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2202      	movs	r2, #2
 80044a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	22ca      	movs	r2, #202	; 0xca
 80044aa:	625a      	str	r2, [r3, #36]	; 0x24
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2253      	movs	r2, #83	; 0x53
 80044b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f92a 	bl	800470e <RTC_EnterInitMode>
 80044ba:	4603      	mov	r3, r0
 80044bc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80044be:	7cfb      	ldrb	r3, [r7, #19]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d163      	bne.n	800458c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d126      	bne.n	8004518 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d102      	bne.n	80044de <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f984 	bl	80047f0 <RTC_ByteToBcd2>
 80044e8:	4603      	mov	r3, r0
 80044ea:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	785b      	ldrb	r3, [r3, #1]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f97d 	bl	80047f0 <RTC_ByteToBcd2>
 80044f6:	4603      	mov	r3, r0
 80044f8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80044fa:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	789b      	ldrb	r3, [r3, #2]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 f975 	bl	80047f0 <RTC_ByteToBcd2>
 8004506:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004508:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	78db      	ldrb	r3, [r3, #3]
 8004510:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004512:	4313      	orrs	r3, r2
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e018      	b.n	800454a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004522:	2b00      	cmp	r3, #0
 8004524:	d102      	bne.n	800452c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2200      	movs	r2, #0
 800452a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	785b      	ldrb	r3, [r3, #1]
 8004536:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004538:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800453e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	78db      	ldrb	r3, [r3, #3]
 8004544:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004546:	4313      	orrs	r3, r2
 8004548:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004554:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004558:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004568:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6899      	ldr	r1, [r3, #8]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	431a      	orrs	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f8f6 	bl	8004774 <RTC_ExitInitMode>
 8004588:	4603      	mov	r3, r0
 800458a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	22ff      	movs	r2, #255	; 0xff
 8004592:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	371c      	adds	r7, #28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd90      	pop	{r4, r7, pc}

080045b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b087      	sub	sp, #28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d101      	bne.n	80045ce <HAL_RTC_SetDate+0x1a>
 80045ca:	2302      	movs	r3, #2
 80045cc:	e075      	b.n	80046ba <HAL_RTC_SetDate+0x106>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2202      	movs	r2, #2
 80045da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10e      	bne.n	8004602 <HAL_RTC_SetDate+0x4e>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	785b      	ldrb	r3, [r3, #1]
 80045f4:	f023 0310 	bic.w	r3, r3, #16
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	330a      	adds	r3, #10
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11c      	bne.n	8004642 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	78db      	ldrb	r3, [r3, #3]
 800460c:	4618      	mov	r0, r3
 800460e:	f000 f8ef 	bl	80047f0 <RTC_ByteToBcd2>
 8004612:	4603      	mov	r3, r0
 8004614:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	785b      	ldrb	r3, [r3, #1]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 f8e8 	bl	80047f0 <RTC_ByteToBcd2>
 8004620:	4603      	mov	r3, r0
 8004622:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004624:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	789b      	ldrb	r3, [r3, #2]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 f8e0 	bl	80047f0 <RTC_ByteToBcd2>
 8004630:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004632:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	e00e      	b.n	8004660 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	78db      	ldrb	r3, [r3, #3]
 8004646:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800464e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004654:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	22ca      	movs	r2, #202	; 0xca
 8004666:	625a      	str	r2, [r3, #36]	; 0x24
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2253      	movs	r2, #83	; 0x53
 800466e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f84c 	bl	800470e <RTC_EnterInitMode>
 8004676:	4603      	mov	r3, r0
 8004678:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10c      	bne.n	800469a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800468a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800468e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f86f 	bl	8004774 <RTC_ExitInitMode>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	22ff      	movs	r2, #255	; 0xff
 80046a0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80046a2:	7cfb      	ldrb	r3, [r7, #19]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80046b8:	7cfb      	ldrb	r3, [r7, #19]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd90      	pop	{r4, r7, pc}

080046c2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046d8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80046da:	f00a fd31 	bl	800f140 <HAL_GetTick>
 80046de:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046e0:	e009      	b.n	80046f6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80046e2:	f00a fd2d 	bl	800f140 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046f0:	d901      	bls.n	80046f6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e007      	b.n	8004706 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d120      	bne.n	800476a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f04f 32ff 	mov.w	r2, #4294967295
 8004730:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004732:	f00a fd05 	bl	800f140 <HAL_GetTick>
 8004736:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004738:	e00d      	b.n	8004756 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800473a:	f00a fd01 	bl	800f140 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004748:	d905      	bls.n	8004756 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2203      	movs	r2, #3
 8004752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d102      	bne.n	800476a <RTC_EnterInitMode+0x5c>
 8004764:	7bfb      	ldrb	r3, [r7, #15]
 8004766:	2b03      	cmp	r3, #3
 8004768:	d1e7      	bne.n	800473a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <RTC_ExitInitMode+0x78>)
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <RTC_ExitInitMode+0x78>)
 8004786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800478a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800478c:	4b17      	ldr	r3, [pc, #92]	; (80047ec <RTC_ExitInitMode+0x78>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b00      	cmp	r3, #0
 8004796:	d10c      	bne.n	80047b2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ff92 	bl	80046c2 <HAL_RTC_WaitForSynchro>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01e      	beq.n	80047e2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2203      	movs	r2, #3
 80047a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e017      	b.n	80047e2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <RTC_ExitInitMode+0x78>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	4a0d      	ldr	r2, [pc, #52]	; (80047ec <RTC_ExitInitMode+0x78>)
 80047b8:	f023 0320 	bic.w	r3, r3, #32
 80047bc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7ff ff7f 	bl	80046c2 <HAL_RTC_WaitForSynchro>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2203      	movs	r2, #3
 80047ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <RTC_ExitInitMode+0x78>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	4a04      	ldr	r2, [pc, #16]	; (80047ec <RTC_ExitInitMode+0x78>)
 80047dc:	f043 0320 	orr.w	r3, r3, #32
 80047e0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	40002800 	.word	0x40002800

080047f0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004802:	e005      	b.n	8004810 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	3b0a      	subs	r3, #10
 800480e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004810:	7afb      	ldrb	r3, [r7, #11]
 8004812:	2b09      	cmp	r3, #9
 8004814:	d8f6      	bhi.n	8004804 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	b2db      	uxtb	r3, r3
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	b2da      	uxtb	r2, r3
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	4313      	orrs	r3, r2
 8004822:	b2db      	uxtb	r3, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e095      	b.n	800496e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b00      	cmp	r3, #0
 8004848:	d108      	bne.n	800485c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004852:	d009      	beq.n	8004868 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	61da      	str	r2, [r3, #28]
 800485a:	e005      	b.n	8004868 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004874:	b2db      	uxtb	r3, r3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d106      	bne.n	8004888 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7fd fb7e 	bl	8001f84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800489e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048a8:	d902      	bls.n	80048b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	e002      	b.n	80048b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048be:	d007      	beq.n	80048d0 <HAL_SPI_Init+0xa0>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004912:	ea42 0103 	orr.w	r1, r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	f003 0204 	and.w	r2, r3, #4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800494c:	ea42 0103 	orr.w	r1, r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b088      	sub	sp, #32
 800497a:	af00      	add	r7, sp, #0
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004986:	2300      	movs	r3, #0
 8004988:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_SPI_Transmit+0x22>
 8004994:	2302      	movs	r3, #2
 8004996:	e158      	b.n	8004c4a <HAL_SPI_Transmit+0x2d4>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a0:	f00a fbce 	bl	800f140 <HAL_GetTick>
 80049a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d002      	beq.n	80049bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
 80049b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ba:	e13d      	b.n	8004c38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_SPI_Transmit+0x52>
 80049c2:	88fb      	ldrh	r3, [r7, #6]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d102      	bne.n	80049ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049cc:	e134      	b.n	8004c38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2203      	movs	r2, #3
 80049d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	88fa      	ldrh	r2, [r7, #6]
 80049ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	d10f      	bne.n	8004a3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d007      	beq.n	8004a58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a60:	d94b      	bls.n	8004afa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Transmit+0xfa>
 8004a6a:	8afb      	ldrh	r3, [r7, #22]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d13e      	bne.n	8004aee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a94:	e02b      	b.n	8004aee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d112      	bne.n	8004aca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ac8:	e011      	b.n	8004aee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aca:	f00a fb39 	bl	800f140 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d803      	bhi.n	8004ae2 <HAL_SPI_Transmit+0x16c>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d102      	bne.n	8004ae8 <HAL_SPI_Transmit+0x172>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aec:	e0a4      	b.n	8004c38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ce      	bne.n	8004a96 <HAL_SPI_Transmit+0x120>
 8004af8:	e07c      	b.n	8004bf4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_Transmit+0x192>
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d170      	bne.n	8004bea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d912      	bls.n	8004b38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b16:	881a      	ldrh	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	1c9a      	adds	r2, r3, #2
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b02      	subs	r3, #2
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b36:	e058      	b.n	8004bea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	7812      	ldrb	r2, [r2, #0]
 8004b44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	1c5a      	adds	r2, r3, #1
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	3b01      	subs	r3, #1
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004b5e:	e044      	b.n	8004bea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d12b      	bne.n	8004bc6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d912      	bls.n	8004b9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b88:	1c9a      	adds	r2, r3, #2
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	3b02      	subs	r3, #2
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b9c:	e025      	b.n	8004bea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bc4:	e011      	b.n	8004bea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc6:	f00a fabb 	bl	800f140 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d803      	bhi.n	8004bde <HAL_SPI_Transmit+0x268>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Transmit+0x26e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be8:	e026      	b.n	8004c38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1b5      	bne.n	8004b60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	6839      	ldr	r1, [r7, #0]
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 fb5b 	bl	80052b4 <SPI_EndRxTxTransaction>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2220      	movs	r2, #32
 8004c08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c12:	2300      	movs	r3, #0
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	613b      	str	r3, [r7, #16]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e000      	b.n	8004c38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004c36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004c48:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b08a      	sub	sp, #40	; 0x28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
 8004c5e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c60:	2301      	movs	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_SPI_TransmitReceive+0x26>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e1fb      	b.n	8005070 <HAL_SPI_TransmitReceive+0x41e>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c80:	f00a fa5e 	bl	800f140 <HAL_GetTick>
 8004c84:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c8c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004c94:	887b      	ldrh	r3, [r7, #2]
 8004c96:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004c98:	887b      	ldrh	r3, [r7, #2]
 8004c9a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c9c:	7efb      	ldrb	r3, [r7, #27]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x6e>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ca8:	d106      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d102      	bne.n	8004cb8 <HAL_SPI_TransmitReceive+0x66>
 8004cb2:	7efb      	ldrb	r3, [r7, #27]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d003      	beq.n	8004cc0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004cbe:	e1cd      	b.n	800505c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_SPI_TransmitReceive+0x80>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_TransmitReceive+0x80>
 8004ccc:	887b      	ldrh	r3, [r7, #2]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d103      	bne.n	8004cda <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004cd8:	e1c0      	b.n	800505c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d003      	beq.n	8004cee <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2205      	movs	r2, #5
 8004cea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	887a      	ldrh	r2, [r7, #2]
 8004cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	887a      	ldrh	r2, [r7, #2]
 8004d06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	887a      	ldrh	r2, [r7, #2]
 8004d14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	887a      	ldrh	r2, [r7, #2]
 8004d1a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d30:	d802      	bhi.n	8004d38 <HAL_SPI_TransmitReceive+0xe6>
 8004d32:	8a3b      	ldrh	r3, [r7, #16]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d908      	bls.n	8004d4a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d46:	605a      	str	r2, [r3, #4]
 8004d48:	e007      	b.n	8004d5a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d58:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d64:	2b40      	cmp	r3, #64	; 0x40
 8004d66:	d007      	beq.n	8004d78 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d80:	d97c      	bls.n	8004e7c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_SPI_TransmitReceive+0x13e>
 8004d8a:	8a7b      	ldrh	r3, [r7, #18]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d169      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d94:	881a      	ldrh	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004db4:	e056      	b.n	8004e64 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d11b      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x1aa>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_SPI_TransmitReceive+0x1aa>
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d113      	bne.n	8004dfc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	881a      	ldrh	r2, [r3, #0]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	1c9a      	adds	r2, r3, #2
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	3b01      	subs	r3, #1
 8004df2:	b29a      	uxth	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d11c      	bne.n	8004e44 <HAL_SPI_TransmitReceive+0x1f2>
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	b292      	uxth	r2, r2
 8004e22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	1c9a      	adds	r2, r3, #2
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e40:	2301      	movs	r3, #1
 8004e42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e44:	f00a f97c 	bl	800f140 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d807      	bhi.n	8004e64 <HAL_SPI_TransmitReceive+0x212>
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d003      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004e62:	e0fb      	b.n	800505c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1a3      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x164>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d19d      	bne.n	8004db6 <HAL_SPI_TransmitReceive+0x164>
 8004e7a:	e0df      	b.n	800503c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_SPI_TransmitReceive+0x23a>
 8004e84:	8a7b      	ldrh	r3, [r7, #18]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	f040 80cb 	bne.w	8005022 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d912      	bls.n	8004ebc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	881a      	ldrh	r2, [r3, #0]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	1c9a      	adds	r2, r3, #2
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b02      	subs	r3, #2
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eba:	e0b2      	b.n	8005022 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	7812      	ldrb	r2, [r2, #0]
 8004ec8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	3b01      	subs	r3, #1
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee2:	e09e      	b.n	8005022 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d134      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x30a>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d02f      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x30a>
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d12c      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d912      	bls.n	8004f32 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f10:	881a      	ldrh	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1c:	1c9a      	adds	r2, r3, #2
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b02      	subs	r3, #2
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f30:	e012      	b.n	8004f58 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	330c      	adds	r3, #12
 8004f3c:	7812      	ldrb	r2, [r2, #0]
 8004f3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	3b01      	subs	r3, #1
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d148      	bne.n	8004ffc <HAL_SPI_TransmitReceive+0x3aa>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d042      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d923      	bls.n	8004fca <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68da      	ldr	r2, [r3, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	b292      	uxth	r2, r2
 8004f8e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	1c9a      	adds	r2, r3, #2
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b02      	subs	r3, #2
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d81f      	bhi.n	8004ff8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	e016      	b.n	8004ff8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f103 020c 	add.w	r2, r3, #12
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	7812      	ldrb	r2, [r2, #0]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	1c5a      	adds	r2, r3, #1
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ffc:	f00a f8a0 	bl	800f140 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	429a      	cmp	r2, r3
 800500a:	d803      	bhi.n	8005014 <HAL_SPI_TransmitReceive+0x3c2>
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d102      	bne.n	800501a <HAL_SPI_TransmitReceive+0x3c8>
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2b00      	cmp	r3, #0
 8005018:	d103      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005020:	e01c      	b.n	800505c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	f47f af5b 	bne.w	8004ee4 <HAL_SPI_TransmitReceive+0x292>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	f47f af54 	bne.w	8004ee4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800503c:	69fa      	ldr	r2, [r7, #28]
 800503e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f937 	bl	80052b4 <SPI_EndRxTxTransaction>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d006      	beq.n	800505a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	661a      	str	r2, [r3, #96]	; 0x60
 8005058:	e000      	b.n	800505c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800505a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800506c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005070:	4618      	mov	r0, r3
 8005072:	3728      	adds	r7, #40	; 0x28
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005088:	f00a f85a 	bl	800f140 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	4413      	add	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005098:	f00a f852 	bl	800f140 <HAL_GetTick>
 800509c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509e:	4b39      	ldr	r3, [pc, #228]	; (8005184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	015b      	lsls	r3, r3, #5
 80050a4:	0d1b      	lsrs	r3, r3, #20
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ae:	e054      	b.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d050      	beq.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b8:	f00a f842 	bl	800f140 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d902      	bls.n	80050ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d13d      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e6:	d111      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f0:	d004      	beq.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d107      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d10f      	bne.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e017      	b.n	800517a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d19b      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000008 	.word	0x20000008

08005188 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005196:	2300      	movs	r3, #0
 8005198:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800519a:	f009 ffd1 	bl	800f140 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	4413      	add	r3, r2
 80051a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80051aa:	f009 ffc9 	bl	800f140 <HAL_GetTick>
 80051ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	330c      	adds	r3, #12
 80051b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80051b8:	4b3d      	ldr	r3, [pc, #244]	; (80052b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	00da      	lsls	r2, r3, #3
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	0d1b      	lsrs	r3, r3, #20
 80051c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051d0:	e060      	b.n	8005294 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051d8:	d107      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d104      	bne.n	80051ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f0:	d050      	beq.n	8005294 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051f2:	f009 ffa5 	bl	800f140 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fe:	429a      	cmp	r2, r3
 8005200:	d902      	bls.n	8005208 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d13d      	bne.n	8005284 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005216:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005220:	d111      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800522a:	d004      	beq.n	8005236 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005234:	d107      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524e:	d10f      	bne.n	8005270 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800526e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e010      	b.n	80052a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	3b01      	subs	r3, #1
 8005292:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	4013      	ands	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d196      	bne.n	80051d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3728      	adds	r7, #40	; 0x28
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	20000008 	.word	0x20000008

080052b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af02      	add	r7, sp, #8
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	9300      	str	r3, [sp, #0]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff ff5b 	bl	8005188 <SPI_WaitFifoStateUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052dc:	f043 0220 	orr.w	r2, r3, #32
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e027      	b.n	8005338 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	2200      	movs	r2, #0
 80052f0:	2180      	movs	r1, #128	; 0x80
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f7ff fec0 	bl	8005078 <SPI_WaitFlagStateUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005302:	f043 0220 	orr.w	r2, r3, #32
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e014      	b.n	8005338 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	2200      	movs	r2, #0
 8005316:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f7ff ff34 	bl	8005188 <SPI_WaitFifoStateUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532a:	f043 0220 	orr.w	r2, r3, #32
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e000      	b.n	8005338 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e049      	b.n	80053e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc fe82 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3304      	adds	r3, #4
 800537c:	4619      	mov	r1, r3
 800537e:	4610      	mov	r0, r2
 8005380:	f000 fbfa 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e4:	2300      	movs	r3, #0
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	3708      	adds	r7, #8
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
	...

080053f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b01      	cmp	r3, #1
 8005402:	d001      	beq.n	8005408 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e047      	b.n	8005498 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <HAL_TIM_Base_Start+0xb4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_TIM_Base_Start+0x66>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005422:	d018      	beq.n	8005456 <HAL_TIM_Base_Start+0x66>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_TIM_Base_Start+0xb8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_TIM_Base_Start+0x66>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_TIM_Base_Start+0xbc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_TIM_Base_Start+0x66>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIM_Base_Start+0xc0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_TIM_Base_Start+0x66>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIM_Base_Start+0xc4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_TIM_Base_Start+0x66>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a19      	ldr	r2, [pc, #100]	; (80054b8 <HAL_TIM_Base_Start+0xc8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d115      	bne.n	8005482 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_TIM_Base_Start+0xcc>)
 800545e:	4013      	ands	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b06      	cmp	r3, #6
 8005466:	d015      	beq.n	8005494 <HAL_TIM_Base_Start+0xa4>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800546e:	d011      	beq.n	8005494 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	e008      	b.n	8005494 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f042 0201 	orr.w	r2, r2, #1
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e000      	b.n	8005496 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40013400 	.word	0x40013400
 80054b8:	40014000 	.word	0x40014000
 80054bc:	00010007 	.word	0x00010007

080054c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d001      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e04f      	b.n	8005578 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0201 	orr.w	r2, r2, #1
 80054ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a23      	ldr	r2, [pc, #140]	; (8005584 <HAL_TIM_Base_Start_IT+0xc4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d01d      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0x76>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005502:	d018      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0x76>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <HAL_TIM_Base_Start_IT+0xc8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0x76>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <HAL_TIM_Base_Start_IT+0xcc>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00e      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0x76>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_TIM_Base_Start_IT+0xd0>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d009      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0x76>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_TIM_Base_Start_IT+0xd4>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d004      	beq.n	8005536 <HAL_TIM_Base_Start_IT+0x76>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a19      	ldr	r2, [pc, #100]	; (8005598 <HAL_TIM_Base_Start_IT+0xd8>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d115      	bne.n	8005562 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	4b17      	ldr	r3, [pc, #92]	; (800559c <HAL_TIM_Base_Start_IT+0xdc>)
 800553e:	4013      	ands	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d015      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0xb4>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800554e:	d011      	beq.n	8005574 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005560:	e008      	b.n	8005574 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0201 	orr.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	e000      	b.n	8005576 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005574:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	40000c00 	.word	0x40000c00
 8005594:	40013400 	.word	0x40013400
 8005598:	40014000 	.word	0x40014000
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e049      	b.n	8005646 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fd72 	bl	80020b0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	3304      	adds	r3, #4
 80055dc:	4619      	mov	r1, r3
 80055de:	4610      	mov	r0, r2
 80055e0:	f000 faca 	bl	8005b78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b02      	cmp	r3, #2
 8005662:	d122      	bne.n	80056aa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d11b      	bne.n	80056aa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f06f 0202 	mvn.w	r2, #2
 800567a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa52 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005696:	e005      	b.n	80056a4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fa44 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa55 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d122      	bne.n	80056fe <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d11b      	bne.n	80056fe <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f06f 0204 	mvn.w	r2, #4
 80056ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 fa28 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 80056ea:	e005      	b.n	80056f8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa1a 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa2b 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d122      	bne.n	8005752 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b08      	cmp	r3, #8
 8005718:	d11b      	bne.n	8005752 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f06f 0208 	mvn.w	r2, #8
 8005722:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2204      	movs	r2, #4
 8005728:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	f003 0303 	and.w	r3, r3, #3
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 f9fe 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 800573e:	e005      	b.n	800574c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 f9f0 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa01 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d122      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d11b      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f06f 0210 	mvn.w	r2, #16
 8005776:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2208      	movs	r2, #8
 800577c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005788:	2b00      	cmp	r3, #0
 800578a:	d003      	beq.n	8005794 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f9d4 	bl	8005b3a <HAL_TIM_IC_CaptureCallback>
 8005792:	e005      	b.n	80057a0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9c6 	bl	8005b26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9d7 	bl	8005b4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10e      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d107      	bne.n	80057d2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f06f 0201 	mvn.w	r2, #1
 80057ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9a0 	bl	8005b12 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d10e      	bne.n	80057fe <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b80      	cmp	r3, #128	; 0x80
 80057ec:	d107      	bne.n	80057fe <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fed7 	bl	80065ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800580c:	d10e      	bne.n	800582c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b80      	cmp	r3, #128	; 0x80
 800581a:	d107      	bne.n	800582c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 feca 	bl	80065c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b40      	cmp	r3, #64	; 0x40
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f985 	bl	8005b62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b20      	cmp	r3, #32
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b20      	cmp	r3, #32
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0220 	mvn.w	r2, #32
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fe8a 	bl	8006598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005884:	bf00      	nop
 8005886:	3708      	adds	r7, #8
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d101      	bne.n	80058aa <HAL_TIM_OC_ConfigChannel+0x1e>
 80058a6:	2302      	movs	r3, #2
 80058a8:	e066      	b.n	8005978 <HAL_TIM_OC_ConfigChannel+0xec>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b14      	cmp	r3, #20
 80058b6:	d857      	bhi.n	8005968 <HAL_TIM_OC_ConfigChannel+0xdc>
 80058b8:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80058ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058be:	bf00      	nop
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005969 	.word	0x08005969
 80058c8:	08005969 	.word	0x08005969
 80058cc:	08005969 	.word	0x08005969
 80058d0:	08005923 	.word	0x08005923
 80058d4:	08005969 	.word	0x08005969
 80058d8:	08005969 	.word	0x08005969
 80058dc:	08005969 	.word	0x08005969
 80058e0:	08005931 	.word	0x08005931
 80058e4:	08005969 	.word	0x08005969
 80058e8:	08005969 	.word	0x08005969
 80058ec:	08005969 	.word	0x08005969
 80058f0:	0800593f 	.word	0x0800593f
 80058f4:	08005969 	.word	0x08005969
 80058f8:	08005969 	.word	0x08005969
 80058fc:	08005969 	.word	0x08005969
 8005900:	0800594d 	.word	0x0800594d
 8005904:	08005969 	.word	0x08005969
 8005908:	08005969 	.word	0x08005969
 800590c:	08005969 	.word	0x08005969
 8005910:	0800595b 	.word	0x0800595b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f9c6 	bl	8005cac <TIM_OC1_SetConfig>
      break;
 8005920:	e025      	b.n	800596e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68b9      	ldr	r1, [r7, #8]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa4f 	bl	8005dcc <TIM_OC2_SetConfig>
      break;
 800592e:	e01e      	b.n	800596e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fad2 	bl	8005ee0 <TIM_OC3_SetConfig>
      break;
 800593c:	e017      	b.n	800596e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fb53 	bl	8005ff0 <TIM_OC4_SetConfig>
      break;
 800594a:	e010      	b.n	800596e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 fbb6 	bl	80060c4 <TIM_OC5_SetConfig>
      break;
 8005958:	e009      	b.n	800596e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	4618      	mov	r0, r3
 8005962:	f000 fc13 	bl	800618c <TIM_OC6_SetConfig>
      break;
 8005966:	e002      	b.n	800596e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005976:	7dfb      	ldrb	r3, [r7, #23]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005994:	2b01      	cmp	r3, #1
 8005996:	d101      	bne.n	800599c <HAL_TIM_ConfigClockSource+0x1c>
 8005998:	2302      	movs	r3, #2
 800599a:	e0b6      	b.n	8005b0a <HAL_TIM_ConfigClockSource+0x18a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d8:	d03e      	beq.n	8005a58 <HAL_TIM_ConfigClockSource+0xd8>
 80059da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059de:	f200 8087 	bhi.w	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e6:	f000 8086 	beq.w	8005af6 <HAL_TIM_ConfigClockSource+0x176>
 80059ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059ee:	d87f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 80059f0:	2b70      	cmp	r3, #112	; 0x70
 80059f2:	d01a      	beq.n	8005a2a <HAL_TIM_ConfigClockSource+0xaa>
 80059f4:	2b70      	cmp	r3, #112	; 0x70
 80059f6:	d87b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 80059f8:	2b60      	cmp	r3, #96	; 0x60
 80059fa:	d050      	beq.n	8005a9e <HAL_TIM_ConfigClockSource+0x11e>
 80059fc:	2b60      	cmp	r3, #96	; 0x60
 80059fe:	d877      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 8005a00:	2b50      	cmp	r3, #80	; 0x50
 8005a02:	d03c      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xfe>
 8005a04:	2b50      	cmp	r3, #80	; 0x50
 8005a06:	d873      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	d058      	beq.n	8005abe <HAL_TIM_ConfigClockSource+0x13e>
 8005a0c:	2b40      	cmp	r3, #64	; 0x40
 8005a0e:	d86f      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 8005a10:	2b30      	cmp	r3, #48	; 0x30
 8005a12:	d064      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15e>
 8005a14:	2b30      	cmp	r3, #48	; 0x30
 8005a16:	d86b      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 8005a18:	2b20      	cmp	r3, #32
 8005a1a:	d060      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15e>
 8005a1c:	2b20      	cmp	r3, #32
 8005a1e:	d867      	bhi.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d05c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15e>
 8005a24:	2b10      	cmp	r3, #16
 8005a26:	d05a      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0x15e>
 8005a28:	e062      	b.n	8005af0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6818      	ldr	r0, [r3, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	6899      	ldr	r1, [r3, #8]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f000 fc87 	bl	800634c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	609a      	str	r2, [r3, #8]
      break;
 8005a56:	e04f      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6818      	ldr	r0, [r3, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	6899      	ldr	r1, [r3, #8]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f000 fc70 	bl	800634c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a7a:	609a      	str	r2, [r3, #8]
      break;
 8005a7c:	e03c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6859      	ldr	r1, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	f000 fbe4 	bl	8006258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2150      	movs	r1, #80	; 0x50
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fc3d 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005a9c:	e02c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	6859      	ldr	r1, [r3, #4]
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	461a      	mov	r2, r3
 8005aac:	f000 fc03 	bl	80062b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2160      	movs	r1, #96	; 0x60
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 fc2d 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005abc:	e01c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6859      	ldr	r1, [r3, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	68db      	ldr	r3, [r3, #12]
 8005aca:	461a      	mov	r2, r3
 8005acc:	f000 fbc4 	bl	8006258 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2140      	movs	r1, #64	; 0x40
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f000 fc1d 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005adc:	e00c      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	4610      	mov	r0, r2
 8005aea:	f000 fc14 	bl	8006316 <TIM_ITRx_SetConfig>
      break;
 8005aee:	e003      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e000      	b.n	8005af8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b083      	sub	sp, #12
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b083      	sub	sp, #12
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b6a:	bf00      	nop
 8005b6c:	370c      	adds	r7, #12
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
	...

08005b78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b085      	sub	sp, #20
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a40      	ldr	r2, [pc, #256]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b96:	d00f      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a3d      	ldr	r2, [pc, #244]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d00b      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a3c      	ldr	r2, [pc, #240]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d007      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3b      	ldr	r2, [pc, #236]	; (8005c98 <TIM_Base_SetConfig+0x120>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d003      	beq.n	8005bb8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3a      	ldr	r2, [pc, #232]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d108      	bne.n	8005bca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a2f      	ldr	r2, [pc, #188]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01f      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd8:	d01b      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2c      	ldr	r2, [pc, #176]	; (8005c90 <TIM_Base_SetConfig+0x118>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d017      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a2b      	ldr	r2, [pc, #172]	; (8005c94 <TIM_Base_SetConfig+0x11c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d013      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2a      	ldr	r2, [pc, #168]	; (8005c98 <TIM_Base_SetConfig+0x120>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d00f      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a29      	ldr	r2, [pc, #164]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a28      	ldr	r2, [pc, #160]	; (8005ca0 <TIM_Base_SetConfig+0x128>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d007      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <TIM_Base_SetConfig+0x12c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_Base_SetConfig+0x9a>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <TIM_Base_SetConfig+0x130>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d108      	bne.n	8005c24 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a10      	ldr	r2, [pc, #64]	; (8005c8c <TIM_Base_SetConfig+0x114>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00f      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a12      	ldr	r2, [pc, #72]	; (8005c9c <TIM_Base_SetConfig+0x124>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d00b      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a11      	ldr	r2, [pc, #68]	; (8005ca0 <TIM_Base_SetConfig+0x128>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d007      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <TIM_Base_SetConfig+0x12c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_Base_SetConfig+0xf8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a0f      	ldr	r2, [pc, #60]	; (8005ca8 <TIM_Base_SetConfig+0x130>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d103      	bne.n	8005c78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	615a      	str	r2, [r3, #20]
}
 8005c7e:	bf00      	nop
 8005c80:	3714      	adds	r7, #20
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00
 8005c90:	40000400 	.word	0x40000400
 8005c94:	40000800 	.word	0x40000800
 8005c98:	40000c00 	.word	0x40000c00
 8005c9c:	40013400 	.word	0x40013400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f023 0201 	bic.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f023 0302 	bic.w	r3, r3, #2
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a2c      	ldr	r2, [pc, #176]	; (8005db8 <TIM_OC1_SetConfig+0x10c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00f      	beq.n	8005d2c <TIM_OC1_SetConfig+0x80>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a2b      	ldr	r2, [pc, #172]	; (8005dbc <TIM_OC1_SetConfig+0x110>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00b      	beq.n	8005d2c <TIM_OC1_SetConfig+0x80>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <TIM_OC1_SetConfig+0x114>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d007      	beq.n	8005d2c <TIM_OC1_SetConfig+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a29      	ldr	r2, [pc, #164]	; (8005dc4 <TIM_OC1_SetConfig+0x118>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC1_SetConfig+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <TIM_OC1_SetConfig+0x11c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <TIM_OC1_SetConfig+0x10c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00f      	beq.n	8005d6e <TIM_OC1_SetConfig+0xc2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <TIM_OC1_SetConfig+0x110>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00b      	beq.n	8005d6e <TIM_OC1_SetConfig+0xc2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <TIM_OC1_SetConfig+0x114>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d007      	beq.n	8005d6e <TIM_OC1_SetConfig+0xc2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <TIM_OC1_SetConfig+0x118>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d003      	beq.n	8005d6e <TIM_OC1_SetConfig+0xc2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a17      	ldr	r2, [pc, #92]	; (8005dc8 <TIM_OC1_SetConfig+0x11c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d111      	bne.n	8005d92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800

08005dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	f023 0210 	bic.w	r2, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
 8005de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	021b      	lsls	r3, r3, #8
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f023 0320 	bic.w	r3, r3, #32
 8005e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	697a      	ldr	r2, [r7, #20]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a28      	ldr	r2, [pc, #160]	; (8005ecc <TIM_OC2_SetConfig+0x100>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_OC2_SetConfig+0x6c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a27      	ldr	r2, [pc, #156]	; (8005ed0 <TIM_OC2_SetConfig+0x104>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d10d      	bne.n	8005e54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	011b      	lsls	r3, r3, #4
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <TIM_OC2_SetConfig+0x100>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00f      	beq.n	8005e7c <TIM_OC2_SetConfig+0xb0>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ed0 <TIM_OC2_SetConfig+0x104>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_OC2_SetConfig+0xb0>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1b      	ldr	r2, [pc, #108]	; (8005ed4 <TIM_OC2_SetConfig+0x108>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_OC2_SetConfig+0xb0>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <TIM_OC2_SetConfig+0x10c>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC2_SetConfig+0xb0>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a19      	ldr	r2, [pc, #100]	; (8005edc <TIM_OC2_SetConfig+0x110>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d113      	bne.n	8005ea4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40014400 	.word	0x40014400
 8005edc:	40014800 	.word	0x40014800

08005ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0303 	bic.w	r3, r3, #3
 8005f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	021b      	lsls	r3, r3, #8
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a27      	ldr	r2, [pc, #156]	; (8005fdc <TIM_OC3_SetConfig+0xfc>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d003      	beq.n	8005f4a <TIM_OC3_SetConfig+0x6a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a26      	ldr	r2, [pc, #152]	; (8005fe0 <TIM_OC3_SetConfig+0x100>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d10d      	bne.n	8005f66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	021b      	lsls	r3, r3, #8
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a1c      	ldr	r2, [pc, #112]	; (8005fdc <TIM_OC3_SetConfig+0xfc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d00f      	beq.n	8005f8e <TIM_OC3_SetConfig+0xae>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <TIM_OC3_SetConfig+0x100>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d00b      	beq.n	8005f8e <TIM_OC3_SetConfig+0xae>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a1a      	ldr	r2, [pc, #104]	; (8005fe4 <TIM_OC3_SetConfig+0x104>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d007      	beq.n	8005f8e <TIM_OC3_SetConfig+0xae>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a19      	ldr	r2, [pc, #100]	; (8005fe8 <TIM_OC3_SetConfig+0x108>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0xae>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a18      	ldr	r2, [pc, #96]	; (8005fec <TIM_OC3_SetConfig+0x10c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d113      	bne.n	8005fb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	621a      	str	r2, [r3, #32]
}
 8005fd0:	bf00      	nop
 8005fd2:	371c      	adds	r7, #28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	40012c00 	.word	0x40012c00
 8005fe0:	40013400 	.word	0x40013400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	021b      	lsls	r3, r3, #8
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4313      	orrs	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800603e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	031b      	lsls	r3, r3, #12
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <TIM_OC4_SetConfig+0xc0>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_OC4_SetConfig+0x84>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a17      	ldr	r2, [pc, #92]	; (80060b4 <TIM_OC4_SetConfig+0xc4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_OC4_SetConfig+0x84>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <TIM_OC4_SetConfig+0xc8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_OC4_SetConfig+0x84>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <TIM_OC4_SetConfig+0xcc>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC4_SetConfig+0x84>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <TIM_OC4_SetConfig+0xd0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d109      	bne.n	8006088 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800607a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	019b      	lsls	r3, r3, #6
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	621a      	str	r2, [r3, #32]
}
 80060a2:	bf00      	nop
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40013400 	.word	0x40013400
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40014800 	.word	0x40014800

080060c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006108:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	041b      	lsls	r3, r3, #16
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a17      	ldr	r2, [pc, #92]	; (8006178 <TIM_OC5_SetConfig+0xb4>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d00f      	beq.n	800613e <TIM_OC5_SetConfig+0x7a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a16      	ldr	r2, [pc, #88]	; (800617c <TIM_OC5_SetConfig+0xb8>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d00b      	beq.n	800613e <TIM_OC5_SetConfig+0x7a>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a15      	ldr	r2, [pc, #84]	; (8006180 <TIM_OC5_SetConfig+0xbc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d007      	beq.n	800613e <TIM_OC5_SetConfig+0x7a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a14      	ldr	r2, [pc, #80]	; (8006184 <TIM_OC5_SetConfig+0xc0>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d003      	beq.n	800613e <TIM_OC5_SetConfig+0x7a>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a13      	ldr	r2, [pc, #76]	; (8006188 <TIM_OC5_SetConfig+0xc4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d109      	bne.n	8006152 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	021b      	lsls	r3, r3, #8
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	4313      	orrs	r3, r2
 8006150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	40012c00 	.word	0x40012c00
 800617c:	40013400 	.word	0x40013400
 8006180:	40014000 	.word	0x40014000
 8006184:	40014400 	.word	0x40014400
 8006188:	40014800 	.word	0x40014800

0800618c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800618c:	b480      	push	{r7}
 800618e:	b087      	sub	sp, #28
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	051b      	lsls	r3, r3, #20
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	4313      	orrs	r3, r2
 80061de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a18      	ldr	r2, [pc, #96]	; (8006244 <TIM_OC6_SetConfig+0xb8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d00f      	beq.n	8006208 <TIM_OC6_SetConfig+0x7c>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a17      	ldr	r2, [pc, #92]	; (8006248 <TIM_OC6_SetConfig+0xbc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00b      	beq.n	8006208 <TIM_OC6_SetConfig+0x7c>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a16      	ldr	r2, [pc, #88]	; (800624c <TIM_OC6_SetConfig+0xc0>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <TIM_OC6_SetConfig+0x7c>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <TIM_OC6_SetConfig+0xc4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d003      	beq.n	8006208 <TIM_OC6_SetConfig+0x7c>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a14      	ldr	r2, [pc, #80]	; (8006254 <TIM_OC6_SetConfig+0xc8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d109      	bne.n	800621c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800620e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	029b      	lsls	r3, r3, #10
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	621a      	str	r2, [r3, #32]
}
 8006236:	bf00      	nop
 8006238:	371c      	adds	r7, #28
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40013400 	.word	0x40013400
 800624c:	40014000 	.word	0x40014000
 8006250:	40014400 	.word	0x40014400
 8006254:	40014800 	.word	0x40014800

08006258 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	f023 030a 	bic.w	r3, r3, #10
 8006294:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b6:	b480      	push	{r7}
 80062b8:	b087      	sub	sp, #28
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	60b9      	str	r1, [r7, #8]
 80062c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	f023 0210 	bic.w	r2, r3, #16
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	031b      	lsls	r3, r3, #12
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	011b      	lsls	r3, r3, #4
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006316:	b480      	push	{r7}
 8006318:	b085      	sub	sp, #20
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
 800631e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	f043 0307 	orr.w	r3, r3, #7
 8006338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	3714      	adds	r7, #20
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
 8006358:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006366:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	021a      	lsls	r2, r3, #8
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	431a      	orrs	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	4313      	orrs	r3, r2
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	609a      	str	r2, [r3, #8]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e068      	b.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2e      	ldr	r2, [pc, #184]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2d      	ldr	r2, [pc, #180]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d108      	bne.n	80063ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d01d      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006416:	d018      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a1b      	ldr	r2, [pc, #108]	; (800648c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d013      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a1a      	ldr	r2, [pc, #104]	; (8006490 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d00e      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a18      	ldr	r2, [pc, #96]	; (8006494 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d009      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a13      	ldr	r2, [pc, #76]	; (8006488 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a14      	ldr	r2, [pc, #80]	; (8006498 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d10c      	bne.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	4313      	orrs	r3, r2
 800645a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40013400 	.word	0x40013400
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40014000 	.word	0x40014000

0800649c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d101      	bne.n	80064b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80064b4:	2302      	movs	r3, #2
 80064b6:	e065      	b.n	8006584 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	695b      	ldr	r3, [r3, #20]
 8006510:	4313      	orrs	r3, r2
 8006512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651e:	4313      	orrs	r3, r2
 8006520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	699b      	ldr	r3, [r3, #24]
 800652c:	041b      	lsls	r3, r3, #16
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a16      	ldr	r2, [pc, #88]	; (8006590 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a14      	ldr	r2, [pc, #80]	; (8006594 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d115      	bne.n	8006572 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	051b      	lsls	r3, r3, #20
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	4313      	orrs	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	4313      	orrs	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006582:	2300      	movs	r3, #0
}
 8006584:	4618      	mov	r0, r3
 8006586:	3714      	adds	r7, #20
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40012c00 	.word	0x40012c00
 8006594:	40013400 	.word	0x40013400

08006598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b4:	bf00      	nop
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065c8:	bf00      	nop
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr

080065d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e040      	b.n	8006668 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fb fd80 	bl	80020fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2224      	movs	r2, #36	; 0x24
 8006600:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0201 	bic.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f992 	bl	800693c <UART_SetConfig>
 8006618:	4603      	mov	r3, r0
 800661a:	2b01      	cmp	r3, #1
 800661c:	d101      	bne.n	8006622 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e022      	b.n	8006668 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d002      	beq.n	8006630 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fc3e 	bl	8006eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800663e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	689a      	ldr	r2, [r3, #8]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800664e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f042 0201 	orr.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fcc5 	bl	8006ff0 <UART_CheckIdleState>
 8006666:	4603      	mov	r3, r0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	603b      	str	r3, [r7, #0]
 800667c:	4613      	mov	r3, r2
 800667e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006684:	2b20      	cmp	r3, #32
 8006686:	f040 8082 	bne.w	800678e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_UART_Transmit+0x26>
 8006690:	88fb      	ldrh	r3, [r7, #6]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e07a      	b.n	8006790 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d101      	bne.n	80066a8 <HAL_UART_Transmit+0x38>
 80066a4:	2302      	movs	r3, #2
 80066a6:	e073      	b.n	8006790 <HAL_UART_Transmit+0x120>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2221      	movs	r2, #33	; 0x21
 80066bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066be:	f008 fd3f 	bl	800f140 <HAL_GetTick>
 80066c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	88fa      	ldrh	r2, [r7, #6]
 80066c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066dc:	d108      	bne.n	80066f0 <HAL_UART_Transmit+0x80>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e003      	b.n	80066f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006700:	e02d      	b.n	800675e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fcb8 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e039      	b.n	8006790 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10b      	bne.n	800673a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	881a      	ldrh	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800672e:	b292      	uxth	r2, r2
 8006730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	3302      	adds	r3, #2
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	e008      	b.n	800674c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	b292      	uxth	r2, r2
 8006744:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3301      	adds	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006752:	b29b      	uxth	r3, r3
 8006754:	3b01      	subs	r3, #1
 8006756:	b29a      	uxth	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1cb      	bne.n	8006702 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2200      	movs	r2, #0
 8006772:	2140      	movs	r1, #64	; 0x40
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f000 fc84 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e005      	b.n	8006790 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800678a:	2300      	movs	r3, #0
 800678c:	e000      	b.n	8006790 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800678e:	2302      	movs	r3, #2
  }
}
 8006790:	4618      	mov	r0, r3
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ac:	2b20      	cmp	r3, #32
 80067ae:	f040 80bf 	bne.w	8006930 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <HAL_UART_Receive+0x26>
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0b7      	b.n	8006932 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d101      	bne.n	80067d0 <HAL_UART_Receive+0x38>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e0b0      	b.n	8006932 <HAL_UART_Receive+0x19a>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2222      	movs	r2, #34	; 0x22
 80067e4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ec:	f008 fca8 	bl	800f140 <HAL_GetTick>
 80067f0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	88fa      	ldrh	r2, [r7, #6]
 80067f6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	88fa      	ldrh	r2, [r7, #6]
 80067fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680a:	d10e      	bne.n	800682a <HAL_UART_Receive+0x92>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d105      	bne.n	8006820 <HAL_UART_Receive+0x88>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f240 12ff 	movw	r2, #511	; 0x1ff
 800681a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800681e:	e02d      	b.n	800687c <HAL_UART_Receive+0xe4>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	22ff      	movs	r2, #255	; 0xff
 8006824:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006828:	e028      	b.n	800687c <HAL_UART_Receive+0xe4>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10d      	bne.n	800684e <HAL_UART_Receive+0xb6>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d104      	bne.n	8006844 <HAL_UART_Receive+0xac>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	22ff      	movs	r2, #255	; 0xff
 800683e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006842:	e01b      	b.n	800687c <HAL_UART_Receive+0xe4>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	227f      	movs	r2, #127	; 0x7f
 8006848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800684c:	e016      	b.n	800687c <HAL_UART_Receive+0xe4>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006856:	d10d      	bne.n	8006874 <HAL_UART_Receive+0xdc>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d104      	bne.n	800686a <HAL_UART_Receive+0xd2>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	227f      	movs	r2, #127	; 0x7f
 8006864:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006868:	e008      	b.n	800687c <HAL_UART_Receive+0xe4>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	223f      	movs	r2, #63	; 0x3f
 800686e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006872:	e003      	b.n	800687c <HAL_UART_Receive+0xe4>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006882:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688c:	d108      	bne.n	80068a0 <HAL_UART_Receive+0x108>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	e003      	b.n	80068a8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80068b0:	e033      	b.n	800691a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2200      	movs	r2, #0
 80068ba:	2120      	movs	r1, #32
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f000 fbe0 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d001      	beq.n	80068cc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e032      	b.n	8006932 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10c      	bne.n	80068ec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068d8:	b29a      	uxth	r2, r3
 80068da:	8a7b      	ldrh	r3, [r7, #18]
 80068dc:	4013      	ands	r3, r2
 80068de:	b29a      	uxth	r2, r3
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	3302      	adds	r3, #2
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e00d      	b.n	8006908 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	8a7b      	ldrh	r3, [r7, #18]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	4013      	ands	r3, r2
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800690e:	b29b      	uxth	r3, r3
 8006910:	3b01      	subs	r3, #1
 8006912:	b29a      	uxth	r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1c5      	bne.n	80068b2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e000      	b.n	8006932 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b08a      	sub	sp, #40	; 0x28
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	431a      	orrs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	431a      	orrs	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4313      	orrs	r3, r2
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4ba4      	ldr	r3, [pc, #656]	; (8006bfc <UART_SetConfig+0x2c0>)
 800696c:	4013      	ands	r3, r2
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006974:	430b      	orrs	r3, r1
 8006976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a99      	ldr	r2, [pc, #612]	; (8006c00 <UART_SetConfig+0x2c4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a4:	4313      	orrs	r3, r2
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a90      	ldr	r2, [pc, #576]	; (8006c04 <UART_SetConfig+0x2c8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d126      	bne.n	8006a14 <UART_SetConfig+0xd8>
 80069c6:	4b90      	ldr	r3, [pc, #576]	; (8006c08 <UART_SetConfig+0x2cc>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d81b      	bhi.n	8006a0c <UART_SetConfig+0xd0>
 80069d4:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <UART_SetConfig+0xa0>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	080069fd 	.word	0x080069fd
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e116      	b.n	8006c22 <UART_SetConfig+0x2e6>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e112      	b.n	8006c22 <UART_SetConfig+0x2e6>
 80069fc:	2304      	movs	r3, #4
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a02:	e10e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a04:	2308      	movs	r3, #8
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0a:	e10a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a12:	e106      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a7c      	ldr	r2, [pc, #496]	; (8006c0c <UART_SetConfig+0x2d0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d138      	bne.n	8006a90 <UART_SetConfig+0x154>
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	d82d      	bhi.n	8006a88 <UART_SetConfig+0x14c>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0xf8>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006a89 	.word	0x08006a89
 8006a3c:	08006a89 	.word	0x08006a89
 8006a40:	08006a89 	.word	0x08006a89
 8006a44:	08006a79 	.word	0x08006a79
 8006a48:	08006a89 	.word	0x08006a89
 8006a4c:	08006a89 	.word	0x08006a89
 8006a50:	08006a89 	.word	0x08006a89
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	08006a89 	.word	0x08006a89
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e0d8      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a70:	2302      	movs	r3, #2
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e0d4      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e0d0      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a80:	2308      	movs	r3, #8
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e0cc      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e0c8      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5e      	ldr	r2, [pc, #376]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d125      	bne.n	8006ae6 <UART_SetConfig+0x1aa>
 8006a9a:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006aa4:	2b30      	cmp	r3, #48	; 0x30
 8006aa6:	d016      	beq.n	8006ad6 <UART_SetConfig+0x19a>
 8006aa8:	2b30      	cmp	r3, #48	; 0x30
 8006aaa:	d818      	bhi.n	8006ade <UART_SetConfig+0x1a2>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d00a      	beq.n	8006ac6 <UART_SetConfig+0x18a>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d814      	bhi.n	8006ade <UART_SetConfig+0x1a2>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <UART_SetConfig+0x182>
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d008      	beq.n	8006ace <UART_SetConfig+0x192>
 8006abc:	e00f      	b.n	8006ade <UART_SetConfig+0x1a2>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac4:	e0ad      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006acc:	e0a9      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ace:	2304      	movs	r3, #4
 8006ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad4:	e0a5      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006adc:	e0a1      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ade:	2310      	movs	r3, #16
 8006ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae4:	e09d      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a4a      	ldr	r2, [pc, #296]	; (8006c14 <UART_SetConfig+0x2d8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d125      	bne.n	8006b3c <UART_SetConfig+0x200>
 8006af0:	4b45      	ldr	r3, [pc, #276]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006afa:	2bc0      	cmp	r3, #192	; 0xc0
 8006afc:	d016      	beq.n	8006b2c <UART_SetConfig+0x1f0>
 8006afe:	2bc0      	cmp	r3, #192	; 0xc0
 8006b00:	d818      	bhi.n	8006b34 <UART_SetConfig+0x1f8>
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d00a      	beq.n	8006b1c <UART_SetConfig+0x1e0>
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	d814      	bhi.n	8006b34 <UART_SetConfig+0x1f8>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <UART_SetConfig+0x1d8>
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d008      	beq.n	8006b24 <UART_SetConfig+0x1e8>
 8006b12:	e00f      	b.n	8006b34 <UART_SetConfig+0x1f8>
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e082      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e07e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b24:	2304      	movs	r3, #4
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e07a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e076      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e072      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a35      	ldr	r2, [pc, #212]	; (8006c18 <UART_SetConfig+0x2dc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d12a      	bne.n	8006b9c <UART_SetConfig+0x260>
 8006b46:	4b30      	ldr	r3, [pc, #192]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b54:	d01a      	beq.n	8006b8c <UART_SetConfig+0x250>
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b5a:	d81b      	bhi.n	8006b94 <UART_SetConfig+0x258>
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b60:	d00c      	beq.n	8006b7c <UART_SetConfig+0x240>
 8006b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b66:	d815      	bhi.n	8006b94 <UART_SetConfig+0x258>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <UART_SetConfig+0x238>
 8006b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b70:	d008      	beq.n	8006b84 <UART_SetConfig+0x248>
 8006b72:	e00f      	b.n	8006b94 <UART_SetConfig+0x258>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e052      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e04e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e04a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e046      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e042      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <UART_SetConfig+0x2c4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d13a      	bne.n	8006c1c <UART_SetConfig+0x2e0>
 8006ba6:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bb4:	d01a      	beq.n	8006bec <UART_SetConfig+0x2b0>
 8006bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bba:	d81b      	bhi.n	8006bf4 <UART_SetConfig+0x2b8>
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc0:	d00c      	beq.n	8006bdc <UART_SetConfig+0x2a0>
 8006bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc6:	d815      	bhi.n	8006bf4 <UART_SetConfig+0x2b8>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <UART_SetConfig+0x298>
 8006bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd0:	d008      	beq.n	8006be4 <UART_SetConfig+0x2a8>
 8006bd2:	e00f      	b.n	8006bf4 <UART_SetConfig+0x2b8>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e022      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e01e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006be4:	2304      	movs	r3, #4
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bea:	e01a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bec:	2308      	movs	r3, #8
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf2:	e016      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfa:	e012      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bfc:	efff69f3 	.word	0xefff69f3
 8006c00:	40008000 	.word	0x40008000
 8006c04:	40013800 	.word	0x40013800
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40004400 	.word	0x40004400
 8006c10:	40004800 	.word	0x40004800
 8006c14:	40004c00 	.word	0x40004c00
 8006c18:	40005000 	.word	0x40005000
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a9f      	ldr	r2, [pc, #636]	; (8006ea4 <UART_SetConfig+0x568>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d17a      	bne.n	8006d22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d824      	bhi.n	8006c7e <UART_SetConfig+0x342>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x300>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c7f 	.word	0x08006c7f
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c7f 	.word	0x08006c7f
 8006c4c:	08006c6f 	.word	0x08006c6f
 8006c50:	08006c7f 	.word	0x08006c7f
 8006c54:	08006c7f 	.word	0x08006c7f
 8006c58:	08006c7f 	.word	0x08006c7f
 8006c5c:	08006c77 	.word	0x08006c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fc fe48 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8006c64:	61f8      	str	r0, [r7, #28]
        break;
 8006c66:	e010      	b.n	8006c8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c68:	4b8f      	ldr	r3, [pc, #572]	; (8006ea8 <UART_SetConfig+0x56c>)
 8006c6a:	61fb      	str	r3, [r7, #28]
        break;
 8006c6c:	e00d      	b.n	8006c8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6e:	f7fc fda9 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8006c72:	61f8      	str	r0, [r7, #28]
        break;
 8006c74:	e009      	b.n	8006c8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	61fb      	str	r3, [r7, #28]
        break;
 8006c7c:	e005      	b.n	8006c8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80fb 	beq.w	8006e88 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d305      	bcc.n	8006cae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d903      	bls.n	8006cb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cb4:	e0e8      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	461c      	mov	r4, r3
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	022b      	lsls	r3, r5, #8
 8006cc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ccc:	0222      	lsls	r2, r4, #8
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	6849      	ldr	r1, [r1, #4]
 8006cd2:	0849      	lsrs	r1, r1, #1
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4688      	mov	r8, r1
 8006cd8:	4681      	mov	r9, r0
 8006cda:	eb12 0a08 	adds.w	sl, r2, r8
 8006cde:	eb43 0b09 	adc.w	fp, r3, r9
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	f7f9 fdd4 	bl	80008a0 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d06:	d308      	bcc.n	8006d1a <UART_SetConfig+0x3de>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0e:	d204      	bcs.n	8006d1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	60da      	str	r2, [r3, #12]
 8006d18:	e0b6      	b.n	8006e88 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d20:	e0b2      	b.n	8006e88 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2a:	d15e      	bne.n	8006dea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d828      	bhi.n	8006d86 <UART_SetConfig+0x44a>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <UART_SetConfig+0x400>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d87 	.word	0x08006d87
 8006d4c:	08006d77 	.word	0x08006d77
 8006d50:	08006d87 	.word	0x08006d87
 8006d54:	08006d87 	.word	0x08006d87
 8006d58:	08006d87 	.word	0x08006d87
 8006d5c:	08006d7f 	.word	0x08006d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7fc fdc8 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8006d64:	61f8      	str	r0, [r7, #28]
        break;
 8006d66:	e014      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d68:	f7fc fdda 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8006d6c:	61f8      	str	r0, [r7, #28]
        break;
 8006d6e:	e010      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d70:	4b4d      	ldr	r3, [pc, #308]	; (8006ea8 <UART_SetConfig+0x56c>)
 8006d72:	61fb      	str	r3, [r7, #28]
        break;
 8006d74:	e00d      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d76:	f7fc fd25 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8006d7a:	61f8      	str	r0, [r7, #28]
        break;
 8006d7c:	e009      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	61fb      	str	r3, [r7, #28]
        break;
 8006d84:	e005      	b.n	8006d92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d077      	beq.n	8006e88 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	005a      	lsls	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	441a      	add	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d916      	bls.n	8006de2 <UART_SetConfig+0x4a6>
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dba:	d212      	bcs.n	8006de2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f023 030f 	bic.w	r3, r3, #15
 8006dc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	085b      	lsrs	r3, r3, #1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	8afb      	ldrh	r3, [r7, #22]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	8afa      	ldrh	r2, [r7, #22]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e052      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006de8:	e04e      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d827      	bhi.n	8006e42 <UART_SetConfig+0x506>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x4bc>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e43 	.word	0x08006e43
 8006e08:	08006e33 	.word	0x08006e33
 8006e0c:	08006e43 	.word	0x08006e43
 8006e10:	08006e43 	.word	0x08006e43
 8006e14:	08006e43 	.word	0x08006e43
 8006e18:	08006e3b 	.word	0x08006e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fc fd6a 	bl	80038f4 <HAL_RCC_GetPCLK1Freq>
 8006e20:	61f8      	str	r0, [r7, #28]
        break;
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7fc fd7c 	bl	8003920 <HAL_RCC_GetPCLK2Freq>
 8006e28:	61f8      	str	r0, [r7, #28]
        break;
 8006e2a:	e010      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <UART_SetConfig+0x56c>)
 8006e2e:	61fb      	str	r3, [r7, #28]
        break;
 8006e30:	e00d      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e32:	f7fc fcc7 	bl	80037c4 <HAL_RCC_GetSysClockFreq>
 8006e36:	61f8      	str	r0, [r7, #28]
        break;
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3e:	61fb      	str	r3, [r7, #28]
        break;
 8006e40:	e005      	b.n	8006e4e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e4c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d019      	beq.n	8006e88 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	085a      	lsrs	r2, r3, #1
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b0f      	cmp	r3, #15
 8006e6c:	d909      	bls.n	8006e82 <UART_SetConfig+0x546>
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e74:	d205      	bcs.n	8006e82 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60da      	str	r2, [r3, #12]
 8006e80:	e002      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006e94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3728      	adds	r7, #40	; 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40008000 	.word	0x40008000
 8006ea8:	00f42400 	.word	0x00f42400

08006eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	f003 0302 	and.w	r3, r3, #2
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	f003 0308 	and.w	r3, r3, #8
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006faa:	d10a      	bne.n	8006fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007000:	f008 f89e 	bl	800f140 <HAL_GetTick>
 8007004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b08      	cmp	r3, #8
 8007012:	d10e      	bne.n	8007032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f82d 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e023      	b.n	800707a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b04      	cmp	r3, #4
 800703e:	d10e      	bne.n	800705e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f817 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e00d      	b.n	800707a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b09c      	sub	sp, #112	; 0x70
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	e0a5      	b.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	f000 80a1 	beq.w	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709e:	f008 f84f 	bl	800f140 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80070ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d13e      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c8:	667b      	str	r3, [r7, #100]	; 0x64
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070d4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e6      	bne.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	663b      	str	r3, [r7, #96]	; 0x60
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007106:	64ba      	str	r2, [r7, #72]	; 0x48
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800710c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e067      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d04f      	beq.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714e:	d147      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007158:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800716e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
 800717a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800717e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e6      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	613b      	str	r3, [r7, #16]
   return(result);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071ac:	623a      	str	r2, [r7, #32]
 80071ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e5      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e010      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f43f af4a 	beq.w	8007094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3770      	adds	r7, #112	; 0x70
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <MX_FATFS_Init+0x18>)
 8007212:	4805      	ldr	r0, [pc, #20]	; (8007228 <MX_FATFS_Init+0x1c>)
 8007214:	f003 fdf2 	bl	800adfc <FATFS_LinkDriver>
 8007218:	4603      	mov	r3, r0
 800721a:	461a      	mov	r2, r3
 800721c:	4b03      	ldr	r3, [pc, #12]	; (800722c <MX_FATFS_Init+0x20>)
 800721e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007220:	bf00      	nop
 8007222:	bd80      	pop	{r7, pc}
 8007224:	200003b4 	.word	0x200003b4
 8007228:	20000014 	.word	0x20000014
 800722c:	200003b0 	.word	0x200003b0

08007230 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007234:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007236:	4618      	mov	r0, r3
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	4603      	mov	r3, r0
 8007248:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	4618      	mov	r0, r3
 800724e:	f7f9 fe5f 	bl	8000f10 <SD_disk_initialize>
 8007252:	4603      	mov	r3, r0
 8007254:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007256:	4618      	mov	r0, r3
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}

0800725e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b082      	sub	sp, #8
 8007262:	af00      	add	r7, sp, #0
 8007264:	4603      	mov	r3, r0
 8007266:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 ff3c 	bl	80010e8 <SD_disk_status>
 8007270:	4603      	mov	r3, r0
 8007272:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	60b9      	str	r1, [r7, #8]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800728c:	7bf8      	ldrb	r0, [r7, #15]
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	f7f9 ff3e 	bl	8001114 <SD_disk_read>
 8007298:	4603      	mov	r3, r0
 800729a:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	607a      	str	r2, [r7, #4]
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	4603      	mov	r3, r0
 80072b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 80072b4:	7bf8      	ldrb	r0, [r7, #15]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	f7f9 ff94 	bl	80011e8 <SD_disk_write>
 80072c0:	4603      	mov	r3, r0
 80072c2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	4603      	mov	r3, r0
 80072d4:	603a      	str	r2, [r7, #0]
 80072d6:	71fb      	strb	r3, [r7, #7]
 80072d8:	460b      	mov	r3, r1
 80072da:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 80072dc:	79fb      	ldrb	r3, [r7, #7]
 80072de:	79b9      	ldrb	r1, [r7, #6]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	4618      	mov	r0, r3
 80072e4:	f7fa f804 	bl	80012f0 <SD_disk_ioctl>
 80072e8:	4603      	mov	r3, r0
 80072ea:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <disk_status+0x30>)
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4413      	add	r3, r2
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	79fa      	ldrb	r2, [r7, #7]
 800730c:	4905      	ldr	r1, [pc, #20]	; (8007324 <disk_status+0x30>)
 800730e:	440a      	add	r2, r1
 8007310:	7a12      	ldrb	r2, [r2, #8]
 8007312:	4610      	mov	r0, r2
 8007314:	4798      	blx	r3
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
  return stat;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	200005e0 	.word	0x200005e0

08007328 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007336:	79fb      	ldrb	r3, [r7, #7]
 8007338:	4a0d      	ldr	r2, [pc, #52]	; (8007370 <disk_initialize+0x48>)
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d111      	bne.n	8007364 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007340:	79fb      	ldrb	r3, [r7, #7]
 8007342:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <disk_initialize+0x48>)
 8007344:	2101      	movs	r1, #1
 8007346:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007348:	79fb      	ldrb	r3, [r7, #7]
 800734a:	4a09      	ldr	r2, [pc, #36]	; (8007370 <disk_initialize+0x48>)
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	79fa      	ldrb	r2, [r7, #7]
 8007356:	4906      	ldr	r1, [pc, #24]	; (8007370 <disk_initialize+0x48>)
 8007358:	440a      	add	r2, r1
 800735a:	7a12      	ldrb	r2, [r2, #8]
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	200005e0 	.word	0x200005e0

08007374 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007374:	b590      	push	{r4, r7, lr}
 8007376:	b087      	sub	sp, #28
 8007378:	af00      	add	r7, sp, #0
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	4603      	mov	r3, r0
 8007382:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	4a0a      	ldr	r2, [pc, #40]	; (80073b0 <disk_read+0x3c>)
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4413      	add	r3, r2
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	689c      	ldr	r4, [r3, #8]
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	4a07      	ldr	r2, [pc, #28]	; (80073b0 <disk_read+0x3c>)
 8007394:	4413      	add	r3, r2
 8007396:	7a18      	ldrb	r0, [r3, #8]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	47a0      	blx	r4
 80073a0:	4603      	mov	r3, r0
 80073a2:	75fb      	strb	r3, [r7, #23]
  return res;
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd90      	pop	{r4, r7, pc}
 80073ae:	bf00      	nop
 80073b0:	200005e0 	.word	0x200005e0

080073b4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80073b4:	b590      	push	{r4, r7, lr}
 80073b6:	b087      	sub	sp, #28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	4603      	mov	r3, r0
 80073c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <disk_write+0x3c>)
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	4413      	add	r3, r2
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	68dc      	ldr	r4, [r3, #12]
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	4a07      	ldr	r2, [pc, #28]	; (80073f0 <disk_write+0x3c>)
 80073d4:	4413      	add	r3, r2
 80073d6:	7a18      	ldrb	r0, [r3, #8]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	47a0      	blx	r4
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
  return res;
 80073e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd90      	pop	{r4, r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200005e0 	.word	0x200005e0

080073f4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	4603      	mov	r3, r0
 80073fc:	603a      	str	r2, [r7, #0]
 80073fe:	71fb      	strb	r3, [r7, #7]
 8007400:	460b      	mov	r3, r1
 8007402:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007404:	79fb      	ldrb	r3, [r7, #7]
 8007406:	4a09      	ldr	r2, [pc, #36]	; (800742c <disk_ioctl+0x38>)
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	79fa      	ldrb	r2, [r7, #7]
 8007412:	4906      	ldr	r1, [pc, #24]	; (800742c <disk_ioctl+0x38>)
 8007414:	440a      	add	r2, r1
 8007416:	7a10      	ldrb	r0, [r2, #8]
 8007418:	79b9      	ldrb	r1, [r7, #6]
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	4798      	blx	r3
 800741e:	4603      	mov	r3, r0
 8007420:	73fb      	strb	r3, [r7, #15]
  return res;
 8007422:	7bfb      	ldrb	r3, [r7, #15]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200005e0 	.word	0x200005e0

08007430 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	3301      	adds	r3, #1
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007440:	89fb      	ldrh	r3, [r7, #14]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	b21a      	sxth	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b21b      	sxth	r3, r3
 800744c:	4313      	orrs	r3, r2
 800744e:	b21b      	sxth	r3, r3
 8007450:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007452:	89fb      	ldrh	r3, [r7, #14]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	3303      	adds	r3, #3
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	021b      	lsls	r3, r3, #8
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	3202      	adds	r2, #2
 8007478:	7812      	ldrb	r2, [r2, #0]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	021b      	lsls	r3, r3, #8
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	3201      	adds	r2, #1
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	4313      	orrs	r3, r2
 800748a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	021b      	lsls	r3, r3, #8
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	7812      	ldrb	r2, [r2, #0]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
	return rv;
 8007498:	68fb      	ldr	r3, [r7, #12]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	460b      	mov	r3, r1
 80074b0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	1c5a      	adds	r2, r3, #1
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	887a      	ldrh	r2, [r7, #2]
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	607a      	str	r2, [r7, #4]
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	607a      	str	r2, [r7, #4]
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	0a1b      	lsrs	r3, r3, #8
 80074f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	0a1b      	lsrs	r3, r3, #8
 8007508:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	683a      	ldr	r2, [r7, #0]
 8007512:	b2d2      	uxtb	r2, r2
 8007514:	701a      	strb	r2, [r3, #0]
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	0a1b      	lsrs	r3, r3, #8
 800751a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	607a      	str	r2, [r7, #4]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	b2d2      	uxtb	r2, r2
 8007526:	701a      	strb	r2, [r3, #0]
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00d      	beq.n	800756a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	1c53      	adds	r3, r2, #1
 8007552:	613b      	str	r3, [r7, #16]
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	1c59      	adds	r1, r3, #1
 8007558:	6179      	str	r1, [r7, #20]
 800755a:	7812      	ldrb	r2, [r2, #0]
 800755c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	3b01      	subs	r3, #1
 8007562:	607b      	str	r3, [r7, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1f1      	bne.n	800754e <mem_cpy+0x1a>
	}
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007576:	b480      	push	{r7}
 8007578:	b087      	sub	sp, #28
 800757a:	af00      	add	r7, sp, #0
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	617a      	str	r2, [r7, #20]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	b2d2      	uxtb	r2, r2
 8007590:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3b01      	subs	r3, #1
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f3      	bne.n	8007586 <mem_set+0x10>
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80075ac:	b480      	push	{r7}
 80075ae:	b089      	sub	sp, #36	; 0x24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	1c5a      	adds	r2, r3, #1
 80075c8:	61fa      	str	r2, [r7, #28]
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	4619      	mov	r1, r3
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	61ba      	str	r2, [r7, #24]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	1acb      	subs	r3, r1, r3
 80075d8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3b01      	subs	r3, #1
 80075de:	607b      	str	r3, [r7, #4]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <mem_cmp+0x40>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d0eb      	beq.n	80075c4 <mem_cmp+0x18>

	return r;
 80075ec:	697b      	ldr	r3, [r7, #20]
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3724      	adds	r7, #36	; 0x24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007604:	e002      	b.n	800760c <chk_chr+0x12>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3301      	adds	r3, #1
 800760a:	607b      	str	r3, [r7, #4]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d005      	beq.n	8007620 <chk_chr+0x26>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	4293      	cmp	r3, r2
 800761e:	d1f2      	bne.n	8007606 <chk_chr+0xc>
	return *str;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	781b      	ldrb	r3, [r3, #0]
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800763a:	2300      	movs	r3, #0
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	60fb      	str	r3, [r7, #12]
 8007642:	e029      	b.n	8007698 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007644:	4a27      	ldr	r2, [pc, #156]	; (80076e4 <chk_lock+0xb4>)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4413      	add	r3, r2
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01d      	beq.n	800768e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007652:	4a24      	ldr	r2, [pc, #144]	; (80076e4 <chk_lock+0xb4>)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	4413      	add	r3, r2
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d116      	bne.n	8007692 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007664:	4a1f      	ldr	r2, [pc, #124]	; (80076e4 <chk_lock+0xb4>)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	4413      	add	r3, r2
 800766c:	3304      	adds	r3, #4
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007674:	429a      	cmp	r2, r3
 8007676:	d10c      	bne.n	8007692 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007678:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <chk_lock+0xb4>)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	011b      	lsls	r3, r3, #4
 800767e:	4413      	add	r3, r2
 8007680:	3308      	adds	r3, #8
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007688:	429a      	cmp	r2, r3
 800768a:	d102      	bne.n	8007692 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800768c:	e007      	b.n	800769e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800768e:	2301      	movs	r3, #1
 8007690:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d9d2      	bls.n	8007644 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d109      	bne.n	80076b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d102      	bne.n	80076b0 <chk_lock+0x80>
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d101      	bne.n	80076b4 <chk_lock+0x84>
 80076b0:	2300      	movs	r3, #0
 80076b2:	e010      	b.n	80076d6 <chk_lock+0xa6>
 80076b4:	2312      	movs	r3, #18
 80076b6:	e00e      	b.n	80076d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <chk_lock+0xa0>
 80076be:	4a09      	ldr	r2, [pc, #36]	; (80076e4 <chk_lock+0xb4>)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	4413      	add	r3, r2
 80076c6:	330c      	adds	r3, #12
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ce:	d101      	bne.n	80076d4 <chk_lock+0xa4>
 80076d0:	2310      	movs	r3, #16
 80076d2:	e000      	b.n	80076d6 <chk_lock+0xa6>
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	200003c0 	.word	0x200003c0

080076e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076ee:	2300      	movs	r3, #0
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	e002      	b.n	80076fa <enq_lock+0x12>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3301      	adds	r3, #1
 80076f8:	607b      	str	r3, [r7, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d806      	bhi.n	800770e <enq_lock+0x26>
 8007700:	4a09      	ldr	r2, [pc, #36]	; (8007728 <enq_lock+0x40>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	4413      	add	r3, r2
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1f2      	bne.n	80076f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b02      	cmp	r3, #2
 8007712:	bf14      	ite	ne
 8007714:	2301      	movne	r3, #1
 8007716:	2300      	moveq	r3, #0
 8007718:	b2db      	uxtb	r3, r3
}
 800771a:	4618      	mov	r0, r3
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	200003c0 	.word	0x200003c0

0800772c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]
 800773a:	e01f      	b.n	800777c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800773c:	4a41      	ldr	r2, [pc, #260]	; (8007844 <inc_lock+0x118>)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	011b      	lsls	r3, r3, #4
 8007742:	4413      	add	r3, r2
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	429a      	cmp	r2, r3
 800774c:	d113      	bne.n	8007776 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800774e:	4a3d      	ldr	r2, [pc, #244]	; (8007844 <inc_lock+0x118>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	4413      	add	r3, r2
 8007756:	3304      	adds	r3, #4
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800775e:	429a      	cmp	r2, r3
 8007760:	d109      	bne.n	8007776 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007762:	4a38      	ldr	r2, [pc, #224]	; (8007844 <inc_lock+0x118>)
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	4413      	add	r3, r2
 800776a:	3308      	adds	r3, #8
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007772:	429a      	cmp	r2, r3
 8007774:	d006      	beq.n	8007784 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	3301      	adds	r3, #1
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d9dc      	bls.n	800773c <inc_lock+0x10>
 8007782:	e000      	b.n	8007786 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007784:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2b02      	cmp	r3, #2
 800778a:	d132      	bne.n	80077f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800778c:	2300      	movs	r3, #0
 800778e:	60fb      	str	r3, [r7, #12]
 8007790:	e002      	b.n	8007798 <inc_lock+0x6c>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	3301      	adds	r3, #1
 8007796:	60fb      	str	r3, [r7, #12]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d806      	bhi.n	80077ac <inc_lock+0x80>
 800779e:	4a29      	ldr	r2, [pc, #164]	; (8007844 <inc_lock+0x118>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4413      	add	r3, r2
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1f2      	bne.n	8007792 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d101      	bne.n	80077b6 <inc_lock+0x8a>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e040      	b.n	8007838 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681a      	ldr	r2, [r3, #0]
 80077ba:	4922      	ldr	r1, [pc, #136]	; (8007844 <inc_lock+0x118>)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	011b      	lsls	r3, r3, #4
 80077c0:	440b      	add	r3, r1
 80077c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	491e      	ldr	r1, [pc, #120]	; (8007844 <inc_lock+0x118>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	440b      	add	r3, r1
 80077d0:	3304      	adds	r3, #4
 80077d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695a      	ldr	r2, [r3, #20]
 80077d8:	491a      	ldr	r1, [pc, #104]	; (8007844 <inc_lock+0x118>)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	440b      	add	r3, r1
 80077e0:	3308      	adds	r3, #8
 80077e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077e4:	4a17      	ldr	r2, [pc, #92]	; (8007844 <inc_lock+0x118>)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	4413      	add	r3, r2
 80077ec:	330c      	adds	r3, #12
 80077ee:	2200      	movs	r2, #0
 80077f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d009      	beq.n	800780c <inc_lock+0xe0>
 80077f8:	4a12      	ldr	r2, [pc, #72]	; (8007844 <inc_lock+0x118>)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	4413      	add	r3, r2
 8007800:	330c      	adds	r3, #12
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <inc_lock+0xe0>
 8007808:	2300      	movs	r3, #0
 800780a:	e015      	b.n	8007838 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d108      	bne.n	8007824 <inc_lock+0xf8>
 8007812:	4a0c      	ldr	r2, [pc, #48]	; (8007844 <inc_lock+0x118>)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	011b      	lsls	r3, r3, #4
 8007818:	4413      	add	r3, r2
 800781a:	330c      	adds	r3, #12
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	3301      	adds	r3, #1
 8007820:	b29a      	uxth	r2, r3
 8007822:	e001      	b.n	8007828 <inc_lock+0xfc>
 8007824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007828:	4906      	ldr	r1, [pc, #24]	; (8007844 <inc_lock+0x118>)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	440b      	add	r3, r1
 8007830:	330c      	adds	r3, #12
 8007832:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3301      	adds	r3, #1
}
 8007838:	4618      	mov	r0, r3
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	200003c0 	.word	0x200003c0

08007848 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3b01      	subs	r3, #1
 8007854:	607b      	str	r3, [r7, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d825      	bhi.n	80078a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800785c:	4a17      	ldr	r2, [pc, #92]	; (80078bc <dec_lock+0x74>)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	4413      	add	r3, r2
 8007864:	330c      	adds	r3, #12
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800786a:	89fb      	ldrh	r3, [r7, #14]
 800786c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007870:	d101      	bne.n	8007876 <dec_lock+0x2e>
 8007872:	2300      	movs	r3, #0
 8007874:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d002      	beq.n	8007882 <dec_lock+0x3a>
 800787c:	89fb      	ldrh	r3, [r7, #14]
 800787e:	3b01      	subs	r3, #1
 8007880:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007882:	4a0e      	ldr	r2, [pc, #56]	; (80078bc <dec_lock+0x74>)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	4413      	add	r3, r2
 800788a:	330c      	adds	r3, #12
 800788c:	89fa      	ldrh	r2, [r7, #14]
 800788e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007890:	89fb      	ldrh	r3, [r7, #14]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <dec_lock+0x5a>
 8007896:	4a09      	ldr	r2, [pc, #36]	; (80078bc <dec_lock+0x74>)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	4413      	add	r3, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	737b      	strb	r3, [r7, #13]
 80078a6:	e001      	b.n	80078ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80078a8:	2302      	movs	r3, #2
 80078aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80078ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	200003c0 	.word	0x200003c0

080078c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80078c8:	2300      	movs	r3, #0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e010      	b.n	80078f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078ce:	4a0d      	ldr	r2, [pc, #52]	; (8007904 <clear_lock+0x44>)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	4413      	add	r3, r2
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d105      	bne.n	80078ea <clear_lock+0x2a>
 80078de:	4a09      	ldr	r2, [pc, #36]	; (8007904 <clear_lock+0x44>)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	4413      	add	r3, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d9eb      	bls.n	80078ce <clear_lock+0xe>
	}
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	3714      	adds	r7, #20
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr
 8007904:	200003c0 	.word	0x200003c0

08007908 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b086      	sub	sp, #24
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d034      	beq.n	8007986 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007920:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	7858      	ldrb	r0, [r3, #1]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800792c:	2301      	movs	r3, #1
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	f7ff fd40 	bl	80073b4 <disk_write>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d002      	beq.n	8007940 <sync_window+0x38>
			res = FR_DISK_ERR;
 800793a:	2301      	movs	r3, #1
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	e022      	b.n	8007986 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	1ad2      	subs	r2, r2, r3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	429a      	cmp	r2, r3
 8007954:	d217      	bcs.n	8007986 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	789b      	ldrb	r3, [r3, #2]
 800795a:	613b      	str	r3, [r7, #16]
 800795c:	e010      	b.n	8007980 <sync_window+0x78>
					wsect += fs->fsize;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	7858      	ldrb	r0, [r3, #1]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007972:	2301      	movs	r3, #1
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	f7ff fd1d 	bl	80073b4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	3b01      	subs	r3, #1
 800797e:	613b      	str	r3, [r7, #16]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d8eb      	bhi.n	800795e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d01b      	beq.n	80079e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ffad 	bl	8007908 <sync_window>
 80079ae:	4603      	mov	r3, r0
 80079b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d113      	bne.n	80079e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7858      	ldrb	r0, [r3, #1]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80079c2:	2301      	movs	r3, #1
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	f7ff fcd5 	bl	8007374 <disk_read>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d004      	beq.n	80079da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295
 80079d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff ff87 	bl	8007908 <sync_window>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d159      	bne.n	8007ab8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d149      	bne.n	8007aa0 <sync_fs+0xb4>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	791b      	ldrb	r3, [r3, #4]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d145      	bne.n	8007aa0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	899b      	ldrh	r3, [r3, #12]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	2100      	movs	r1, #0
 8007a22:	f7ff fda8 	bl	8007576 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3338      	adds	r3, #56	; 0x38
 8007a2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a2e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff fd37 	bl	80074a6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	3338      	adds	r3, #56	; 0x38
 8007a3c:	4921      	ldr	r1, [pc, #132]	; (8007ac4 <sync_fs+0xd8>)
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fd4c 	bl	80074dc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3338      	adds	r3, #56	; 0x38
 8007a48:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007a4c:	491e      	ldr	r1, [pc, #120]	; (8007ac8 <sync_fs+0xdc>)
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fd44 	bl	80074dc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3338      	adds	r3, #56	; 0x38
 8007a58:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	4619      	mov	r1, r3
 8007a62:	4610      	mov	r0, r2
 8007a64:	f7ff fd3a 	bl	80074dc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3338      	adds	r3, #56	; 0x38
 8007a6c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	4619      	mov	r1, r3
 8007a76:	4610      	mov	r0, r2
 8007a78:	f7ff fd30 	bl	80074dc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7858      	ldrb	r0, [r3, #1]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a94:	2301      	movs	r3, #1
 8007a96:	f7ff fc8d 	bl	80073b4 <disk_write>
			fs->fsi_flag = 0;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	785b      	ldrb	r3, [r3, #1]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fca3 	bl	80073f4 <disk_ioctl>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <sync_fs+0xcc>
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	41615252 	.word	0x41615252
 8007ac8:	61417272 	.word	0x61417272

08007acc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	3b02      	subs	r3, #2
 8007ada:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	69db      	ldr	r3, [r3, #28]
 8007ae0:	3b02      	subs	r3, #2
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d301      	bcc.n	8007aec <clust2sect+0x20>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e008      	b.n	8007afe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	895b      	ldrh	r3, [r3, #10]
 8007af0:	461a      	mov	r2, r3
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	fb03 f202 	mul.w	r2, r3, r2
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	4413      	add	r3, r2
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b086      	sub	sp, #24
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d904      	bls.n	8007b2a <get_fat+0x20>
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	683a      	ldr	r2, [r7, #0]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d302      	bcc.n	8007b30 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	e0bb      	b.n	8007ca8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295
 8007b34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	f000 8083 	beq.w	8007c46 <get_fat+0x13c>
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	f300 80a7 	bgt.w	8007c94 <get_fat+0x18a>
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d002      	beq.n	8007b50 <get_fat+0x46>
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d056      	beq.n	8007bfc <get_fat+0xf2>
 8007b4e:	e0a1      	b.n	8007c94 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	085b      	lsrs	r3, r3, #1
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	899b      	ldrh	r3, [r3, #12]
 8007b66:	4619      	mov	r1, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b6e:	4413      	add	r3, r2
 8007b70:	4619      	mov	r1, r3
 8007b72:	6938      	ldr	r0, [r7, #16]
 8007b74:	f7ff ff0c 	bl	8007990 <move_window>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f040 808d 	bne.w	8007c9a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	60fa      	str	r2, [r7, #12]
 8007b86:	693a      	ldr	r2, [r7, #16]
 8007b88:	8992      	ldrh	r2, [r2, #12]
 8007b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b8e:	fb01 f202 	mul.w	r2, r1, r2
 8007b92:	1a9b      	subs	r3, r3, r2
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	4413      	add	r3, r2
 8007b98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007b9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	899b      	ldrh	r3, [r3, #12]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007bae:	4413      	add	r3, r2
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6938      	ldr	r0, [r7, #16]
 8007bb4:	f7ff feec 	bl	8007990 <move_window>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d16f      	bne.n	8007c9e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	899b      	ldrh	r3, [r3, #12]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bca:	fb01 f202 	mul.w	r2, r1, r2
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	693a      	ldr	r2, [r7, #16]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <get_fat+0xe8>
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	091b      	lsrs	r3, r3, #4
 8007bf0:	e002      	b.n	8007bf8 <get_fat+0xee>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bf8:	617b      	str	r3, [r7, #20]
			break;
 8007bfa:	e055      	b.n	8007ca8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	899b      	ldrh	r3, [r3, #12]
 8007c04:	085b      	lsrs	r3, r3, #1
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4619      	mov	r1, r3
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c10:	4413      	add	r3, r2
 8007c12:	4619      	mov	r1, r3
 8007c14:	6938      	ldr	r0, [r7, #16]
 8007c16:	f7ff febb 	bl	8007990 <move_window>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d140      	bne.n	8007ca2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	8992      	ldrh	r2, [r2, #12]
 8007c2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c32:	fb00 f202 	mul.w	r2, r0, r2
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	440b      	add	r3, r1
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fbf8 	bl	8007430 <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	617b      	str	r3, [r7, #20]
			break;
 8007c44:	e030      	b.n	8007ca8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	899b      	ldrh	r3, [r3, #12]
 8007c4e:	089b      	lsrs	r3, r3, #2
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	4619      	mov	r1, r3
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	6938      	ldr	r0, [r7, #16]
 8007c60:	f7ff fe96 	bl	8007990 <move_window>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d11d      	bne.n	8007ca6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	693a      	ldr	r2, [r7, #16]
 8007c76:	8992      	ldrh	r2, [r2, #12]
 8007c78:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c7c:	fb00 f202 	mul.w	r2, r0, r2
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	440b      	add	r3, r1
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fbeb 	bl	8007460 <ld_dword>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c90:	617b      	str	r3, [r7, #20]
			break;
 8007c92:	e009      	b.n	8007ca8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c94:	2301      	movs	r3, #1
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	e006      	b.n	8007ca8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c9a:	bf00      	nop
 8007c9c:	e004      	b.n	8007ca8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c9e:	bf00      	nop
 8007ca0:	e002      	b.n	8007ca8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007ca6:	bf00      	nop
		}
	}

	return val;
 8007ca8:	697b      	ldr	r3, [r7, #20]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cb2:	b590      	push	{r4, r7, lr}
 8007cb4:	b089      	sub	sp, #36	; 0x24
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	60f8      	str	r0, [r7, #12]
 8007cba:	60b9      	str	r1, [r7, #8]
 8007cbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	f240 8102 	bls.w	8007ece <put_fat+0x21c>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	68ba      	ldr	r2, [r7, #8]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	f080 80fc 	bcs.w	8007ece <put_fat+0x21c>
		switch (fs->fs_type) {
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	f000 80b6 	beq.w	8007e4c <put_fat+0x19a>
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	f300 80fd 	bgt.w	8007ee0 <put_fat+0x22e>
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d003      	beq.n	8007cf2 <put_fat+0x40>
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	f000 8083 	beq.w	8007df6 <put_fat+0x144>
 8007cf0:	e0f6      	b.n	8007ee0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	085b      	lsrs	r3, r3, #1
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	899b      	ldrh	r3, [r3, #12]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d10:	4413      	add	r3, r2
 8007d12:	4619      	mov	r1, r3
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff fe3b 	bl	8007990 <move_window>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d1e:	7ffb      	ldrb	r3, [r7, #31]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 80d6 	bne.w	8007ed2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	61ba      	str	r2, [r7, #24]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	8992      	ldrh	r2, [r2, #12]
 8007d36:	fbb3 f0f2 	udiv	r0, r3, r2
 8007d3a:	fb00 f202 	mul.w	r2, r0, r2
 8007d3e:	1a9b      	subs	r3, r3, r2
 8007d40:	440b      	add	r3, r1
 8007d42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00d      	beq.n	8007d6a <put_fat+0xb8>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	f003 030f 	and.w	r3, r3, #15
 8007d58:	b25a      	sxtb	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	4313      	orrs	r3, r2
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	e001      	b.n	8007d6e <put_fat+0xbc>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2201      	movs	r2, #1
 8007d76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	899b      	ldrh	r3, [r3, #12]
 8007d80:	4619      	mov	r1, r3
 8007d82:	69bb      	ldr	r3, [r7, #24]
 8007d84:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d88:	4413      	add	r3, r2
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fdff 	bl	8007990 <move_window>
 8007d92:	4603      	mov	r3, r0
 8007d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d96:	7ffb      	ldrb	r3, [r7, #31]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	f040 809c 	bne.w	8007ed6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	899b      	ldrh	r3, [r3, #12]
 8007da8:	461a      	mov	r2, r3
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	fbb3 f0f2 	udiv	r0, r3, r2
 8007db0:	fb00 f202 	mul.w	r2, r0, r2
 8007db4:	1a9b      	subs	r3, r3, r2
 8007db6:	440b      	add	r3, r1
 8007db8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 0301 	and.w	r3, r3, #1
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <put_fat+0x11a>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	091b      	lsrs	r3, r3, #4
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	e00e      	b.n	8007dea <put_fat+0x138>
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	b25b      	sxtb	r3, r3
 8007dd2:	f023 030f 	bic.w	r3, r3, #15
 8007dd6:	b25a      	sxtb	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	b25b      	sxtb	r3, r3
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	b25b      	sxtb	r3, r3
 8007de4:	4313      	orrs	r3, r2
 8007de6:	b25b      	sxtb	r3, r3
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	697a      	ldr	r2, [r7, #20]
 8007dec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	70da      	strb	r2, [r3, #3]
			break;
 8007df4:	e074      	b.n	8007ee0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	899b      	ldrh	r3, [r3, #12]
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	4619      	mov	r1, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e0a:	4413      	add	r3, r2
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fdbe 	bl	8007990 <move_window>
 8007e14:	4603      	mov	r3, r0
 8007e16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e18:	7ffb      	ldrb	r3, [r7, #31]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d15d      	bne.n	8007eda <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	005b      	lsls	r3, r3, #1
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	8992      	ldrh	r2, [r2, #12]
 8007e2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e30:	fb00 f202 	mul.w	r2, r0, r2
 8007e34:	1a9b      	subs	r3, r3, r2
 8007e36:	440b      	add	r3, r1
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	b292      	uxth	r2, r2
 8007e3c:	4611      	mov	r1, r2
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff fb31 	bl	80074a6 <st_word>
			fs->wflag = 1;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2201      	movs	r2, #1
 8007e48:	70da      	strb	r2, [r3, #3]
			break;
 8007e4a:	e049      	b.n	8007ee0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	899b      	ldrh	r3, [r3, #12]
 8007e54:	089b      	lsrs	r3, r3, #2
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e60:	4413      	add	r3, r2
 8007e62:	4619      	mov	r1, r3
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f7ff fd93 	bl	8007990 <move_window>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e6e:	7ffb      	ldrb	r3, [r7, #31]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d134      	bne.n	8007ede <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	8992      	ldrh	r2, [r2, #12]
 8007e88:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e8c:	fb00 f202 	mul.w	r2, r0, r2
 8007e90:	1a9b      	subs	r3, r3, r2
 8007e92:	440b      	add	r3, r1
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7ff fae3 	bl	8007460 <ld_dword>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ea0:	4323      	orrs	r3, r4
 8007ea2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	8992      	ldrh	r2, [r2, #12]
 8007eb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007eb6:	fb00 f202 	mul.w	r2, r0, r2
 8007eba:	1a9b      	subs	r3, r3, r2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	6879      	ldr	r1, [r7, #4]
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff fb0b 	bl	80074dc <st_dword>
			fs->wflag = 1;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	70da      	strb	r2, [r3, #3]
			break;
 8007ecc:	e008      	b.n	8007ee0 <put_fat+0x22e>
		}
	}
 8007ece:	bf00      	nop
 8007ed0:	e006      	b.n	8007ee0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8007ede:	bf00      	nop
	return res;
 8007ee0:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3724      	adds	r7, #36	; 0x24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd90      	pop	{r4, r7, pc}

08007eea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b088      	sub	sp, #32
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	60f8      	str	r0, [r7, #12]
 8007ef2:	60b9      	str	r1, [r7, #8]
 8007ef4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d904      	bls.n	8007f10 <remove_chain+0x26>
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d301      	bcc.n	8007f14 <remove_chain+0x2a>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e04b      	b.n	8007fac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	69b8      	ldr	r0, [r7, #24]
 8007f22:	f7ff fec6 	bl	8007cb2 <put_fat>
 8007f26:	4603      	mov	r3, r0
 8007f28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007f2a:	7ffb      	ldrb	r3, [r7, #31]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <remove_chain+0x4a>
 8007f30:	7ffb      	ldrb	r3, [r7, #31]
 8007f32:	e03b      	b.n	8007fac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff fde7 	bl	8007b0a <get_fat>
 8007f3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d031      	beq.n	8007fa8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <remove_chain+0x64>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e02e      	b.n	8007fac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f54:	d101      	bne.n	8007f5a <remove_chain+0x70>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e028      	b.n	8007fac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	69b8      	ldr	r0, [r7, #24]
 8007f60:	f7ff fea7 	bl	8007cb2 <put_fat>
 8007f64:	4603      	mov	r3, r0
 8007f66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f68:	7ffb      	ldrb	r3, [r7, #31]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <remove_chain+0x88>
 8007f6e:	7ffb      	ldrb	r3, [r7, #31]
 8007f70:	e01c      	b.n	8007fac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	69db      	ldr	r3, [r3, #28]
 8007f7a:	3b02      	subs	r3, #2
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d20b      	bcs.n	8007f98 <remove_chain+0xae>
			fs->free_clst++;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	1c5a      	adds	r2, r3, #1
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	791b      	ldrb	r3, [r3, #4]
 8007f8e:	f043 0301 	orr.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d3c6      	bcc.n	8007f34 <remove_chain+0x4a>
 8007fa6:	e000      	b.n	8007faa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007fa8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3720      	adds	r7, #32
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10d      	bne.n	8007fe6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <create_chain+0x2c>
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	69db      	ldr	r3, [r3, #28]
 8007fda:	69ba      	ldr	r2, [r7, #24]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d31b      	bcc.n	8008018 <create_chain+0x64>
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	61bb      	str	r3, [r7, #24]
 8007fe4:	e018      	b.n	8008018 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff fd8e 	bl	8007b0a <get_fat>
 8007fee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d801      	bhi.n	8007ffa <create_chain+0x46>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e070      	b.n	80080dc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d101      	bne.n	8008006 <create_chain+0x52>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e06a      	b.n	80080dc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	d201      	bcs.n	8008014 <create_chain+0x60>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	e063      	b.n	80080dc <create_chain+0x128>
		scl = clst;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	3301      	adds	r3, #1
 8008020:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	429a      	cmp	r2, r3
 800802a:	d307      	bcc.n	800803c <create_chain+0x88>
				ncl = 2;
 800802c:	2302      	movs	r3, #2
 800802e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	429a      	cmp	r2, r3
 8008036:	d901      	bls.n	800803c <create_chain+0x88>
 8008038:	2300      	movs	r3, #0
 800803a:	e04f      	b.n	80080dc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800803c:	69f9      	ldr	r1, [r7, #28]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff fd63 	bl	8007b0a <get_fat>
 8008044:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00e      	beq.n	800806a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d003      	beq.n	800805a <create_chain+0xa6>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008058:	d101      	bne.n	800805e <create_chain+0xaa>
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	e03e      	b.n	80080dc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800805e:	69fa      	ldr	r2, [r7, #28]
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	429a      	cmp	r2, r3
 8008064:	d1da      	bne.n	800801c <create_chain+0x68>
 8008066:	2300      	movs	r3, #0
 8008068:	e038      	b.n	80080dc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800806a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	69f9      	ldr	r1, [r7, #28]
 8008072:	6938      	ldr	r0, [r7, #16]
 8008074:	f7ff fe1d 	bl	8007cb2 <put_fat>
 8008078:	4603      	mov	r3, r0
 800807a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800807c:	7dfb      	ldrb	r3, [r7, #23]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <create_chain+0xe2>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d006      	beq.n	8008096 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008088:	69fa      	ldr	r2, [r7, #28]
 800808a:	6839      	ldr	r1, [r7, #0]
 800808c:	6938      	ldr	r0, [r7, #16]
 800808e:	f7ff fe10 	bl	8007cb2 <put_fat>
 8008092:	4603      	mov	r3, r0
 8008094:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d116      	bne.n	80080ca <create_chain+0x116>
		fs->last_clst = ncl;
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	69fa      	ldr	r2, [r7, #28]
 80080a0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	699a      	ldr	r2, [r3, #24]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	69db      	ldr	r3, [r3, #28]
 80080aa:	3b02      	subs	r3, #2
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d804      	bhi.n	80080ba <create_chain+0x106>
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	1e5a      	subs	r2, r3, #1
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	791b      	ldrb	r3, [r3, #4]
 80080be:	f043 0301 	orr.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	711a      	strb	r2, [r3, #4]
 80080c8:	e007      	b.n	80080da <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d102      	bne.n	80080d6 <create_chain+0x122>
 80080d0:	f04f 33ff 	mov.w	r3, #4294967295
 80080d4:	e000      	b.n	80080d8 <create_chain+0x124>
 80080d6:	2301      	movs	r3, #1
 80080d8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80080da:	69fb      	ldr	r3, [r7, #28]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f8:	3304      	adds	r3, #4
 80080fa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	899b      	ldrh	r3, [r3, #12]
 8008100:	461a      	mov	r2, r3
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	fbb3 f3f2 	udiv	r3, r3, r2
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	8952      	ldrh	r2, [r2, #10]
 800810c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008110:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1d1a      	adds	r2, r3, #4
 8008116:	613a      	str	r2, [r7, #16]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <clmt_clust+0x42>
 8008122:	2300      	movs	r3, #0
 8008124:	e010      	b.n	8008148 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008126:	697a      	ldr	r2, [r7, #20]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	d307      	bcc.n	800813e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	617b      	str	r3, [r7, #20]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	3304      	adds	r3, #4
 800813a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800813c:	e7e9      	b.n	8008112 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800813e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	4413      	add	r3, r2
}
 8008148:	4618      	mov	r0, r3
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800816a:	d204      	bcs.n	8008176 <dir_sdi+0x22>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	f003 031f 	and.w	r3, r3, #31
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008176:	2302      	movs	r3, #2
 8008178:	e071      	b.n	800825e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	689b      	ldr	r3, [r3, #8]
 8008184:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <dir_sdi+0x46>
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	2b02      	cmp	r3, #2
 8008192:	d902      	bls.n	800819a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10c      	bne.n	80081ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	095b      	lsrs	r3, r3, #5
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	8912      	ldrh	r2, [r2, #8]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d301      	bcc.n	80081b0 <dir_sdi+0x5c>
 80081ac:	2302      	movs	r3, #2
 80081ae:	e056      	b.n	800825e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	61da      	str	r2, [r3, #28]
 80081b8:	e02d      	b.n	8008216 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	895b      	ldrh	r3, [r3, #10]
 80081be:	461a      	mov	r2, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	899b      	ldrh	r3, [r3, #12]
 80081c4:	fb02 f303 	mul.w	r3, r2, r3
 80081c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80081ca:	e019      	b.n	8008200 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6979      	ldr	r1, [r7, #20]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7ff fc9a 	bl	8007b0a <get_fat>
 80081d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081de:	d101      	bne.n	80081e4 <dir_sdi+0x90>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e03c      	b.n	800825e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d904      	bls.n	80081f4 <dir_sdi+0xa0>
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d301      	bcc.n	80081f8 <dir_sdi+0xa4>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e032      	b.n	800825e <dir_sdi+0x10a>
			ofs -= csz;
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	429a      	cmp	r2, r3
 8008206:	d2e1      	bcs.n	80081cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008208:	6979      	ldr	r1, [r7, #20]
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f7ff fc5e 	bl	8007acc <clust2sect>
 8008210:	4602      	mov	r2, r0
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <dir_sdi+0xd4>
 8008224:	2302      	movs	r3, #2
 8008226:	e01a      	b.n	800825e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	69da      	ldr	r2, [r3, #28]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	899b      	ldrh	r3, [r3, #12]
 8008230:	4619      	mov	r1, r3
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	fbb3 f3f1 	udiv	r3, r3, r1
 8008238:	441a      	add	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	899b      	ldrh	r3, [r3, #12]
 8008248:	461a      	mov	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	fbb3 f0f2 	udiv	r0, r3, r2
 8008250:	fb00 f202 	mul.w	r2, r0, r2
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	18ca      	adds	r2, r1, r3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3718      	adds	r7, #24
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008266:	b580      	push	{r7, lr}
 8008268:	b086      	sub	sp, #24
 800826a:	af00      	add	r7, sp, #0
 800826c:	6078      	str	r0, [r7, #4]
 800826e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
 800827a:	3320      	adds	r3, #32
 800827c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <dir_next+0x28>
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800828c:	d301      	bcc.n	8008292 <dir_next+0x2c>
 800828e:	2304      	movs	r3, #4
 8008290:	e0bb      	b.n	800840a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	899b      	ldrh	r3, [r3, #12]
 8008296:	461a      	mov	r2, r3
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	fbb3 f1f2 	udiv	r1, r3, r2
 800829e:	fb01 f202 	mul.w	r2, r1, r2
 80082a2:	1a9b      	subs	r3, r3, r2
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f040 809d 	bne.w	80083e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	69db      	ldr	r3, [r3, #28]
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	095b      	lsrs	r3, r3, #5
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	8912      	ldrh	r2, [r2, #8]
 80082c4:	4293      	cmp	r3, r2
 80082c6:	f0c0 808d 	bcc.w	80083e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	61da      	str	r2, [r3, #28]
 80082d0:	2304      	movs	r3, #4
 80082d2:	e09a      	b.n	800840a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	899b      	ldrh	r3, [r3, #12]
 80082d8:	461a      	mov	r2, r3
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	8952      	ldrh	r2, [r2, #10]
 80082e4:	3a01      	subs	r2, #1
 80082e6:	4013      	ands	r3, r2
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d17b      	bne.n	80083e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	4619      	mov	r1, r3
 80082f4:	4610      	mov	r0, r2
 80082f6:	f7ff fc08 	bl	8007b0a <get_fat>
 80082fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d801      	bhi.n	8008306 <dir_next+0xa0>
 8008302:	2302      	movs	r3, #2
 8008304:	e081      	b.n	800840a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d101      	bne.n	8008312 <dir_next+0xac>
 800830e:	2301      	movs	r3, #1
 8008310:	e07b      	b.n	800840a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	697a      	ldr	r2, [r7, #20]
 8008318:	429a      	cmp	r2, r3
 800831a:	d359      	bcc.n	80083d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d104      	bne.n	800832c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	61da      	str	r2, [r3, #28]
 8008328:	2304      	movs	r3, #4
 800832a:	e06e      	b.n	800840a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	4619      	mov	r1, r3
 8008334:	4610      	mov	r0, r2
 8008336:	f7ff fe3d 	bl	8007fb4 <create_chain>
 800833a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <dir_next+0xe0>
 8008342:	2307      	movs	r3, #7
 8008344:	e061      	b.n	800840a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <dir_next+0xea>
 800834c:	2302      	movs	r3, #2
 800834e:	e05c      	b.n	800840a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008356:	d101      	bne.n	800835c <dir_next+0xf6>
 8008358:	2301      	movs	r3, #1
 800835a:	e056      	b.n	800840a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff fad3 	bl	8007908 <sync_window>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d001      	beq.n	800836c <dir_next+0x106>
 8008368:	2301      	movs	r3, #1
 800836a:	e04e      	b.n	800840a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	899b      	ldrh	r3, [r3, #12]
 8008376:	461a      	mov	r2, r3
 8008378:	2100      	movs	r1, #0
 800837a:	f7ff f8fc 	bl	8007576 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]
 8008382:	6979      	ldr	r1, [r7, #20]
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7ff fba1 	bl	8007acc <clust2sect>
 800838a:	4602      	mov	r2, r0
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	635a      	str	r2, [r3, #52]	; 0x34
 8008390:	e012      	b.n	80083b8 <dir_next+0x152>
						fs->wflag = 1;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f7ff fab5 	bl	8007908 <sync_window>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <dir_next+0x142>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e030      	b.n	800840a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	3301      	adds	r3, #1
 80083ac:	613b      	str	r3, [r7, #16]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	635a      	str	r2, [r3, #52]	; 0x34
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	895b      	ldrh	r3, [r3, #10]
 80083bc:	461a      	mov	r2, r3
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d3e6      	bcc.n	8008392 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	1ad2      	subs	r2, r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80083d6:	6979      	ldr	r1, [r7, #20]
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7ff fb77 	bl	8007acc <clust2sect>
 80083de:	4602      	mov	r2, r0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	899b      	ldrh	r3, [r3, #12]
 80083f4:	461a      	mov	r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80083fc:	fb00 f202 	mul.w	r2, r0, r2
 8008400:	1a9b      	subs	r3, r3, r2
 8008402:	18ca      	adds	r2, r1, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}

08008412 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008412:	b580      	push	{r7, lr}
 8008414:	b086      	sub	sp, #24
 8008416:	af00      	add	r7, sp, #0
 8008418:	6078      	str	r0, [r7, #4]
 800841a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff fe95 	bl	8008154 <dir_sdi>
 800842a:	4603      	mov	r3, r0
 800842c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800842e:	7dfb      	ldrb	r3, [r7, #23]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d12b      	bne.n	800848c <dir_alloc+0x7a>
		n = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	4619      	mov	r1, r3
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff faa6 	bl	8007990 <move_window>
 8008444:	4603      	mov	r3, r0
 8008446:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008448:	7dfb      	ldrb	r3, [r7, #23]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d11d      	bne.n	800848a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2be5      	cmp	r3, #229	; 0xe5
 8008456:	d004      	beq.n	8008462 <dir_alloc+0x50>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d107      	bne.n	8008472 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	3301      	adds	r3, #1
 8008466:	613b      	str	r3, [r7, #16]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	429a      	cmp	r2, r3
 800846e:	d102      	bne.n	8008476 <dir_alloc+0x64>
 8008470:	e00c      	b.n	800848c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008476:	2101      	movs	r1, #1
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff fef4 	bl	8008266 <dir_next>
 800847e:	4603      	mov	r3, r0
 8008480:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008482:	7dfb      	ldrb	r3, [r7, #23]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0d7      	beq.n	8008438 <dir_alloc+0x26>
 8008488:	e000      	b.n	800848c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800848a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d101      	bne.n	8008496 <dir_alloc+0x84>
 8008492:	2307      	movs	r3, #7
 8008494:	75fb      	strb	r3, [r7, #23]
	return res;
 8008496:	7dfb      	ldrb	r3, [r7, #23]
}
 8008498:	4618      	mov	r0, r3
 800849a:	3718      	adds	r7, #24
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	331a      	adds	r3, #26
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe ffbe 	bl	8007430 <ld_word>
 80084b4:	4603      	mov	r3, r0
 80084b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d109      	bne.n	80084d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	3314      	adds	r3, #20
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe ffb3 	bl	8007430 <ld_word>
 80084ca:	4603      	mov	r3, r0
 80084cc:	041b      	lsls	r3, r3, #16
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80084d4:	68fb      	ldr	r3, [r7, #12]
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	331a      	adds	r3, #26
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	b292      	uxth	r2, r2
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fe ffd6 	bl	80074a6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d109      	bne.n	8008516 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f103 0214 	add.w	r2, r3, #20
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	b29b      	uxth	r3, r3
 800850e:	4619      	mov	r1, r3
 8008510:	4610      	mov	r0, r2
 8008512:	f7fe ffc8 	bl	80074a6 <st_word>
	}
}
 8008516:	bf00      	nop
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
	...

08008520 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8008520:	b590      	push	{r4, r7, lr}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	331a      	adds	r3, #26
 800852e:	4618      	mov	r0, r3
 8008530:	f7fe ff7e 	bl	8007430 <ld_word>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <cmp_lfn+0x1e>
 800853a:	2300      	movs	r3, #0
 800853c:	e059      	b.n	80085f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	4613      	mov	r3, r2
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	4413      	add	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008554:	2301      	movs	r3, #1
 8008556:	81fb      	strh	r3, [r7, #14]
 8008558:	2300      	movs	r3, #0
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	e033      	b.n	80085c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800855e:	4a27      	ldr	r2, [pc, #156]	; (80085fc <cmp_lfn+0xdc>)
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	4413      	add	r3, r2
 800856c:	4618      	mov	r0, r3
 800856e:	f7fe ff5f 	bl	8007430 <ld_word>
 8008572:	4603      	mov	r3, r0
 8008574:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008576:	89fb      	ldrh	r3, [r7, #14]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d01a      	beq.n	80085b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2bfe      	cmp	r3, #254	; 0xfe
 8008580:	d812      	bhi.n	80085a8 <cmp_lfn+0x88>
 8008582:	89bb      	ldrh	r3, [r7, #12]
 8008584:	4618      	mov	r0, r3
 8008586:	f002 fc85 	bl	800ae94 <ff_wtoupper>
 800858a:	4603      	mov	r3, r0
 800858c:	461c      	mov	r4, r3
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	1c5a      	adds	r2, r3, #1
 8008592:	617a      	str	r2, [r7, #20]
 8008594:	005b      	lsls	r3, r3, #1
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	4413      	add	r3, r2
 800859a:	881b      	ldrh	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f002 fc79 	bl	800ae94 <ff_wtoupper>
 80085a2:	4603      	mov	r3, r0
 80085a4:	429c      	cmp	r4, r3
 80085a6:	d001      	beq.n	80085ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80085a8:	2300      	movs	r3, #0
 80085aa:	e022      	b.n	80085f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80085ac:	89bb      	ldrh	r3, [r7, #12]
 80085ae:	81fb      	strh	r3, [r7, #14]
 80085b0:	e006      	b.n	80085c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80085b2:	89bb      	ldrh	r3, [r7, #12]
 80085b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d001      	beq.n	80085c0 <cmp_lfn+0xa0>
 80085bc:	2300      	movs	r3, #0
 80085be:	e018      	b.n	80085f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	3301      	adds	r3, #1
 80085c4:	613b      	str	r3, [r7, #16]
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	2b0c      	cmp	r3, #12
 80085ca:	d9c8      	bls.n	800855e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <cmp_lfn+0xd0>
 80085d8:	89fb      	ldrh	r3, [r7, #14]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d008      	beq.n	80085f0 <cmp_lfn+0xd0>
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	4413      	add	r3, r2
 80085e6:	881b      	ldrh	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <cmp_lfn+0xd0>
 80085ec:	2300      	movs	r3, #0
 80085ee:	e000      	b.n	80085f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80085f0:	2301      	movs	r3, #1
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	371c      	adds	r7, #28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd90      	pop	{r4, r7, pc}
 80085fa:	bf00      	nop
 80085fc:	08015e80 	.word	0x08015e80

08008600 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	331a      	adds	r3, #26
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe ff0e 	bl	8007430 <ld_word>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <pick_lfn+0x1e>
 800861a:	2300      	movs	r3, #0
 800861c:	e04d      	b.n	80086ba <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008626:	1e5a      	subs	r2, r3, #1
 8008628:	4613      	mov	r3, r2
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008634:	2301      	movs	r3, #1
 8008636:	81fb      	strh	r3, [r7, #14]
 8008638:	2300      	movs	r3, #0
 800863a:	613b      	str	r3, [r7, #16]
 800863c:	e028      	b.n	8008690 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800863e:	4a21      	ldr	r2, [pc, #132]	; (80086c4 <pick_lfn+0xc4>)
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	4413      	add	r3, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f7fe feef 	bl	8007430 <ld_word>
 8008652:	4603      	mov	r3, r0
 8008654:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008656:	89fb      	ldrh	r3, [r7, #14]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00f      	beq.n	800867c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2bfe      	cmp	r3, #254	; 0xfe
 8008660:	d901      	bls.n	8008666 <pick_lfn+0x66>
 8008662:	2300      	movs	r3, #0
 8008664:	e029      	b.n	80086ba <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8008666:	89bb      	ldrh	r3, [r7, #12]
 8008668:	81fb      	strh	r3, [r7, #14]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	1c5a      	adds	r2, r3, #1
 800866e:	617a      	str	r2, [r7, #20]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	4413      	add	r3, r2
 8008676:	89fa      	ldrh	r2, [r7, #14]
 8008678:	801a      	strh	r2, [r3, #0]
 800867a:	e006      	b.n	800868a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800867c:	89bb      	ldrh	r3, [r7, #12]
 800867e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008682:	4293      	cmp	r3, r2
 8008684:	d001      	beq.n	800868a <pick_lfn+0x8a>
 8008686:	2300      	movs	r3, #0
 8008688:	e017      	b.n	80086ba <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	3301      	adds	r3, #1
 800868e:	613b      	str	r3, [r7, #16]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b0c      	cmp	r3, #12
 8008694:	d9d3      	bls.n	800863e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2bfe      	cmp	r3, #254	; 0xfe
 80086a6:	d901      	bls.n	80086ac <pick_lfn+0xac>
 80086a8:	2300      	movs	r3, #0
 80086aa:	e006      	b.n	80086ba <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	005b      	lsls	r3, r3, #1
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	4413      	add	r3, r2
 80086b4:	2200      	movs	r2, #0
 80086b6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80086b8:	2301      	movs	r3, #1
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	08015e80 	.word	0x08015e80

080086c8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b088      	sub	sp, #32
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	4611      	mov	r1, r2
 80086d4:	461a      	mov	r2, r3
 80086d6:	460b      	mov	r3, r1
 80086d8:	71fb      	strb	r3, [r7, #7]
 80086da:	4613      	mov	r3, r2
 80086dc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	330d      	adds	r3, #13
 80086e2:	79ba      	ldrb	r2, [r7, #6]
 80086e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	330b      	adds	r3, #11
 80086ea:	220f      	movs	r2, #15
 80086ec:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	330c      	adds	r3, #12
 80086f2:	2200      	movs	r2, #0
 80086f4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	331a      	adds	r3, #26
 80086fa:	2100      	movs	r1, #0
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fe fed2 	bl	80074a6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008702:	79fb      	ldrb	r3, [r7, #7]
 8008704:	1e5a      	subs	r2, r3, #1
 8008706:	4613      	mov	r3, r2
 8008708:	005b      	lsls	r3, r3, #1
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	82fb      	strh	r3, [r7, #22]
 8008716:	2300      	movs	r3, #0
 8008718:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800871a:	8afb      	ldrh	r3, [r7, #22]
 800871c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008720:	4293      	cmp	r3, r2
 8008722:	d007      	beq.n	8008734 <put_lfn+0x6c>
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	1c5a      	adds	r2, r3, #1
 8008728:	61fa      	str	r2, [r7, #28]
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008734:	4a17      	ldr	r2, [pc, #92]	; (8008794 <put_lfn+0xcc>)
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	4413      	add	r3, r2
 800873a:	781b      	ldrb	r3, [r3, #0]
 800873c:	461a      	mov	r2, r3
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	4413      	add	r3, r2
 8008742:	8afa      	ldrh	r2, [r7, #22]
 8008744:	4611      	mov	r1, r2
 8008746:	4618      	mov	r0, r3
 8008748:	f7fe fead 	bl	80074a6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800874c:	8afb      	ldrh	r3, [r7, #22]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d102      	bne.n	8008758 <put_lfn+0x90>
 8008752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008756:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	3301      	adds	r3, #1
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b0c      	cmp	r3, #12
 8008762:	d9da      	bls.n	800871a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008764:	8afb      	ldrh	r3, [r7, #22]
 8008766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800876a:	4293      	cmp	r3, r2
 800876c:	d006      	beq.n	800877c <put_lfn+0xb4>
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	005b      	lsls	r3, r3, #1
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d103      	bne.n	8008784 <put_lfn+0xbc>
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008782:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	79fa      	ldrb	r2, [r7, #7]
 8008788:	701a      	strb	r2, [r3, #0]
}
 800878a:	bf00      	nop
 800878c:	3720      	adds	r7, #32
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	08015e80 	.word	0x08015e80

08008798 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08c      	sub	sp, #48	; 0x30
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80087a6:	220b      	movs	r2, #11
 80087a8:	68b9      	ldr	r1, [r7, #8]
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	f7fe fec2 	bl	8007534 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d92b      	bls.n	800880e <gen_numname+0x76>
		sr = seq;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80087ba:	e022      	b.n	8008802 <gen_numname+0x6a>
			wc = *lfn++;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	1c9a      	adds	r2, r3, #2
 80087c0:	607a      	str	r2, [r7, #4]
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80087c6:	2300      	movs	r3, #0
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80087ca:	e017      	b.n	80087fc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	005a      	lsls	r2, r3, #1
 80087d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	4413      	add	r3, r2
 80087d8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80087da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80087e0:	69fb      	ldr	r3, [r7, #28]
 80087e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d005      	beq.n	80087f6 <gen_numname+0x5e>
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80087f0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80087f4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80087f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f8:	3301      	adds	r3, #1
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	2b0f      	cmp	r3, #15
 8008800:	d9e4      	bls.n	80087cc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1d8      	bne.n	80087bc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800880e:	2307      	movs	r3, #7
 8008810:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	b2db      	uxtb	r3, r3
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	b2db      	uxtb	r3, r3
 800881c:	3330      	adds	r3, #48	; 0x30
 800881e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8008822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008826:	2b39      	cmp	r3, #57	; 0x39
 8008828:	d904      	bls.n	8008834 <gen_numname+0x9c>
 800882a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800882e:	3307      	adds	r3, #7
 8008830:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	1e5a      	subs	r2, r3, #1
 8008838:	62ba      	str	r2, [r7, #40]	; 0x28
 800883a:	3330      	adds	r3, #48	; 0x30
 800883c:	443b      	add	r3, r7
 800883e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008842:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	091b      	lsrs	r3, r3, #4
 800884a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1df      	bne.n	8008812 <gen_numname+0x7a>
	ns[i] = '~';
 8008852:	f107 0214 	add.w	r2, r7, #20
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	4413      	add	r3, r2
 800885a:	227e      	movs	r2, #126	; 0x7e
 800885c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800885e:	2300      	movs	r3, #0
 8008860:	627b      	str	r3, [r7, #36]	; 0x24
 8008862:	e002      	b.n	800886a <gen_numname+0xd2>
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	3301      	adds	r3, #1
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
 800886a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	429a      	cmp	r2, r3
 8008870:	d205      	bcs.n	800887e <gen_numname+0xe6>
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	4413      	add	r3, r2
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b20      	cmp	r3, #32
 800887c:	d1f2      	bne.n	8008864 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800887e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008880:	2b07      	cmp	r3, #7
 8008882:	d807      	bhi.n	8008894 <gen_numname+0xfc>
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	62ba      	str	r2, [r7, #40]	; 0x28
 800888a:	3330      	adds	r3, #48	; 0x30
 800888c:	443b      	add	r3, r7
 800888e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008892:	e000      	b.n	8008896 <gen_numname+0xfe>
 8008894:	2120      	movs	r1, #32
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	1c5a      	adds	r2, r3, #1
 800889a:	627a      	str	r2, [r7, #36]	; 0x24
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	460a      	mov	r2, r1
 80088a2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	2b07      	cmp	r3, #7
 80088a8:	d9e9      	bls.n	800887e <gen_numname+0xe6>
}
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	3730      	adds	r7, #48	; 0x30
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80088c0:	230b      	movs	r3, #11
 80088c2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80088c4:	7bfb      	ldrb	r3, [r7, #15]
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	0852      	lsrs	r2, r2, #1
 80088ca:	01db      	lsls	r3, r3, #7
 80088cc:	4313      	orrs	r3, r2
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	1c59      	adds	r1, r3, #1
 80088d4:	6079      	str	r1, [r7, #4]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	4413      	add	r3, r2
 80088da:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	3b01      	subs	r3, #1
 80088e0:	60bb      	str	r3, [r7, #8]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1ed      	bne.n	80088c4 <sum_sfn+0x10>
	return sum;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8008900:	2304      	movs	r3, #4
 8008902:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800890a:	23ff      	movs	r3, #255	; 0xff
 800890c:	757b      	strb	r3, [r7, #21]
 800890e:	23ff      	movs	r3, #255	; 0xff
 8008910:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8008912:	e081      	b.n	8008a18 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	4619      	mov	r1, r3
 800891a:	6938      	ldr	r0, [r7, #16]
 800891c:	f7ff f838 	bl	8007990 <move_window>
 8008920:	4603      	mov	r3, r0
 8008922:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008924:	7dfb      	ldrb	r3, [r7, #23]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d17c      	bne.n	8008a24 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8008932:	7dbb      	ldrb	r3, [r7, #22]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8008938:	2304      	movs	r3, #4
 800893a:	75fb      	strb	r3, [r7, #23]
 800893c:	e077      	b.n	8008a2e <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	330b      	adds	r3, #11
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800894a:	73fb      	strb	r3, [r7, #15]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	7bfa      	ldrb	r2, [r7, #15]
 8008950:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8008952:	7dbb      	ldrb	r3, [r7, #22]
 8008954:	2be5      	cmp	r3, #229	; 0xe5
 8008956:	d00e      	beq.n	8008976 <dir_read+0x80>
 8008958:	7dbb      	ldrb	r3, [r7, #22]
 800895a:	2b2e      	cmp	r3, #46	; 0x2e
 800895c:	d00b      	beq.n	8008976 <dir_read+0x80>
 800895e:	7bfb      	ldrb	r3, [r7, #15]
 8008960:	f023 0320 	bic.w	r3, r3, #32
 8008964:	2b08      	cmp	r3, #8
 8008966:	bf0c      	ite	eq
 8008968:	2301      	moveq	r3, #1
 800896a:	2300      	movne	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	461a      	mov	r2, r3
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	4293      	cmp	r3, r2
 8008974:	d002      	beq.n	800897c <dir_read+0x86>
				ord = 0xFF;
 8008976:	23ff      	movs	r3, #255	; 0xff
 8008978:	757b      	strb	r3, [r7, #21]
 800897a:	e044      	b.n	8008a06 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	2b0f      	cmp	r3, #15
 8008980:	d12f      	bne.n	80089e2 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8008982:	7dbb      	ldrb	r3, [r7, #22]
 8008984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00d      	beq.n	80089a8 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	7b5b      	ldrb	r3, [r3, #13]
 8008992:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8008994:	7dbb      	ldrb	r3, [r7, #22]
 8008996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800899a:	75bb      	strb	r3, [r7, #22]
 800899c:	7dbb      	ldrb	r3, [r7, #22]
 800899e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	695a      	ldr	r2, [r3, #20]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80089a8:	7dba      	ldrb	r2, [r7, #22]
 80089aa:	7d7b      	ldrb	r3, [r7, #21]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d115      	bne.n	80089dc <dir_read+0xe6>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	330d      	adds	r3, #13
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	7d3a      	ldrb	r2, [r7, #20]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d10e      	bne.n	80089dc <dir_read+0xe6>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f7ff fe19 	bl	8008600 <pick_lfn>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <dir_read+0xe6>
 80089d4:	7d7b      	ldrb	r3, [r7, #21]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	e000      	b.n	80089de <dir_read+0xe8>
 80089dc:	23ff      	movs	r3, #255	; 0xff
 80089de:	757b      	strb	r3, [r7, #21]
 80089e0:	e011      	b.n	8008a06 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80089e2:	7d7b      	ldrb	r3, [r7, #21]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d109      	bne.n	80089fc <dir_read+0x106>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff ff61 	bl	80088b4 <sum_sfn>
 80089f2:	4603      	mov	r3, r0
 80089f4:	461a      	mov	r2, r3
 80089f6:	7d3b      	ldrb	r3, [r7, #20]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d015      	beq.n	8008a28 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008a02:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 8008a04:	e010      	b.n	8008a28 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8008a06:	2100      	movs	r1, #0
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f7ff fc2c 	bl	8008266 <dir_next>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <dir_read+0x136>
	while (dp->sect) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	69db      	ldr	r3, [r3, #28]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f47f af79 	bne.w	8008914 <dir_read+0x1e>
 8008a22:	e004      	b.n	8008a2e <dir_read+0x138>
		if (res != FR_OK) break;
 8008a24:	bf00      	nop
 8008a26:	e002      	b.n	8008a2e <dir_read+0x138>
					break;
 8008a28:	bf00      	nop
 8008a2a:	e000      	b.n	8008a2e <dir_read+0x138>
		if (res != FR_OK) break;
 8008a2c:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d002      	beq.n	8008a3a <dir_read+0x144>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	61da      	str	r2, [r3, #28]
	return res;
 8008a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3718      	adds	r7, #24
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008a52:	2100      	movs	r1, #0
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f7ff fb7d 	bl	8008154 <dir_sdi>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008a5e:	7dfb      	ldrb	r3, [r7, #23]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d001      	beq.n	8008a68 <dir_find+0x24>
 8008a64:	7dfb      	ldrb	r3, [r7, #23]
 8008a66:	e0a9      	b.n	8008bbc <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008a68:	23ff      	movs	r3, #255	; 0xff
 8008a6a:	753b      	strb	r3, [r7, #20]
 8008a6c:	7d3b      	ldrb	r3, [r7, #20]
 8008a6e:	757b      	strb	r3, [r7, #21]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f04f 32ff 	mov.w	r2, #4294967295
 8008a76:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	69db      	ldr	r3, [r3, #28]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6938      	ldr	r0, [r7, #16]
 8008a80:	f7fe ff86 	bl	8007990 <move_window>
 8008a84:	4603      	mov	r3, r0
 8008a86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f040 8090 	bne.w	8008bb0 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a1b      	ldr	r3, [r3, #32]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008a98:	7dbb      	ldrb	r3, [r7, #22]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d102      	bne.n	8008aa4 <dir_find+0x60>
 8008a9e:	2304      	movs	r3, #4
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e08a      	b.n	8008bba <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	330b      	adds	r3, #11
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab0:	73fb      	strb	r3, [r7, #15]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	7bfa      	ldrb	r2, [r7, #15]
 8008ab6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8008ab8:	7dbb      	ldrb	r3, [r7, #22]
 8008aba:	2be5      	cmp	r3, #229	; 0xe5
 8008abc:	d007      	beq.n	8008ace <dir_find+0x8a>
 8008abe:	7bfb      	ldrb	r3, [r7, #15]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d009      	beq.n	8008adc <dir_find+0x98>
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	2b0f      	cmp	r3, #15
 8008acc:	d006      	beq.n	8008adc <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008ace:	23ff      	movs	r3, #255	; 0xff
 8008ad0:	757b      	strb	r3, [r7, #21]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad8:	631a      	str	r2, [r3, #48]	; 0x30
 8008ada:	e05e      	b.n	8008b9a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	2b0f      	cmp	r3, #15
 8008ae0:	d136      	bne.n	8008b50 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d154      	bne.n	8008b9a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8008af0:	7dbb      	ldrb	r3, [r7, #22]
 8008af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00d      	beq.n	8008b16 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	7b5b      	ldrb	r3, [r3, #13]
 8008b00:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8008b02:	7dbb      	ldrb	r3, [r7, #22]
 8008b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b08:	75bb      	strb	r3, [r7, #22]
 8008b0a:	7dbb      	ldrb	r3, [r7, #22]
 8008b0c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008b16:	7dba      	ldrb	r2, [r7, #22]
 8008b18:	7d7b      	ldrb	r3, [r7, #21]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d115      	bne.n	8008b4a <dir_find+0x106>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	330d      	adds	r3, #13
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	7d3a      	ldrb	r2, [r7, #20]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d10e      	bne.n	8008b4a <dir_find+0x106>
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	691a      	ldr	r2, [r3, #16]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	4619      	mov	r1, r3
 8008b36:	4610      	mov	r0, r2
 8008b38:	f7ff fcf2 	bl	8008520 <cmp_lfn>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <dir_find+0x106>
 8008b42:	7d7b      	ldrb	r3, [r7, #21]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	e000      	b.n	8008b4c <dir_find+0x108>
 8008b4a:	23ff      	movs	r3, #255	; 0xff
 8008b4c:	757b      	strb	r3, [r7, #21]
 8008b4e:	e024      	b.n	8008b9a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008b50:	7d7b      	ldrb	r3, [r7, #21]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d109      	bne.n	8008b6a <dir_find+0x126>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7ff feaa 	bl	80088b4 <sum_sfn>
 8008b60:	4603      	mov	r3, r0
 8008b62:	461a      	mov	r2, r3
 8008b64:	7d3b      	ldrb	r3, [r7, #20]
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d024      	beq.n	8008bb4 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <dir_find+0x14a>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a18      	ldr	r0, [r3, #32]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	3324      	adds	r3, #36	; 0x24
 8008b80:	220b      	movs	r2, #11
 8008b82:	4619      	mov	r1, r3
 8008b84:	f7fe fd12 	bl	80075ac <mem_cmp>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d014      	beq.n	8008bb8 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008b8e:	23ff      	movs	r3, #255	; 0xff
 8008b90:	757b      	strb	r3, [r7, #21]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f04f 32ff 	mov.w	r2, #4294967295
 8008b98:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008b9a:	2100      	movs	r1, #0
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff fb62 	bl	8008266 <dir_next>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f43f af65 	beq.w	8008a78 <dir_find+0x34>
 8008bae:	e004      	b.n	8008bba <dir_find+0x176>
		if (res != FR_OK) break;
 8008bb0:	bf00      	nop
 8008bb2:	e002      	b.n	8008bba <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008bb4:	bf00      	nop
 8008bb6:	e000      	b.n	8008bba <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008bb8:	bf00      	nop

	return res;
 8008bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3718      	adds	r7, #24
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b08c      	sub	sp, #48	; 0x30
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008bd8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d001      	beq.n	8008be4 <dir_register+0x20>
 8008be0:	2306      	movs	r3, #6
 8008be2:	e0e0      	b.n	8008da6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8008be4:	2300      	movs	r3, #0
 8008be6:	627b      	str	r3, [r7, #36]	; 0x24
 8008be8:	e002      	b.n	8008bf0 <dir_register+0x2c>
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	3301      	adds	r3, #1
 8008bee:	627b      	str	r3, [r7, #36]	; 0x24
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf6:	005b      	lsls	r3, r3, #1
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f4      	bne.n	8008bea <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008c06:	f107 030c 	add.w	r3, r7, #12
 8008c0a:	220c      	movs	r2, #12
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fc91 	bl	8007534 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d032      	beq.n	8008c82 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2240      	movs	r2, #64	; 0x40
 8008c20:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8008c24:	2301      	movs	r3, #1
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c28:	e016      	b.n	8008c58 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	691a      	ldr	r2, [r3, #16]
 8008c34:	f107 010c 	add.w	r1, r7, #12
 8008c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3a:	f7ff fdad 	bl	8008798 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ff00 	bl	8008a44 <dir_find>
 8008c44:	4603      	mov	r3, r0
 8008c46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8008c4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8008c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c54:	3301      	adds	r3, #1
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5a:	2b63      	cmp	r3, #99	; 0x63
 8008c5c:	d9e5      	bls.n	8008c2a <dir_register+0x66>
 8008c5e:	e000      	b.n	8008c62 <dir_register+0x9e>
			if (res != FR_OK) break;
 8008c60:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8008c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c64:	2b64      	cmp	r3, #100	; 0x64
 8008c66:	d101      	bne.n	8008c6c <dir_register+0xa8>
 8008c68:	2307      	movs	r3, #7
 8008c6a:	e09c      	b.n	8008da6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d002      	beq.n	8008c7a <dir_register+0xb6>
 8008c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008c78:	e095      	b.n	8008da6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008c7a:	7dfa      	ldrb	r2, [r7, #23]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8008c82:	7dfb      	ldrb	r3, [r7, #23]
 8008c84:	f003 0302 	and.w	r3, r3, #2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <dir_register+0xd8>
 8008c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8e:	330c      	adds	r3, #12
 8008c90:	4a47      	ldr	r2, [pc, #284]	; (8008db0 <dir_register+0x1ec>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	089b      	lsrs	r3, r3, #2
 8008c98:	3301      	adds	r3, #1
 8008c9a:	e000      	b.n	8008c9e <dir_register+0xda>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008ca0:	6a39      	ldr	r1, [r7, #32]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7ff fbb5 	bl	8008412 <dir_alloc>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d148      	bne.n	8008d48 <dir_register+0x184>
 8008cb6:	6a3b      	ldr	r3, [r7, #32]
 8008cb8:	3b01      	subs	r3, #1
 8008cba:	623b      	str	r3, [r7, #32]
 8008cbc:	6a3b      	ldr	r3, [r7, #32]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d042      	beq.n	8008d48 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	6a3b      	ldr	r3, [r7, #32]
 8008cc8:	015b      	lsls	r3, r3, #5
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fa40 	bl	8008154 <dir_sdi>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d132      	bne.n	8008d48 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3324      	adds	r3, #36	; 0x24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7ff fde4 	bl	80088b4 <sum_sfn>
 8008cec:	4603      	mov	r3, r0
 8008cee:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	69f8      	ldr	r0, [r7, #28]
 8008cf8:	f7fe fe4a 	bl	8007990 <move_window>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8008d02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11d      	bne.n	8008d46 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	6918      	ldr	r0, [r3, #16]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a19      	ldr	r1, [r3, #32]
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	b2da      	uxtb	r2, r3
 8008d16:	7efb      	ldrb	r3, [r7, #27]
 8008d18:	f7ff fcd6 	bl	80086c8 <put_lfn>
				fs->wflag = 1;
 8008d1c:	69fb      	ldr	r3, [r7, #28]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8008d22:	2100      	movs	r1, #0
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff fa9e 	bl	8008266 <dir_next>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8008d30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d107      	bne.n	8008d48 <dir_register+0x184>
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	623b      	str	r3, [r7, #32]
 8008d3e:	6a3b      	ldr	r3, [r7, #32]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1d5      	bne.n	8008cf0 <dir_register+0x12c>
 8008d44:	e000      	b.n	8008d48 <dir_register+0x184>
				if (res != FR_OK) break;
 8008d46:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d128      	bne.n	8008da2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	4619      	mov	r1, r3
 8008d56:	69f8      	ldr	r0, [r7, #28]
 8008d58:	f7fe fe1a 	bl	8007990 <move_window>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8008d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d11b      	bne.n	8008da2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	2100      	movs	r1, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe fbff 	bl	8007576 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6a18      	ldr	r0, [r3, #32]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	3324      	adds	r3, #36	; 0x24
 8008d80:	220b      	movs	r2, #11
 8008d82:	4619      	mov	r1, r3
 8008d84:	f7fe fbd6 	bl	8007534 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	330c      	adds	r3, #12
 8008d94:	f002 0218 	and.w	r2, r2, #24
 8008d98:	b2d2      	uxtb	r2, r2
 8008d9a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3730      	adds	r7, #48	; 0x30
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	4ec4ec4f 	.word	0x4ec4ec4f

08008db4 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dd0:	d007      	beq.n	8008de2 <dir_remove+0x2e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff f9bb 	bl	8008154 <dir_sdi>
 8008dde:	4603      	mov	r3, r0
 8008de0:	e000      	b.n	8008de4 <dir_remove+0x30>
 8008de2:	2300      	movs	r3, #0
 8008de4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008de6:	7dfb      	ldrb	r3, [r7, #23]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d128      	bne.n	8008e3e <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	69db      	ldr	r3, [r3, #28]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6938      	ldr	r0, [r7, #16]
 8008df4:	f7fe fdcc 	bl	8007990 <move_window>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008dfc:	7dfb      	ldrb	r3, [r7, #23]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d115      	bne.n	8008e2e <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a1b      	ldr	r3, [r3, #32]
 8008e06:	22e5      	movs	r2, #229	; 0xe5
 8008e08:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	695b      	ldr	r3, [r3, #20]
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d90b      	bls.n	8008e32 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8008e1a:	2100      	movs	r1, #0
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff fa22 	bl	8008266 <dir_next>
 8008e22:	4603      	mov	r3, r0
 8008e24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d0df      	beq.n	8008dec <dir_remove+0x38>
 8008e2c:	e002      	b.n	8008e34 <dir_remove+0x80>
			if (res != FR_OK) break;
 8008e2e:	bf00      	nop
 8008e30:	e000      	b.n	8008e34 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8008e32:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8008e34:	7dfb      	ldrb	r3, [r7, #23]
 8008e36:	2b04      	cmp	r3, #4
 8008e38:	d101      	bne.n	8008e3e <dir_remove+0x8a>
 8008e3a:	2302      	movs	r3, #2
 8008e3c:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08a      	sub	sp, #40	; 0x28
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	613b      	str	r3, [r7, #16]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	60fb      	str	r3, [r7, #12]
 8008e60:	2300      	movs	r3, #0
 8008e62:	617b      	str	r3, [r7, #20]
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	61ba      	str	r2, [r7, #24]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	4413      	add	r3, r2
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008e76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e78:	2b1f      	cmp	r3, #31
 8008e7a:	d940      	bls.n	8008efe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008e7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e7e:	2b2f      	cmp	r3, #47	; 0x2f
 8008e80:	d006      	beq.n	8008e90 <create_name+0x48>
 8008e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008e84:	2b5c      	cmp	r3, #92	; 0x5c
 8008e86:	d110      	bne.n	8008eaa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008e88:	e002      	b.n	8008e90 <create_name+0x48>
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	61bb      	str	r3, [r7, #24]
 8008e90:	693a      	ldr	r2, [r7, #16]
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	4413      	add	r3, r2
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b2f      	cmp	r3, #47	; 0x2f
 8008e9a:	d0f6      	beq.n	8008e8a <create_name+0x42>
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b5c      	cmp	r3, #92	; 0x5c
 8008ea6:	d0f0      	beq.n	8008e8a <create_name+0x42>
			break;
 8008ea8:	e02a      	b.n	8008f00 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2bfe      	cmp	r3, #254	; 0xfe
 8008eae:	d901      	bls.n	8008eb4 <create_name+0x6c>
 8008eb0:	2306      	movs	r3, #6
 8008eb2:	e17d      	b.n	80091b0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008eba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f001 ffac 	bl	800ae1c <ff_convert>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <create_name+0x8a>
 8008ece:	2306      	movs	r3, #6
 8008ed0:	e16e      	b.n	80091b0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8008ed6:	d809      	bhi.n	8008eec <create_name+0xa4>
 8008ed8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008eda:	4619      	mov	r1, r3
 8008edc:	488d      	ldr	r0, [pc, #564]	; (8009114 <create_name+0x2cc>)
 8008ede:	f7fe fb8c 	bl	80075fa <chk_chr>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <create_name+0xa4>
 8008ee8:	2306      	movs	r3, #6
 8008eea:	e161      	b.n	80091b0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	617a      	str	r2, [r7, #20]
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	68fa      	ldr	r2, [r7, #12]
 8008ef6:	4413      	add	r3, r2
 8008ef8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008efa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008efc:	e7b4      	b.n	8008e68 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008efe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	441a      	add	r2, r3
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f0c:	2b1f      	cmp	r3, #31
 8008f0e:	d801      	bhi.n	8008f14 <create_name+0xcc>
 8008f10:	2304      	movs	r3, #4
 8008f12:	e000      	b.n	8008f16 <create_name+0xce>
 8008f14:	2300      	movs	r3, #0
 8008f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008f1a:	e011      	b.n	8008f40 <create_name+0xf8>
		w = lfn[di - 1];
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008f22:	3b01      	subs	r3, #1
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	881b      	ldrh	r3, [r3, #0]
 8008f2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8008f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d002      	beq.n	8008f3a <create_name+0xf2>
 8008f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008f36:	2b2e      	cmp	r3, #46	; 0x2e
 8008f38:	d106      	bne.n	8008f48 <create_name+0x100>
		di--;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1ea      	bne.n	8008f1c <create_name+0xd4>
 8008f46:	e000      	b.n	8008f4a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008f48:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	68fa      	ldr	r2, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	2200      	movs	r2, #0
 8008f54:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <create_name+0x118>
 8008f5c:	2306      	movs	r3, #6
 8008f5e:	e127      	b.n	80091b0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	3324      	adds	r3, #36	; 0x24
 8008f64:	220b      	movs	r2, #11
 8008f66:	2120      	movs	r1, #32
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fb04 	bl	8007576 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008f6e:	2300      	movs	r3, #0
 8008f70:	61bb      	str	r3, [r7, #24]
 8008f72:	e002      	b.n	8008f7a <create_name+0x132>
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	3301      	adds	r3, #1
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4413      	add	r3, r2
 8008f82:	881b      	ldrh	r3, [r3, #0]
 8008f84:	2b20      	cmp	r3, #32
 8008f86:	d0f5      	beq.n	8008f74 <create_name+0x12c>
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	005b      	lsls	r3, r3, #1
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	4413      	add	r3, r2
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	2b2e      	cmp	r3, #46	; 0x2e
 8008f94:	d0ee      	beq.n	8008f74 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d009      	beq.n	8008fb0 <create_name+0x168>
 8008f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008fa0:	f043 0303 	orr.w	r3, r3, #3
 8008fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008fa8:	e002      	b.n	8008fb0 <create_name+0x168>
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d009      	beq.n	8008fca <create_name+0x182>
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	881b      	ldrh	r3, [r3, #0]
 8008fc6:	2b2e      	cmp	r3, #46	; 0x2e
 8008fc8:	d1ef      	bne.n	8008faa <create_name+0x162>

	i = b = 0; ni = 8;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	623b      	str	r3, [r7, #32]
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	61ba      	str	r2, [r7, #24]
 8008fde:	005b      	lsls	r3, r3, #1
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8090 	beq.w	8009110 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008ff0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d006      	beq.n	8009004 <create_name+0x1bc>
 8008ff6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8008ffa:	d10a      	bne.n	8009012 <create_name+0x1ca>
 8008ffc:	69ba      	ldr	r2, [r7, #24]
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	429a      	cmp	r2, r3
 8009002:	d006      	beq.n	8009012 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8009004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009008:	f043 0303 	orr.w	r3, r3, #3
 800900c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009010:	e07d      	b.n	800910e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8009012:	6a3a      	ldr	r2, [r7, #32]
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	429a      	cmp	r2, r3
 8009018:	d203      	bcs.n	8009022 <create_name+0x1da>
 800901a:	69ba      	ldr	r2, [r7, #24]
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	429a      	cmp	r2, r3
 8009020:	d123      	bne.n	800906a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	2b0b      	cmp	r3, #11
 8009026:	d106      	bne.n	8009036 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8009028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800902c:	f043 0303 	orr.w	r3, r3, #3
 8009030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009034:	e075      	b.n	8009122 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8009036:	69ba      	ldr	r2, [r7, #24]
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	429a      	cmp	r2, r3
 800903c:	d005      	beq.n	800904a <create_name+0x202>
 800903e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009042:	f043 0303 	orr.w	r3, r3, #3
 8009046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	429a      	cmp	r2, r3
 8009050:	d866      	bhi.n	8009120 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	61bb      	str	r3, [r7, #24]
 8009056:	2308      	movs	r3, #8
 8009058:	623b      	str	r3, [r7, #32]
 800905a:	230b      	movs	r3, #11
 800905c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800905e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009068:	e051      	b.n	800910e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800906a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800906c:	2b7f      	cmp	r3, #127	; 0x7f
 800906e:	d914      	bls.n	800909a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8009070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009072:	2100      	movs	r1, #0
 8009074:	4618      	mov	r0, r3
 8009076:	f001 fed1 	bl	800ae1c <ff_convert>
 800907a:	4603      	mov	r3, r0
 800907c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800907e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d004      	beq.n	800908e <create_name+0x246>
 8009084:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009086:	3b80      	subs	r3, #128	; 0x80
 8009088:	4a23      	ldr	r2, [pc, #140]	; (8009118 <create_name+0x2d0>)
 800908a:	5cd3      	ldrb	r3, [r2, r3]
 800908c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800908e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009092:	f043 0302 	orr.w	r3, r3, #2
 8009096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800909a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <create_name+0x268>
 80090a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090a2:	4619      	mov	r1, r3
 80090a4:	481d      	ldr	r0, [pc, #116]	; (800911c <create_name+0x2d4>)
 80090a6:	f7fe faa8 	bl	80075fa <chk_chr>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d008      	beq.n	80090c2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80090b0:	235f      	movs	r3, #95	; 0x5f
 80090b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80090b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80090b8:	f043 0303 	orr.w	r3, r3, #3
 80090bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80090c0:	e01b      	b.n	80090fa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80090c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090c4:	2b40      	cmp	r3, #64	; 0x40
 80090c6:	d909      	bls.n	80090dc <create_name+0x294>
 80090c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090ca:	2b5a      	cmp	r3, #90	; 0x5a
 80090cc:	d806      	bhi.n	80090dc <create_name+0x294>
					b |= 2;
 80090ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090d2:	f043 0302 	orr.w	r3, r3, #2
 80090d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090da:	e00e      	b.n	80090fa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80090dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090de:	2b60      	cmp	r3, #96	; 0x60
 80090e0:	d90b      	bls.n	80090fa <create_name+0x2b2>
 80090e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090e4:	2b7a      	cmp	r3, #122	; 0x7a
 80090e6:	d808      	bhi.n	80090fa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80090e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80090f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80090f6:	3b20      	subs	r3, #32
 80090f8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	623a      	str	r2, [r7, #32]
 8009100:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009102:	b2d1      	uxtb	r1, r2
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	4413      	add	r3, r2
 8009108:	460a      	mov	r2, r1
 800910a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800910e:	e763      	b.n	8008fd8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8009110:	bf00      	nop
 8009112:	e006      	b.n	8009122 <create_name+0x2da>
 8009114:	08014918 	.word	0x08014918
 8009118:	08015e00 	.word	0x08015e00
 800911c:	08014924 	.word	0x08014924
			if (si > di) break;			/* No extension */
 8009120:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009128:	2be5      	cmp	r3, #229	; 0xe5
 800912a:	d103      	bne.n	8009134 <create_name+0x2ec>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2205      	movs	r2, #5
 8009130:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	2b08      	cmp	r3, #8
 8009138:	d104      	bne.n	8009144 <create_name+0x2fc>
 800913a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8009144:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009148:	f003 030c 	and.w	r3, r3, #12
 800914c:	2b0c      	cmp	r3, #12
 800914e:	d005      	beq.n	800915c <create_name+0x314>
 8009150:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009154:	f003 0303 	and.w	r3, r3, #3
 8009158:	2b03      	cmp	r3, #3
 800915a:	d105      	bne.n	8009168 <create_name+0x320>
 800915c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009160:	f043 0302 	orr.w	r3, r3, #2
 8009164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8009168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d117      	bne.n	80091a4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8009174:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	2b01      	cmp	r3, #1
 800917e:	d105      	bne.n	800918c <create_name+0x344>
 8009180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009184:	f043 0310 	orr.w	r3, r3, #16
 8009188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800918c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009190:	f003 030c 	and.w	r3, r3, #12
 8009194:	2b04      	cmp	r3, #4
 8009196:	d105      	bne.n	80091a4 <create_name+0x35c>
 8009198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800919c:	f043 0308 	orr.w	r3, r3, #8
 80091a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80091aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80091ae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3728      	adds	r7, #40	; 0x28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b086      	sub	sp, #24
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80091cc:	e002      	b.n	80091d4 <follow_path+0x1c>
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	3301      	adds	r3, #1
 80091d2:	603b      	str	r3, [r7, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	2b2f      	cmp	r3, #47	; 0x2f
 80091da:	d0f8      	beq.n	80091ce <follow_path+0x16>
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	2b5c      	cmp	r3, #92	; 0x5c
 80091e2:	d0f4      	beq.n	80091ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	2200      	movs	r2, #0
 80091e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b1f      	cmp	r3, #31
 80091f0:	d80a      	bhi.n	8009208 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2280      	movs	r2, #128	; 0x80
 80091f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80091fa:	2100      	movs	r1, #0
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7fe ffa9 	bl	8008154 <dir_sdi>
 8009202:	4603      	mov	r3, r0
 8009204:	75fb      	strb	r3, [r7, #23]
 8009206:	e048      	b.n	800929a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009208:	463b      	mov	r3, r7
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7ff fe1b 	bl	8008e48 <create_name>
 8009212:	4603      	mov	r3, r0
 8009214:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009216:	7dfb      	ldrb	r3, [r7, #23]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d139      	bne.n	8009290 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7ff fc11 	bl	8008a44 <dir_find>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800922c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d00a      	beq.n	800924a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009234:	7dfb      	ldrb	r3, [r7, #23]
 8009236:	2b04      	cmp	r3, #4
 8009238:	d12c      	bne.n	8009294 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800923a:	7afb      	ldrb	r3, [r7, #11]
 800923c:	f003 0304 	and.w	r3, r3, #4
 8009240:	2b00      	cmp	r3, #0
 8009242:	d127      	bne.n	8009294 <follow_path+0xdc>
 8009244:	2305      	movs	r3, #5
 8009246:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009248:	e024      	b.n	8009294 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800924a:	7afb      	ldrb	r3, [r7, #11]
 800924c:	f003 0304 	and.w	r3, r3, #4
 8009250:	2b00      	cmp	r3, #0
 8009252:	d121      	bne.n	8009298 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	799b      	ldrb	r3, [r3, #6]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009260:	2305      	movs	r3, #5
 8009262:	75fb      	strb	r3, [r7, #23]
 8009264:	e019      	b.n	800929a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	8992      	ldrh	r2, [r2, #12]
 8009274:	fbb3 f0f2 	udiv	r0, r3, r2
 8009278:	fb00 f202 	mul.w	r2, r0, r2
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	440b      	add	r3, r1
 8009280:	4619      	mov	r1, r3
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7ff f90c 	bl	80084a0 <ld_clust>
 8009288:	4602      	mov	r2, r0
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800928e:	e7bb      	b.n	8009208 <follow_path+0x50>
			if (res != FR_OK) break;
 8009290:	bf00      	nop
 8009292:	e002      	b.n	800929a <follow_path+0xe2>
				break;
 8009294:	bf00      	nop
 8009296:	e000      	b.n	800929a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009298:	bf00      	nop
			}
		}
	}

	return res;
 800929a:	7dfb      	ldrb	r3, [r7, #23]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3718      	adds	r7, #24
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80092ac:	f04f 33ff 	mov.w	r3, #4294967295
 80092b0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d031      	beq.n	800931e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	e002      	b.n	80092c8 <get_ldnumber+0x24>
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	3301      	adds	r3, #1
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	2b1f      	cmp	r3, #31
 80092ce:	d903      	bls.n	80092d8 <get_ldnumber+0x34>
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b3a      	cmp	r3, #58	; 0x3a
 80092d6:	d1f4      	bne.n	80092c2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b3a      	cmp	r3, #58	; 0x3a
 80092de:	d11c      	bne.n	800931a <get_ldnumber+0x76>
			tp = *path;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	1c5a      	adds	r2, r3, #1
 80092ea:	60fa      	str	r2, [r7, #12]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	3b30      	subs	r3, #48	; 0x30
 80092f0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	2b09      	cmp	r3, #9
 80092f6:	d80e      	bhi.n	8009316 <get_ldnumber+0x72>
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d10a      	bne.n	8009316 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d107      	bne.n	8009316 <get_ldnumber+0x72>
					vol = (int)i;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	3301      	adds	r3, #1
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	697a      	ldr	r2, [r7, #20]
 8009314:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	e002      	b.n	8009320 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800931a:	2300      	movs	r3, #0
 800931c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800931e:	693b      	ldr	r3, [r7, #16]
}
 8009320:	4618      	mov	r0, r3
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	70da      	strb	r2, [r3, #3]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f04f 32ff 	mov.w	r2, #4294967295
 8009342:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009344:	6839      	ldr	r1, [r7, #0]
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7fe fb22 	bl	8007990 <move_window>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <check_fs+0x2a>
 8009352:	2304      	movs	r3, #4
 8009354:	e038      	b.n	80093c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	3338      	adds	r3, #56	; 0x38
 800935a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800935e:	4618      	mov	r0, r3
 8009360:	f7fe f866 	bl	8007430 <ld_word>
 8009364:	4603      	mov	r3, r0
 8009366:	461a      	mov	r2, r3
 8009368:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800936c:	429a      	cmp	r2, r3
 800936e:	d001      	beq.n	8009374 <check_fs+0x48>
 8009370:	2303      	movs	r3, #3
 8009372:	e029      	b.n	80093c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800937a:	2be9      	cmp	r3, #233	; 0xe9
 800937c:	d009      	beq.n	8009392 <check_fs+0x66>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009384:	2beb      	cmp	r3, #235	; 0xeb
 8009386:	d11e      	bne.n	80093c6 <check_fs+0x9a>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800938e:	2b90      	cmp	r3, #144	; 0x90
 8009390:	d119      	bne.n	80093c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	3338      	adds	r3, #56	; 0x38
 8009396:	3336      	adds	r3, #54	; 0x36
 8009398:	4618      	mov	r0, r3
 800939a:	f7fe f861 	bl	8007460 <ld_dword>
 800939e:	4603      	mov	r3, r0
 80093a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80093a4:	4a0a      	ldr	r2, [pc, #40]	; (80093d0 <check_fs+0xa4>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d101      	bne.n	80093ae <check_fs+0x82>
 80093aa:	2300      	movs	r3, #0
 80093ac:	e00c      	b.n	80093c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3338      	adds	r3, #56	; 0x38
 80093b2:	3352      	adds	r3, #82	; 0x52
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7fe f853 	bl	8007460 <ld_dword>
 80093ba:	4603      	mov	r3, r0
 80093bc:	4a05      	ldr	r2, [pc, #20]	; (80093d4 <check_fs+0xa8>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d101      	bne.n	80093c6 <check_fs+0x9a>
 80093c2:	2300      	movs	r3, #0
 80093c4:	e000      	b.n	80093c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80093c6:	2302      	movs	r3, #2
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3708      	adds	r7, #8
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	00544146 	.word	0x00544146
 80093d4:	33544146 	.word	0x33544146

080093d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b096      	sub	sp, #88	; 0x58
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	4613      	mov	r3, r2
 80093e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80093ec:	68f8      	ldr	r0, [r7, #12]
 80093ee:	f7ff ff59 	bl	80092a4 <get_ldnumber>
 80093f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80093f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	da01      	bge.n	80093fe <find_volume+0x26>
 80093fa:	230b      	movs	r3, #11
 80093fc:	e265      	b.n	80098ca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80093fe:	4a9f      	ldr	r2, [pc, #636]	; (800967c <find_volume+0x2a4>)
 8009400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009406:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <find_volume+0x3a>
 800940e:	230c      	movs	r3, #12
 8009410:	e25b      	b.n	80098ca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009416:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009418:	79fb      	ldrb	r3, [r7, #7]
 800941a:	f023 0301 	bic.w	r3, r3, #1
 800941e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d01a      	beq.n	800945e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd ff61 	bl	80072f4 <disk_status>
 8009432:	4603      	mov	r3, r0
 8009434:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009438:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10c      	bne.n	800945e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009444:	79fb      	ldrb	r3, [r7, #7]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d007      	beq.n	800945a <find_volume+0x82>
 800944a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800944e:	f003 0304 	and.w	r3, r3, #4
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009456:	230a      	movs	r3, #10
 8009458:	e237      	b.n	80098ca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800945a:	2300      	movs	r3, #0
 800945c:	e235      	b.n	80098ca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	2200      	movs	r2, #0
 8009462:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009466:	b2da      	uxtb	r2, r3
 8009468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800946e:	785b      	ldrb	r3, [r3, #1]
 8009470:	4618      	mov	r0, r3
 8009472:	f7fd ff59 	bl	8007328 <disk_initialize>
 8009476:	4603      	mov	r3, r0
 8009478:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800947c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009488:	2303      	movs	r3, #3
 800948a:	e21e      	b.n	80098ca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800948c:	79fb      	ldrb	r3, [r7, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d007      	beq.n	80094a2 <find_volume+0xca>
 8009492:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800949e:	230a      	movs	r3, #10
 80094a0:	e213      	b.n	80098ca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80094a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a4:	7858      	ldrb	r0, [r3, #1]
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	330c      	adds	r3, #12
 80094aa:	461a      	mov	r2, r3
 80094ac:	2102      	movs	r1, #2
 80094ae:	f7fd ffa1 	bl	80073f4 <disk_ioctl>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d001      	beq.n	80094bc <find_volume+0xe4>
 80094b8:	2301      	movs	r3, #1
 80094ba:	e206      	b.n	80098ca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	899b      	ldrh	r3, [r3, #12]
 80094c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094c4:	d80d      	bhi.n	80094e2 <find_volume+0x10a>
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	899b      	ldrh	r3, [r3, #12]
 80094ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094ce:	d308      	bcc.n	80094e2 <find_volume+0x10a>
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	899b      	ldrh	r3, [r3, #12]
 80094d4:	461a      	mov	r2, r3
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	899b      	ldrh	r3, [r3, #12]
 80094da:	3b01      	subs	r3, #1
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <find_volume+0x10e>
 80094e2:	2301      	movs	r3, #1
 80094e4:	e1f1      	b.n	80098ca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80094ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80094ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094ee:	f7ff ff1d 	bl	800932c <check_fs>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80094f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d149      	bne.n	8009594 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009500:	2300      	movs	r3, #0
 8009502:	643b      	str	r3, [r7, #64]	; 0x40
 8009504:	e01e      	b.n	8009544 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800950c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009514:	4413      	add	r3, r2
 8009516:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951a:	3304      	adds	r3, #4
 800951c:	781b      	ldrb	r3, [r3, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d006      	beq.n	8009530 <find_volume+0x158>
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	3308      	adds	r3, #8
 8009526:	4618      	mov	r0, r3
 8009528:	f7fd ff9a 	bl	8007460 <ld_dword>
 800952c:	4602      	mov	r2, r0
 800952e:	e000      	b.n	8009532 <find_volume+0x15a>
 8009530:	2200      	movs	r2, #0
 8009532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	3358      	adds	r3, #88	; 0x58
 8009538:	443b      	add	r3, r7
 800953a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800953e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009540:	3301      	adds	r3, #1
 8009542:	643b      	str	r3, [r7, #64]	; 0x40
 8009544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009546:	2b03      	cmp	r3, #3
 8009548:	d9dd      	bls.n	8009506 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800954a:	2300      	movs	r3, #0
 800954c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800954e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d002      	beq.n	800955a <find_volume+0x182>
 8009554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009556:	3b01      	subs	r3, #1
 8009558:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800955a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	3358      	adds	r3, #88	; 0x58
 8009560:	443b      	add	r3, r7
 8009562:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009566:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800956a:	2b00      	cmp	r3, #0
 800956c:	d005      	beq.n	800957a <find_volume+0x1a2>
 800956e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009570:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009572:	f7ff fedb 	bl	800932c <check_fs>
 8009576:	4603      	mov	r3, r0
 8009578:	e000      	b.n	800957c <find_volume+0x1a4>
 800957a:	2303      	movs	r3, #3
 800957c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009584:	2b01      	cmp	r3, #1
 8009586:	d905      	bls.n	8009594 <find_volume+0x1bc>
 8009588:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800958a:	3301      	adds	r3, #1
 800958c:	643b      	str	r3, [r7, #64]	; 0x40
 800958e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009590:	2b03      	cmp	r3, #3
 8009592:	d9e2      	bls.n	800955a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009598:	2b04      	cmp	r3, #4
 800959a:	d101      	bne.n	80095a0 <find_volume+0x1c8>
 800959c:	2301      	movs	r3, #1
 800959e:	e194      	b.n	80098ca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80095a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d901      	bls.n	80095ac <find_volume+0x1d4>
 80095a8:	230d      	movs	r3, #13
 80095aa:	e18e      	b.n	80098ca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80095ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ae:	3338      	adds	r3, #56	; 0x38
 80095b0:	330b      	adds	r3, #11
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fd ff3c 	bl	8007430 <ld_word>
 80095b8:	4603      	mov	r3, r0
 80095ba:	461a      	mov	r2, r3
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	899b      	ldrh	r3, [r3, #12]
 80095c0:	429a      	cmp	r2, r3
 80095c2:	d001      	beq.n	80095c8 <find_volume+0x1f0>
 80095c4:	230d      	movs	r3, #13
 80095c6:	e180      	b.n	80098ca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80095c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ca:	3338      	adds	r3, #56	; 0x38
 80095cc:	3316      	adds	r3, #22
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd ff2e 	bl	8007430 <ld_word>
 80095d4:	4603      	mov	r3, r0
 80095d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80095d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <find_volume+0x214>
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	3338      	adds	r3, #56	; 0x38
 80095e2:	3324      	adds	r3, #36	; 0x24
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7fd ff3b 	bl	8007460 <ld_dword>
 80095ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80095ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095f0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80095f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80095f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	789b      	ldrb	r3, [r3, #2]
 8009600:	2b01      	cmp	r3, #1
 8009602:	d005      	beq.n	8009610 <find_volume+0x238>
 8009604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009606:	789b      	ldrb	r3, [r3, #2]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d001      	beq.n	8009610 <find_volume+0x238>
 800960c:	230d      	movs	r3, #13
 800960e:	e15c      	b.n	80098ca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	789b      	ldrb	r3, [r3, #2]
 8009614:	461a      	mov	r2, r3
 8009616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009618:	fb02 f303 	mul.w	r3, r2, r3
 800961c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009624:	b29a      	uxth	r2, r3
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	895b      	ldrh	r3, [r3, #10]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d008      	beq.n	8009644 <find_volume+0x26c>
 8009632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009634:	895b      	ldrh	r3, [r3, #10]
 8009636:	461a      	mov	r2, r3
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	895b      	ldrh	r3, [r3, #10]
 800963c:	3b01      	subs	r3, #1
 800963e:	4013      	ands	r3, r2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d001      	beq.n	8009648 <find_volume+0x270>
 8009644:	230d      	movs	r3, #13
 8009646:	e140      	b.n	80098ca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	3338      	adds	r3, #56	; 0x38
 800964c:	3311      	adds	r3, #17
 800964e:	4618      	mov	r0, r3
 8009650:	f7fd feee 	bl	8007430 <ld_word>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800965c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965e:	891b      	ldrh	r3, [r3, #8]
 8009660:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009662:	8992      	ldrh	r2, [r2, #12]
 8009664:	0952      	lsrs	r2, r2, #5
 8009666:	b292      	uxth	r2, r2
 8009668:	fbb3 f1f2 	udiv	r1, r3, r2
 800966c:	fb01 f202 	mul.w	r2, r1, r2
 8009670:	1a9b      	subs	r3, r3, r2
 8009672:	b29b      	uxth	r3, r3
 8009674:	2b00      	cmp	r3, #0
 8009676:	d003      	beq.n	8009680 <find_volume+0x2a8>
 8009678:	230d      	movs	r3, #13
 800967a:	e126      	b.n	80098ca <find_volume+0x4f2>
 800967c:	200003b8 	.word	0x200003b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009682:	3338      	adds	r3, #56	; 0x38
 8009684:	3313      	adds	r3, #19
 8009686:	4618      	mov	r0, r3
 8009688:	f7fd fed2 	bl	8007430 <ld_word>
 800968c:	4603      	mov	r3, r0
 800968e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <find_volume+0x2cc>
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	3338      	adds	r3, #56	; 0x38
 800969a:	3320      	adds	r3, #32
 800969c:	4618      	mov	r0, r3
 800969e:	f7fd fedf 	bl	8007460 <ld_dword>
 80096a2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80096a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a6:	3338      	adds	r3, #56	; 0x38
 80096a8:	330e      	adds	r3, #14
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7fd fec0 	bl	8007430 <ld_word>
 80096b0:	4603      	mov	r3, r0
 80096b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80096b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <find_volume+0x2e6>
 80096ba:	230d      	movs	r3, #13
 80096bc:	e105      	b.n	80098ca <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80096be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80096c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c2:	4413      	add	r3, r2
 80096c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096c6:	8911      	ldrh	r1, [r2, #8]
 80096c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ca:	8992      	ldrh	r2, [r2, #12]
 80096cc:	0952      	lsrs	r2, r2, #5
 80096ce:	b292      	uxth	r2, r2
 80096d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80096d4:	b292      	uxth	r2, r2
 80096d6:	4413      	add	r3, r2
 80096d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80096da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	429a      	cmp	r2, r3
 80096e0:	d201      	bcs.n	80096e6 <find_volume+0x30e>
 80096e2:	230d      	movs	r3, #13
 80096e4:	e0f1      	b.n	80098ca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80096e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ee:	8952      	ldrh	r2, [r2, #10]
 80096f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80096f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <find_volume+0x328>
 80096fc:	230d      	movs	r3, #13
 80096fe:	e0e4      	b.n	80098ca <find_volume+0x4f2>
		fmt = FS_FAT32;
 8009700:	2303      	movs	r3, #3
 8009702:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800970c:	4293      	cmp	r3, r2
 800970e:	d802      	bhi.n	8009716 <find_volume+0x33e>
 8009710:	2302      	movs	r3, #2
 8009712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8009716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009718:	f640 72f5 	movw	r2, #4085	; 0xff5
 800971c:	4293      	cmp	r3, r2
 800971e:	d802      	bhi.n	8009726 <find_volume+0x34e>
 8009720:	2301      	movs	r3, #1
 8009722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	1c9a      	adds	r2, r3, #2
 800972a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800972c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800972e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009730:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009732:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009734:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009738:	441a      	add	r2, r3
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800973e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009742:	441a      	add	r2, r3
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800974c:	2b03      	cmp	r3, #3
 800974e:	d11e      	bne.n	800978e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009752:	3338      	adds	r3, #56	; 0x38
 8009754:	332a      	adds	r3, #42	; 0x2a
 8009756:	4618      	mov	r0, r3
 8009758:	f7fd fe6a 	bl	8007430 <ld_word>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <find_volume+0x38e>
 8009762:	230d      	movs	r3, #13
 8009764:	e0b1      	b.n	80098ca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009768:	891b      	ldrh	r3, [r3, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <find_volume+0x39a>
 800976e:	230d      	movs	r3, #13
 8009770:	e0ab      	b.n	80098ca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009774:	3338      	adds	r3, #56	; 0x38
 8009776:	332c      	adds	r3, #44	; 0x2c
 8009778:	4618      	mov	r0, r3
 800977a:	f7fd fe71 	bl	8007460 <ld_dword>
 800977e:	4602      	mov	r2, r0
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	647b      	str	r3, [r7, #68]	; 0x44
 800978c:	e01f      	b.n	80097ce <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800978e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009790:	891b      	ldrh	r3, [r3, #8]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <find_volume+0x3c2>
 8009796:	230d      	movs	r3, #13
 8009798:	e097      	b.n	80098ca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800979a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800979e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a0:	441a      	add	r2, r3
 80097a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80097a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d103      	bne.n	80097b6 <find_volume+0x3de>
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	69db      	ldr	r3, [r3, #28]
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	e00a      	b.n	80097cc <find_volume+0x3f4>
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	69da      	ldr	r2, [r3, #28]
 80097ba:	4613      	mov	r3, r2
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4413      	add	r3, r2
 80097c0:	085a      	lsrs	r2, r3, #1
 80097c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80097cc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80097ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d0:	6a1a      	ldr	r2, [r3, #32]
 80097d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d4:	899b      	ldrh	r3, [r3, #12]
 80097d6:	4619      	mov	r1, r3
 80097d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097da:	440b      	add	r3, r1
 80097dc:	3b01      	subs	r3, #1
 80097de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80097e0:	8989      	ldrh	r1, [r1, #12]
 80097e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d201      	bcs.n	80097ee <find_volume+0x416>
 80097ea:	230d      	movs	r3, #13
 80097ec:	e06d      	b.n	80098ca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	f04f 32ff 	mov.w	r2, #4294967295
 80097f4:	619a      	str	r2, [r3, #24]
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	699a      	ldr	r2, [r3, #24]
 80097fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80097fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009800:	2280      	movs	r2, #128	; 0x80
 8009802:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009808:	2b03      	cmp	r3, #3
 800980a:	d149      	bne.n	80098a0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800980c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980e:	3338      	adds	r3, #56	; 0x38
 8009810:	3330      	adds	r3, #48	; 0x30
 8009812:	4618      	mov	r0, r3
 8009814:	f7fd fe0c 	bl	8007430 <ld_word>
 8009818:	4603      	mov	r3, r0
 800981a:	2b01      	cmp	r3, #1
 800981c:	d140      	bne.n	80098a0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800981e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009820:	3301      	adds	r3, #1
 8009822:	4619      	mov	r1, r3
 8009824:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009826:	f7fe f8b3 	bl	8007990 <move_window>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d137      	bne.n	80098a0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8009830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009832:	2200      	movs	r2, #0
 8009834:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009838:	3338      	adds	r3, #56	; 0x38
 800983a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800983e:	4618      	mov	r0, r3
 8009840:	f7fd fdf6 	bl	8007430 <ld_word>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800984c:	429a      	cmp	r2, r3
 800984e:	d127      	bne.n	80098a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009852:	3338      	adds	r3, #56	; 0x38
 8009854:	4618      	mov	r0, r3
 8009856:	f7fd fe03 	bl	8007460 <ld_dword>
 800985a:	4603      	mov	r3, r0
 800985c:	4a1d      	ldr	r2, [pc, #116]	; (80098d4 <find_volume+0x4fc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d11e      	bne.n	80098a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009864:	3338      	adds	r3, #56	; 0x38
 8009866:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800986a:	4618      	mov	r0, r3
 800986c:	f7fd fdf8 	bl	8007460 <ld_dword>
 8009870:	4603      	mov	r3, r0
 8009872:	4a19      	ldr	r2, [pc, #100]	; (80098d8 <find_volume+0x500>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d113      	bne.n	80098a0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	3338      	adds	r3, #56	; 0x38
 800987c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009880:	4618      	mov	r0, r3
 8009882:	f7fd fded 	bl	8007460 <ld_dword>
 8009886:	4602      	mov	r2, r0
 8009888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	3338      	adds	r3, #56	; 0x38
 8009890:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009894:	4618      	mov	r0, r3
 8009896:	f7fd fde3 	bl	8007460 <ld_dword>
 800989a:	4602      	mov	r2, r0
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80098a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80098a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80098a8:	4b0c      	ldr	r3, [pc, #48]	; (80098dc <find_volume+0x504>)
 80098aa:	881b      	ldrh	r3, [r3, #0]
 80098ac:	3301      	adds	r3, #1
 80098ae:	b29a      	uxth	r2, r3
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <find_volume+0x504>)
 80098b2:	801a      	strh	r2, [r3, #0]
 80098b4:	4b09      	ldr	r3, [pc, #36]	; (80098dc <find_volume+0x504>)
 80098b6:	881a      	ldrh	r2, [r3, #0]
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80098bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098be:	4a08      	ldr	r2, [pc, #32]	; (80098e0 <find_volume+0x508>)
 80098c0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80098c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098c4:	f7fd fffc 	bl	80078c0 <clear_lock>
#endif
	return FR_OK;
 80098c8:	2300      	movs	r3, #0
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3758      	adds	r7, #88	; 0x58
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	41615252 	.word	0x41615252
 80098d8:	61417272 	.word	0x61417272
 80098dc:	200003bc 	.word	0x200003bc
 80098e0:	200003e0 	.word	0x200003e0

080098e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80098ee:	2309      	movs	r3, #9
 80098f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01c      	beq.n	8009932 <validate+0x4e>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d018      	beq.n	8009932 <validate+0x4e>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d013      	beq.n	8009932 <validate+0x4e>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	889a      	ldrh	r2, [r3, #4]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	88db      	ldrh	r3, [r3, #6]
 8009914:	429a      	cmp	r2, r3
 8009916:	d10c      	bne.n	8009932 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	785b      	ldrb	r3, [r3, #1]
 800991e:	4618      	mov	r0, r3
 8009920:	f7fd fce8 	bl	80072f4 <disk_status>
 8009924:	4603      	mov	r3, r0
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d101      	bne.n	8009932 <validate+0x4e>
			res = FR_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d102      	bne.n	800993e <validate+0x5a>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	e000      	b.n	8009940 <validate+0x5c>
 800993e:	2300      	movs	r3, #0
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	6013      	str	r3, [r2, #0]
	return res;
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
	...

08009950 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b088      	sub	sp, #32
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	4613      	mov	r3, r2
 800995c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009962:	f107 0310 	add.w	r3, r7, #16
 8009966:	4618      	mov	r0, r3
 8009968:	f7ff fc9c 	bl	80092a4 <get_ldnumber>
 800996c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	2b00      	cmp	r3, #0
 8009972:	da01      	bge.n	8009978 <f_mount+0x28>
 8009974:	230b      	movs	r3, #11
 8009976:	e02b      	b.n	80099d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009978:	4a17      	ldr	r2, [pc, #92]	; (80099d8 <f_mount+0x88>)
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009980:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d005      	beq.n	8009994 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009988:	69b8      	ldr	r0, [r7, #24]
 800998a:	f7fd ff99 	bl	80078c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	2200      	movs	r2, #0
 8009992:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d002      	beq.n	80099a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	490d      	ldr	r1, [pc, #52]	; (80099d8 <f_mount+0x88>)
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d002      	beq.n	80099b6 <f_mount+0x66>
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d001      	beq.n	80099ba <f_mount+0x6a>
 80099b6:	2300      	movs	r3, #0
 80099b8:	e00a      	b.n	80099d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80099ba:	f107 010c 	add.w	r1, r7, #12
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	2200      	movs	r2, #0
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff fd07 	bl	80093d8 <find_volume>
 80099ca:	4603      	mov	r3, r0
 80099cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	200003b8 	.word	0x200003b8

080099dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b09a      	sub	sp, #104	; 0x68
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	4613      	mov	r3, r2
 80099e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d101      	bne.n	80099f4 <f_open+0x18>
 80099f0:	2309      	movs	r3, #9
 80099f2:	e1bb      	b.n	8009d6c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80099f4:	79fb      	ldrb	r3, [r7, #7]
 80099f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80099fc:	79fa      	ldrb	r2, [r7, #7]
 80099fe:	f107 0114 	add.w	r1, r7, #20
 8009a02:	f107 0308 	add.w	r3, r7, #8
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff fce6 	bl	80093d8 <find_volume>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8009a12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f040 819f 	bne.w	8009d5a <f_open+0x37e>
		dj.obj.fs = fs;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009a20:	68ba      	ldr	r2, [r7, #8]
 8009a22:	f107 0318 	add.w	r3, r7, #24
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fbc5 	bl	80091b8 <follow_path>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d11a      	bne.n	8009a72 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009a3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a40:	b25b      	sxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	da03      	bge.n	8009a4e <f_open+0x72>
				res = FR_INVALID_NAME;
 8009a46:	2306      	movs	r3, #6
 8009a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009a4c:	e011      	b.n	8009a72 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	f023 0301 	bic.w	r3, r3, #1
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	bf14      	ite	ne
 8009a58:	2301      	movne	r3, #1
 8009a5a:	2300      	moveq	r3, #0
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f107 0318 	add.w	r3, r7, #24
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fd fde2 	bl	8007630 <chk_lock>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009a72:	79fb      	ldrb	r3, [r7, #7]
 8009a74:	f003 031c 	and.w	r3, r3, #28
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d07f      	beq.n	8009b7c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009a7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d017      	beq.n	8009ab4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009a84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d10e      	bne.n	8009aaa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009a8c:	f7fd fe2c 	bl	80076e8 <enq_lock>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d006      	beq.n	8009aa4 <f_open+0xc8>
 8009a96:	f107 0318 	add.w	r3, r7, #24
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff f892 	bl	8008bc4 <dir_register>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	e000      	b.n	8009aa6 <f_open+0xca>
 8009aa4:	2312      	movs	r3, #18
 8009aa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	f043 0308 	orr.w	r3, r3, #8
 8009ab0:	71fb      	strb	r3, [r7, #7]
 8009ab2:	e010      	b.n	8009ad6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009ab4:	7fbb      	ldrb	r3, [r7, #30]
 8009ab6:	f003 0311 	and.w	r3, r3, #17
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d003      	beq.n	8009ac6 <f_open+0xea>
					res = FR_DENIED;
 8009abe:	2307      	movs	r3, #7
 8009ac0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009ac4:	e007      	b.n	8009ad6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009ac6:	79fb      	ldrb	r3, [r7, #7]
 8009ac8:	f003 0304 	and.w	r3, r3, #4
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d002      	beq.n	8009ad6 <f_open+0xfa>
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009ad6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d168      	bne.n	8009bb0 <f_open+0x1d4>
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	f003 0308 	and.w	r3, r3, #8
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d063      	beq.n	8009bb0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009ae8:	f7fd fba2 	bl	8007230 <get_fattime>
 8009aec:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	330e      	adds	r3, #14
 8009af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7fd fcf1 	bl	80074dc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	3316      	adds	r3, #22
 8009afe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7fd fceb 	bl	80074dc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b08:	330b      	adds	r3, #11
 8009b0a:	2220      	movs	r2, #32
 8009b0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe fcc3 	bl	80084a0 <ld_clust>
 8009b1a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b20:	2200      	movs	r2, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe fcdb 	bl	80084de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2a:	331c      	adds	r3, #28
 8009b2c:	2100      	movs	r1, #0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f7fd fcd4 	bl	80074dc <st_dword>
					fs->wflag = 1;
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	2201      	movs	r2, #1
 8009b38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d037      	beq.n	8009bb0 <f_open+0x1d4>
						dw = fs->winsect;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b44:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8009b46:	f107 0318 	add.w	r3, r7, #24
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7fe f9cb 	bl	8007eea <remove_chain>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8009b5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d126      	bne.n	8009bb0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fd ff12 	bl	8007990 <move_window>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009b76:	3a01      	subs	r2, #1
 8009b78:	615a      	str	r2, [r3, #20]
 8009b7a:	e019      	b.n	8009bb0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d115      	bne.n	8009bb0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009b84:	7fbb      	ldrb	r3, [r7, #30]
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009b8e:	2304      	movs	r3, #4
 8009b90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009b94:	e00c      	b.n	8009bb0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	f003 0302 	and.w	r3, r3, #2
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d007      	beq.n	8009bb0 <f_open+0x1d4>
 8009ba0:	7fbb      	ldrb	r3, [r7, #30]
 8009ba2:	f003 0301 	and.w	r3, r3, #1
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <f_open+0x1d4>
						res = FR_DENIED;
 8009baa:	2307      	movs	r3, #7
 8009bac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d128      	bne.n	8009c0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009bb8:	79fb      	ldrb	r3, [r7, #7]
 8009bba:	f003 0308 	and.w	r3, r3, #8
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009bc2:	79fb      	ldrb	r3, [r7, #7]
 8009bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bc8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	f023 0301 	bic.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bf14      	ite	ne
 8009be2:	2301      	movne	r3, #1
 8009be4:	2300      	moveq	r3, #0
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	f107 0318 	add.w	r3, r7, #24
 8009bee:	4611      	mov	r1, r2
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7fd fd9b 	bl	800772c <inc_lock>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d102      	bne.n	8009c0a <f_open+0x22e>
 8009c04:	2302      	movs	r3, #2
 8009c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	f040 80a3 	bne.w	8009d5a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe fc40 	bl	80084a0 <ld_clust>
 8009c20:	4602      	mov	r2, r0
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c28:	331c      	adds	r3, #28
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fd fc18 	bl	8007460 <ld_dword>
 8009c30:	4602      	mov	r2, r0
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	88da      	ldrh	r2, [r3, #6]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	79fa      	ldrb	r2, [r7, #7]
 8009c4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2200      	movs	r2, #0
 8009c54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3330      	adds	r3, #48	; 0x30
 8009c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c6a:	2100      	movs	r1, #0
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fc82 	bl	8007576 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009c72:	79fb      	ldrb	r3, [r7, #7]
 8009c74:	f003 0320 	and.w	r3, r3, #32
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d06e      	beq.n	8009d5a <f_open+0x37e>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d06a      	beq.n	8009d5a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	895b      	ldrh	r3, [r3, #10]
 8009c90:	461a      	mov	r2, r3
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	899b      	ldrh	r3, [r3, #12]
 8009c96:	fb02 f303 	mul.w	r3, r2, r3
 8009c9a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ca8:	e016      	b.n	8009cd8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7fd ff2b 	bl	8007b0a <get_fat>
 8009cb4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8009cb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d802      	bhi.n	8009cc2 <f_open+0x2e6>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc8:	d102      	bne.n	8009cd0 <f_open+0x2f4>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009cd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d103      	bne.n	8009ce8 <f_open+0x30c>
 8009ce0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d8e0      	bhi.n	8009caa <f_open+0x2ce>
				}
				fp->clust = clst;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009cee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d131      	bne.n	8009d5a <f_open+0x37e>
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	899b      	ldrh	r3, [r3, #12]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009cfe:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d02:	fb01 f202 	mul.w	r2, r1, r2
 8009d06:	1a9b      	subs	r3, r3, r2
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d026      	beq.n	8009d5a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009d10:	4618      	mov	r0, r3
 8009d12:	f7fd fedb 	bl	8007acc <clust2sect>
 8009d16:	64f8      	str	r0, [r7, #76]	; 0x4c
 8009d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d103      	bne.n	8009d26 <f_open+0x34a>
						res = FR_INT_ERR;
 8009d1e:	2302      	movs	r3, #2
 8009d20:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009d24:	e019      	b.n	8009d5a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	899b      	ldrh	r3, [r3, #12]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d34:	441a      	add	r2, r3
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	7858      	ldrb	r0, [r3, #1]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6a1a      	ldr	r2, [r3, #32]
 8009d48:	2301      	movs	r3, #1
 8009d4a:	f7fd fb13 	bl	8007374 <disk_read>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <f_open+0x37e>
 8009d54:	2301      	movs	r3, #1
 8009d56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009d5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d002      	beq.n	8009d68 <f_open+0x38c>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009d68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3768      	adds	r7, #104	; 0x68
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b08e      	sub	sp, #56	; 0x38
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
 8009d80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f107 0214 	add.w	r2, r7, #20
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7ff fda5 	bl	80098e4 <validate>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009da0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d107      	bne.n	8009db8 <f_read+0x44>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	7d5b      	ldrb	r3, [r3, #21]
 8009dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <f_read+0x4a>
 8009db8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009dbc:	e135      	b.n	800a02a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	7d1b      	ldrb	r3, [r3, #20]
 8009dc2:	f003 0301 	and.w	r3, r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d101      	bne.n	8009dce <f_read+0x5a>
 8009dca:	2307      	movs	r3, #7
 8009dcc:	e12d      	b.n	800a02a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	6a3b      	ldr	r3, [r7, #32]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	f240 811e 	bls.w	800a020 <f_read+0x2ac>
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009de8:	e11a      	b.n	800a020 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	699b      	ldr	r3, [r3, #24]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	8992      	ldrh	r2, [r2, #12]
 8009df2:	fbb3 f1f2 	udiv	r1, r3, r2
 8009df6:	fb01 f202 	mul.w	r2, r1, r2
 8009dfa:	1a9b      	subs	r3, r3, r2
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f040 80d5 	bne.w	8009fac <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	699b      	ldr	r3, [r3, #24]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	8992      	ldrh	r2, [r2, #12]
 8009e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	8952      	ldrh	r2, [r2, #10]
 8009e12:	3a01      	subs	r2, #1
 8009e14:	4013      	ands	r3, r2
 8009e16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d12f      	bne.n	8009e7e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	699b      	ldr	r3, [r3, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d103      	bne.n	8009e2e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	633b      	str	r3, [r7, #48]	; 0x30
 8009e2c:	e013      	b.n	8009e56 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	699b      	ldr	r3, [r3, #24]
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	68f8      	ldr	r0, [r7, #12]
 8009e3e:	f7fe f951 	bl	80080e4 <clmt_clust>
 8009e42:	6338      	str	r0, [r7, #48]	; 0x30
 8009e44:	e007      	b.n	8009e56 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	4610      	mov	r0, r2
 8009e50:	f7fd fe5b 	bl	8007b0a <get_fat>
 8009e54:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d804      	bhi.n	8009e66 <f_read+0xf2>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2202      	movs	r2, #2
 8009e60:	755a      	strb	r2, [r3, #21]
 8009e62:	2302      	movs	r3, #2
 8009e64:	e0e1      	b.n	800a02a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6c:	d104      	bne.n	8009e78 <f_read+0x104>
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2201      	movs	r2, #1
 8009e72:	755a      	strb	r2, [r3, #21]
 8009e74:	2301      	movs	r3, #1
 8009e76:	e0d8      	b.n	800a02a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e7e:	697a      	ldr	r2, [r7, #20]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f7fd fe20 	bl	8007acc <clust2sect>
 8009e8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d104      	bne.n	8009e9e <f_read+0x12a>
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2202      	movs	r2, #2
 8009e98:	755a      	strb	r2, [r3, #21]
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e0c5      	b.n	800a02a <f_read+0x2b6>
			sect += csect;
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	899b      	ldrh	r3, [r3, #12]
 8009eaa:	461a      	mov	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	fbb3 f3f2 	udiv	r3, r3, r2
 8009eb2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d041      	beq.n	8009f3e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	4413      	add	r3, r2
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	8952      	ldrh	r2, [r2, #10]
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d905      	bls.n	8009ed4 <f_read+0x160>
					cc = fs->csize - csect;
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	895b      	ldrh	r3, [r3, #10]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	7858      	ldrb	r0, [r3, #1]
 8009ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eda:	69ba      	ldr	r2, [r7, #24]
 8009edc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ede:	f7fd fa49 	bl	8007374 <disk_read>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d004      	beq.n	8009ef2 <f_read+0x17e>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2201      	movs	r2, #1
 8009eec:	755a      	strb	r2, [r3, #21]
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e09b      	b.n	800a02a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	7d1b      	ldrb	r3, [r3, #20]
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da18      	bge.n	8009f2e <f_read+0x1ba>
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6a1a      	ldr	r2, [r3, #32]
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d911      	bls.n	8009f2e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a1a      	ldr	r2, [r3, #32]
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	697a      	ldr	r2, [r7, #20]
 8009f14:	8992      	ldrh	r2, [r2, #12]
 8009f16:	fb02 f303 	mul.w	r3, r2, r3
 8009f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f1c:	18d0      	adds	r0, r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	899b      	ldrh	r3, [r3, #12]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	f7fd fb03 	bl	8007534 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	899b      	ldrh	r3, [r3, #12]
 8009f32:	461a      	mov	r2, r3
 8009f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f36:	fb02 f303 	mul.w	r3, r2, r3
 8009f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8009f3c:	e05c      	b.n	8009ff8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d02e      	beq.n	8009fa6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	7d1b      	ldrb	r3, [r3, #20]
 8009f4c:	b25b      	sxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	da18      	bge.n	8009f84 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	7858      	ldrb	r0, [r3, #1]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6a1a      	ldr	r2, [r3, #32]
 8009f60:	2301      	movs	r3, #1
 8009f62:	f7fd fa27 	bl	80073b4 <disk_write>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <f_read+0x202>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	755a      	strb	r2, [r3, #21]
 8009f72:	2301      	movs	r3, #1
 8009f74:	e059      	b.n	800a02a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	7d1b      	ldrb	r3, [r3, #20]
 8009f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	7858      	ldrb	r0, [r3, #1]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f8e:	2301      	movs	r3, #1
 8009f90:	69ba      	ldr	r2, [r7, #24]
 8009f92:	f7fd f9ef 	bl	8007374 <disk_read>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d004      	beq.n	8009fa6 <f_read+0x232>
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2201      	movs	r2, #1
 8009fa0:	755a      	strb	r2, [r3, #21]
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e041      	b.n	800a02a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	899b      	ldrh	r3, [r3, #12]
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	699b      	ldr	r3, [r3, #24]
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	8992      	ldrh	r2, [r2, #12]
 8009fba:	fbb3 f1f2 	udiv	r1, r3, r2
 8009fbe:	fb01 f202 	mul.w	r2, r1, r2
 8009fc2:	1a9b      	subs	r3, r3, r2
 8009fc4:	1ac3      	subs	r3, r0, r3
 8009fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d901      	bls.n	8009fd4 <f_read+0x260>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	8992      	ldrh	r2, [r2, #12]
 8009fe2:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fe6:	fb00 f202 	mul.w	r2, r0, r2
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	440b      	add	r3, r1
 8009fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ff4:	f7fd fa9e 	bl	8007534 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	4413      	add	r3, r2
 8009ffe:	627b      	str	r3, [r7, #36]	; 0x24
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	699a      	ldr	r2, [r3, #24]
 800a004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a006:	441a      	add	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	619a      	str	r2, [r3, #24]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a012:	441a      	add	r2, r3
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	f47f aee1 	bne.w	8009dea <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3738      	adds	r7, #56	; 0x38
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b08c      	sub	sp, #48	; 0x30
 800a036:	af00      	add	r7, sp, #0
 800a038:	60f8      	str	r0, [r7, #12]
 800a03a:	60b9      	str	r1, [r7, #8]
 800a03c:	607a      	str	r2, [r7, #4]
 800a03e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f107 0210 	add.w	r2, r7, #16
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7ff fc46 	bl	80098e4 <validate>
 800a058:	4603      	mov	r3, r0
 800a05a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a05e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a062:	2b00      	cmp	r3, #0
 800a064:	d107      	bne.n	800a076 <f_write+0x44>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	7d5b      	ldrb	r3, [r3, #21]
 800a06a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a06e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <f_write+0x4a>
 800a076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a07a:	e16a      	b.n	800a352 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	7d1b      	ldrb	r3, [r3, #20]
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <f_write+0x5a>
 800a088:	2307      	movs	r3, #7
 800a08a:	e162      	b.n	800a352 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	699a      	ldr	r2, [r3, #24]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	441a      	add	r2, r3
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	429a      	cmp	r2, r3
 800a09a:	f080 814c 	bcs.w	800a336 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	43db      	mvns	r3, r3
 800a0a4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800a0a6:	e146      	b.n	800a336 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	699b      	ldr	r3, [r3, #24]
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	8992      	ldrh	r2, [r2, #12]
 800a0b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a0b4:	fb01 f202 	mul.w	r2, r1, r2
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f040 80f1 	bne.w	800a2a2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	8992      	ldrh	r2, [r2, #12]
 800a0c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	8952      	ldrh	r2, [r2, #10]
 800a0d0:	3a01      	subs	r2, #1
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d143      	bne.n	800a164 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d10c      	bne.n	800a0fe <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800a0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d11a      	bne.n	800a126 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fd ff5d 	bl	8007fb4 <create_chain>
 800a0fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800a0fc:	e013      	b.n	800a126 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7fd ffe9 	bl	80080e4 <clmt_clust>
 800a112:	62b8      	str	r0, [r7, #40]	; 0x28
 800a114:	e007      	b.n	800a126 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a116:	68fa      	ldr	r2, [r7, #12]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	69db      	ldr	r3, [r3, #28]
 800a11c:	4619      	mov	r1, r3
 800a11e:	4610      	mov	r0, r2
 800a120:	f7fd ff48 	bl	8007fb4 <create_chain>
 800a124:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	2b00      	cmp	r3, #0
 800a12a:	f000 8109 	beq.w	800a340 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	2b01      	cmp	r3, #1
 800a132:	d104      	bne.n	800a13e <f_write+0x10c>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2202      	movs	r2, #2
 800a138:	755a      	strb	r2, [r3, #21]
 800a13a:	2302      	movs	r3, #2
 800a13c:	e109      	b.n	800a352 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a144:	d104      	bne.n	800a150 <f_write+0x11e>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2201      	movs	r2, #1
 800a14a:	755a      	strb	r2, [r3, #21]
 800a14c:	2301      	movs	r3, #1
 800a14e:	e100      	b.n	800a352 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a154:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <f_write+0x132>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a162:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	b25b      	sxtb	r3, r3
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	da18      	bge.n	800a1a0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	7858      	ldrb	r0, [r3, #1]
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6a1a      	ldr	r2, [r3, #32]
 800a17c:	2301      	movs	r3, #1
 800a17e:	f7fd f919 	bl	80073b4 <disk_write>
 800a182:	4603      	mov	r3, r0
 800a184:	2b00      	cmp	r3, #0
 800a186:	d004      	beq.n	800a192 <f_write+0x160>
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2201      	movs	r2, #1
 800a18c:	755a      	strb	r2, [r3, #21]
 800a18e:	2301      	movs	r3, #1
 800a190:	e0df      	b.n	800a352 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	7d1b      	ldrb	r3, [r3, #20]
 800a196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7fd fc8f 	bl	8007acc <clust2sect>
 800a1ae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d104      	bne.n	800a1c0 <f_write+0x18e>
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	755a      	strb	r2, [r3, #21]
 800a1bc:	2302      	movs	r3, #2
 800a1be:	e0c8      	b.n	800a352 <f_write+0x320>
			sect += csect;
 800a1c0:	697a      	ldr	r2, [r7, #20]
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	4413      	add	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	899b      	ldrh	r3, [r3, #12]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a1d4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d043      	beq.n	800a264 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	6a3b      	ldr	r3, [r7, #32]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	8952      	ldrh	r2, [r2, #10]
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d905      	bls.n	800a1f6 <f_write+0x1c4>
					cc = fs->csize - csect;
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	895b      	ldrh	r3, [r3, #10]
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	69bb      	ldr	r3, [r7, #24]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	7858      	ldrb	r0, [r3, #1]
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	69f9      	ldr	r1, [r7, #28]
 800a200:	f7fd f8d8 	bl	80073b4 <disk_write>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d004      	beq.n	800a214 <f_write+0x1e2>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2201      	movs	r2, #1
 800a20e:	755a      	strb	r2, [r3, #21]
 800a210:	2301      	movs	r3, #1
 800a212:	e09e      	b.n	800a352 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6a1a      	ldr	r2, [r3, #32]
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	6a3a      	ldr	r2, [r7, #32]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d918      	bls.n	800a254 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6a1a      	ldr	r2, [r3, #32]
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	8992      	ldrh	r2, [r2, #12]
 800a234:	fb02 f303 	mul.w	r3, r2, r3
 800a238:	69fa      	ldr	r2, [r7, #28]
 800a23a:	18d1      	adds	r1, r2, r3
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	899b      	ldrh	r3, [r3, #12]
 800a240:	461a      	mov	r2, r3
 800a242:	f7fd f977 	bl	8007534 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	7d1b      	ldrb	r3, [r3, #20]
 800a24a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	899b      	ldrh	r3, [r3, #12]
 800a258:	461a      	mov	r2, r3
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	fb02 f303 	mul.w	r3, r2, r3
 800a260:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800a262:	e04b      	b.n	800a2fc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d016      	beq.n	800a29c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	699a      	ldr	r2, [r3, #24]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800a276:	429a      	cmp	r2, r3
 800a278:	d210      	bcs.n	800a29c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	7858      	ldrb	r0, [r3, #1]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a284:	2301      	movs	r3, #1
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	f7fd f874 	bl	8007374 <disk_read>
 800a28c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d004      	beq.n	800a29c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2201      	movs	r2, #1
 800a296:	755a      	strb	r2, [r3, #21]
 800a298:	2301      	movs	r3, #1
 800a29a:	e05a      	b.n	800a352 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	899b      	ldrh	r3, [r3, #12]
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	693a      	ldr	r2, [r7, #16]
 800a2ae:	8992      	ldrh	r2, [r2, #12]
 800a2b0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2b4:	fb01 f202 	mul.w	r2, r1, r2
 800a2b8:	1a9b      	subs	r3, r3, r2
 800a2ba:	1ac3      	subs	r3, r0, r3
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800a2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d901      	bls.n	800a2ca <f_write+0x298>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	699b      	ldr	r3, [r3, #24]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	8992      	ldrh	r2, [r2, #12]
 800a2d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2dc:	fb00 f202 	mul.w	r2, r0, r2
 800a2e0:	1a9b      	subs	r3, r3, r2
 800a2e2:	440b      	add	r3, r1
 800a2e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2e6:	69f9      	ldr	r1, [r7, #28]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f7fd f923 	bl	8007534 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	7d1b      	ldrb	r3, [r3, #20]
 800a2f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a2f6:	b2da      	uxtb	r2, r3
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	4413      	add	r3, r2
 800a302:	61fb      	str	r3, [r7, #28]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	699a      	ldr	r2, [r3, #24]
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	441a      	add	r2, r3
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	619a      	str	r2, [r3, #24]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	68da      	ldr	r2, [r3, #12]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	429a      	cmp	r2, r3
 800a31a:	bf38      	it	cc
 800a31c:	461a      	movcc	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	60da      	str	r2, [r3, #12]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681a      	ldr	r2, [r3, #0]
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	441a      	add	r2, r3
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a332:	1ad3      	subs	r3, r2, r3
 800a334:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f47f aeb5 	bne.w	800a0a8 <f_write+0x76>
 800a33e:	e000      	b.n	800a342 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a340:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	7d1b      	ldrb	r3, [r3, #20]
 800a346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a34a:	b2da      	uxtb	r2, r3
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3730      	adds	r7, #48	; 0x30
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b086      	sub	sp, #24
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f107 0208 	add.w	r2, r7, #8
 800a368:	4611      	mov	r1, r2
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7ff faba 	bl	80098e4 <validate>
 800a370:	4603      	mov	r3, r0
 800a372:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d168      	bne.n	800a44c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	7d1b      	ldrb	r3, [r3, #20]
 800a37e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	d062      	beq.n	800a44c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	7d1b      	ldrb	r3, [r3, #20]
 800a38a:	b25b      	sxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	da15      	bge.n	800a3bc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	7858      	ldrb	r0, [r3, #1]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1a      	ldr	r2, [r3, #32]
 800a39e:	2301      	movs	r3, #1
 800a3a0:	f7fd f808 	bl	80073b4 <disk_write>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d001      	beq.n	800a3ae <f_sync+0x54>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	e04f      	b.n	800a44e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	7d1b      	ldrb	r3, [r3, #20]
 800a3b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a3bc:	f7fc ff38 	bl	8007230 <get_fattime>
 800a3c0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f7fd fae0 	bl	8007990 <move_window>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d138      	bne.n	800a44c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3de:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	330b      	adds	r3, #11
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	330b      	adds	r3, #11
 800a3ea:	f042 0220 	orr.w	r2, r2, #32
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	68f9      	ldr	r1, [r7, #12]
 800a3fe:	f7fe f86e 	bl	80084de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f103 021c 	add.w	r2, r3, #28
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	4619      	mov	r1, r3
 800a40e:	4610      	mov	r0, r2
 800a410:	f7fd f864 	bl	80074dc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	3316      	adds	r3, #22
 800a418:	6939      	ldr	r1, [r7, #16]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fd f85e 	bl	80074dc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3312      	adds	r3, #18
 800a424:	2100      	movs	r1, #0
 800a426:	4618      	mov	r0, r3
 800a428:	f7fd f83d 	bl	80074a6 <st_word>
					fs->wflag = 1;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2201      	movs	r2, #1
 800a430:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4618      	mov	r0, r3
 800a436:	f7fd fad9 	bl	80079ec <sync_fs>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	7d1b      	ldrb	r3, [r3, #20]
 800a442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a446:	b2da      	uxtb	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a456:	b580      	push	{r7, lr}
 800a458:	b084      	sub	sp, #16
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff ff7b 	bl	800a35a <f_sync>
 800a464:	4603      	mov	r3, r0
 800a466:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a468:	7bfb      	ldrb	r3, [r7, #15]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d118      	bne.n	800a4a0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f107 0208 	add.w	r2, r7, #8
 800a474:	4611      	mov	r1, r2
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fa34 	bl	80098e4 <validate>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10c      	bne.n	800a4a0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fd f9dc 	bl	8007848 <dec_lock>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a494:	7bfb      	ldrb	r3, [r7, #15]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d102      	bne.n	800a4a0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b090      	sub	sp, #64	; 0x40
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f107 0208 	add.w	r2, r7, #8
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fa11 	bl	80098e4 <validate>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800a4c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <f_lseek+0x2e>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	7d5b      	ldrb	r3, [r3, #21]
 800a4d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800a4d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d002      	beq.n	800a4e6 <f_lseek+0x3c>
 800a4e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a4e4:	e201      	b.n	800a8ea <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80d9 	beq.w	800a6a2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f6:	d15a      	bne.n	800a5ae <f_lseek+0x104>
			tbl = fp->cltbl;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4fc:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	1d1a      	adds	r2, r3, #4
 800a502:	627a      	str	r2, [r7, #36]	; 0x24
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	2302      	movs	r3, #2
 800a50a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800a512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a514:	2b00      	cmp	r3, #0
 800a516:	d03a      	beq.n	800a58e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	613b      	str	r3, [r7, #16]
 800a51c:	2300      	movs	r3, #0
 800a51e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	3302      	adds	r3, #2
 800a524:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800a526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a528:	60fb      	str	r3, [r7, #12]
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	3301      	adds	r3, #1
 800a52e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a534:	4618      	mov	r0, r3
 800a536:	f7fd fae8 	bl	8007b0a <get_fat>
 800a53a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800a53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d804      	bhi.n	800a54c <f_lseek+0xa2>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2202      	movs	r2, #2
 800a546:	755a      	strb	r2, [r3, #21]
 800a548:	2302      	movs	r3, #2
 800a54a:	e1ce      	b.n	800a8ea <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a552:	d104      	bne.n	800a55e <f_lseek+0xb4>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	755a      	strb	r2, [r3, #21]
 800a55a:	2301      	movs	r3, #1
 800a55c:	e1c5      	b.n	800a8ea <f_lseek+0x440>
					} while (cl == pcl + 1);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3301      	adds	r3, #1
 800a562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a564:	429a      	cmp	r2, r3
 800a566:	d0de      	beq.n	800a526 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800a568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d809      	bhi.n	800a584 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	1d1a      	adds	r2, r3, #4
 800a574:	627a      	str	r2, [r7, #36]	; 0x24
 800a576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a578:	601a      	str	r2, [r3, #0]
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	627a      	str	r2, [r7, #36]	; 0x24
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	69db      	ldr	r3, [r3, #28]
 800a588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d3c4      	bcc.n	800a518 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a594:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800a596:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d803      	bhi.n	800a5a6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800a59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e19f      	b.n	800a8e6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800a5a6:	2311      	movs	r3, #17
 800a5a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800a5ac:	e19b      	b.n	800a8e6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d902      	bls.n	800a5be <f_lseek+0x114>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f000 818d 	beq.w	800a8e6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f7fd fd86 	bl	80080e4 <clmt_clust>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800a5de:	68ba      	ldr	r2, [r7, #8]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fd fa70 	bl	8007acc <clust2sect>
 800a5ec:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d104      	bne.n	800a5fe <f_lseek+0x154>
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2202      	movs	r2, #2
 800a5f8:	755a      	strb	r2, [r3, #21]
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	e175      	b.n	800a8ea <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	3b01      	subs	r3, #1
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	8992      	ldrh	r2, [r2, #12]
 800a606:	fbb3 f3f2 	udiv	r3, r3, r2
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	8952      	ldrh	r2, [r2, #10]
 800a60e:	3a01      	subs	r2, #1
 800a610:	4013      	ands	r3, r2
 800a612:	69ba      	ldr	r2, [r7, #24]
 800a614:	4413      	add	r3, r2
 800a616:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	8992      	ldrh	r2, [r2, #12]
 800a620:	fbb3 f1f2 	udiv	r1, r3, r2
 800a624:	fb01 f202 	mul.w	r2, r1, r2
 800a628:	1a9b      	subs	r3, r3, r2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 815b 	beq.w	800a8e6 <f_lseek+0x43c>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	69ba      	ldr	r2, [r7, #24]
 800a636:	429a      	cmp	r2, r3
 800a638:	f000 8155 	beq.w	800a8e6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7d1b      	ldrb	r3, [r3, #20]
 800a640:	b25b      	sxtb	r3, r3
 800a642:	2b00      	cmp	r3, #0
 800a644:	da18      	bge.n	800a678 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	7858      	ldrb	r0, [r3, #1]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6a1a      	ldr	r2, [r3, #32]
 800a654:	2301      	movs	r3, #1
 800a656:	f7fc fead 	bl	80073b4 <disk_write>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d004      	beq.n	800a66a <f_lseek+0x1c0>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	755a      	strb	r2, [r3, #21]
 800a666:	2301      	movs	r3, #1
 800a668:	e13f      	b.n	800a8ea <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	7d1b      	ldrb	r3, [r3, #20]
 800a66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a672:	b2da      	uxtb	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	7858      	ldrb	r0, [r3, #1]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a682:	2301      	movs	r3, #1
 800a684:	69ba      	ldr	r2, [r7, #24]
 800a686:	f7fc fe75 	bl	8007374 <disk_read>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d004      	beq.n	800a69a <f_lseek+0x1f0>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	755a      	strb	r2, [r3, #21]
 800a696:	2301      	movs	r3, #1
 800a698:	e127      	b.n	800a8ea <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	621a      	str	r2, [r3, #32]
 800a6a0:	e121      	b.n	800a8e6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d908      	bls.n	800a6be <f_lseek+0x214>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	7d1b      	ldrb	r3, [r3, #20]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d102      	bne.n	800a6be <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	699b      	ldr	r3, [r3, #24]
 800a6c2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6cc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80b5 	beq.w	800a840 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	895b      	ldrh	r3, [r3, #10]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	899b      	ldrh	r3, [r3, #12]
 800a6e0:	fb02 f303 	mul.w	r3, r2, r3
 800a6e4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a6e6:	6a3b      	ldr	r3, [r7, #32]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d01b      	beq.n	800a724 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	1e5a      	subs	r2, r3, #1
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	fbb2 f2f3 	udiv	r2, r2, r3
 800a6f6:	6a3b      	ldr	r3, [r7, #32]
 800a6f8:	1e59      	subs	r1, r3, #1
 800a6fa:	69fb      	ldr	r3, [r7, #28]
 800a6fc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a700:	429a      	cmp	r2, r3
 800a702:	d30f      	bcc.n	800a724 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a704:	6a3b      	ldr	r3, [r7, #32]
 800a706:	1e5a      	subs	r2, r3, #1
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	425b      	negs	r3, r3
 800a70c:	401a      	ands	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	699b      	ldr	r3, [r3, #24]
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	69db      	ldr	r3, [r3, #28]
 800a720:	63bb      	str	r3, [r7, #56]	; 0x38
 800a722:	e022      	b.n	800a76a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d119      	bne.n	800a764 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2100      	movs	r1, #0
 800a734:	4618      	mov	r0, r3
 800a736:	f7fd fc3d 	bl	8007fb4 <create_chain>
 800a73a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d104      	bne.n	800a74c <f_lseek+0x2a2>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2202      	movs	r2, #2
 800a746:	755a      	strb	r2, [r3, #21]
 800a748:	2302      	movs	r3, #2
 800a74a:	e0ce      	b.n	800a8ea <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a752:	d104      	bne.n	800a75e <f_lseek+0x2b4>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	755a      	strb	r2, [r3, #21]
 800a75a:	2301      	movs	r3, #1
 800a75c:	e0c5      	b.n	800a8ea <f_lseek+0x440>
					fp->obj.sclust = clst;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a762:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a768:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d067      	beq.n	800a840 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800a770:	e03a      	b.n	800a7e8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	603b      	str	r3, [r7, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	699a      	ldr	r2, [r3, #24]
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	441a      	add	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	7d1b      	ldrb	r3, [r3, #20]
 800a78a:	f003 0302 	and.w	r3, r3, #2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a796:	4618      	mov	r0, r3
 800a798:	f7fd fc0c 	bl	8007fb4 <create_chain>
 800a79c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d108      	bne.n	800a7b6 <f_lseek+0x30c>
							ofs = 0; break;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	603b      	str	r3, [r7, #0]
 800a7a8:	e022      	b.n	800a7f0 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fd f9ab 	bl	8007b0a <get_fat>
 800a7b4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7bc:	d104      	bne.n	800a7c8 <f_lseek+0x31e>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	755a      	strb	r2, [r3, #21]
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e090      	b.n	800a8ea <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d904      	bls.n	800a7d8 <f_lseek+0x32e>
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d304      	bcc.n	800a7e2 <f_lseek+0x338>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2202      	movs	r2, #2
 800a7dc:	755a      	strb	r2, [r3, #21]
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e083      	b.n	800a8ea <f_lseek+0x440>
					fp->clust = clst;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7e6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d8c0      	bhi.n	800a772 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699a      	ldr	r2, [r3, #24]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	899b      	ldrh	r3, [r3, #12]
 800a800:	461a      	mov	r2, r3
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	fbb3 f1f2 	udiv	r1, r3, r2
 800a808:	fb01 f202 	mul.w	r2, r1, r2
 800a80c:	1a9b      	subs	r3, r3, r2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d016      	beq.n	800a840 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a816:	4618      	mov	r0, r3
 800a818:	f7fd f958 	bl	8007acc <clust2sect>
 800a81c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a820:	2b00      	cmp	r3, #0
 800a822:	d104      	bne.n	800a82e <f_lseek+0x384>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2202      	movs	r2, #2
 800a828:	755a      	strb	r2, [r3, #21]
 800a82a:	2302      	movs	r3, #2
 800a82c:	e05d      	b.n	800a8ea <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	899b      	ldrh	r3, [r3, #12]
 800a832:	461a      	mov	r2, r3
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	fbb3 f3f2 	udiv	r3, r3, r2
 800a83a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a83c:	4413      	add	r3, r2
 800a83e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699a      	ldr	r2, [r3, #24]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d90a      	bls.n	800a862 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699a      	ldr	r2, [r3, #24]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	7d1b      	ldrb	r3, [r3, #20]
 800a858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	699b      	ldr	r3, [r3, #24]
 800a866:	68ba      	ldr	r2, [r7, #8]
 800a868:	8992      	ldrh	r2, [r2, #12]
 800a86a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a86e:	fb01 f202 	mul.w	r2, r1, r2
 800a872:	1a9b      	subs	r3, r3, r2
 800a874:	2b00      	cmp	r3, #0
 800a876:	d036      	beq.n	800a8e6 <f_lseek+0x43c>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a1b      	ldr	r3, [r3, #32]
 800a87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a87e:	429a      	cmp	r2, r3
 800a880:	d031      	beq.n	800a8e6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	7d1b      	ldrb	r3, [r3, #20]
 800a886:	b25b      	sxtb	r3, r3
 800a888:	2b00      	cmp	r3, #0
 800a88a:	da18      	bge.n	800a8be <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	7858      	ldrb	r0, [r3, #1]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	2301      	movs	r3, #1
 800a89c:	f7fc fd8a 	bl	80073b4 <disk_write>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d004      	beq.n	800a8b0 <f_lseek+0x406>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	755a      	strb	r2, [r3, #21]
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e01c      	b.n	800a8ea <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	7d1b      	ldrb	r3, [r3, #20]
 800a8b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	7858      	ldrb	r0, [r3, #1]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8cc:	f7fc fd52 	bl	8007374 <disk_read>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d004      	beq.n	800a8e0 <f_lseek+0x436>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	755a      	strb	r2, [r3, #21]
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e004      	b.n	800a8ea <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8e4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a8e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3740      	adds	r7, #64	; 0x40
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}

0800a8f2 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a8f2:	b580      	push	{r7, lr}
 800a8f4:	b092      	sub	sp, #72	; 0x48
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	60f8      	str	r0, [r7, #12]
 800a8fa:	60b9      	str	r1, [r7, #8]
 800a8fc:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a8fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	2200      	movs	r2, #0
 800a908:	4618      	mov	r0, r3
 800a90a:	f7fe fd65 	bl	80093d8 <find_volume>
 800a90e:	4603      	mov	r3, r0
 800a910:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800a914:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 8099 	bne.w	800aa50 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a91e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a926:	699a      	ldr	r2, [r3, #24]
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	69db      	ldr	r3, [r3, #28]
 800a92c:	3b02      	subs	r3, #2
 800a92e:	429a      	cmp	r2, r3
 800a930:	d804      	bhi.n	800a93c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a934:	699a      	ldr	r2, [r3, #24]
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	e089      	b.n	800aa50 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a93c:	2300      	movs	r3, #0
 800a93e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d128      	bne.n	800a99a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a948:	2302      	movs	r3, #2
 800a94a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a94e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a956:	4618      	mov	r0, r3
 800a958:	f7fd f8d7 	bl	8007b0a <get_fat>
 800a95c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a964:	d103      	bne.n	800a96e <f_getfree+0x7c>
 800a966:	2301      	movs	r3, #1
 800a968:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a96c:	e063      	b.n	800aa36 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a970:	2b01      	cmp	r3, #1
 800a972:	d103      	bne.n	800a97c <f_getfree+0x8a>
 800a974:	2302      	movs	r3, #2
 800a976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a97a:	e05c      	b.n	800aa36 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d102      	bne.n	800a988 <f_getfree+0x96>
 800a982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a984:	3301      	adds	r3, #1
 800a986:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800a988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a98a:	3301      	adds	r3, #1
 800a98c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a98e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a990:	69db      	ldr	r3, [r3, #28]
 800a992:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a994:	429a      	cmp	r2, r3
 800a996:	d3db      	bcc.n	800a950 <f_getfree+0x5e>
 800a998:	e04d      	b.n	800aa36 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	637b      	str	r3, [r7, #52]	; 0x34
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800a9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d113      	bne.n	800a9dc <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a9b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	1c5a      	adds	r2, r3, #1
 800a9ba:	63ba      	str	r2, [r7, #56]	; 0x38
 800a9bc:	4619      	mov	r1, r3
 800a9be:	f7fc ffe7 	bl	8007990 <move_window>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800a9c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d131      	bne.n	800aa34 <f_getfree+0x142>
							p = fs->win;
 800a9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d2:	3338      	adds	r3, #56	; 0x38
 800a9d4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800a9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d8:	899b      	ldrh	r3, [r3, #12]
 800a9da:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b02      	cmp	r3, #2
 800a9e2:	d10f      	bne.n	800aa04 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a9e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9e6:	f7fc fd23 	bl	8007430 <ld_word>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d102      	bne.n	800a9f6 <f_getfree+0x104>
 800a9f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	633b      	str	r3, [r7, #48]	; 0x30
 800a9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fe:	3b02      	subs	r3, #2
 800aa00:	637b      	str	r3, [r7, #52]	; 0x34
 800aa02:	e010      	b.n	800aa26 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800aa04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa06:	f7fc fd2b 	bl	8007460 <ld_dword>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <f_getfree+0x128>
 800aa14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa16:	3301      	adds	r3, #1
 800aa18:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	3304      	adds	r3, #4
 800aa1e:	633b      	str	r3, [r7, #48]	; 0x30
 800aa20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa22:	3b04      	subs	r3, #4
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800aa26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1bd      	bne.n	800a9ae <f_getfree+0xbc>
 800aa32:	e000      	b.n	800aa36 <f_getfree+0x144>
							if (res != FR_OK) break;
 800aa34:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa3a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800aa3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa40:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800aa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa44:	791a      	ldrb	r2, [r3, #4]
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	f042 0201 	orr.w	r2, r2, #1
 800aa4c:	b2d2      	uxtb	r2, r2
 800aa4e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800aa50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3748      	adds	r7, #72	; 0x48
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b0a0      	sub	sp, #128	; 0x80
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800aa68:	f107 010c 	add.w	r1, r7, #12
 800aa6c:	1d3b      	adds	r3, r7, #4
 800aa6e:	2202      	movs	r2, #2
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fcb1 	bl	80093d8 <find_volume>
 800aa76:	4603      	mov	r3, r0
 800aa78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 800aa80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f040 808e 	bne.w	800aba6 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aa90:	4611      	mov	r1, r2
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fb90 	bl	80091b8 <follow_path>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800aa9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d108      	bne.n	800aab8 <f_unlink+0x5c>
 800aaa6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800aaaa:	2102      	movs	r1, #2
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fc fdbf 	bl	8007630 <chk_lock>
 800aab2:	4603      	mov	r3, r0
 800aab4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800aab8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d172      	bne.n	800aba6 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800aac0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800aac4:	b25b      	sxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	da03      	bge.n	800aad2 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800aaca:	2306      	movs	r3, #6
 800aacc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800aad0:	e008      	b.n	800aae4 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800aad2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800aad6:	f003 0301 	and.w	r3, r3, #1
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800aade:	2307      	movs	r3, #7
 800aae0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 800aae4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d134      	bne.n	800ab56 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aaf0:	4611      	mov	r1, r2
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fd fcd4 	bl	80084a0 <ld_clust>
 800aaf8:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800aafa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800aafe:	f003 0310 	and.w	r3, r3, #16
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d027      	beq.n	800ab56 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ab0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab0c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ab0e:	f107 0310 	add.w	r3, r7, #16
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fd fb1d 	bl	8008154 <dir_sdi>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 800ab20:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d116      	bne.n	800ab56 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800ab28:	f107 0310 	add.w	r3, r7, #16
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f7fd fee1 	bl	80088f6 <dir_read>
 800ab34:	4603      	mov	r3, r0
 800ab36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800ab3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d102      	bne.n	800ab48 <f_unlink+0xec>
 800ab42:	2307      	movs	r3, #7
 800ab44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800ab48:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab4c:	2b04      	cmp	r3, #4
 800ab4e:	d102      	bne.n	800ab56 <f_unlink+0xfa>
 800ab50:	2300      	movs	r3, #0
 800ab52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 800ab56:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d123      	bne.n	800aba6 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800ab5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe f926 	bl	8008db4 <dir_remove>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800ab6e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d10c      	bne.n	800ab90 <f_unlink+0x134>
 800ab76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d009      	beq.n	800ab90 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ab7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ab80:	2200      	movs	r2, #0
 800ab82:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7fd f9b0 	bl	8007eea <remove_chain>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ab90:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <f_unlink+0x14a>
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fc ff26 	bl	80079ec <sync_fs>
 800aba0:	4603      	mov	r3, r0
 800aba2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800aba6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3780      	adds	r7, #128	; 0x80
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b088      	sub	sp, #32
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	60f8      	str	r0, [r7, #12]
 800abba:	60b9      	str	r1, [r7, #8]
 800abbc:	607a      	str	r2, [r7, #4]
	int n = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800abc6:	e01b      	b.n	800ac00 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800abc8:	f107 0310 	add.w	r3, r7, #16
 800abcc:	f107 0114 	add.w	r1, r7, #20
 800abd0:	2201      	movs	r2, #1
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff f8ce 	bl	8009d74 <f_read>
		if (rc != 1) break;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d116      	bne.n	800ac0c <f_gets+0x5a>
		c = s[0];
 800abde:	7d3b      	ldrb	r3, [r7, #20]
 800abe0:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
 800abe4:	2b0d      	cmp	r3, #13
 800abe6:	d100      	bne.n	800abea <f_gets+0x38>
 800abe8:	e00a      	b.n	800ac00 <f_gets+0x4e>
		*p++ = c;
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	1c5a      	adds	r2, r3, #1
 800abee:	61ba      	str	r2, [r7, #24]
 800abf0:	7dfa      	ldrb	r2, [r7, #23]
 800abf2:	701a      	strb	r2, [r3, #0]
		n++;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	3301      	adds	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800abfa:	7dfb      	ldrb	r3, [r7, #23]
 800abfc:	2b0a      	cmp	r3, #10
 800abfe:	d007      	beq.n	800ac10 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	3b01      	subs	r3, #1
 800ac04:	69fa      	ldr	r2, [r7, #28]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	dbde      	blt.n	800abc8 <f_gets+0x16>
 800ac0a:	e002      	b.n	800ac12 <f_gets+0x60>
		if (rc != 1) break;
 800ac0c:	bf00      	nop
 800ac0e:	e000      	b.n	800ac12 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800ac10:	bf00      	nop
	}
	*p = 0;
 800ac12:	69bb      	ldr	r3, [r7, #24]
 800ac14:	2200      	movs	r2, #0
 800ac16:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d001      	beq.n	800ac22 <f_gets+0x70>
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	e000      	b.n	800ac24 <f_gets+0x72>
 800ac22:	2300      	movs	r3, #0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b084      	sub	sp, #16
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	460b      	mov	r3, r1
 800ac36:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	2b0a      	cmp	r3, #10
 800ac3c:	d103      	bne.n	800ac46 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800ac3e:	210d      	movs	r1, #13
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff fff3 	bl	800ac2c <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	db25      	blt.n	800ac9e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1c5a      	adds	r2, r3, #1
 800ac56:	60fa      	str	r2, [r7, #12]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	78fa      	ldrb	r2, [r7, #3]
 800ac5e:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2b3c      	cmp	r3, #60	; 0x3c
 800ac64:	dd12      	ble.n	800ac8c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f103 010c 	add.w	r1, r3, #12
 800ac70:	68fa      	ldr	r2, [r7, #12]
 800ac72:	f107 0308 	add.w	r3, r7, #8
 800ac76:	f7ff f9dc 	bl	800a032 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d101      	bne.n	800ac86 <putc_bfd+0x5a>
 800ac82:	2300      	movs	r3, #0
 800ac84:	e001      	b.n	800ac8a <putc_bfd+0x5e>
 800ac86:	f04f 33ff 	mov.w	r3, #4294967295
 800ac8a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	1c5a      	adds	r2, r3, #1
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	609a      	str	r2, [r3, #8]
 800ac9c:	e000      	b.n	800aca0 <putc_bfd+0x74>
	if (i < 0) return;
 800ac9e:	bf00      	nop
}
 800aca0:	3710      	adds	r7, #16
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}

0800aca6 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800aca6:	b580      	push	{r7, lr}
 800aca8:	b084      	sub	sp, #16
 800acaa:	af00      	add	r7, sp, #0
 800acac:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	db16      	blt.n	800ace4 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6818      	ldr	r0, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f103 010c 	add.w	r1, r3, #12
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	461a      	mov	r2, r3
 800acc6:	f107 030c 	add.w	r3, r7, #12
 800acca:	f7ff f9b2 	bl	800a032 <f_write>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d107      	bne.n	800ace4 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	4293      	cmp	r3, r2
 800acdc:	d102      	bne.n	800ace4 <putc_flush+0x3e>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	e001      	b.n	800ace8 <putc_flush+0x42>
	return EOF;
 800ace4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	609a      	str	r2, [r3, #8]
}
 800ad0e:	bf00      	nop
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b096      	sub	sp, #88	; 0x58
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800ad24:	f107 030c 	add.w	r3, r7, #12
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7ff ffe0 	bl	800acf0 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 800ad30:	e009      	b.n	800ad46 <f_puts+0x2c>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	781a      	ldrb	r2, [r3, #0]
 800ad3a:	f107 030c 	add.w	r3, r7, #12
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff ff73 	bl	800ac2c <putc_bfd>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1f1      	bne.n	800ad32 <f_puts+0x18>
	return putc_flush(&pb);
 800ad4e:	f107 030c 	add.w	r3, r7, #12
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7ff ffa7 	bl	800aca6 <putc_flush>
 800ad58:	4603      	mov	r3, r0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3758      	adds	r7, #88	; 0x58
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
	...

0800ad64 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	4613      	mov	r3, r2
 800ad70:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ad72:	2301      	movs	r3, #1
 800ad74:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ad7a:	4b1f      	ldr	r3, [pc, #124]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800ad7c:	7a5b      	ldrb	r3, [r3, #9]
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d131      	bne.n	800ade8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ad84:	4b1c      	ldr	r3, [pc, #112]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800ad86:	7a5b      	ldrb	r3, [r3, #9]
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	4b1a      	ldr	r3, [pc, #104]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800ad8e:	2100      	movs	r1, #0
 800ad90:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ad92:	4b19      	ldr	r3, [pc, #100]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800ad94:	7a5b      	ldrb	r3, [r3, #9]
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	4a17      	ldr	r2, [pc, #92]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ada2:	4b15      	ldr	r3, [pc, #84]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800ada4:	7a5b      	ldrb	r3, [r3, #9]
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b13      	ldr	r3, [pc, #76]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800adac:	4413      	add	r3, r2
 800adae:	79fa      	ldrb	r2, [r7, #7]
 800adb0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800adb2:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800adb4:	7a5b      	ldrb	r3, [r3, #9]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	b2d1      	uxtb	r1, r2
 800adbc:	4a0e      	ldr	r2, [pc, #56]	; (800adf8 <FATFS_LinkDriverEx+0x94>)
 800adbe:	7251      	strb	r1, [r2, #9]
 800adc0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800adc2:	7dbb      	ldrb	r3, [r7, #22]
 800adc4:	3330      	adds	r3, #48	; 0x30
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	3301      	adds	r3, #1
 800add0:	223a      	movs	r2, #58	; 0x3a
 800add2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	3302      	adds	r3, #2
 800add8:	222f      	movs	r2, #47	; 0x2f
 800adda:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	3303      	adds	r3, #3
 800ade0:	2200      	movs	r2, #0
 800ade2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ade4:	2300      	movs	r3, #0
 800ade6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
}
 800adea:	4618      	mov	r0, r3
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	200005e0 	.word	0x200005e0

0800adfc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ae06:	2200      	movs	r2, #0
 800ae08:	6839      	ldr	r1, [r7, #0]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff ffaa 	bl	800ad64 <FATFS_LinkDriverEx>
 800ae10:	4603      	mov	r3, r0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
	...

0800ae1c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b085      	sub	sp, #20
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	4603      	mov	r3, r0
 800ae24:	6039      	str	r1, [r7, #0]
 800ae26:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ae28:	88fb      	ldrh	r3, [r7, #6]
 800ae2a:	2b7f      	cmp	r3, #127	; 0x7f
 800ae2c:	d802      	bhi.n	800ae34 <ff_convert+0x18>
		c = chr;
 800ae2e:	88fb      	ldrh	r3, [r7, #6]
 800ae30:	81fb      	strh	r3, [r7, #14]
 800ae32:	e025      	b.n	800ae80 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00b      	beq.n	800ae52 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ae3a:	88fb      	ldrh	r3, [r7, #6]
 800ae3c:	2bff      	cmp	r3, #255	; 0xff
 800ae3e:	d805      	bhi.n	800ae4c <ff_convert+0x30>
 800ae40:	88fb      	ldrh	r3, [r7, #6]
 800ae42:	3b80      	subs	r3, #128	; 0x80
 800ae44:	4a12      	ldr	r2, [pc, #72]	; (800ae90 <ff_convert+0x74>)
 800ae46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae4a:	e000      	b.n	800ae4e <ff_convert+0x32>
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	81fb      	strh	r3, [r7, #14]
 800ae50:	e016      	b.n	800ae80 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800ae52:	2300      	movs	r3, #0
 800ae54:	81fb      	strh	r3, [r7, #14]
 800ae56:	e009      	b.n	800ae6c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800ae58:	89fb      	ldrh	r3, [r7, #14]
 800ae5a:	4a0d      	ldr	r2, [pc, #52]	; (800ae90 <ff_convert+0x74>)
 800ae5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae60:	88fa      	ldrh	r2, [r7, #6]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d006      	beq.n	800ae74 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800ae66:	89fb      	ldrh	r3, [r7, #14]
 800ae68:	3301      	adds	r3, #1
 800ae6a:	81fb      	strh	r3, [r7, #14]
 800ae6c:	89fb      	ldrh	r3, [r7, #14]
 800ae6e:	2b7f      	cmp	r3, #127	; 0x7f
 800ae70:	d9f2      	bls.n	800ae58 <ff_convert+0x3c>
 800ae72:	e000      	b.n	800ae76 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ae74:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ae76:	89fb      	ldrh	r3, [r7, #14]
 800ae78:	3380      	adds	r3, #128	; 0x80
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800ae80:	89fb      	ldrh	r3, [r7, #14]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	08015e90 	.word	0x08015e90

0800ae94 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ae9e:	88fb      	ldrh	r3, [r7, #6]
 800aea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aea4:	d201      	bcs.n	800aeaa <ff_wtoupper+0x16>
 800aea6:	4b3e      	ldr	r3, [pc, #248]	; (800afa0 <ff_wtoupper+0x10c>)
 800aea8:	e000      	b.n	800aeac <ff_wtoupper+0x18>
 800aeaa:	4b3e      	ldr	r3, [pc, #248]	; (800afa4 <ff_wtoupper+0x110>)
 800aeac:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	1c9a      	adds	r2, r3, #2
 800aeb2:	617a      	str	r2, [r7, #20]
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800aeb8:	8a7b      	ldrh	r3, [r7, #18]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d068      	beq.n	800af90 <ff_wtoupper+0xfc>
 800aebe:	88fa      	ldrh	r2, [r7, #6]
 800aec0:	8a7b      	ldrh	r3, [r7, #18]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d364      	bcc.n	800af90 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	1c9a      	adds	r2, r3, #2
 800aeca:	617a      	str	r2, [r7, #20]
 800aecc:	881b      	ldrh	r3, [r3, #0]
 800aece:	823b      	strh	r3, [r7, #16]
 800aed0:	8a3b      	ldrh	r3, [r7, #16]
 800aed2:	0a1b      	lsrs	r3, r3, #8
 800aed4:	81fb      	strh	r3, [r7, #14]
 800aed6:	8a3b      	ldrh	r3, [r7, #16]
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800aedc:	88fa      	ldrh	r2, [r7, #6]
 800aede:	8a79      	ldrh	r1, [r7, #18]
 800aee0:	8a3b      	ldrh	r3, [r7, #16]
 800aee2:	440b      	add	r3, r1
 800aee4:	429a      	cmp	r2, r3
 800aee6:	da49      	bge.n	800af7c <ff_wtoupper+0xe8>
			switch (cmd) {
 800aee8:	89fb      	ldrh	r3, [r7, #14]
 800aeea:	2b08      	cmp	r3, #8
 800aeec:	d84f      	bhi.n	800af8e <ff_wtoupper+0xfa>
 800aeee:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <ff_wtoupper+0x60>)
 800aef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef4:	0800af19 	.word	0x0800af19
 800aef8:	0800af2b 	.word	0x0800af2b
 800aefc:	0800af41 	.word	0x0800af41
 800af00:	0800af49 	.word	0x0800af49
 800af04:	0800af51 	.word	0x0800af51
 800af08:	0800af59 	.word	0x0800af59
 800af0c:	0800af61 	.word	0x0800af61
 800af10:	0800af69 	.word	0x0800af69
 800af14:	0800af71 	.word	0x0800af71
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800af18:	88fa      	ldrh	r2, [r7, #6]
 800af1a:	8a7b      	ldrh	r3, [r7, #18]
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	005b      	lsls	r3, r3, #1
 800af20:	697a      	ldr	r2, [r7, #20]
 800af22:	4413      	add	r3, r2
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	80fb      	strh	r3, [r7, #6]
 800af28:	e027      	b.n	800af7a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800af2a:	88fa      	ldrh	r2, [r7, #6]
 800af2c:	8a7b      	ldrh	r3, [r7, #18]
 800af2e:	1ad3      	subs	r3, r2, r3
 800af30:	b29b      	uxth	r3, r3
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	b29b      	uxth	r3, r3
 800af38:	88fa      	ldrh	r2, [r7, #6]
 800af3a:	1ad3      	subs	r3, r2, r3
 800af3c:	80fb      	strh	r3, [r7, #6]
 800af3e:	e01c      	b.n	800af7a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800af40:	88fb      	ldrh	r3, [r7, #6]
 800af42:	3b10      	subs	r3, #16
 800af44:	80fb      	strh	r3, [r7, #6]
 800af46:	e018      	b.n	800af7a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800af48:	88fb      	ldrh	r3, [r7, #6]
 800af4a:	3b20      	subs	r3, #32
 800af4c:	80fb      	strh	r3, [r7, #6]
 800af4e:	e014      	b.n	800af7a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800af50:	88fb      	ldrh	r3, [r7, #6]
 800af52:	3b30      	subs	r3, #48	; 0x30
 800af54:	80fb      	strh	r3, [r7, #6]
 800af56:	e010      	b.n	800af7a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800af58:	88fb      	ldrh	r3, [r7, #6]
 800af5a:	3b1a      	subs	r3, #26
 800af5c:	80fb      	strh	r3, [r7, #6]
 800af5e:	e00c      	b.n	800af7a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	3308      	adds	r3, #8
 800af64:	80fb      	strh	r3, [r7, #6]
 800af66:	e008      	b.n	800af7a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800af68:	88fb      	ldrh	r3, [r7, #6]
 800af6a:	3b50      	subs	r3, #80	; 0x50
 800af6c:	80fb      	strh	r3, [r7, #6]
 800af6e:	e004      	b.n	800af7a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800af70:	88fb      	ldrh	r3, [r7, #6]
 800af72:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800af76:	80fb      	strh	r3, [r7, #6]
 800af78:	bf00      	nop
			}
			break;
 800af7a:	e008      	b.n	800af8e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800af7c:	89fb      	ldrh	r3, [r7, #14]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d195      	bne.n	800aeae <ff_wtoupper+0x1a>
 800af82:	8a3b      	ldrh	r3, [r7, #16]
 800af84:	005b      	lsls	r3, r3, #1
 800af86:	697a      	ldr	r2, [r7, #20]
 800af88:	4413      	add	r3, r2
 800af8a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800af8c:	e78f      	b.n	800aeae <ff_wtoupper+0x1a>
			break;
 800af8e:	bf00      	nop
	}

	return chr;
 800af90:	88fb      	ldrh	r3, [r7, #6]
}
 800af92:	4618      	mov	r0, r3
 800af94:	371c      	adds	r7, #28
 800af96:	46bd      	mov	sp, r7
 800af98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9c:	4770      	bx	lr
 800af9e:	bf00      	nop
 800afa0:	08015f90 	.word	0x08015f90
 800afa4:	08016184 	.word	0x08016184

0800afa8 <_ZN8Platform3BSP16InterruptManagerD1Ev>:
    InterruptManager(InterruptManager&&) = delete;
    InterruptManager& operator=(const InterruptManager&) = delete;
    const InterruptManager& operator=(InterruptManager&&) = delete;
#endif
    /* --Default destructor. */
    virtual ~InterruptManager() = default;
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	4a04      	ldr	r2, [pc, #16]	; (800afc4 <_ZN8Platform3BSP16InterruptManagerD1Ev+0x1c>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	4618      	mov	r0, r3
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	08016248 	.word	0x08016248

0800afc8 <_ZN8Platform3BSP16InterruptManagerD0Ev>:
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7ff ffe9 	bl	800afa8 <_ZN8Platform3BSP16InterruptManagerD1Ev>
 800afd6:	2104      	movs	r1, #4
 800afd8:	6878      	ldr	r0, [r7, #4]
 800afda:	f007 fc13 	bl	8012804 <_ZdlPvj>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <_Z41__static_initialization_and_destruction_0ii>:
    //return (iManager ? iManager->clear(*this) : false);
    return false;
}


}    // namespace BSP
 800afe8:	b580      	push	{r7, lr}
 800afea:	b082      	sub	sp, #8
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d107      	bne.n	800b008 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800affe:	4293      	cmp	r3, r2
 800b000:	d102      	bne.n	800b008 <_Z41__static_initialization_and_destruction_0ii+0x20>
static InterruptManager iManager;
 800b002:	4809      	ldr	r0, [pc, #36]	; (800b028 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b004:	f000 f884 	bl	800b110 <_ZN8Platform3BSP16InterruptManagerC1Ev>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d107      	bne.n	800b01e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b014:	4293      	cmp	r3, r2
 800b016:	d102      	bne.n	800b01e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b018:	4803      	ldr	r0, [pc, #12]	; (800b028 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b01a:	f7ff ffc5 	bl	800afa8 <_ZN8Platform3BSP16InterruptManagerD1Ev>
}    // namespace BSP
 800b01e:	bf00      	nop
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	200005ec 	.word	0x200005ec

0800b02c <_GLOBAL__sub_I__ZNK8Platform3BSP10DigitalOut3setEv>:
 800b02c:	b580      	push	{r7, lr}
 800b02e:	af00      	add	r7, sp, #0
 800b030:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b034:	2001      	movs	r0, #1
 800b036:	f7ff ffd7 	bl	800afe8 <_Z41__static_initialization_and_destruction_0ii>
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <_GLOBAL__sub_D__ZNK8Platform3BSP10DigitalOut3setEv>:
 800b03c:	b580      	push	{r7, lr}
 800b03e:	af00      	add	r7, sp, #0
 800b040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b044:	2000      	movs	r0, #0
 800b046:	f7ff ffcf 	bl	800afe8 <_Z41__static_initialization_and_destruction_0ii>
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800b04c:	b480      	push	{r7}
 800b04e:	b083      	sub	sp, #12
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800b07a:	b480      	push	{r7}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800b090:	b480      	push	{r7}
 800b092:	b083      	sub	sp, #12
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	609a      	str	r2, [r3, #8]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	370c      	adds	r7, #12
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b082      	sub	sp, #8
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d005      	beq.n	800b0c8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	2203      	movs	r2, #3
 800b0c6:	4798      	blx	r3
    }
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800b0d2:	b480      	push	{r7}
 800b0d4:	b083      	sub	sp, #12
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	bf0c      	ite	eq
 800b0e2:	2301      	moveq	r3, #1
 800b0e4:	2300      	movne	r3, #0
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ffd4 	bl	800b0ac <_ZNSt14_Function_baseD1Ev>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	3708      	adds	r7, #8
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
	...

0800b110 <_ZN8Platform3BSP16InterruptManagerC1Ev>:

namespace Platform::BSP {

DigitalInterrupt::InterruptHandler InterruptManager::handler[static_cast<uint16_t>(NUMOFHANDLER::NHANDLER)] = {nullptr};

InterruptManager::InterruptManager() {
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
 800b118:	4a11      	ldr	r2, [pc, #68]	; (800b160 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x50>)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	601a      	str	r2, [r3, #0]
    /* --Setup internals. */
    // set all handlers to failure to catch uninitialized interrupt
    for(size_t i = 0; i < static_cast<uint16_t>(NUMOFHANDLER::NHANDLER); ++i)
 800b11e:	2300      	movs	r3, #0
 800b120:	60fb      	str	r3, [r7, #12]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b0f      	cmp	r3, #15
 800b126:	d816      	bhi.n	800b156 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x46>
    {
       if(handler[i] == nullptr)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	011b      	lsls	r3, r3, #4
 800b12c:	4a0d      	ldr	r2, [pc, #52]	; (800b164 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x54>)
 800b12e:	4413      	add	r3, r2
 800b130:	2100      	movs	r1, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f000 f83a 	bl	800b1ac <_ZSteqIvJN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEbRKSt8functionIFT_DpT0_EEDn>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d007      	beq.n	800b14e <_ZN8Platform3BSP16InterruptManagerC1Ev+0x3e>
       {
            handler[i] = failure;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	011b      	lsls	r3, r3, #4
 800b142:	4a08      	ldr	r2, [pc, #32]	; (800b164 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x54>)
 800b144:	4413      	add	r3, r2
 800b146:	4908      	ldr	r1, [pc, #32]	; (800b168 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x58>)
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f83f 	bl	800b1cc <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEaSIRS4_EENSt9enable_ifIXsrNS5_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSD_JS3_EEEE5valueERS5_E4typeEOSB_>
    for(size_t i = 0; i < static_cast<uint16_t>(NUMOFHANDLER::NHANDLER); ++i)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	3301      	adds	r3, #1
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e7e5      	b.n	800b122 <_ZN8Platform3BSP16InterruptManagerC1Ev+0x12>
       }
    }
}
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	08016248 	.word	0x08016248
 800b164:	200005f0 	.word	0x200005f0
 800b168:	0800b16d 	.word	0x0800b16d

0800b16c <_ZN8Platform3BSP16InterruptManager7failureENS0_16DigitalInterrupt8EdgeTypeE>:

void InterruptManager::failure(DigitalInterrupt::EdgeType t)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
    (void)t; // to avoid compiler warnings
    /* --This should never happen. */
    while(true);
 800b174:	e7fe      	b.n	800b174 <_ZN8Platform3BSP16InterruptManager7failureENS0_16DigitalInterrupt8EdgeTypeE+0x8>

0800b176 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1EDn>:

      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
 800b176:	b580      	push	{r7, lr}
 800b178:	b082      	sub	sp, #8
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	f7ff ff84 	bl	800b090 <_ZNSt14_Function_baseC1Ev>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1Ev>:
      function() noexcept
 800b192:	b580      	push	{r7, lr}
 800b194:	b082      	sub	sp, #8
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f7ff ff77 	bl	800b090 <_ZNSt14_Function_baseC1Ev>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3708      	adds	r7, #8
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	bd80      	pop	{r7, pc}

0800b1ac <_ZSteqIvJN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator==(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	6039      	str	r1, [r7, #0]
    { return !static_cast<bool>(__f); }
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 f827 	bl	800b20a <_ZNKSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEcvbEv>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f083 0301 	eor.w	r3, r3, #1
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEaSIRS4_EENSt9enable_ifIXsrNS5_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSD_JS3_EEEE5valueERS5_E4typeEOSB_>:
	operator=(_Functor&& __f)
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800b1d6:	6838      	ldr	r0, [r7, #0]
 800b1d8:	f000 f827 	bl	800b22a <_ZSt7forwardIRFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	f107 0308 	add.w	r3, r7, #8
 800b1e2:	4611      	mov	r1, r2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 f82b 	bl	800b240 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_>
 800b1ea:	f107 0308 	add.w	r3, r7, #8
 800b1ee:	6879      	ldr	r1, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f000 f84f 	bl	800b294 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE4swapERS5_>
 800b1f6:	f107 0308 	add.w	r3, r7, #8
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff ff7a 	bl	800b0f4 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEED1Ev>
	  return *this;
 800b200:	687b      	ldr	r3, [r7, #4]
	}
 800b202:	4618      	mov	r0, r3
 800b204:	3718      	adds	r7, #24
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <_ZNKSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEcvbEv>:
      explicit operator bool() const noexcept
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	4618      	mov	r0, r3
 800b216:	f7ff ff5c 	bl	800b0d2 <_ZNKSt14_Function_base8_M_emptyEv>
 800b21a:	4603      	mov	r3, r0
 800b21c:	f083 0301 	eor.w	r3, r3, #1
 800b220:	b2db      	uxtb	r3, r3
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <_ZSt7forwardIRFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS6_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b22a:	b480      	push	{r7}
 800b22c:	b083      	sub	sp, #12
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4618      	mov	r0, r3
 800b236:	370c      	adds	r7, #12
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7ff ff1f 	bl	800b090 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	4618      	mov	r0, r3
 800b256:	f000 f849 	bl	800b2ec <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE21_M_not_empty_functionIS5_EEbPT_>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d00f      	beq.n	800b280 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800b260:	687c      	ldr	r4, [r7, #4]
 800b262:	463b      	mov	r3, r7
 800b264:	4618      	mov	r0, r3
 800b266:	f000 f851 	bl	800b30c <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>
 800b26a:	4603      	mov	r3, r0
 800b26c:	4619      	mov	r1, r3
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 f857 	bl	800b322 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_>
	    _M_invoker = &_My_handler::_M_invoke;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a05      	ldr	r2, [pc, #20]	; (800b28c <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_+0x4c>)
 800b278:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a04      	ldr	r2, [pc, #16]	; (800b290 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1IPS4_vvEET_+0x50>)
 800b27e:	609a      	str	r2, [r3, #8]
      }
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	bd90      	pop	{r4, r7, pc}
 800b28a:	bf00      	nop
 800b28c:	0800b347 	.word	0x0800b347
 800b290:	0800b371 	.word	0x0800b371

0800b294 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE4swapERS5_>:
      void swap(function& __x) noexcept
 800b294:	b580      	push	{r7, lr}
 800b296:	b082      	sub	sp, #8
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 f88d 	bl	800b3c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f103 0208 	add.w	r2, r3, #8
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	3308      	adds	r3, #8
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4610      	mov	r0, r2
 800b2b8:	f000 f8b6 	bl	800b428 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f103 020c 	add.w	r2, r3, #12
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	f000 f8d7 	bl	800b47c <_ZSt4swapIPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>
      }
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	370c      	adds	r7, #12
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ea:	4770      	bx	lr

0800b2ec <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE21_M_not_empty_functionIS5_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	bf14      	ite	ne
 800b2fa:	2301      	movne	r3, #1
 800b2fc:	2300      	moveq	r3, #0
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	4618      	mov	r0, r3
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	4618      	mov	r0, r3
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800b322:	b590      	push	{r4, r7, lr}
 800b324:	b083      	sub	sp, #12
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
 800b32a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800b32c:	6838      	ldr	r0, [r7, #0]
 800b32e:	f7ff ffed 	bl	800b30c <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>
 800b332:	4603      	mov	r3, r0
 800b334:	4622      	mov	r2, r4
 800b336:	4619      	mov	r1, r3
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f000 f8be 	bl	800b4ba <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	bd90      	pop	{r4, r7, pc}

0800b346 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E9_M_invokeERKSt9_Any_dataOS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800b346:	b590      	push	{r4, r7, lr}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f8cb 	bl	800b4ec <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>
 800b356:	4604      	mov	r4, r0
 800b358:	6838      	ldr	r0, [r7, #0]
 800b35a:	f7ff ffbc 	bl	800b2d6 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b35e:	4603      	mov	r3, r0
 800b360:	4619      	mov	r1, r3
 800b362:	4620      	mov	r0, r4
 800b364:	f000 f8d2 	bl	800b50c <_ZSt10__invoke_rIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES8_E4typeEOS9_DpOSA_>
				     std::forward<_ArgTypes>(__args)...);
 800b368:	bf00      	nop
      }
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd90      	pop	{r4, r7, pc}

0800b370 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800b370:	b590      	push	{r4, r7, lr}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	4613      	mov	r3, r2
 800b37c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800b37e:	79fb      	ldrb	r3, [r7, #7]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d109      	bne.n	800b398 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800b384:	68b8      	ldr	r0, [r7, #8]
 800b386:	f000 f8b1 	bl	800b4ec <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>
 800b38a:	4604      	mov	r4, r0
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f000 f8d3 	bl	800b538 <_ZNSt9_Any_data9_M_accessIPPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>
 800b392:	4603      	mov	r3, r0
 800b394:	601c      	str	r4, [r3, #0]
	    break;
 800b396:	e005      	b.n	800b3a4 <_ZNSt17_Function_handlerIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEPS4_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	461a      	mov	r2, r3
 800b39c:	68b9      	ldr	r1, [r7, #8]
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	f000 f8d6 	bl	800b550 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>
	return false;
 800b3a4:	2300      	movs	r3, #0
      }
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	3714      	adds	r7, #20
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd90      	pop	{r4, r7, pc}

0800b3ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800b3ae:	b480      	push	{r7}
 800b3b0:	b083      	sub	sp, #12
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr

0800b3c4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b084      	sub	sp, #16
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff ffed 	bl	800b3ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3de:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800b3e2:	6838      	ldr	r0, [r7, #0]
 800b3e4:	f7ff ffe3 	bl	800b3ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b3f0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800b3f4:	f107 0308 	add.w	r3, r7, #8
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	f7ff ffd8 	bl	800b3ae <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800b3fe:	4602      	mov	r2, r0
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b406:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800b40a:	bf00      	nop
 800b40c:	3710      	adds	r7, #16
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff ffed 	bl	800b412 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800b438:	4603      	mov	r3, r0
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800b43e:	6838      	ldr	r0, [r7, #0]
 800b440:	f7ff ffe7 	bl	800b412 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800b444:	4603      	mov	r3, r0
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800b44c:	f107 030c 	add.w	r3, r7, #12
 800b450:	4618      	mov	r0, r3
 800b452:	f7ff ffde 	bl	800b412 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800b456:	4603      	mov	r3, r0
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	601a      	str	r2, [r3, #0]
    }
 800b45e:	bf00      	nop
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>:
    move(_Tp&& __t) noexcept
 800b466:	b480      	push	{r7}
 800b468:	b083      	sub	sp, #12
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4618      	mov	r0, r3
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <_ZSt4swapIPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISE_ESt18is_move_assignableISE_EEE5valueEvE4typeERSE_SO_>:
    swap(_Tp& __a, _Tp& __b)
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f7ff ffed 	bl	800b466 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>
 800b48c:	4603      	mov	r3, r0
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800b492:	6838      	ldr	r0, [r7, #0]
 800b494:	f7ff ffe7 	bl	800b466 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>
 800b498:	4603      	mov	r3, r0
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800b4a0:	f107 030c 	add.w	r3, r7, #12
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7ff ffde 	bl	800b466 <_ZSt4moveIRPFvRKSt9_Any_dataON8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOSC_>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	601a      	str	r2, [r3, #0]
    }
 800b4b2:	bf00      	nop
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE15_M_init_functorERSt9_Any_dataOS6_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800b4ba:	b590      	push	{r4, r7, lr}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	60f8      	str	r0, [r7, #12]
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800b4c6:	68b8      	ldr	r0, [r7, #8]
 800b4c8:	f7ff ff20 	bl	800b30c <_ZSt4moveIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEONSt16remove_referenceIT_E4typeEOS8_>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	681c      	ldr	r4, [r3, #0]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f7ff fdc7 	bl	800b064 <_ZNSt9_Any_data9_M_accessEv>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	4619      	mov	r1, r3
 800b4da:	2004      	movs	r0, #4
 800b4dc:	f7ff fdb6 	bl	800b04c <_ZnwjPv>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	601c      	str	r4, [r3, #0]
 800b4e4:	bf00      	nop
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd90      	pop	{r4, r7, pc}

0800b4ec <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f856 	bl	800b5a6 <_ZNKSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERKT_v>
 800b4fa:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800b4fc:	68f8      	ldr	r0, [r7, #12]
 800b4fe:	f000 f85e 	bl	800b5be <_ZSt11__addressofIKPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEPT_RS7_>
 800b502:	4603      	mov	r3, r0
	}
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <_ZSt10__invoke_rIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES8_E4typeEOS9_DpOSA_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800b50c:	b5b0      	push	{r4, r5, r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f85c 	bl	800b5d4 <_ZSt7forwardIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800b51c:	4604      	mov	r4, r0
 800b51e:	6838      	ldr	r0, [r7, #0]
 800b520:	f7ff fed9 	bl	800b2d6 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b524:	4603      	mov	r3, r0
 800b526:	461a      	mov	r2, r3
 800b528:	4621      	mov	r1, r4
 800b52a:	4628      	mov	r0, r5
 800b52c:	f000 f85d 	bl	800b5ea <_ZSt13__invoke_implIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bdb0      	pop	{r4, r5, r7, pc}

0800b538 <_ZNSt9_Any_data9_M_accessIPPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>:
      _M_access()
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f7ff fd8f 	bl	800b064 <_ZNSt9_Any_data9_M_accessEv>
 800b546:	4603      	mov	r3, r0
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800b550:	b5b0      	push	{r4, r5, r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	60f8      	str	r0, [r7, #12]
 800b558:	60b9      	str	r1, [r7, #8]
 800b55a:	4613      	mov	r3, r2
 800b55c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800b55e:	79fb      	ldrb	r3, [r7, #7]
 800b560:	2b03      	cmp	r3, #3
 800b562:	d016      	beq.n	800b592 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x42>
 800b564:	2b03      	cmp	r3, #3
 800b566:	dc19      	bgt.n	800b59c <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d002      	beq.n	800b572 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x22>
 800b56c:	2b02      	cmp	r3, #2
 800b56e:	d00a      	beq.n	800b586 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x36>
 800b570:	e014      	b.n	800b59c <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800b572:	68b8      	ldr	r0, [r7, #8]
 800b574:	f7ff ffba 	bl	800b4ec <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE14_M_get_pointerERKSt9_Any_data>
 800b578:	4604      	mov	r4, r0
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7ff ffdc 	bl	800b538 <_ZNSt9_Any_data9_M_accessIPPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>
 800b580:	4603      	mov	r3, r0
 800b582:	601c      	str	r4, [r3, #0]
	      break;
 800b584:	e00a      	b.n	800b59c <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800b586:	462a      	mov	r2, r5
 800b588:	68b9      	ldr	r1, [r7, #8]
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f000 f843 	bl	800b616 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>
	      break;
 800b590:	e004      	b.n	800b59c <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800b592:	4621      	mov	r1, r4
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 f857 	bl	800b648 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800b59a:	bf00      	nop
	  return false;
 800b59c:	2300      	movs	r3, #0
	}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3710      	adds	r7, #16
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bdb0      	pop	{r4, r5, r7, pc}

0800b5a6 <_ZNKSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERKT_v>:
      _M_access() const
 800b5a6:	b580      	push	{r7, lr}
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f7ff fd63 	bl	800b07a <_ZNKSt9_Any_data9_M_accessEv>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <_ZSt11__addressofIKPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEPT_RS7_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b5be:	b480      	push	{r7}
 800b5c0:	b083      	sub	sp, #12
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <_ZSt7forwardIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	370c      	adds	r7, #12
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr

0800b5ea <_ZSt13__invoke_implIvRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEJS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800b5ea:	b590      	push	{r4, r7, lr}
 800b5ec:	b085      	sub	sp, #20
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	7338      	strb	r0, [r7, #12]
 800b5f2:	60b9      	str	r1, [r7, #8]
 800b5f4:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800b5f6:	68b8      	ldr	r0, [r7, #8]
 800b5f8:	f7ff ffec 	bl	800b5d4 <_ZSt7forwardIRPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEOT_RNSt16remove_referenceIS7_E4typeE>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	681c      	ldr	r4, [r3, #0]
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff fe68 	bl	800b2d6 <_ZSt7forwardIN8Platform3BSP16DigitalInterrupt8EdgeTypeEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b606:	4603      	mov	r3, r0
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4618      	mov	r0, r3
 800b60c:	47a0      	blx	r4
 800b60e:	bf00      	nop
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	bd90      	pop	{r4, r7, pc}

0800b616 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE8_M_cloneERSt9_Any_dataRKS8_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800b616:	b590      	push	{r4, r7, lr}
 800b618:	b085      	sub	sp, #20
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	60f8      	str	r0, [r7, #12]
 800b61e:	60b9      	str	r1, [r7, #8]
 800b620:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800b622:	68b8      	ldr	r0, [r7, #8]
 800b624:	f7ff ffbf 	bl	800b5a6 <_ZNKSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERKT_v>
 800b628:	4603      	mov	r3, r0
 800b62a:	681c      	ldr	r4, [r3, #0]
 800b62c:	68f8      	ldr	r0, [r7, #12]
 800b62e:	f7ff fd19 	bl	800b064 <_ZNSt9_Any_data9_M_accessEv>
 800b632:	4603      	mov	r3, r0
 800b634:	4619      	mov	r1, r3
 800b636:	2004      	movs	r0, #4
 800b638:	f7ff fd08 	bl	800b04c <_ZnwjPv>
 800b63c:	4603      	mov	r3, r0
 800b63e:	601c      	str	r4, [r3, #0]
	}
 800b640:	bf00      	nop
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	bd90      	pop	{r4, r7, pc}

0800b648 <_ZNSt14_Function_base13_Base_managerIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f804 	bl	800b660 <_ZNSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>
	}
 800b658:	bf00      	nop
 800b65a:	3708      	adds	r7, #8
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <_ZNSt9_Any_data9_M_accessIPFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEERT_v>:
      _M_access()
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f7ff fcfb 	bl	800b064 <_ZNSt9_Any_data9_M_accessEv>
 800b66e:	4603      	mov	r3, r0
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <_Z41__static_initialization_and_destruction_0ii>:



/* --Bind the interrupt manager to global interrupt handler. */

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { Platform::BSP::InterruptManager::resolve(GPIO_Pin); }
 800b678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d115      	bne.n	800b6b4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b68e:	4293      	cmp	r3, r2
 800b690:	d110      	bne.n	800b6b4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
DigitalInterrupt::InterruptHandler InterruptManager::handler[static_cast<uint16_t>(NUMOFHANDLER::NHANDLER)] = {nullptr};
 800b692:	4c13      	ldr	r4, [pc, #76]	; (800b6e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800b694:	260f      	movs	r6, #15
 800b696:	2100      	movs	r1, #0
 800b698:	4620      	mov	r0, r4
 800b69a:	f7ff fd6c 	bl	800b176 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1EDn>
 800b69e:	f104 0510 	add.w	r5, r4, #16
 800b6a2:	1e74      	subs	r4, r6, #1
 800b6a4:	2c00      	cmp	r4, #0
 800b6a6:	db05      	blt.n	800b6b4 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 800b6a8:	4628      	mov	r0, r5
 800b6aa:	f7ff fd72 	bl	800b192 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEEC1Ev>
 800b6ae:	3510      	adds	r5, #16
 800b6b0:	3c01      	subs	r4, #1
 800b6b2:	e7f7      	b.n	800b6a4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d10d      	bne.n	800b6d6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d108      	bne.n	800b6d6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800b6c4:	4c07      	ldr	r4, [pc, #28]	; (800b6e4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800b6c6:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800b6c8:	429c      	cmp	r4, r3
 800b6ca:	d004      	beq.n	800b6d6 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 800b6cc:	3c10      	subs	r4, #16
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	f7ff fd10 	bl	800b0f4 <_ZNSt8functionIFvN8Platform3BSP16DigitalInterrupt8EdgeTypeEEED1Ev>
 800b6d4:	e7f7      	b.n	800b6c6 <_Z41__static_initialization_and_destruction_0ii+0x4e>
extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { Platform::BSP::InterruptManager::resolve(GPIO_Pin); }
 800b6d6:	bf00      	nop
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	200005f0 	.word	0x200005f0
 800b6e4:	200006f0 	.word	0x200006f0

0800b6e8 <_GLOBAL__sub_I__ZN8Platform3BSP16InterruptManager7handlerE>:
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b6f0:	2001      	movs	r0, #1
 800b6f2:	f7ff ffc1 	bl	800b678 <_Z41__static_initialization_and_destruction_0ii>
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <_GLOBAL__sub_D__ZN8Platform3BSP16InterruptManager7handlerE>:
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b700:	2000      	movs	r0, #0
 800b702:	f7ff ffb9 	bl	800b678 <_Z41__static_initialization_and_destruction_0ii>
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZN8Platform3BSP3PinC1ENS1_7BitMaskE>:
        Pin14  = GPIO_PIN_14,
        Pin15  = GPIO_PIN_15,
        PinAll = GPIO_PIN_All
    };

    explicit Pin(BitMask mask):_mask(mask) {}
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	460b      	mov	r3, r1
 800b712:	807b      	strh	r3, [r7, #2]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	887a      	ldrh	r2, [r7, #2]
 800b718:	801a      	strh	r2, [r3, #0]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4618      	mov	r0, r3
 800b71e:	370c      	adds	r7, #12
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <_ZN8Platform3BSP4PortC1ENS1_6SelectE>:

private:
    STM32HalType _type;
};

inline Port::Port(Select select) {
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	807b      	strh	r3, [r7, #2]
    /* --Just switch on the port; use global constants. */
    switch (select) {
 800b734:	887b      	ldrh	r3, [r7, #2]
 800b736:	2b07      	cmp	r3, #7
 800b738:	d833      	bhi.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
 800b73a:	a201      	add	r2, pc, #4	; (adr r2, 800b740 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x18>)
 800b73c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b740:	0800b761 	.word	0x0800b761
 800b744:	0800b76b 	.word	0x0800b76b
 800b748:	0800b773 	.word	0x0800b773
 800b74c:	0800b77b 	.word	0x0800b77b
 800b750:	0800b783 	.word	0x0800b783
 800b754:	0800b78b 	.word	0x0800b78b
 800b758:	0800b793 	.word	0x0800b793
 800b75c:	0800b79b 	.word	0x0800b79b
    case Select::PortA : _type=GPIOA; break;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e01b      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortB : _type=GPIOB; break;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a10      	ldr	r2, [pc, #64]	; (800b7b0 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x88>)
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	e017      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortC : _type=GPIOC; break;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a0f      	ldr	r2, [pc, #60]	; (800b7b4 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x8c>)
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	e013      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortD : _type=GPIOD; break;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a0e      	ldr	r2, [pc, #56]	; (800b7b8 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x90>)
 800b77e:	601a      	str	r2, [r3, #0]
 800b780:	e00f      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortE : _type=GPIOE; break;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a0d      	ldr	r2, [pc, #52]	; (800b7bc <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x94>)
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	e00b      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortF : _type=GPIOF; break;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a0c      	ldr	r2, [pc, #48]	; (800b7c0 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x98>)
 800b78e:	601a      	str	r2, [r3, #0]
 800b790:	e007      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortG : _type=GPIOG; break;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a0b      	ldr	r2, [pc, #44]	; (800b7c4 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x9c>)
 800b796:	601a      	str	r2, [r3, #0]
 800b798:	e003      	b.n	800b7a2 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0x7a>
    case Select::PortH : _type=GPIOH; break;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a0a      	ldr	r2, [pc, #40]	; (800b7c8 <_ZN8Platform3BSP4PortC1ENS1_6SelectE+0xa0>)
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	bf00      	nop
    default:;
    }
}
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	48000400 	.word	0x48000400
 800b7b4:	48000800 	.word	0x48000800
 800b7b8:	48000c00 	.word	0x48000c00
 800b7bc:	48001000 	.word	0x48001000
 800b7c0:	48001400 	.word	0x48001400
 800b7c4:	48001800 	.word	0x48001800
 800b7c8:	48001c00 	.word	0x48001c00

0800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && !_PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=false>
	explicit constexpr pair(_U1&& __x, _U2&& __y)
 800b7cc:	b590      	push	{r4, r7, lr}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800b7d8:	68fc      	ldr	r4, [r7, #12]
 800b7da:	68b8      	ldr	r0, [r7, #8]
 800b7dc:	f000 f816 	bl	800b80c <_ZSt7forwardIN8Platform3BSP4Port6SelectEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7ff ff9e 	bl	800b728 <_ZN8Platform3BSP4PortC1ENS1_6SelectE>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	1d1c      	adds	r4, r3, #4
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f816 	bl	800b822 <_ZSt7forwardIN8Platform3BSP3Pin7BitMaskEEOT_RNSt16remove_referenceIS4_E4typeE>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	881b      	ldrh	r3, [r3, #0]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4620      	mov	r0, r4
 800b7fe:	f7ff ff83 	bl	800b708 <_ZN8Platform3BSP3PinC1ENS1_7BitMaskE>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	4618      	mov	r0, r3
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd90      	pop	{r4, r7, pc}

0800b80c <_ZSt7forwardIN8Platform3BSP4Port6SelectEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4618      	mov	r0, r3
 800b818:	370c      	adds	r7, #12
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <_ZSt7forwardIN8Platform3BSP3Pin7BitMaskEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b822:	b480      	push	{r7}
 800b824:	b083      	sub	sp, #12
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr

0800b838 <_ZNK8Platform3BSP9TermColor6setColENS1_5ColorE>:

    /**
     * Sets font color
     * @param [in]  c  \ref Color value of color
     */
    void setCol(Color c) const
 800b838:	b580      	push	{r7, lr}
 800b83a:	b082      	sub	sp, #8
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	70fb      	strb	r3, [r7, #3]
    {
#ifdef _GLIBCXX_IOSTREAM
     // std::cout << std::flush;
      std::cout << colors[ c ];
#else
      fputs(colors[ c ], stdout);
 800b844:	78fa      	ldrb	r2, [r7, #3]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b84c:	4b05      	ldr	r3, [pc, #20]	; (800b864 <_ZNK8Platform3BSP9TermColor6setColENS1_5ColorE+0x2c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	689b      	ldr	r3, [r3, #8]
 800b852:	4619      	mov	r1, r3
 800b854:	4610      	mov	r0, r2
 800b856:	f007 f8a9 	bl	80129ac <fputs>
#endif
    }
 800b85a:	bf00      	nop
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	20000040 	.word	0x20000040

0800b868 <__tcf_0>:
     * \brief gets singleton instances of TermColor object.
     * \return reference to singleton
     */
    static TermColor & getInstance()
    {
        static TermColor inst;
 800b868:	b580      	push	{r7, lr}
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	4801      	ldr	r0, [pc, #4]	; (800b874 <__tcf_0+0xc>)
 800b86e:	f000 f879 	bl	800b964 <_ZN8Platform3BSP9TermColorD1Ev>
 800b872:	bd80      	pop	{r7, pc}
 800b874:	200006f0 	.word	0x200006f0

0800b878 <_ZN8Platform3BSP9TermColor11getInstanceEv>:
    static TermColor & getInstance()
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
        static TermColor inst;
 800b87c:	4b12      	ldr	r3, [pc, #72]	; (800b8c8 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x50>)
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	f3bf 8f5b 	dmb	ish
 800b884:	b2db      	uxtb	r3, r3
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	bf0c      	ite	eq
 800b88e:	2301      	moveq	r3, #1
 800b890:	2300      	movne	r3, #0
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	d013      	beq.n	800b8c0 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x48>
 800b898:	480b      	ldr	r0, [pc, #44]	; (800b8c8 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x50>)
 800b89a:	f006 ffb7 	bl	801280c <__cxa_guard_acquire>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	bf14      	ite	ne
 800b8a4:	2301      	movne	r3, #1
 800b8a6:	2300      	moveq	r3, #0
 800b8a8:	b2db      	uxtb	r3, r3
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d008      	beq.n	800b8c0 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x48>
 800b8ae:	4807      	ldr	r0, [pc, #28]	; (800b8cc <_ZN8Platform3BSP9TermColor11getInstanceEv+0x54>)
 800b8b0:	f000 f810 	bl	800b8d4 <_ZN8Platform3BSP9TermColorC1Ev>
 800b8b4:	4806      	ldr	r0, [pc, #24]	; (800b8d0 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x58>)
 800b8b6:	f006 fff4 	bl	80128a2 <atexit>
 800b8ba:	4803      	ldr	r0, [pc, #12]	; (800b8c8 <_ZN8Platform3BSP9TermColor11getInstanceEv+0x50>)
 800b8bc:	f006 ffb2 	bl	8012824 <__cxa_guard_release>
        return  inst;
 800b8c0:	4b02      	ldr	r3, [pc, #8]	; (800b8cc <_ZN8Platform3BSP9TermColor11getInstanceEv+0x54>)
    };
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20000780 	.word	0x20000780
 800b8cc:	200006f0 	.word	0x200006f0
 800b8d0:	0800b869 	.word	0x0800b869

0800b8d4 <_ZN8Platform3BSP9TermColorC1Ev>:
        return old;
    }

   // static const char endl = '\n';   ///< line feed character
 private:
    TermColor()
 800b8d4:	b5b0      	push	{r4, r5, r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
     { m_flags[0] = '\0';};
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	4a1f      	ldr	r2, [pc, #124]	; (800b95c <_ZN8Platform3BSP9TermColorC1Ev+0x88>)
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	4611      	mov	r1, r2
 800b8e4:	2344      	movs	r3, #68	; 0x44
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	f007 f8a0 	bl	8012a2c <memcpy>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a1c      	ldr	r2, [pc, #112]	; (800b960 <_ZN8Platform3BSP9TermColorC1Ev+0x8c>)
 800b8f0:	f103 0444 	add.w	r4, r3, #68	; 0x44
 800b8f4:	4615      	mov	r5, r2
 800b8f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b902:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b906:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2220      	movs	r2, #32
 800b916:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2200      	movs	r2, #0
 800b936:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2200      	movs	r2, #0
 800b946:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4618      	mov	r0, r3
 800b956:	3708      	adds	r7, #8
 800b958:	46bd      	mov	sp, r7
 800b95a:	bdb0      	pop	{r4, r5, r7, pc}
 800b95c:	08014a5c 	.word	0x08014a5c
 800b960:	08014aa0 	.word	0x08014aa0

0800b964 <_ZN8Platform3BSP9TermColorD1Ev>:
    ~TermColor() {setCol(stdcol);}
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	2108      	movs	r1, #8
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f7ff ff62 	bl	800b838 <_ZNK8Platform3BSP9TermColor6setColENS1_5ColorE>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4618      	mov	r0, r3
 800b978:	3708      	adds	r7, #8
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
	...

0800b980 <_Z41__static_initialization_and_destruction_0ii>:
       setFlags();
       return *this;
   }

}
}
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d109      	bne.n	800b9a4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b996:	4293      	cmp	r3, r2
 800b998:	d104      	bne.n	800b9a4 <_Z41__static_initialization_and_destruction_0ii+0x24>
TermColor& cout = TermColor::getInstance();  ///< reference to TermColor object, can be used for C++ like output
 800b99a:	f7ff ff6d 	bl	800b878 <_ZN8Platform3BSP9TermColor11getInstanceEv>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	4a02      	ldr	r2, [pc, #8]	; (800b9ac <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800b9a2:	6013      	str	r3, [r2, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	20000784 	.word	0x20000784

0800b9b0 <_GLOBAL__sub_I__ZN8Platform3BSP4coutE>:
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	f7ff ffe1 	bl	800b980 <_Z41__static_initialization_and_destruction_0ii>
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f103 0208 	add.w	r2, r3, #8
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f103 0208 	add.w	r2, r3, #8
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f103 0208 	add.w	r2, r3, #8
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba0e:	bf00      	nop
 800ba10:	370c      	adds	r7, #12
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr

0800ba1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800ba1a:	b480      	push	{r7}
 800ba1c:	b085      	sub	sp, #20
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	689a      	ldr	r2, [r3, #8]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	683a      	ldr	r2, [r7, #0]
 800ba3e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	683a      	ldr	r2, [r7, #0]
 800ba44:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	687a      	ldr	r2, [r7, #4]
 800ba4a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	1c5a      	adds	r2, r3, #1
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	601a      	str	r2, [r3, #0]
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800ba62:	b480      	push	{r7}
 800ba64:	b085      	sub	sp, #20
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
 800ba6a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba78:	d103      	bne.n	800ba82 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	e00c      	b.n	800ba9c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	3308      	adds	r3, #8
 800ba86:	60fb      	str	r3, [r7, #12]
 800ba88:	e002      	b.n	800ba90 <vListInsert+0x2e>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	685b      	ldr	r3, [r3, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d2f6      	bcs.n	800ba8a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	683a      	ldr	r2, [r7, #0]
 800bab6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	601a      	str	r2, [r3, #0]
}
 800bac8:	bf00      	nop
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	691b      	ldr	r3, [r3, #16]
 800bae0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	6892      	ldr	r2, [r2, #8]
 800baea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	6852      	ldr	r2, [r2, #4]
 800baf4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d103      	bne.n	800bb08 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689a      	ldr	r2, [r3, #8]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	1e5a      	subs	r2, r3, #1
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
}
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	3714      	adds	r7, #20
 800bb20:	46bd      	mov	sp, r7
 800bb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb26:	4770      	bx	lr

0800bb28 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800bb32:	2301      	movs	r3, #1
 800bb34:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d104      	bne.n	800bb4a <xQueueGenericReset+0x22>
 800bb40:	f44f 7188 	mov.w	r1, #272	; 0x110
 800bb44:	4839      	ldr	r0, [pc, #228]	; (800bc2c <xQueueGenericReset+0x104>)
 800bb46:	f003 f801 	bl	800eb4c <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d05d      	beq.n	800bc0c <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d059      	beq.n	800bc0c <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb60:	2100      	movs	r1, #0
 800bb62:	fba3 2302 	umull	r2, r3, r3, r2
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d000      	beq.n	800bb6c <xQueueGenericReset+0x44>
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d14c      	bne.n	800bc0c <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800bb72:	f001 ff6b 	bl	800da4c <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bb82:	fb01 f303 	mul.w	r3, r1, r3
 800bb86:	441a      	add	r2, r3
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	681a      	ldr	r2, [r3, #0]
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba2:	3b01      	subs	r3, #1
 800bba4:	68b9      	ldr	r1, [r7, #8]
 800bba6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bba8:	fb01 f303 	mul.w	r3, r1, r3
 800bbac:	441a      	add	r2, r3
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	22ff      	movs	r2, #255	; 0xff
 800bbb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	22ff      	movs	r2, #255	; 0xff
 800bbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d114      	bne.n	800bbf2 <xQueueGenericReset+0xca>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d01a      	beq.n	800bc06 <xQueueGenericReset+0xde>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	3310      	adds	r3, #16
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f001 f8f9 	bl	800cdcc <xTaskRemoveFromEventList>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d012      	beq.n	800bc06 <xQueueGenericReset+0xde>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800bbe0:	4b13      	ldr	r3, [pc, #76]	; (800bc30 <xQueueGenericReset+0x108>)
 800bbe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	e009      	b.n	800bc06 <xQueueGenericReset+0xde>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	3310      	adds	r3, #16
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7ff fee2 	bl	800b9c0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	3324      	adds	r3, #36	; 0x24
 800bc00:	4618      	mov	r0, r3
 800bc02:	f7ff fedd 	bl	800b9c0 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 800bc06:	f001 ff4b 	bl	800daa0 <vPortExitCritical>
 800bc0a:	e001      	b.n	800bc10 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d104      	bne.n	800bc20 <xQueueGenericReset+0xf8>
 800bc16:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800bc1a:	4804      	ldr	r0, [pc, #16]	; (800bc2c <xQueueGenericReset+0x104>)
 800bc1c:	f002 ff96 	bl	800eb4c <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800bc20:	68fb      	ldr	r3, [r7, #12]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	08014adc 	.word	0x08014adc
 800bc30:	e000ed04 	.word	0xe000ed04

0800bc34 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	; 0x28
 800bc38:	af02      	add	r7, sp, #8
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	4613      	mov	r3, r2
 800bc40:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800bc42:	2300      	movs	r3, #0
 800bc44:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d02e      	beq.n	800bcaa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	fba3 2302 	umull	r2, r3, r3, r2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d000      	beq.n	800bc5c <xQueueGenericCreate+0x28>
 800bc5a:	2101      	movs	r1, #1
 800bc5c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d123      	bne.n	800bcaa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800bc6a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800bc6e:	d81c      	bhi.n	800bcaa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	fb02 f303 	mul.w	r3, r2, r3
 800bc78:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc7a:	69bb      	ldr	r3, [r7, #24]
 800bc7c:	3350      	adds	r3, #80	; 0x50
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f002 f836 	bl	800dcf0 <pvPortMalloc>
 800bc84:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d016      	beq.n	800bcba <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc90:	697b      	ldr	r3, [r7, #20]
 800bc92:	3350      	adds	r3, #80	; 0x50
 800bc94:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc96:	79fa      	ldrb	r2, [r7, #7]
 800bc98:	69fb      	ldr	r3, [r7, #28]
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	68b9      	ldr	r1, [r7, #8]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 f810 	bl	800bcc8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800bca8:	e007      	b.n	800bcba <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d104      	bne.n	800bcba <xQueueGenericCreate+0x86>
 800bcb0:	f240 11c5 	movw	r1, #453	; 0x1c5
 800bcb4:	4803      	ldr	r0, [pc, #12]	; (800bcc4 <xQueueGenericCreate+0x90>)
 800bcb6:	f002 ff49 	bl	800eb4c <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800bcba:	69fb      	ldr	r3, [r7, #28]
    }
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3720      	adds	r7, #32
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}
 800bcc4:	08014adc 	.word	0x08014adc

0800bcc8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d103      	bne.n	800bce4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	69ba      	ldr	r2, [r7, #24]
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	e002      	b.n	800bcea <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	69b8      	ldr	r0, [r7, #24]
 800bcfa:	f7ff ff15 	bl	800bb28 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	78fa      	ldrb	r2, [r7, #3]
 800bd02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
	...

0800bd10 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b08a      	sub	sp, #40	; 0x28
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d104      	bne.n	800bd34 <xQueueReceive+0x24>
 800bd2a:	f44f 61aa 	mov.w	r1, #1360	; 0x550
 800bd2e:	485e      	ldr	r0, [pc, #376]	; (800bea8 <xQueueReceive+0x198>)
 800bd30:	f002 ff0c 	bl	800eb4c <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d103      	bne.n	800bd42 <xQueueReceive+0x32>
 800bd3a:	6a3b      	ldr	r3, [r7, #32]
 800bd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d101      	bne.n	800bd46 <xQueueReceive+0x36>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e000      	b.n	800bd48 <xQueueReceive+0x38>
 800bd46:	2300      	movs	r3, #0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d104      	bne.n	800bd56 <xQueueReceive+0x46>
 800bd4c:	f240 5154 	movw	r1, #1364	; 0x554
 800bd50:	4855      	ldr	r0, [pc, #340]	; (800bea8 <xQueueReceive+0x198>)
 800bd52:	f002 fefb 	bl	800eb4c <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd56:	f001 fa39 	bl	800d1cc <xTaskGetSchedulerState>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <xQueueReceive+0x56>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <xQueueReceive+0x5a>
 800bd66:	2301      	movs	r3, #1
 800bd68:	e000      	b.n	800bd6c <xQueueReceive+0x5c>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d104      	bne.n	800bd7a <xQueueReceive+0x6a>
 800bd70:	f240 5159 	movw	r1, #1369	; 0x559
 800bd74:	484c      	ldr	r0, [pc, #304]	; (800bea8 <xQueueReceive+0x198>)
 800bd76:	f002 fee9 	bl	800eb4c <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800bd7a:	f001 fe67 	bl	800da4c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d01f      	beq.n	800bdca <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd8a:	68b9      	ldr	r1, [r7, #8]
 800bd8c:	6a38      	ldr	r0, [r7, #32]
 800bd8e:	f000 f88f 	bl	800beb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd92:	69fb      	ldr	r3, [r7, #28]
 800bd94:	1e5a      	subs	r2, r3, #1
 800bd96:	6a3b      	ldr	r3, [r7, #32]
 800bd98:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	691b      	ldr	r3, [r3, #16]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00f      	beq.n	800bdc2 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bda2:	6a3b      	ldr	r3, [r7, #32]
 800bda4:	3310      	adds	r3, #16
 800bda6:	4618      	mov	r0, r3
 800bda8:	f001 f810 	bl	800cdcc <xTaskRemoveFromEventList>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d007      	beq.n	800bdc2 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800bdb2:	4b3e      	ldr	r3, [pc, #248]	; (800beac <xQueueReceive+0x19c>)
 800bdb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	f3bf 8f4f 	dsb	sy
 800bdbe:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800bdc2:	f001 fe6d 	bl	800daa0 <vPortExitCritical>
                return pdPASS;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	e069      	b.n	800be9e <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d103      	bne.n	800bdd8 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800bdd0:	f001 fe66 	bl	800daa0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	e062      	b.n	800be9e <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d106      	bne.n	800bdec <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800bdde:	f107 0314 	add.w	r3, r7, #20
 800bde2:	4618      	mov	r0, r3
 800bde4:	f001 f8c2 	bl	800cf6c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800bde8:	2301      	movs	r3, #1
 800bdea:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800bdec:	f001 fe58 	bl	800daa0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800bdf0:	f000 fca8 	bl	800c744 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800bdf4:	f001 fe2a 	bl	800da4c <vPortEnterCritical>
 800bdf8:	6a3b      	ldr	r3, [r7, #32]
 800bdfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdfe:	b25b      	sxtb	r3, r3
 800be00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be04:	d103      	bne.n	800be0e <xQueueReceive+0xfe>
 800be06:	6a3b      	ldr	r3, [r7, #32]
 800be08:	2200      	movs	r2, #0
 800be0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be14:	b25b      	sxtb	r3, r3
 800be16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be1a:	d103      	bne.n	800be24 <xQueueReceive+0x114>
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be24:	f001 fe3c 	bl	800daa0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be28:	1d3a      	adds	r2, r7, #4
 800be2a:	f107 0314 	add.w	r3, r7, #20
 800be2e:	4611      	mov	r1, r2
 800be30:	4618      	mov	r0, r3
 800be32:	f001 f8b1 	bl	800cf98 <xTaskCheckForTimeOut>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d123      	bne.n	800be84 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be3c:	6a38      	ldr	r0, [r7, #32]
 800be3e:	f000 f8af 	bl	800bfa0 <prvIsQueueEmpty>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d017      	beq.n	800be78 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be48:	6a3b      	ldr	r3, [r7, #32]
 800be4a:	3324      	adds	r3, #36	; 0x24
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	4611      	mov	r1, r2
 800be50:	4618      	mov	r0, r3
 800be52:	f000 ff59 	bl	800cd08 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800be56:	6a38      	ldr	r0, [r7, #32]
 800be58:	f000 f850 	bl	800befc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800be5c:	f000 fc80 	bl	800c760 <xTaskResumeAll>
 800be60:	4603      	mov	r3, r0
 800be62:	2b00      	cmp	r3, #0
 800be64:	d189      	bne.n	800bd7a <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 800be66:	4b11      	ldr	r3, [pc, #68]	; (800beac <xQueueReceive+0x19c>)
 800be68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be6c:	601a      	str	r2, [r3, #0]
 800be6e:	f3bf 8f4f 	dsb	sy
 800be72:	f3bf 8f6f 	isb	sy
 800be76:	e780      	b.n	800bd7a <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800be78:	6a38      	ldr	r0, [r7, #32]
 800be7a:	f000 f83f 	bl	800befc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800be7e:	f000 fc6f 	bl	800c760 <xTaskResumeAll>
 800be82:	e77a      	b.n	800bd7a <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800be84:	6a38      	ldr	r0, [r7, #32]
 800be86:	f000 f839 	bl	800befc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800be8a:	f000 fc69 	bl	800c760 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be8e:	6a38      	ldr	r0, [r7, #32]
 800be90:	f000 f886 	bl	800bfa0 <prvIsQueueEmpty>
 800be94:	4603      	mov	r3, r0
 800be96:	2b00      	cmp	r3, #0
 800be98:	f43f af6f 	beq.w	800bd7a <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800be9c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3728      	adds	r7, #40	; 0x28
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	08014adc 	.word	0x08014adc
 800beac:	e000ed04 	.word	0xe000ed04

0800beb0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d018      	beq.n	800bef4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	68da      	ldr	r2, [r3, #12]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beca:	441a      	add	r2, r3
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	68da      	ldr	r2, [r3, #12]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	429a      	cmp	r2, r3
 800beda:	d303      	bcc.n	800bee4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	68d9      	ldr	r1, [r3, #12]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beec:	461a      	mov	r2, r3
 800beee:	6838      	ldr	r0, [r7, #0]
 800bef0:	f006 fd9c 	bl	8012a2c <memcpy>
    }
}
 800bef4:	bf00      	nop
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}

0800befc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800bf04:	f001 fda2 	bl	800da4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf10:	e011      	b.n	800bf36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d012      	beq.n	800bf40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	3324      	adds	r3, #36	; 0x24
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 ff54 	bl	800cdcc <xTaskRemoveFromEventList>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d001      	beq.n	800bf2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800bf2a:	f001 f891 	bl	800d050 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	3b01      	subs	r3, #1
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800bf36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	dce9      	bgt.n	800bf12 <prvUnlockQueue+0x16>
 800bf3e:	e000      	b.n	800bf42 <prvUnlockQueue+0x46>
                        break;
 800bf40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	22ff      	movs	r2, #255	; 0xff
 800bf46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800bf4a:	f001 fda9 	bl	800daa0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800bf4e:	f001 fd7d 	bl	800da4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf5a:	e011      	b.n	800bf80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d012      	beq.n	800bf8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	3310      	adds	r3, #16
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f000 ff2f 	bl	800cdcc <xTaskRemoveFromEventList>
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d001      	beq.n	800bf78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800bf74:	f001 f86c 	bl	800d050 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800bf78:	7bbb      	ldrb	r3, [r7, #14]
 800bf7a:	3b01      	subs	r3, #1
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800bf80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dce9      	bgt.n	800bf5c <prvUnlockQueue+0x60>
 800bf88:	e000      	b.n	800bf8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800bf8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	22ff      	movs	r2, #255	; 0xff
 800bf90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800bf94:	f001 fd84 	bl	800daa0 <vPortExitCritical>
}
 800bf98:	bf00      	nop
 800bf9a:	3710      	adds	r7, #16
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800bfa8:	f001 fd50 	bl	800da4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d102      	bne.n	800bfba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	60fb      	str	r3, [r7, #12]
 800bfb8:	e001      	b.n	800bfbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800bfbe:	f001 fd6f 	bl	800daa0 <vPortExitCritical>

    return xReturn;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
 800bfd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d104      	bne.n	800bfe6 <vQueueAddToRegistry+0x1a>
 800bfdc:	f640 21c7 	movw	r1, #2759	; 0xac7
 800bfe0:	481c      	ldr	r0, [pc, #112]	; (800c054 <vQueueAddToRegistry+0x88>)
 800bfe2:	f002 fdb3 	bl	800eb4c <vAssertCalled>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	60bb      	str	r3, [r7, #8]

        if( pcQueueName != NULL )
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d024      	beq.n	800c03a <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bff0:	2300      	movs	r3, #0
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e01e      	b.n	800c034 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800bff6:	4a18      	ldr	r2, [pc, #96]	; (800c058 <vQueueAddToRegistry+0x8c>)
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	4413      	add	r3, r2
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	429a      	cmp	r2, r3
 800c004:	d105      	bne.n	800c012 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	4a13      	ldr	r2, [pc, #76]	; (800c058 <vQueueAddToRegistry+0x8c>)
 800c00c:	4413      	add	r3, r2
 800c00e:	60bb      	str	r3, [r7, #8]
                    break;
 800c010:	e013      	b.n	800c03a <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d10a      	bne.n	800c02e <vQueueAddToRegistry+0x62>
 800c018:	4a0f      	ldr	r2, [pc, #60]	; (800c058 <vQueueAddToRegistry+0x8c>)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d104      	bne.n	800c02e <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4a0b      	ldr	r2, [pc, #44]	; (800c058 <vQueueAddToRegistry+0x8c>)
 800c02a:	4413      	add	r3, r2
 800c02c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3301      	adds	r3, #1
 800c032:	60fb      	str	r3, [r7, #12]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2b09      	cmp	r3, #9
 800c038:	d9dd      	bls.n	800bff6 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d005      	beq.n	800c04c <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800c04c:	bf00      	nop
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	08014adc 	.word	0x08014adc
 800c058:	20000788 	.word	0x20000788

0800c05c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800c06c:	f001 fcee 	bl	800da4c <vPortEnterCritical>
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c076:	b25b      	sxtb	r3, r3
 800c078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c07c:	d103      	bne.n	800c086 <vQueueWaitForMessageRestricted+0x2a>
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c08c:	b25b      	sxtb	r3, r3
 800c08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c092:	d103      	bne.n	800c09c <vQueueWaitForMessageRestricted+0x40>
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	2200      	movs	r2, #0
 800c098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c09c:	f001 fd00 	bl	800daa0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d106      	bne.n	800c0b6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	3324      	adds	r3, #36	; 0x24
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	68b9      	ldr	r1, [r7, #8]
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fe49 	bl	800cd48 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800c0b6:	6978      	ldr	r0, [r7, #20]
 800c0b8:	f7ff ff20 	bl	800befc <prvUnlockQueue>
    }
 800c0bc:	bf00      	nop
 800c0be:	3718      	adds	r7, #24
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b08c      	sub	sp, #48	; 0x30
 800c0c8:	af04      	add	r7, sp, #16
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	603b      	str	r3, [r7, #0]
 800c0d0:	4613      	mov	r3, r2
 800c0d2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c0d4:	88fb      	ldrh	r3, [r7, #6]
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 fe09 	bl	800dcf0 <pvPortMalloc>
 800c0de:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00e      	beq.n	800c104 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c0e6:	2064      	movs	r0, #100	; 0x64
 800c0e8:	f001 fe02 	bl	800dcf0 <pvPortMalloc>
 800c0ec:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800c0ee:	69fb      	ldr	r3, [r7, #28]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d003      	beq.n	800c0fc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	697a      	ldr	r2, [r7, #20]
 800c0f8:	631a      	str	r2, [r3, #48]	; 0x30
 800c0fa:	e005      	b.n	800c108 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800c0fc:	6978      	ldr	r0, [r7, #20]
 800c0fe:	f001 fe09 	bl	800dd14 <vPortFree>
 800c102:	e001      	b.n	800c108 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d013      	beq.n	800c136 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c10e:	88fa      	ldrh	r2, [r7, #6]
 800c110:	2300      	movs	r3, #0
 800c112:	9303      	str	r3, [sp, #12]
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	9302      	str	r3, [sp, #8]
 800c118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c11a:	9301      	str	r3, [sp, #4]
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	68b9      	ldr	r1, [r7, #8]
 800c124:	68f8      	ldr	r0, [r7, #12]
 800c126:	f000 f80f 	bl	800c148 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800c12a:	69f8      	ldr	r0, [r7, #28]
 800c12c:	f000 f8b0 	bl	800c290 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800c130:	2301      	movs	r3, #1
 800c132:	61bb      	str	r3, [r7, #24]
 800c134:	e002      	b.n	800c13c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c136:	f04f 33ff 	mov.w	r3, #4294967295
 800c13a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800c13c:	69bb      	ldr	r3, [r7, #24]
    }
 800c13e:	4618      	mov	r0, r3
 800c140:	3720      	adds	r7, #32
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
	...

0800c148 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
 800c154:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c158:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	461a      	mov	r2, r3
 800c160:	21a5      	movs	r1, #165	; 0xa5
 800c162:	f006 fc8b 	bl	8012a7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c170:	3b01      	subs	r3, #1
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	4413      	add	r3, r2
 800c176:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	f023 0307 	bic.w	r3, r3, #7
 800c17e:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	2b00      	cmp	r3, #0
 800c188:	d004      	beq.n	800c194 <prvInitialiseNewTask+0x4c>
 800c18a:	f240 315f 	movw	r1, #863	; 0x35f
 800c18e:	483f      	ldr	r0, [pc, #252]	; (800c28c <prvInitialiseNewTask+0x144>)
 800c190:	f002 fcdc 	bl	800eb4c <vAssertCalled>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	641a      	str	r2, [r3, #64]	; 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01f      	beq.n	800c1e0 <prvInitialiseNewTask+0x98>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	617b      	str	r3, [r7, #20]
 800c1a4:	e012      	b.n	800c1cc <prvInitialiseNewTask+0x84>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	7819      	ldrb	r1, [r3, #0]
 800c1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	3334      	adds	r3, #52	; 0x34
 800c1b6:	460a      	mov	r2, r1
 800c1b8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	4413      	add	r3, r2
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d006      	beq.n	800c1d4 <prvInitialiseNewTask+0x8c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	617b      	str	r3, [r7, #20]
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	2b0b      	cmp	r3, #11
 800c1d0:	d9e9      	bls.n	800c1a6 <prvInitialiseNewTask+0x5e>
 800c1d2:	e000      	b.n	800c1d6 <prvInitialiseNewTask+0x8e>
            {
                break;
 800c1d4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c1de:	e003      	b.n	800c1e8 <prvInitialiseNewTask+0xa0>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800c1e8:	6a3b      	ldr	r3, [r7, #32]
 800c1ea:	2b06      	cmp	r3, #6
 800c1ec:	d904      	bls.n	800c1f8 <prvInitialiseNewTask+0xb0>
 800c1ee:	f240 3196 	movw	r1, #918	; 0x396
 800c1f2:	4826      	ldr	r0, [pc, #152]	; (800c28c <prvInitialiseNewTask+0x144>)
 800c1f4:	f002 fcaa 	bl	800eb4c <vAssertCalled>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	2b06      	cmp	r3, #6
 800c1fc:	d901      	bls.n	800c202 <prvInitialiseNewTask+0xba>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c1fe:	2306      	movs	r3, #6
 800c200:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800c202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c204:	6a3a      	ldr	r2, [r7, #32]
 800c206:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	6a3a      	ldr	r2, [r7, #32]
 800c20c:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 800c20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c210:	2200      	movs	r2, #0
 800c212:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c216:	3304      	adds	r3, #4
 800c218:	4618      	mov	r0, r3
 800c21a:	f7ff fbf1 	bl	800ba00 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c220:	3318      	adds	r3, #24
 800c222:	4618      	mov	r0, r3
 800c224:	f7ff fbec 	bl	800ba00 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c22c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	f1c3 0207 	rsb	r2, r3, #7
 800c234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c236:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c23c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 800c23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c240:	2200      	movs	r2, #0
 800c242:	655a      	str	r2, [r3, #84]	; 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	2200      	movs	r2, #0
 800c248:	659a      	str	r2, [r3, #88]	; 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	335c      	adds	r3, #92	; 0x5c
 800c24e:	2204      	movs	r2, #4
 800c250:	2100      	movs	r1, #0
 800c252:	4618      	mov	r0, r3
 800c254:	f006 fc12 	bl	8012a7c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800c258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25a:	3360      	adds	r3, #96	; 0x60
 800c25c:	2201      	movs	r2, #1
 800c25e:	2100      	movs	r1, #0
 800c260:	4618      	mov	r0, r3
 800c262:	f006 fc0b 	bl	8012a7c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	68f9      	ldr	r1, [r7, #12]
 800c26a:	6938      	ldr	r0, [r7, #16]
 800c26c:	f001 fac8 	bl	800d800 <pxPortInitialiseStack>
 800c270:	4602      	mov	r2, r0
 800c272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c274:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d002      	beq.n	800c282 <prvInitialiseNewTask+0x13a>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c280:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c282:	bf00      	nop
 800c284:	3718      	adds	r7, #24
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	08014af8 	.word	0x08014af8

0800c290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800c298:	f001 fbd8 	bl	800da4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800c29c:	4b40      	ldr	r3, [pc, #256]	; (800c3a0 <prvAddNewTaskToReadyList+0x110>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	4a3f      	ldr	r2, [pc, #252]	; (800c3a0 <prvAddNewTaskToReadyList+0x110>)
 800c2a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800c2a6:	4b3f      	ldr	r3, [pc, #252]	; (800c3a4 <prvAddNewTaskToReadyList+0x114>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800c2ae:	4a3d      	ldr	r2, [pc, #244]	; (800c3a4 <prvAddNewTaskToReadyList+0x114>)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c2b4:	4b3a      	ldr	r3, [pc, #232]	; (800c3a0 <prvAddNewTaskToReadyList+0x110>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d110      	bne.n	800c2de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800c2bc:	f000 fedc 	bl	800d078 <prvInitialiseTaskLists>
 800c2c0:	e00d      	b.n	800c2de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800c2c2:	4b39      	ldr	r3, [pc, #228]	; (800c3a8 <prvAddNewTaskToReadyList+0x118>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d109      	bne.n	800c2de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2ca:	4b36      	ldr	r3, [pc, #216]	; (800c3a4 <prvAddNewTaskToReadyList+0x114>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d802      	bhi.n	800c2de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800c2d8:	4a32      	ldr	r2, [pc, #200]	; (800c3a4 <prvAddNewTaskToReadyList+0x114>)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800c2de:	4b33      	ldr	r3, [pc, #204]	; (800c3ac <prvAddNewTaskToReadyList+0x11c>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	4a31      	ldr	r2, [pc, #196]	; (800c3ac <prvAddNewTaskToReadyList+0x11c>)
 800c2e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c2e8:	4b30      	ldr	r3, [pc, #192]	; (800c3ac <prvAddNewTaskToReadyList+0x11c>)
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	409a      	lsls	r2, r3
 800c2f8:	4b2d      	ldr	r3, [pc, #180]	; (800c3b0 <prvAddNewTaskToReadyList+0x120>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	4a2c      	ldr	r2, [pc, #176]	; (800c3b0 <prvAddNewTaskToReadyList+0x120>)
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c306:	492b      	ldr	r1, [pc, #172]	; (800c3b4 <prvAddNewTaskToReadyList+0x124>)
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	440b      	add	r3, r1
 800c312:	3304      	adds	r3, #4
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	609a      	str	r2, [r3, #8]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	689a      	ldr	r2, [r3, #8]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60da      	str	r2, [r3, #12]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	689b      	ldr	r3, [r3, #8]
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	3204      	adds	r2, #4
 800c32e:	605a      	str	r2, [r3, #4]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	1d1a      	adds	r2, r3, #4
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	609a      	str	r2, [r3, #8]
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4a1b      	ldr	r2, [pc, #108]	; (800c3b4 <prvAddNewTaskToReadyList+0x124>)
 800c346:	441a      	add	r2, r3
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	615a      	str	r2, [r3, #20]
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c350:	4918      	ldr	r1, [pc, #96]	; (800c3b4 <prvAddNewTaskToReadyList+0x124>)
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	1c59      	adds	r1, r3, #1
 800c360:	4814      	ldr	r0, [pc, #80]	; (800c3b4 <prvAddNewTaskToReadyList+0x124>)
 800c362:	4613      	mov	r3, r2
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	4403      	add	r3, r0
 800c36c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800c36e:	f001 fb97 	bl	800daa0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800c372:	4b0d      	ldr	r3, [pc, #52]	; (800c3a8 <prvAddNewTaskToReadyList+0x118>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00e      	beq.n	800c398 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c37a:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <prvAddNewTaskToReadyList+0x114>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c384:	429a      	cmp	r2, r3
 800c386:	d207      	bcs.n	800c398 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800c388:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <prvAddNewTaskToReadyList+0x128>)
 800c38a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c38e:	601a      	str	r2, [r3, #0]
 800c390:	f3bf 8f4f 	dsb	sy
 800c394:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	200008d8 	.word	0x200008d8
 800c3a4:	200007d8 	.word	0x200007d8
 800c3a8:	200008e4 	.word	0x200008e4
 800c3ac:	200008f4 	.word	0x200008f4
 800c3b0:	200008e0 	.word	0x200008e0
 800c3b4:	200007dc 	.word	0x200007dc
 800c3b8:	e000ed04 	.word	0xe000ed04

0800c3bc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 800c3c4:	f001 fb42 	bl	800da4c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d102      	bne.n	800c3d4 <vTaskDelete+0x18>
 800c3ce:	4b36      	ldr	r3, [pc, #216]	; (800c4a8 <vTaskDelete+0xec>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	e000      	b.n	800c3d6 <vTaskDelete+0x1a>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7ff fb79 	bl	800bad4 <uxListRemove>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d115      	bne.n	800c414 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ec:	492f      	ldr	r1, [pc, #188]	; (800c4ac <vTaskDelete+0xf0>)
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	009b      	lsls	r3, r3, #2
 800c3f6:	440b      	add	r3, r1
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10a      	bne.n	800c414 <vTaskDelete+0x58>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c402:	2201      	movs	r2, #1
 800c404:	fa02 f303 	lsl.w	r3, r2, r3
 800c408:	43da      	mvns	r2, r3
 800c40a:	4b29      	ldr	r3, [pc, #164]	; (800c4b0 <vTaskDelete+0xf4>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	4013      	ands	r3, r2
 800c410:	4a27      	ldr	r2, [pc, #156]	; (800c4b0 <vTaskDelete+0xf4>)
 800c412:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3318      	adds	r3, #24
 800c420:	4618      	mov	r0, r3
 800c422:	f7ff fb57 	bl	800bad4 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800c426:	4b23      	ldr	r3, [pc, #140]	; (800c4b4 <vTaskDelete+0xf8>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3301      	adds	r3, #1
 800c42c:	4a21      	ldr	r2, [pc, #132]	; (800c4b4 <vTaskDelete+0xf8>)
 800c42e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 800c430:	4b1d      	ldr	r3, [pc, #116]	; (800c4a8 <vTaskDelete+0xec>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	429a      	cmp	r2, r3
 800c438:	d10b      	bne.n	800c452 <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3304      	adds	r3, #4
 800c43e:	4619      	mov	r1, r3
 800c440:	481d      	ldr	r0, [pc, #116]	; (800c4b8 <vTaskDelete+0xfc>)
 800c442:	f7ff faea 	bl	800ba1a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800c446:	4b1d      	ldr	r3, [pc, #116]	; (800c4bc <vTaskDelete+0x100>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	3301      	adds	r3, #1
 800c44c:	4a1b      	ldr	r2, [pc, #108]	; (800c4bc <vTaskDelete+0x100>)
 800c44e:	6013      	str	r3, [r2, #0]
 800c450:	e009      	b.n	800c466 <vTaskDelete+0xaa>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800c452:	4b1b      	ldr	r3, [pc, #108]	; (800c4c0 <vTaskDelete+0x104>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	3b01      	subs	r3, #1
 800c458:	4a19      	ldr	r2, [pc, #100]	; (800c4c0 <vTaskDelete+0x104>)
 800c45a:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
                prvDeleteTCB( pxTCB );
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f000 fe79 	bl	800d154 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800c462:	f000 fe87 	bl	800d174 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800c466:	f001 fb1b 	bl	800daa0 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800c46a:	4b16      	ldr	r3, [pc, #88]	; (800c4c4 <vTaskDelete+0x108>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d015      	beq.n	800c49e <vTaskDelete+0xe2>
        {
            if( pxTCB == pxCurrentTCB )
 800c472:	4b0d      	ldr	r3, [pc, #52]	; (800c4a8 <vTaskDelete+0xec>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	429a      	cmp	r2, r3
 800c47a:	d110      	bne.n	800c49e <vTaskDelete+0xe2>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800c47c:	4b12      	ldr	r3, [pc, #72]	; (800c4c8 <vTaskDelete+0x10c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d004      	beq.n	800c48e <vTaskDelete+0xd2>
 800c484:	f240 41d3 	movw	r1, #1235	; 0x4d3
 800c488:	4810      	ldr	r0, [pc, #64]	; (800c4cc <vTaskDelete+0x110>)
 800c48a:	f002 fb5f 	bl	800eb4c <vAssertCalled>
                portYIELD_WITHIN_API();
 800c48e:	4b10      	ldr	r3, [pc, #64]	; (800c4d0 <vTaskDelete+0x114>)
 800c490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c494:	601a      	str	r2, [r3, #0]
 800c496:	f3bf 8f4f 	dsb	sy
 800c49a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800c49e:	bf00      	nop
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	200007d8 	.word	0x200007d8
 800c4ac:	200007dc 	.word	0x200007dc
 800c4b0:	200008e0 	.word	0x200008e0
 800c4b4:	200008f4 	.word	0x200008f4
 800c4b8:	200008ac 	.word	0x200008ac
 800c4bc:	200008c0 	.word	0x200008c0
 800c4c0:	200008d8 	.word	0x200008d8
 800c4c4:	200008e4 	.word	0x200008e4
 800c4c8:	20000900 	.word	0x20000900
 800c4cc:	08014af8 	.word	0x08014af8
 800c4d0:	e000ed04 	.word	0xe000ed04

0800c4d4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        taskENTER_CRITICAL();
 800c4dc:	f001 fab6 	bl	800da4c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <uxTaskPriorityGet+0x18>
 800c4e6:	4b07      	ldr	r3, [pc, #28]	; (800c504 <uxTaskPriorityGet+0x30>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	e000      	b.n	800c4ee <uxTaskPriorityGet+0x1a>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800c4f6:	f001 fad3 	bl	800daa0 <vPortExitCritical>

        return uxReturn;
 800c4fa:	68bb      	ldr	r3, [r7, #8]
    }
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3710      	adds	r7, #16
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	200007d8 	.word	0x200007d8

0800c508 <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 800c512:	2300      	movs	r3, #0
 800c514:	61fb      	str	r3, [r7, #28]

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	2b06      	cmp	r3, #6
 800c51a:	d904      	bls.n	800c526 <vTaskPrioritySet+0x1e>
 800c51c:	f240 610c 	movw	r1, #1548	; 0x60c
 800c520:	485b      	ldr	r0, [pc, #364]	; (800c690 <vTaskPrioritySet+0x188>)
 800c522:	f002 fb13 	bl	800eb4c <vAssertCalled>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	2b06      	cmp	r3, #6
 800c52a:	d901      	bls.n	800c530 <vTaskPrioritySet+0x28>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c52c:	2306      	movs	r3, #6
 800c52e:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800c530:	f001 fa8c 	bl	800da4c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d102      	bne.n	800c540 <vTaskPrioritySet+0x38>
 800c53a:	4b56      	ldr	r3, [pc, #344]	; (800c694 <vTaskPrioritySet+0x18c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	e000      	b.n	800c542 <vTaskPrioritySet+0x3a>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

            #if ( configUSE_MUTEXES == 1 )
                {
                    uxCurrentBasePriority = pxTCB->uxBasePriority;
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c548:	617b      	str	r3, [r7, #20]
                {
                    uxCurrentBasePriority = pxTCB->uxPriority;
                }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800c54a:	697a      	ldr	r2, [r7, #20]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	429a      	cmp	r2, r3
 800c550:	f000 8098 	beq.w	800c684 <vTaskPrioritySet+0x17c>
            {
                /* The priority change may have readied a task of higher
                 * priority than the calling task. */
                if( uxNewPriority > uxCurrentBasePriority )
 800c554:	683a      	ldr	r2, [r7, #0]
 800c556:	697b      	ldr	r3, [r7, #20]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d90d      	bls.n	800c578 <vTaskPrioritySet+0x70>
                {
                    if( pxTCB != pxCurrentTCB )
 800c55c:	4b4d      	ldr	r3, [pc, #308]	; (800c694 <vTaskPrioritySet+0x18c>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	429a      	cmp	r2, r3
 800c564:	d00f      	beq.n	800c586 <vTaskPrioritySet+0x7e>
                    {
                        /* The priority of a task other than the currently
                         * running task is being raised.  Is the priority being
                         * raised above that of the running task? */
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800c566:	4b4b      	ldr	r3, [pc, #300]	; (800c694 <vTaskPrioritySet+0x18c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d309      	bcc.n	800c586 <vTaskPrioritySet+0x7e>
                        {
                            xYieldRequired = pdTRUE;
 800c572:	2301      	movs	r3, #1
 800c574:	61fb      	str	r3, [r7, #28]
 800c576:	e006      	b.n	800c586 <vTaskPrioritySet+0x7e>
                        /* The priority of the running task is being raised,
                         * but the running task must already be the highest
                         * priority task able to run so no yield is required. */
                    }
                }
                else if( pxTCB == pxCurrentTCB )
 800c578:	4b46      	ldr	r3, [pc, #280]	; (800c694 <vTaskPrioritySet+0x18c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	69ba      	ldr	r2, [r7, #24]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d101      	bne.n	800c586 <vTaskPrioritySet+0x7e>
                {
                    /* Setting the priority of the running task down means
                     * there may now be another task of higher priority that
                     * is ready to execute. */
                    xYieldRequired = pdTRUE;
 800c582:	2301      	movs	r3, #1
 800c584:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c58a:	613b      	str	r3, [r7, #16]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* Only change the priority being used if the task is not
                         * currently using an inherited priority. */
                        if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800c58c:	69bb      	ldr	r3, [r7, #24]
 800c58e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c590:	69bb      	ldr	r3, [r7, #24]
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	429a      	cmp	r2, r3
 800c596:	d102      	bne.n	800c59e <vTaskPrioritySet+0x96>
                        {
                            pxTCB->uxPriority = uxNewPriority;
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	683a      	ldr	r2, [r7, #0]
 800c59c:	62da      	str	r2, [r3, #44]	; 0x2c
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        /* The base priority gets set whatever. */
                        pxTCB->uxBasePriority = uxNewPriority;
 800c59e:	69bb      	ldr	r3, [r7, #24]
 800c5a0:	683a      	ldr	r2, [r7, #0]
 800c5a2:	64da      	str	r2, [r3, #76]	; 0x4c
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	699b      	ldr	r3, [r3, #24]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	db04      	blt.n	800c5b6 <vTaskPrioritySet+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	f1c3 0207 	rsb	r2, r3, #7
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	6959      	ldr	r1, [r3, #20]
 800c5ba:	693a      	ldr	r2, [r7, #16]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4a34      	ldr	r2, [pc, #208]	; (800c698 <vTaskPrioritySet+0x190>)
 800c5c6:	4413      	add	r3, r2
 800c5c8:	4299      	cmp	r1, r3
 800c5ca:	d150      	bne.n	800c66e <vTaskPrioritySet+0x166>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f7ff fa7f 	bl	800bad4 <uxListRemove>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d109      	bne.n	800c5f0 <vTaskPrioritySet+0xe8>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 800c5dc:	2201      	movs	r2, #1
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c5e4:	43da      	mvns	r2, r3
 800c5e6:	4b2d      	ldr	r3, [pc, #180]	; (800c69c <vTaskPrioritySet+0x194>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4013      	ands	r3, r2
 800c5ec:	4a2b      	ldr	r2, [pc, #172]	; (800c69c <vTaskPrioritySet+0x194>)
 800c5ee:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 800c5f0:	69bb      	ldr	r3, [r7, #24]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	409a      	lsls	r2, r3
 800c5f8:	4b28      	ldr	r3, [pc, #160]	; (800c69c <vTaskPrioritySet+0x194>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	4a27      	ldr	r2, [pc, #156]	; (800c69c <vTaskPrioritySet+0x194>)
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c606:	4924      	ldr	r1, [pc, #144]	; (800c698 <vTaskPrioritySet+0x190>)
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	440b      	add	r3, r1
 800c612:	3304      	adds	r3, #4
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	60fb      	str	r3, [r7, #12]
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	609a      	str	r2, [r3, #8]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	689a      	ldr	r2, [r3, #8]
 800c622:	69bb      	ldr	r3, [r7, #24]
 800c624:	60da      	str	r2, [r3, #12]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	689b      	ldr	r3, [r3, #8]
 800c62a:	69ba      	ldr	r2, [r7, #24]
 800c62c:	3204      	adds	r2, #4
 800c62e:	605a      	str	r2, [r3, #4]
 800c630:	69bb      	ldr	r3, [r7, #24]
 800c632:	1d1a      	adds	r2, r3, #4
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	609a      	str	r2, [r3, #8]
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63c:	4613      	mov	r3, r2
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	4413      	add	r3, r2
 800c642:	009b      	lsls	r3, r3, #2
 800c644:	4a14      	ldr	r2, [pc, #80]	; (800c698 <vTaskPrioritySet+0x190>)
 800c646:	441a      	add	r2, r3
 800c648:	69bb      	ldr	r3, [r7, #24]
 800c64a:	615a      	str	r2, [r3, #20]
 800c64c:	69bb      	ldr	r3, [r7, #24]
 800c64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c650:	4911      	ldr	r1, [pc, #68]	; (800c698 <vTaskPrioritySet+0x190>)
 800c652:	4613      	mov	r3, r2
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	440b      	add	r3, r1
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	1c59      	adds	r1, r3, #1
 800c660:	480d      	ldr	r0, [pc, #52]	; (800c698 <vTaskPrioritySet+0x190>)
 800c662:	4613      	mov	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	4413      	add	r3, r2
 800c668:	009b      	lsls	r3, r3, #2
 800c66a:	4403      	add	r3, r0
 800c66c:	6019      	str	r1, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xYieldRequired != pdFALSE )
 800c66e:	69fb      	ldr	r3, [r7, #28]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d007      	beq.n	800c684 <vTaskPrioritySet+0x17c>
                {
                    taskYIELD_IF_USING_PREEMPTION();
 800c674:	4b0a      	ldr	r3, [pc, #40]	; (800c6a0 <vTaskPrioritySet+0x198>)
 800c676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c67a:	601a      	str	r2, [r3, #0]
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 800c684:	f001 fa0c 	bl	800daa0 <vPortExitCritical>
    }
 800c688:	bf00      	nop
 800c68a:	3720      	adds	r7, #32
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	08014af8 	.word	0x08014af8
 800c694:	200007d8 	.word	0x200007d8
 800c698:	200007dc 	.word	0x200007dc
 800c69c:	200008e0 	.word	0x200008e0
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800c6aa:	4b1e      	ldr	r3, [pc, #120]	; (800c724 <vTaskStartScheduler+0x80>)
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	2278      	movs	r2, #120	; 0x78
 800c6b6:	491c      	ldr	r1, [pc, #112]	; (800c728 <vTaskStartScheduler+0x84>)
 800c6b8:	481c      	ldr	r0, [pc, #112]	; (800c72c <vTaskStartScheduler+0x88>)
 800c6ba:	f7ff fd03 	bl	800c0c4 <xTaskCreate>
 800c6be:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d102      	bne.n	800c6cc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800c6c6:	f000 fe1f 	bl	800d308 <xTimerCreateTimerTask>
 800c6ca:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d118      	bne.n	800c704 <vTaskStartScheduler+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800c6e4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800c6e6:	4b12      	ldr	r3, [pc, #72]	; (800c730 <vTaskStartScheduler+0x8c>)
 800c6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6ec:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800c6ee:	4b11      	ldr	r3, [pc, #68]	; (800c734 <vTaskStartScheduler+0x90>)
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c6f4:	4b10      	ldr	r3, [pc, #64]	; (800c738 <vTaskStartScheduler+0x94>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800c6fa:	f001 fab3 	bl	800dc64 <vConfigureTimerForRunTimeStats>

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800c6fe:	f001 f909 	bl	800d914 <xPortStartScheduler>
 800c702:	e008      	b.n	800c716 <vTaskStartScheduler+0x72>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c70a:	d104      	bne.n	800c716 <vTaskStartScheduler+0x72>
 800c70c:	f640 0137 	movw	r1, #2103	; 0x837
 800c710:	480a      	ldr	r0, [pc, #40]	; (800c73c <vTaskStartScheduler+0x98>)
 800c712:	f002 fa1b 	bl	800eb4c <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800c716:	4b0a      	ldr	r3, [pc, #40]	; (800c740 <vTaskStartScheduler+0x9c>)
 800c718:	681b      	ldr	r3, [r3, #0]
}
 800c71a:	bf00      	nop
 800c71c:	3708      	adds	r7, #8
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	200008fc 	.word	0x200008fc
 800c728:	08014b14 	.word	0x08014b14
 800c72c:	0800d069 	.word	0x0800d069
 800c730:	200008f8 	.word	0x200008f8
 800c734:	200008e4 	.word	0x200008e4
 800c738:	200008dc 	.word	0x200008dc
 800c73c:	08014af8 	.word	0x08014af8
 800c740:	20000028 	.word	0x20000028

0800c744 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800c748:	4b04      	ldr	r3, [pc, #16]	; (800c75c <vTaskSuspendAll+0x18>)
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	3301      	adds	r3, #1
 800c74e:	4a03      	ldr	r2, [pc, #12]	; (800c75c <vTaskSuspendAll+0x18>)
 800c750:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800c752:	bf00      	nop
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	20000900 	.word	0x20000900

0800c760 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 800c76a:	2300      	movs	r3, #0
 800c76c:	613b      	str	r3, [r7, #16]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800c76e:	4b6e      	ldr	r3, [pc, #440]	; (800c928 <xTaskResumeAll+0x1c8>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d104      	bne.n	800c780 <xTaskResumeAll+0x20>
 800c776:	f640 01aa 	movw	r1, #2218	; 0x8aa
 800c77a:	486c      	ldr	r0, [pc, #432]	; (800c92c <xTaskResumeAll+0x1cc>)
 800c77c:	f002 f9e6 	bl	800eb4c <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800c780:	f001 f964 	bl	800da4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800c784:	4b68      	ldr	r3, [pc, #416]	; (800c928 <xTaskResumeAll+0x1c8>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3b01      	subs	r3, #1
 800c78a:	4a67      	ldr	r2, [pc, #412]	; (800c928 <xTaskResumeAll+0x1c8>)
 800c78c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c78e:	4b66      	ldr	r3, [pc, #408]	; (800c928 <xTaskResumeAll+0x1c8>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2b00      	cmp	r3, #0
 800c794:	f040 80c0 	bne.w	800c918 <xTaskResumeAll+0x1b8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c798:	4b65      	ldr	r3, [pc, #404]	; (800c930 <xTaskResumeAll+0x1d0>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	f000 80bb 	beq.w	800c918 <xTaskResumeAll+0x1b8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c7a2:	e08a      	b.n	800c8ba <xTaskResumeAll+0x15a>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7a4:	4b63      	ldr	r3, [pc, #396]	; (800c934 <xTaskResumeAll+0x1d4>)
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	68db      	ldr	r3, [r3, #12]
 800c7aa:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	60bb      	str	r3, [r7, #8]
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	69db      	ldr	r3, [r3, #28]
 800c7b6:	697a      	ldr	r2, [r7, #20]
 800c7b8:	6a12      	ldr	r2, [r2, #32]
 800c7ba:	609a      	str	r2, [r3, #8]
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	6a1b      	ldr	r3, [r3, #32]
 800c7c0:	697a      	ldr	r2, [r7, #20]
 800c7c2:	69d2      	ldr	r2, [r2, #28]
 800c7c4:	605a      	str	r2, [r3, #4]
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	697b      	ldr	r3, [r7, #20]
 800c7cc:	3318      	adds	r3, #24
 800c7ce:	429a      	cmp	r2, r3
 800c7d0:	d103      	bne.n	800c7da <xTaskResumeAll+0x7a>
 800c7d2:	697b      	ldr	r3, [r7, #20]
 800c7d4:	6a1a      	ldr	r2, [r3, #32]
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	605a      	str	r2, [r3, #4]
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	629a      	str	r2, [r3, #40]	; 0x28
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	1e5a      	subs	r2, r3, #1
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	607b      	str	r3, [r7, #4]
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	697a      	ldr	r2, [r7, #20]
 800c7f6:	68d2      	ldr	r2, [r2, #12]
 800c7f8:	609a      	str	r2, [r3, #8]
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	6892      	ldr	r2, [r2, #8]
 800c802:	605a      	str	r2, [r3, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	685a      	ldr	r2, [r3, #4]
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	3304      	adds	r3, #4
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d103      	bne.n	800c818 <xTaskResumeAll+0xb8>
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	68da      	ldr	r2, [r3, #12]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	605a      	str	r2, [r3, #4]
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2200      	movs	r2, #0
 800c81c:	615a      	str	r2, [r3, #20]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	1e5a      	subs	r2, r3, #1
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c82c:	2201      	movs	r2, #1
 800c82e:	409a      	lsls	r2, r3
 800c830:	4b41      	ldr	r3, [pc, #260]	; (800c938 <xTaskResumeAll+0x1d8>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	4313      	orrs	r3, r2
 800c836:	4a40      	ldr	r2, [pc, #256]	; (800c938 <xTaskResumeAll+0x1d8>)
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c83e:	493f      	ldr	r1, [pc, #252]	; (800c93c <xTaskResumeAll+0x1dc>)
 800c840:	4613      	mov	r3, r2
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	440b      	add	r3, r1
 800c84a:	3304      	adds	r3, #4
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	609a      	str	r2, [r3, #8]
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	689a      	ldr	r2, [r3, #8]
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	60da      	str	r2, [r3, #12]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	3204      	adds	r2, #4
 800c866:	605a      	str	r2, [r3, #4]
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	1d1a      	adds	r2, r3, #4
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	609a      	str	r2, [r3, #8]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c874:	4613      	mov	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4413      	add	r3, r2
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4a2f      	ldr	r2, [pc, #188]	; (800c93c <xTaskResumeAll+0x1dc>)
 800c87e:	441a      	add	r2, r3
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	615a      	str	r2, [r3, #20]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c888:	492c      	ldr	r1, [pc, #176]	; (800c93c <xTaskResumeAll+0x1dc>)
 800c88a:	4613      	mov	r3, r2
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	440b      	add	r3, r1
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	1c59      	adds	r1, r3, #1
 800c898:	4828      	ldr	r0, [pc, #160]	; (800c93c <xTaskResumeAll+0x1dc>)
 800c89a:	4613      	mov	r3, r2
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4403      	add	r3, r0
 800c8a4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8aa:	4b25      	ldr	r3, [pc, #148]	; (800c940 <xTaskResumeAll+0x1e0>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d302      	bcc.n	800c8ba <xTaskResumeAll+0x15a>
                    {
                        xYieldPending = pdTRUE;
 800c8b4:	4b23      	ldr	r3, [pc, #140]	; (800c944 <xTaskResumeAll+0x1e4>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8ba:	4b1e      	ldr	r3, [pc, #120]	; (800c934 <xTaskResumeAll+0x1d4>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	f47f af70 	bne.w	800c7a4 <xTaskResumeAll+0x44>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d001      	beq.n	800c8ce <xTaskResumeAll+0x16e>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800c8ca:	f000 fc53 	bl	800d174 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8ce:	4b1e      	ldr	r3, [pc, #120]	; (800c948 <xTaskResumeAll+0x1e8>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	60fb      	str	r3, [r7, #12]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d010      	beq.n	800c8fc <xTaskResumeAll+0x19c>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800c8da:	f000 f85b 	bl	800c994 <xTaskIncrementTick>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d002      	beq.n	800c8ea <xTaskResumeAll+0x18a>
                            {
                                xYieldPending = pdTRUE;
 800c8e4:	4b17      	ldr	r3, [pc, #92]	; (800c944 <xTaskResumeAll+0x1e4>)
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	3b01      	subs	r3, #1
 800c8ee:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1f1      	bne.n	800c8da <xTaskResumeAll+0x17a>

                        xPendedTicks = 0;
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <xTaskResumeAll+0x1e8>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800c8fc:	4b11      	ldr	r3, [pc, #68]	; (800c944 <xTaskResumeAll+0x1e4>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d009      	beq.n	800c918 <xTaskResumeAll+0x1b8>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800c904:	2301      	movs	r3, #1
 800c906:	613b      	str	r3, [r7, #16]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800c908:	4b10      	ldr	r3, [pc, #64]	; (800c94c <xTaskResumeAll+0x1ec>)
 800c90a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c90e:	601a      	str	r2, [r3, #0]
 800c910:	f3bf 8f4f 	dsb	sy
 800c914:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800c918:	f001 f8c2 	bl	800daa0 <vPortExitCritical>

    return xAlreadyYielded;
 800c91c:	693b      	ldr	r3, [r7, #16]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3718      	adds	r7, #24
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	20000900 	.word	0x20000900
 800c92c:	08014af8 	.word	0x08014af8
 800c930:	200008d8 	.word	0x200008d8
 800c934:	20000898 	.word	0x20000898
 800c938:	200008e0 	.word	0x200008e0
 800c93c:	200007dc 	.word	0x200007dc
 800c940:	200007d8 	.word	0x200007d8
 800c944:	200008ec 	.word	0x200008ec
 800c948:	200008e8 	.word	0x200008e8
 800c94c:	e000ed04 	.word	0xe000ed04

0800c950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800c956:	4b05      	ldr	r3, [pc, #20]	; (800c96c <xTaskGetTickCount+0x1c>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800c95c:	687b      	ldr	r3, [r7, #4]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	200008dc 	.word	0x200008dc

0800c970 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c976:	f001 f941 	bl	800dbfc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c97a:	2300      	movs	r3, #0
 800c97c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800c97e:	4b04      	ldr	r3, [pc, #16]	; (800c990 <xTaskGetTickCountFromISR+0x20>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800c984:	683b      	ldr	r3, [r7, #0]
}
 800c986:	4618      	mov	r0, r3
 800c988:	3708      	adds	r7, #8
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	200008dc 	.word	0x200008dc

0800c994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b088      	sub	sp, #32
 800c998:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800c99a:	2300      	movs	r3, #0
 800c99c:	61fb      	str	r3, [r7, #28]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c99e:	4b7a      	ldr	r3, [pc, #488]	; (800cb88 <xTaskIncrementTick+0x1f4>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	f040 80e6 	bne.w	800cb74 <xTaskIncrementTick+0x1e0>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c9a8:	4b78      	ldr	r3, [pc, #480]	; (800cb8c <xTaskIncrementTick+0x1f8>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800c9b0:	4a76      	ldr	r2, [pc, #472]	; (800cb8c <xTaskIncrementTick+0x1f8>)
 800c9b2:	69bb      	ldr	r3, [r7, #24]
 800c9b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d11a      	bne.n	800c9f2 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800c9bc:	4b74      	ldr	r3, [pc, #464]	; (800cb90 <xTaskIncrementTick+0x1fc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d004      	beq.n	800c9d0 <xTaskIncrementTick+0x3c>
 800c9c6:	f640 21be 	movw	r1, #2750	; 0xabe
 800c9ca:	4872      	ldr	r0, [pc, #456]	; (800cb94 <xTaskIncrementTick+0x200>)
 800c9cc:	f002 f8be 	bl	800eb4c <vAssertCalled>
 800c9d0:	4b6f      	ldr	r3, [pc, #444]	; (800cb90 <xTaskIncrementTick+0x1fc>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	617b      	str	r3, [r7, #20]
 800c9d6:	4b70      	ldr	r3, [pc, #448]	; (800cb98 <xTaskIncrementTick+0x204>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a6d      	ldr	r2, [pc, #436]	; (800cb90 <xTaskIncrementTick+0x1fc>)
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	4a6e      	ldr	r2, [pc, #440]	; (800cb98 <xTaskIncrementTick+0x204>)
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	6013      	str	r3, [r2, #0]
 800c9e4:	4b6d      	ldr	r3, [pc, #436]	; (800cb9c <xTaskIncrementTick+0x208>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	4a6c      	ldr	r2, [pc, #432]	; (800cb9c <xTaskIncrementTick+0x208>)
 800c9ec:	6013      	str	r3, [r2, #0]
 800c9ee:	f000 fbc1 	bl	800d174 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800c9f2:	4b6b      	ldr	r3, [pc, #428]	; (800cba0 <xTaskIncrementTick+0x20c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	69ba      	ldr	r2, [r7, #24]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	f0c0 80a6 	bcc.w	800cb4a <xTaskIncrementTick+0x1b6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9fe:	4b64      	ldr	r3, [pc, #400]	; (800cb90 <xTaskIncrementTick+0x1fc>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d104      	bne.n	800ca12 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca08:	4b65      	ldr	r3, [pc, #404]	; (800cba0 <xTaskIncrementTick+0x20c>)
 800ca0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ca0e:	601a      	str	r2, [r3, #0]
                    break;
 800ca10:	e09b      	b.n	800cb4a <xTaskIncrementTick+0x1b6>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca12:	4b5f      	ldr	r3, [pc, #380]	; (800cb90 <xTaskIncrementTick+0x1fc>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	68db      	ldr	r3, [r3, #12]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800ca22:	69ba      	ldr	r2, [r7, #24]
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d203      	bcs.n	800ca32 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800ca2a:	4a5d      	ldr	r2, [pc, #372]	; (800cba0 <xTaskIncrementTick+0x20c>)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800ca30:	e08b      	b.n	800cb4a <xTaskIncrementTick+0x1b6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	695b      	ldr	r3, [r3, #20]
 800ca36:	60bb      	str	r3, [r7, #8]
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	693a      	ldr	r2, [r7, #16]
 800ca3e:	68d2      	ldr	r2, [r2, #12]
 800ca40:	609a      	str	r2, [r3, #8]
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	693a      	ldr	r2, [r7, #16]
 800ca48:	6892      	ldr	r2, [r2, #8]
 800ca4a:	605a      	str	r2, [r3, #4]
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	685a      	ldr	r2, [r3, #4]
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	3304      	adds	r3, #4
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d103      	bne.n	800ca60 <xTaskIncrementTick+0xcc>
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	605a      	str	r2, [r3, #4]
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	2200      	movs	r2, #0
 800ca64:	615a      	str	r2, [r3, #20]
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	1e5a      	subs	r2, r3, #1
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d01e      	beq.n	800cab6 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7c:	607b      	str	r3, [r7, #4]
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	6a12      	ldr	r2, [r2, #32]
 800ca86:	609a      	str	r2, [r3, #8]
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	6a1b      	ldr	r3, [r3, #32]
 800ca8c:	693a      	ldr	r2, [r7, #16]
 800ca8e:	69d2      	ldr	r2, [r2, #28]
 800ca90:	605a      	str	r2, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	3318      	adds	r3, #24
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d103      	bne.n	800caa6 <xTaskIncrementTick+0x112>
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	6a1a      	ldr	r2, [r3, #32]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	605a      	str	r2, [r3, #4]
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2200      	movs	r2, #0
 800caaa:	629a      	str	r2, [r3, #40]	; 0x28
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	1e5a      	subs	r2, r3, #1
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caba:	2201      	movs	r2, #1
 800cabc:	409a      	lsls	r2, r3
 800cabe:	4b39      	ldr	r3, [pc, #228]	; (800cba4 <xTaskIncrementTick+0x210>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	4a37      	ldr	r2, [pc, #220]	; (800cba4 <xTaskIncrementTick+0x210>)
 800cac6:	6013      	str	r3, [r2, #0]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cacc:	4936      	ldr	r1, [pc, #216]	; (800cba8 <xTaskIncrementTick+0x214>)
 800cace:	4613      	mov	r3, r2
 800cad0:	009b      	lsls	r3, r3, #2
 800cad2:	4413      	add	r3, r2
 800cad4:	009b      	lsls	r3, r3, #2
 800cad6:	440b      	add	r3, r1
 800cad8:	3304      	adds	r3, #4
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	603b      	str	r3, [r7, #0]
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	683a      	ldr	r2, [r7, #0]
 800cae2:	609a      	str	r2, [r3, #8]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	689a      	ldr	r2, [r3, #8]
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	60da      	str	r2, [r3, #12]
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	689b      	ldr	r3, [r3, #8]
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	3204      	adds	r2, #4
 800caf4:	605a      	str	r2, [r3, #4]
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	1d1a      	adds	r2, r3, #4
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	609a      	str	r2, [r3, #8]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb02:	4613      	mov	r3, r2
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4413      	add	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4a27      	ldr	r2, [pc, #156]	; (800cba8 <xTaskIncrementTick+0x214>)
 800cb0c:	441a      	add	r2, r3
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	615a      	str	r2, [r3, #20]
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb16:	4924      	ldr	r1, [pc, #144]	; (800cba8 <xTaskIncrementTick+0x214>)
 800cb18:	4613      	mov	r3, r2
 800cb1a:	009b      	lsls	r3, r3, #2
 800cb1c:	4413      	add	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	440b      	add	r3, r1
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	1c59      	adds	r1, r3, #1
 800cb26:	4820      	ldr	r0, [pc, #128]	; (800cba8 <xTaskIncrementTick+0x214>)
 800cb28:	4613      	mov	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	4413      	add	r3, r2
 800cb2e:	009b      	lsls	r3, r3, #2
 800cb30:	4403      	add	r3, r0
 800cb32:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb38:	4b1c      	ldr	r3, [pc, #112]	; (800cbac <xTaskIncrementTick+0x218>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	f4ff af5d 	bcc.w	800c9fe <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 800cb44:	2301      	movs	r3, #1
 800cb46:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cb48:	e759      	b.n	800c9fe <xTaskIncrementTick+0x6a>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cb4a:	4b18      	ldr	r3, [pc, #96]	; (800cbac <xTaskIncrementTick+0x218>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb50:	4915      	ldr	r1, [pc, #84]	; (800cba8 <xTaskIncrementTick+0x214>)
 800cb52:	4613      	mov	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	440b      	add	r3, r1
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b01      	cmp	r3, #1
 800cb60:	d901      	bls.n	800cb66 <xTaskIncrementTick+0x1d2>
                {
                    xSwitchRequired = pdTRUE;
 800cb62:	2301      	movs	r3, #1
 800cb64:	61fb      	str	r3, [r7, #28]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800cb66:	4b12      	ldr	r3, [pc, #72]	; (800cbb0 <xTaskIncrementTick+0x21c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d007      	beq.n	800cb7e <xTaskIncrementTick+0x1ea>
                {
                    xSwitchRequired = pdTRUE;
 800cb6e:	2301      	movs	r3, #1
 800cb70:	61fb      	str	r3, [r7, #28]
 800cb72:	e004      	b.n	800cb7e <xTaskIncrementTick+0x1ea>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800cb74:	4b0f      	ldr	r3, [pc, #60]	; (800cbb4 <xTaskIncrementTick+0x220>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	4a0e      	ldr	r2, [pc, #56]	; (800cbb4 <xTaskIncrementTick+0x220>)
 800cb7c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3720      	adds	r7, #32
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	20000900 	.word	0x20000900
 800cb8c:	200008dc 	.word	0x200008dc
 800cb90:	20000890 	.word	0x20000890
 800cb94:	08014af8 	.word	0x08014af8
 800cb98:	20000894 	.word	0x20000894
 800cb9c:	200008f0 	.word	0x200008f0
 800cba0:	200008f8 	.word	0x200008f8
 800cba4:	200008e0 	.word	0x200008e0
 800cba8:	200007dc 	.word	0x200007dc
 800cbac:	200007d8 	.word	0x200007d8
 800cbb0:	200008ec 	.word	0x200008ec
 800cbb4:	200008e8 	.word	0x200008e8

0800cbb8 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
 800cbc0:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d103      	bne.n	800cbd0 <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 800cbc8:	4b08      	ldr	r3, [pc, #32]	; (800cbec <vTaskSetApplicationTaskTag+0x34>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	e001      	b.n	800cbd4 <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 800cbd4:	f000 ff3a 	bl	800da4c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	683a      	ldr	r2, [r7, #0]
 800cbdc:	655a      	str	r2, [r3, #84]	; 0x54
        }
        taskEXIT_CRITICAL();
 800cbde:	f000 ff5f 	bl	800daa0 <vPortExitCritical>
    }
 800cbe2:	bf00      	nop
 800cbe4:	3710      	adds	r7, #16
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	200007d8 	.word	0x200007d8

0800cbf0 <xTaskGetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
    {
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        TaskHookFunction_t xReturn;

        /* If xTask is NULL then set the calling task's hook. */
        pxTCB = prvGetTCBFromHandle( xTask );
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d102      	bne.n	800cc04 <xTaskGetApplicationTaskTag+0x14>
 800cbfe:	4b08      	ldr	r3, [pc, #32]	; (800cc20 <xTaskGetApplicationTaskTag+0x30>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	e000      	b.n	800cc06 <xTaskGetApplicationTaskTag+0x16>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	60fb      	str	r3, [r7, #12]

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 800cc08:	f000 ff20 	bl	800da4c <vPortEnterCritical>
        {
            xReturn = pxTCB->pxTaskTag;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc10:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 800cc12:	f000 ff45 	bl	800daa0 <vPortExitCritical>

        return xReturn;
 800cc16:	68bb      	ldr	r3, [r7, #8]
    }
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}
 800cc20:	200007d8 	.word	0x200007d8

0800cc24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cc2a:	4b2f      	ldr	r3, [pc, #188]	; (800cce8 <vTaskSwitchContext+0xc4>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800cc32:	4b2e      	ldr	r3, [pc, #184]	; (800ccec <vTaskSwitchContext+0xc8>)
 800cc34:	2201      	movs	r2, #1
 800cc36:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800cc38:	e052      	b.n	800cce0 <vTaskSwitchContext+0xbc>
        xYieldPending = pdFALSE;
 800cc3a:	4b2c      	ldr	r3, [pc, #176]	; (800ccec <vTaskSwitchContext+0xc8>)
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800cc40:	f001 f836 	bl	800dcb0 <vGetRuntimeCounter>
 800cc44:	4603      	mov	r3, r0
 800cc46:	4a2a      	ldr	r2, [pc, #168]	; (800ccf0 <vTaskSwitchContext+0xcc>)
 800cc48:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 800cc4a:	4b29      	ldr	r3, [pc, #164]	; (800ccf0 <vTaskSwitchContext+0xcc>)
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	4b29      	ldr	r3, [pc, #164]	; (800ccf4 <vTaskSwitchContext+0xd0>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d909      	bls.n	800cc6a <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800cc56:	4b26      	ldr	r3, [pc, #152]	; (800ccf0 <vTaskSwitchContext+0xcc>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	4b26      	ldr	r3, [pc, #152]	; (800ccf4 <vTaskSwitchContext+0xd0>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	1ad1      	subs	r1, r2, r3
 800cc60:	4b25      	ldr	r3, [pc, #148]	; (800ccf8 <vTaskSwitchContext+0xd4>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cc66:	440a      	add	r2, r1
 800cc68:	659a      	str	r2, [r3, #88]	; 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 800cc6a:	4b21      	ldr	r3, [pc, #132]	; (800ccf0 <vTaskSwitchContext+0xcc>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a21      	ldr	r2, [pc, #132]	; (800ccf4 <vTaskSwitchContext+0xd0>)
 800cc70:	6013      	str	r3, [r2, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc72:	4b22      	ldr	r3, [pc, #136]	; (800ccfc <vTaskSwitchContext+0xd8>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	fab3 f383 	clz	r3, r3
 800cc7e:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 800cc80:	78fb      	ldrb	r3, [r7, #3]
 800cc82:	f1c3 031f 	rsb	r3, r3, #31
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	491d      	ldr	r1, [pc, #116]	; (800cd00 <vTaskSwitchContext+0xdc>)
 800cc8a:	68fa      	ldr	r2, [r7, #12]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	440b      	add	r3, r1
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d104      	bne.n	800cca6 <vTaskSwitchContext+0x82>
 800cc9c:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800cca0:	4818      	ldr	r0, [pc, #96]	; (800cd04 <vTaskSwitchContext+0xe0>)
 800cca2:	f001 ff53 	bl	800eb4c <vAssertCalled>
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	4613      	mov	r3, r2
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	4a13      	ldr	r2, [pc, #76]	; (800cd00 <vTaskSwitchContext+0xdc>)
 800ccb2:	4413      	add	r3, r2
 800ccb4:	60bb      	str	r3, [r7, #8]
 800ccb6:	68bb      	ldr	r3, [r7, #8]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	685a      	ldr	r2, [r3, #4]
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	605a      	str	r2, [r3, #4]
 800ccc0:	68bb      	ldr	r3, [r7, #8]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	3308      	adds	r3, #8
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d104      	bne.n	800ccd6 <vTaskSwitchContext+0xb2>
 800cccc:	68bb      	ldr	r3, [r7, #8]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	605a      	str	r2, [r3, #4]
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	4a06      	ldr	r2, [pc, #24]	; (800ccf8 <vTaskSwitchContext+0xd4>)
 800ccde:	6013      	str	r3, [r2, #0]
}
 800cce0:	bf00      	nop
 800cce2:	3710      	adds	r7, #16
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	20000900 	.word	0x20000900
 800ccec:	200008ec 	.word	0x200008ec
 800ccf0:	20000908 	.word	0x20000908
 800ccf4:	20000904 	.word	0x20000904
 800ccf8:	200007d8 	.word	0x200007d8
 800ccfc:	200008e0 	.word	0x200008e0
 800cd00:	200007dc 	.word	0x200007dc
 800cd04:	08014af8 	.word	0x08014af8

0800cd08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d104      	bne.n	800cd22 <vTaskPlaceOnEventList+0x1a>
 800cd18:	f640 4113 	movw	r1, #3091	; 0xc13
 800cd1c:	4808      	ldr	r0, [pc, #32]	; (800cd40 <vTaskPlaceOnEventList+0x38>)
 800cd1e:	f001 ff15 	bl	800eb4c <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd22:	4b08      	ldr	r3, [pc, #32]	; (800cd44 <vTaskPlaceOnEventList+0x3c>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	3318      	adds	r3, #24
 800cd28:	4619      	mov	r1, r3
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7fe fe99 	bl	800ba62 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cd30:	2101      	movs	r1, #1
 800cd32:	6838      	ldr	r0, [r7, #0]
 800cd34:	f000 fa68 	bl	800d208 <prvAddCurrentTaskToDelayedList>
}
 800cd38:	bf00      	nop
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}
 800cd40:	08014af8 	.word	0x08014af8
 800cd44:	200007d8 	.word	0x200007d8

0800cd48 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b086      	sub	sp, #24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d104      	bne.n	800cd64 <vTaskPlaceOnEventListRestricted+0x1c>
 800cd5a:	f640 4149 	movw	r1, #3145	; 0xc49
 800cd5e:	4819      	ldr	r0, [pc, #100]	; (800cdc4 <vTaskPlaceOnEventListRestricted+0x7c>)
 800cd60:	f001 fef4 	bl	800eb4c <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	617b      	str	r3, [r7, #20]
 800cd6a:	4b17      	ldr	r3, [pc, #92]	; (800cdc8 <vTaskPlaceOnEventListRestricted+0x80>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	697a      	ldr	r2, [r7, #20]
 800cd70:	61da      	str	r2, [r3, #28]
 800cd72:	4b15      	ldr	r3, [pc, #84]	; (800cdc8 <vTaskPlaceOnEventListRestricted+0x80>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	6892      	ldr	r2, [r2, #8]
 800cd7a:	621a      	str	r2, [r3, #32]
 800cd7c:	4b12      	ldr	r3, [pc, #72]	; (800cdc8 <vTaskPlaceOnEventListRestricted+0x80>)
 800cd7e:	681a      	ldr	r2, [r3, #0]
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	3218      	adds	r2, #24
 800cd86:	605a      	str	r2, [r3, #4]
 800cd88:	4b0f      	ldr	r3, [pc, #60]	; (800cdc8 <vTaskPlaceOnEventListRestricted+0x80>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f103 0218 	add.w	r2, r3, #24
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	609a      	str	r2, [r3, #8]
 800cd94:	4b0c      	ldr	r3, [pc, #48]	; (800cdc8 <vTaskPlaceOnEventListRestricted+0x80>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	629a      	str	r2, [r3, #40]	; 0x28
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	1c5a      	adds	r2, r3, #1
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d002      	beq.n	800cdb2 <vTaskPlaceOnEventListRestricted+0x6a>
        {
            xTicksToWait = portMAX_DELAY;
 800cdac:	f04f 33ff 	mov.w	r3, #4294967295
 800cdb0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cdb2:	6879      	ldr	r1, [r7, #4]
 800cdb4:	68b8      	ldr	r0, [r7, #8]
 800cdb6:	f000 fa27 	bl	800d208 <prvAddCurrentTaskToDelayedList>
    }
 800cdba:	bf00      	nop
 800cdbc:	3718      	adds	r7, #24
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	08014af8 	.word	0x08014af8
 800cdc8:	200007d8 	.word	0x200007d8

0800cdcc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b088      	sub	sp, #32
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 800cddc:	69bb      	ldr	r3, [r7, #24]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d104      	bne.n	800cdec <xTaskRemoveFromEventList+0x20>
 800cde2:	f640 4179 	movw	r1, #3193	; 0xc79
 800cde6:	485a      	ldr	r0, [pc, #360]	; (800cf50 <xTaskRemoveFromEventList+0x184>)
 800cde8:	f001 feb0 	bl	800eb4c <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800cdec:	69bb      	ldr	r3, [r7, #24]
 800cdee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	69bb      	ldr	r3, [r7, #24]
 800cdf4:	69db      	ldr	r3, [r3, #28]
 800cdf6:	69ba      	ldr	r2, [r7, #24]
 800cdf8:	6a12      	ldr	r2, [r2, #32]
 800cdfa:	609a      	str	r2, [r3, #8]
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	6a1b      	ldr	r3, [r3, #32]
 800ce00:	69ba      	ldr	r2, [r7, #24]
 800ce02:	69d2      	ldr	r2, [r2, #28]
 800ce04:	605a      	str	r2, [r3, #4]
 800ce06:	697b      	ldr	r3, [r7, #20]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	69bb      	ldr	r3, [r7, #24]
 800ce0c:	3318      	adds	r3, #24
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d103      	bne.n	800ce1a <xTaskRemoveFromEventList+0x4e>
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	6a1a      	ldr	r2, [r3, #32]
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	605a      	str	r2, [r3, #4]
 800ce1a:	69bb      	ldr	r3, [r7, #24]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	629a      	str	r2, [r3, #40]	; 0x28
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	1e5a      	subs	r2, r3, #1
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce2a:	4b4a      	ldr	r3, [pc, #296]	; (800cf54 <xTaskRemoveFromEventList+0x188>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d15e      	bne.n	800cef0 <xTaskRemoveFromEventList+0x124>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800ce32:	69bb      	ldr	r3, [r7, #24]
 800ce34:	695b      	ldr	r3, [r3, #20]
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	69ba      	ldr	r2, [r7, #24]
 800ce3e:	68d2      	ldr	r2, [r2, #12]
 800ce40:	609a      	str	r2, [r3, #8]
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	69ba      	ldr	r2, [r7, #24]
 800ce48:	6892      	ldr	r2, [r2, #8]
 800ce4a:	605a      	str	r2, [r3, #4]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	685a      	ldr	r2, [r3, #4]
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	3304      	adds	r3, #4
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d103      	bne.n	800ce60 <xTaskRemoveFromEventList+0x94>
 800ce58:	69bb      	ldr	r3, [r7, #24]
 800ce5a:	68da      	ldr	r2, [r3, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	605a      	str	r2, [r3, #4]
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	2200      	movs	r2, #0
 800ce64:	615a      	str	r2, [r3, #20]
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	1e5a      	subs	r2, r3, #1
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce74:	2201      	movs	r2, #1
 800ce76:	409a      	lsls	r2, r3
 800ce78:	4b37      	ldr	r3, [pc, #220]	; (800cf58 <xTaskRemoveFromEventList+0x18c>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4313      	orrs	r3, r2
 800ce7e:	4a36      	ldr	r2, [pc, #216]	; (800cf58 <xTaskRemoveFromEventList+0x18c>)
 800ce80:	6013      	str	r3, [r2, #0]
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce86:	4935      	ldr	r1, [pc, #212]	; (800cf5c <xTaskRemoveFromEventList+0x190>)
 800ce88:	4613      	mov	r3, r2
 800ce8a:	009b      	lsls	r3, r3, #2
 800ce8c:	4413      	add	r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	440b      	add	r3, r1
 800ce92:	3304      	adds	r3, #4
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	60bb      	str	r3, [r7, #8]
 800ce98:	69bb      	ldr	r3, [r7, #24]
 800ce9a:	68ba      	ldr	r2, [r7, #8]
 800ce9c:	609a      	str	r2, [r3, #8]
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	689a      	ldr	r2, [r3, #8]
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	60da      	str	r2, [r3, #12]
 800cea6:	68bb      	ldr	r3, [r7, #8]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	3204      	adds	r2, #4
 800ceae:	605a      	str	r2, [r3, #4]
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	1d1a      	adds	r2, r3, #4
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	609a      	str	r2, [r3, #8]
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cebc:	4613      	mov	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	4413      	add	r3, r2
 800cec2:	009b      	lsls	r3, r3, #2
 800cec4:	4a25      	ldr	r2, [pc, #148]	; (800cf5c <xTaskRemoveFromEventList+0x190>)
 800cec6:	441a      	add	r2, r3
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	615a      	str	r2, [r3, #20]
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced0:	4922      	ldr	r1, [pc, #136]	; (800cf5c <xTaskRemoveFromEventList+0x190>)
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	009b      	lsls	r3, r3, #2
 800ceda:	440b      	add	r3, r1
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	1c59      	adds	r1, r3, #1
 800cee0:	481e      	ldr	r0, [pc, #120]	; (800cf5c <xTaskRemoveFromEventList+0x190>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4413      	add	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4403      	add	r3, r0
 800ceec:	6019      	str	r1, [r3, #0]
 800ceee:	e01b      	b.n	800cf28 <xTaskRemoveFromEventList+0x15c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cef0:	4b1b      	ldr	r3, [pc, #108]	; (800cf60 <xTaskRemoveFromEventList+0x194>)
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	613b      	str	r3, [r7, #16]
 800cef6:	69bb      	ldr	r3, [r7, #24]
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	61da      	str	r2, [r3, #28]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	69bb      	ldr	r3, [r7, #24]
 800cf02:	621a      	str	r2, [r3, #32]
 800cf04:	693b      	ldr	r3, [r7, #16]
 800cf06:	689b      	ldr	r3, [r3, #8]
 800cf08:	69ba      	ldr	r2, [r7, #24]
 800cf0a:	3218      	adds	r2, #24
 800cf0c:	605a      	str	r2, [r3, #4]
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	f103 0218 	add.w	r2, r3, #24
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	609a      	str	r2, [r3, #8]
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	4a11      	ldr	r2, [pc, #68]	; (800cf60 <xTaskRemoveFromEventList+0x194>)
 800cf1c:	629a      	str	r2, [r3, #40]	; 0x28
 800cf1e:	4b10      	ldr	r3, [pc, #64]	; (800cf60 <xTaskRemoveFromEventList+0x194>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	4a0e      	ldr	r2, [pc, #56]	; (800cf60 <xTaskRemoveFromEventList+0x194>)
 800cf26:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf28:	69bb      	ldr	r3, [r7, #24]
 800cf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2c:	4b0d      	ldr	r3, [pc, #52]	; (800cf64 <xTaskRemoveFromEventList+0x198>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d905      	bls.n	800cf42 <xTaskRemoveFromEventList+0x176>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800cf36:	2301      	movs	r3, #1
 800cf38:	61fb      	str	r3, [r7, #28]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800cf3a:	4b0b      	ldr	r3, [pc, #44]	; (800cf68 <xTaskRemoveFromEventList+0x19c>)
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	601a      	str	r2, [r3, #0]
 800cf40:	e001      	b.n	800cf46 <xTaskRemoveFromEventList+0x17a>
    }
    else
    {
        xReturn = pdFALSE;
 800cf42:	2300      	movs	r3, #0
 800cf44:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 800cf46:	69fb      	ldr	r3, [r7, #28]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3720      	adds	r7, #32
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}
 800cf50:	08014af8 	.word	0x08014af8
 800cf54:	20000900 	.word	0x20000900
 800cf58:	200008e0 	.word	0x200008e0
 800cf5c:	200007dc 	.word	0x200007dc
 800cf60:	20000898 	.word	0x20000898
 800cf64:	200007d8 	.word	0x200007d8
 800cf68:	200008ec 	.word	0x200008ec

0800cf6c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf74:	4b06      	ldr	r3, [pc, #24]	; (800cf90 <vTaskInternalSetTimeOutState+0x24>)
 800cf76:	681a      	ldr	r2, [r3, #0]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800cf7c:	4b05      	ldr	r3, [pc, #20]	; (800cf94 <vTaskInternalSetTimeOutState+0x28>)
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	605a      	str	r2, [r3, #4]
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	200008f0 	.word	0x200008f0
 800cf94:	200008dc 	.word	0x200008dc

0800cf98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b086      	sub	sp, #24
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
 800cfa0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d104      	bne.n	800cfb2 <xTaskCheckForTimeOut+0x1a>
 800cfa8:	f640 41f4 	movw	r1, #3316	; 0xcf4
 800cfac:	4825      	ldr	r0, [pc, #148]	; (800d044 <xTaskCheckForTimeOut+0xac>)
 800cfae:	f001 fdcd 	bl	800eb4c <vAssertCalled>
    configASSERT( pxTicksToWait );
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d104      	bne.n	800cfc2 <xTaskCheckForTimeOut+0x2a>
 800cfb8:	f640 41f5 	movw	r1, #3317	; 0xcf5
 800cfbc:	4821      	ldr	r0, [pc, #132]	; (800d044 <xTaskCheckForTimeOut+0xac>)
 800cfbe:	f001 fdc5 	bl	800eb4c <vAssertCalled>

    taskENTER_CRITICAL();
 800cfc2:	f000 fd43 	bl	800da4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800cfc6:	4b20      	ldr	r3, [pc, #128]	; (800d048 <xTaskCheckForTimeOut+0xb0>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	693a      	ldr	r2, [r7, #16]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfde:	d102      	bne.n	800cfe6 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	e026      	b.n	800d034 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	4b18      	ldr	r3, [pc, #96]	; (800d04c <xTaskCheckForTimeOut+0xb4>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d00a      	beq.n	800d008 <xTaskCheckForTimeOut+0x70>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	693a      	ldr	r2, [r7, #16]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d305      	bcc.n	800d008 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	e015      	b.n	800d034 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	68fa      	ldr	r2, [r7, #12]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d20b      	bcs.n	800d02a <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	681a      	ldr	r2, [r3, #0]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	1ad2      	subs	r2, r2, r3
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f7ff ffa4 	bl	800cf6c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800d024:	2300      	movs	r3, #0
 800d026:	617b      	str	r3, [r7, #20]
 800d028:	e004      	b.n	800d034 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	2200      	movs	r2, #0
 800d02e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800d030:	2301      	movs	r3, #1
 800d032:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 800d034:	f000 fd34 	bl	800daa0 <vPortExitCritical>

    return xReturn;
 800d038:	697b      	ldr	r3, [r7, #20]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	08014af8 	.word	0x08014af8
 800d048:	200008dc 	.word	0x200008dc
 800d04c:	200008f0 	.word	0x200008f0

0800d050 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d050:	b480      	push	{r7}
 800d052:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800d054:	4b03      	ldr	r3, [pc, #12]	; (800d064 <vTaskMissedYield+0x14>)
 800d056:	2201      	movs	r2, #1
 800d058:	601a      	str	r2, [r3, #0]
}
 800d05a:	bf00      	nop
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr
 800d064:	200008ec 	.word	0x200008ec

0800d068 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b082      	sub	sp, #8
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800d070:	f000 f842 	bl	800d0f8 <prvCheckTasksWaitingTermination>
 800d074:	e7fc      	b.n	800d070 <prvIdleTask+0x8>
	...

0800d078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b082      	sub	sp, #8
 800d07c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d07e:	2300      	movs	r3, #0
 800d080:	607b      	str	r3, [r7, #4]
 800d082:	e00c      	b.n	800d09e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	4613      	mov	r3, r2
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	4413      	add	r3, r2
 800d08c:	009b      	lsls	r3, r3, #2
 800d08e:	4a12      	ldr	r2, [pc, #72]	; (800d0d8 <prvInitialiseTaskLists+0x60>)
 800d090:	4413      	add	r3, r2
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fc94 	bl	800b9c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	3301      	adds	r3, #1
 800d09c:	607b      	str	r3, [r7, #4]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b06      	cmp	r3, #6
 800d0a2:	d9ef      	bls.n	800d084 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800d0a4:	480d      	ldr	r0, [pc, #52]	; (800d0dc <prvInitialiseTaskLists+0x64>)
 800d0a6:	f7fe fc8b 	bl	800b9c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800d0aa:	480d      	ldr	r0, [pc, #52]	; (800d0e0 <prvInitialiseTaskLists+0x68>)
 800d0ac:	f7fe fc88 	bl	800b9c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800d0b0:	480c      	ldr	r0, [pc, #48]	; (800d0e4 <prvInitialiseTaskLists+0x6c>)
 800d0b2:	f7fe fc85 	bl	800b9c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800d0b6:	480c      	ldr	r0, [pc, #48]	; (800d0e8 <prvInitialiseTaskLists+0x70>)
 800d0b8:	f7fe fc82 	bl	800b9c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800d0bc:	480b      	ldr	r0, [pc, #44]	; (800d0ec <prvInitialiseTaskLists+0x74>)
 800d0be:	f7fe fc7f 	bl	800b9c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d0c2:	4b0b      	ldr	r3, [pc, #44]	; (800d0f0 <prvInitialiseTaskLists+0x78>)
 800d0c4:	4a05      	ldr	r2, [pc, #20]	; (800d0dc <prvInitialiseTaskLists+0x64>)
 800d0c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0c8:	4b0a      	ldr	r3, [pc, #40]	; (800d0f4 <prvInitialiseTaskLists+0x7c>)
 800d0ca:	4a05      	ldr	r2, [pc, #20]	; (800d0e0 <prvInitialiseTaskLists+0x68>)
 800d0cc:	601a      	str	r2, [r3, #0]
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	200007dc 	.word	0x200007dc
 800d0dc:	20000868 	.word	0x20000868
 800d0e0:	2000087c 	.word	0x2000087c
 800d0e4:	20000898 	.word	0x20000898
 800d0e8:	200008ac 	.word	0x200008ac
 800d0ec:	200008c4 	.word	0x200008c4
 800d0f0:	20000890 	.word	0x20000890
 800d0f4:	20000894 	.word	0x20000894

0800d0f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0fe:	e019      	b.n	800d134 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800d100:	f000 fca4 	bl	800da4c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d104:	4b10      	ldr	r3, [pc, #64]	; (800d148 <prvCheckTasksWaitingTermination+0x50>)
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	3304      	adds	r3, #4
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fcdf 	bl	800bad4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800d116:	4b0d      	ldr	r3, [pc, #52]	; (800d14c <prvCheckTasksWaitingTermination+0x54>)
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	4a0b      	ldr	r2, [pc, #44]	; (800d14c <prvCheckTasksWaitingTermination+0x54>)
 800d11e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800d120:	4b0b      	ldr	r3, [pc, #44]	; (800d150 <prvCheckTasksWaitingTermination+0x58>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	3b01      	subs	r3, #1
 800d126:	4a0a      	ldr	r2, [pc, #40]	; (800d150 <prvCheckTasksWaitingTermination+0x58>)
 800d128:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800d12a:	f000 fcb9 	bl	800daa0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 f810 	bl	800d154 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d134:	4b06      	ldr	r3, [pc, #24]	; (800d150 <prvCheckTasksWaitingTermination+0x58>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1e1      	bne.n	800d100 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800d13c:	bf00      	nop
 800d13e:	bf00      	nop
 800d140:	3708      	adds	r7, #8
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	200008ac 	.word	0x200008ac
 800d14c:	200008d8 	.word	0x200008d8
 800d150:	200008c0 	.word	0x200008c0

0800d154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d160:	4618      	mov	r0, r3
 800d162:	f000 fdd7 	bl	800dd14 <vPortFree>
                vPortFree( pxTCB );
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fdd4 	bl	800dd14 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d174:	b480      	push	{r7}
 800d176:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d178:	4b0a      	ldr	r3, [pc, #40]	; (800d1a4 <prvResetNextTaskUnblockTime+0x30>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d104      	bne.n	800d18c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800d182:	4b09      	ldr	r3, [pc, #36]	; (800d1a8 <prvResetNextTaskUnblockTime+0x34>)
 800d184:	f04f 32ff 	mov.w	r2, #4294967295
 800d188:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800d18a:	e005      	b.n	800d198 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d18c:	4b05      	ldr	r3, [pc, #20]	; (800d1a4 <prvResetNextTaskUnblockTime+0x30>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	68db      	ldr	r3, [r3, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a04      	ldr	r2, [pc, #16]	; (800d1a8 <prvResetNextTaskUnblockTime+0x34>)
 800d196:	6013      	str	r3, [r2, #0]
}
 800d198:	bf00      	nop
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	20000890 	.word	0x20000890
 800d1a8:	200008f8 	.word	0x200008f8

0800d1ac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

    TaskHandle_t xTaskGetCurrentTaskHandle( void )
    {
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
        TaskHandle_t xReturn;

        /* A critical section is not required as this is not called from
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;
 800d1b2:	4b05      	ldr	r3, [pc, #20]	; (800d1c8 <xTaskGetCurrentTaskHandle+0x1c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	607b      	str	r3, [r7, #4]

        return xReturn;
 800d1b8:	687b      	ldr	r3, [r7, #4]
    }
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	370c      	adds	r7, #12
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
 800d1c6:	bf00      	nop
 800d1c8:	200007d8 	.word	0x200007d8

0800d1cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800d1cc:	b480      	push	{r7}
 800d1ce:	b083      	sub	sp, #12
 800d1d0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800d1d2:	4b0b      	ldr	r3, [pc, #44]	; (800d200 <xTaskGetSchedulerState+0x34>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	607b      	str	r3, [r7, #4]
 800d1de:	e008      	b.n	800d1f2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1e0:	4b08      	ldr	r3, [pc, #32]	; (800d204 <xTaskGetSchedulerState+0x38>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d102      	bne.n	800d1ee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800d1e8:	2302      	movs	r3, #2
 800d1ea:	607b      	str	r3, [r7, #4]
 800d1ec:	e001      	b.n	800d1f2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800d1f2:	687b      	ldr	r3, [r7, #4]
    }
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	370c      	adds	r7, #12
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	200008e4 	.word	0x200008e4
 800d204:	20000900 	.word	0x20000900

0800d208 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800d212:	4b36      	ldr	r3, [pc, #216]	; (800d2ec <prvAddCurrentTaskToDelayedList+0xe4>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d218:	4b35      	ldr	r3, [pc, #212]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3304      	adds	r3, #4
 800d21e:	4618      	mov	r0, r3
 800d220:	f7fe fc58 	bl	800bad4 <uxListRemove>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d10b      	bne.n	800d242 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d22a:	4b31      	ldr	r3, [pc, #196]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d230:	2201      	movs	r2, #1
 800d232:	fa02 f303 	lsl.w	r3, r2, r3
 800d236:	43da      	mvns	r2, r3
 800d238:	4b2e      	ldr	r3, [pc, #184]	; (800d2f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4013      	ands	r3, r2
 800d23e:	4a2d      	ldr	r2, [pc, #180]	; (800d2f4 <prvAddCurrentTaskToDelayedList+0xec>)
 800d240:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d248:	d124      	bne.n	800d294 <prvAddCurrentTaskToDelayedList+0x8c>
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d021      	beq.n	800d294 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d250:	4b29      	ldr	r3, [pc, #164]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	613b      	str	r3, [r7, #16]
 800d256:	4b26      	ldr	r3, [pc, #152]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	609a      	str	r2, [r3, #8]
 800d25e:	4b24      	ldr	r3, [pc, #144]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	6892      	ldr	r2, [r2, #8]
 800d266:	60da      	str	r2, [r3, #12]
 800d268:	4b21      	ldr	r3, [pc, #132]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	3204      	adds	r2, #4
 800d272:	605a      	str	r2, [r3, #4]
 800d274:	4b1e      	ldr	r3, [pc, #120]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	1d1a      	adds	r2, r3, #4
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	609a      	str	r2, [r3, #8]
 800d27e:	4b1c      	ldr	r3, [pc, #112]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	4a1d      	ldr	r2, [pc, #116]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d284:	615a      	str	r2, [r3, #20]
 800d286:	4b1c      	ldr	r3, [pc, #112]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	3301      	adds	r3, #1
 800d28c:	4a1a      	ldr	r2, [pc, #104]	; (800d2f8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800d28e:	6013      	str	r3, [r2, #0]
 800d290:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800d292:	e026      	b.n	800d2e2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800d294:	697a      	ldr	r2, [r7, #20]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4413      	add	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d29c:	4b14      	ldr	r3, [pc, #80]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	68fa      	ldr	r2, [r7, #12]
 800d2a2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	697b      	ldr	r3, [r7, #20]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d209      	bcs.n	800d2c0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2ac:	4b13      	ldr	r3, [pc, #76]	; (800d2fc <prvAddCurrentTaskToDelayedList+0xf4>)
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	4b0f      	ldr	r3, [pc, #60]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	f7fe fbd2 	bl	800ba62 <vListInsert>
}
 800d2be:	e010      	b.n	800d2e2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d2c0:	4b0f      	ldr	r3, [pc, #60]	; (800d300 <prvAddCurrentTaskToDelayedList+0xf8>)
 800d2c2:	681a      	ldr	r2, [r3, #0]
 800d2c4:	4b0a      	ldr	r3, [pc, #40]	; (800d2f0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	4610      	mov	r0, r2
 800d2ce:	f7fe fbc8 	bl	800ba62 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800d2d2:	4b0c      	ldr	r3, [pc, #48]	; (800d304 <prvAddCurrentTaskToDelayedList+0xfc>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d202      	bcs.n	800d2e2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800d2dc:	4a09      	ldr	r2, [pc, #36]	; (800d304 <prvAddCurrentTaskToDelayedList+0xfc>)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6013      	str	r3, [r2, #0]
}
 800d2e2:	bf00      	nop
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	200008dc 	.word	0x200008dc
 800d2f0:	200007d8 	.word	0x200007d8
 800d2f4:	200008e0 	.word	0x200008e0
 800d2f8:	200008c4 	.word	0x200008c4
 800d2fc:	20000894 	.word	0x20000894
 800d300:	20000890 	.word	0x20000890
 800d304:	200008f8 	.word	0x200008f8

0800d308 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800d30e:	2300      	movs	r3, #0
 800d310:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800d312:	f000 fa3f 	bl	800d794 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800d316:	4b0e      	ldr	r3, [pc, #56]	; (800d350 <xTimerCreateTimerTask+0x48>)
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d00a      	beq.n	800d334 <xTimerCreateTimerTask+0x2c>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800d31e:	4b0d      	ldr	r3, [pc, #52]	; (800d354 <xTimerCreateTimerTask+0x4c>)
 800d320:	9301      	str	r3, [sp, #4]
 800d322:	2303      	movs	r3, #3
 800d324:	9300      	str	r3, [sp, #0]
 800d326:	2300      	movs	r3, #0
 800d328:	2278      	movs	r2, #120	; 0x78
 800d32a:	490b      	ldr	r1, [pc, #44]	; (800d358 <xTimerCreateTimerTask+0x50>)
 800d32c:	480b      	ldr	r0, [pc, #44]	; (800d35c <xTimerCreateTimerTask+0x54>)
 800d32e:	f7fe fec9 	bl	800c0c4 <xTaskCreate>
 800d332:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d104      	bne.n	800d344 <xTimerCreateTimerTask+0x3c>
 800d33a:	f240 1119 	movw	r1, #281	; 0x119
 800d33e:	4808      	ldr	r0, [pc, #32]	; (800d360 <xTimerCreateTimerTask+0x58>)
 800d340:	f001 fc04 	bl	800eb4c <vAssertCalled>
        return xReturn;
 800d344:	687b      	ldr	r3, [r7, #4]
    }
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
 800d34e:	bf00      	nop
 800d350:	2000093c 	.word	0x2000093c
 800d354:	20000940 	.word	0x20000940
 800d358:	08014b60 	.word	0x08014b60
 800d35c:	0800d409 	.word	0x0800d409
 800d360:	08014b68 	.word	0x08014b68

0800d364 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800d364:	b580      	push	{r7, lr}
 800d366:	b084      	sub	sp, #16
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d370:	e008      	b.n	800d384 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	699b      	ldr	r3, [r3, #24]
 800d376:	68ba      	ldr	r2, [r7, #8]
 800d378:	4413      	add	r3, r2
 800d37a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6a1b      	ldr	r3, [r3, #32]
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	4798      	blx	r3
        while ( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	699a      	ldr	r2, [r3, #24]
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	18d1      	adds	r1, r2, r3
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f000 f8dd 	bl	800d550 <prvInsertTimerInActiveList>
 800d396:	4603      	mov	r3, r0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d1ea      	bne.n	800d372 <prvReloadTimer+0xe>
        }
    }
 800d39c:	bf00      	nop
 800d39e:	bf00      	nop
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
	...

0800d3a8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3b2:	4b14      	ldr	r3, [pc, #80]	; (800d404 <prvProcessExpiredTimer+0x5c>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe fb87 	bl	800bad4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3cc:	f003 0304 	and.w	r3, r3, #4
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800d3d4:	683a      	ldr	r2, [r7, #0]
 800d3d6:	6879      	ldr	r1, [r7, #4]
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f7ff ffc3 	bl	800d364 <prvReloadTimer>
 800d3de:	e008      	b.n	800d3f2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d3e6:	f023 0301 	bic.w	r3, r3, #1
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6a1b      	ldr	r3, [r3, #32]
 800d3f6:	68f8      	ldr	r0, [r7, #12]
 800d3f8:	4798      	blx	r3
    }
 800d3fa:	bf00      	nop
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	20000934 	.word	0x20000934

0800d408 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800d408:	b580      	push	{r7, lr}
 800d40a:	b084      	sub	sp, #16
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d410:	f107 0308 	add.w	r3, r7, #8
 800d414:	4618      	mov	r0, r3
 800d416:	f000 f857 	bl	800d4c8 <prvGetNextExpireTime>
 800d41a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	4619      	mov	r1, r3
 800d420:	68f8      	ldr	r0, [r7, #12]
 800d422:	f000 f803 	bl	800d42c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800d426:	f000 f8d5 	bl	800d5d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d42a:	e7f1      	b.n	800d410 <prvTimerTask+0x8>

0800d42c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800d436:	f7ff f985 	bl	800c744 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d43a:	f107 0308 	add.w	r3, r7, #8
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 f866 	bl	800d510 <prvSampleTimeNow>
 800d444:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d130      	bne.n	800d4ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10a      	bne.n	800d468 <prvProcessTimerOrBlockTask+0x3c>
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	429a      	cmp	r2, r3
 800d458:	d806      	bhi.n	800d468 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800d45a:	f7ff f981 	bl	800c760 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d45e:	68f9      	ldr	r1, [r7, #12]
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f7ff ffa1 	bl	800d3a8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800d466:	e024      	b.n	800d4b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d008      	beq.n	800d480 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d46e:	4b13      	ldr	r3, [pc, #76]	; (800d4bc <prvProcessTimerOrBlockTask+0x90>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <prvProcessTimerOrBlockTask+0x50>
 800d478:	2301      	movs	r3, #1
 800d47a:	e000      	b.n	800d47e <prvProcessTimerOrBlockTask+0x52>
 800d47c:	2300      	movs	r3, #0
 800d47e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d480:	4b0f      	ldr	r3, [pc, #60]	; (800d4c0 <prvProcessTimerOrBlockTask+0x94>)
 800d482:	6818      	ldr	r0, [r3, #0]
 800d484:	687a      	ldr	r2, [r7, #4]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	1ad3      	subs	r3, r2, r3
 800d48a:	683a      	ldr	r2, [r7, #0]
 800d48c:	4619      	mov	r1, r3
 800d48e:	f7fe fde5 	bl	800c05c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800d492:	f7ff f965 	bl	800c760 <xTaskResumeAll>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800d49c:	4b09      	ldr	r3, [pc, #36]	; (800d4c4 <prvProcessTimerOrBlockTask+0x98>)
 800d49e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4a2:	601a      	str	r2, [r3, #0]
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	f3bf 8f6f 	isb	sy
    }
 800d4ac:	e001      	b.n	800d4b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800d4ae:	f7ff f957 	bl	800c760 <xTaskResumeAll>
    }
 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	20000938 	.word	0x20000938
 800d4c0:	2000093c 	.word	0x2000093c
 800d4c4:	e000ed04 	.word	0xe000ed04

0800d4c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d4d0:	4b0e      	ldr	r3, [pc, #56]	; (800d50c <prvGetNextExpireTime+0x44>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d101      	bne.n	800d4de <prvGetNextExpireTime+0x16>
 800d4da:	2201      	movs	r2, #1
 800d4dc:	e000      	b.n	800d4e0 <prvGetNextExpireTime+0x18>
 800d4de:	2200      	movs	r2, #0
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d105      	bne.n	800d4f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d4ec:	4b07      	ldr	r3, [pc, #28]	; (800d50c <prvGetNextExpireTime+0x44>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	e001      	b.n	800d4fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
    }
 800d4fe:	4618      	mov	r0, r3
 800d500:	3714      	adds	r7, #20
 800d502:	46bd      	mov	sp, r7
 800d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	20000934 	.word	0x20000934

0800d510 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800d518:	f7ff fa1a 	bl	800c950 <xTaskGetTickCount>
 800d51c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800d51e:	4b0b      	ldr	r3, [pc, #44]	; (800d54c <prvSampleTimeNow+0x3c>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	429a      	cmp	r2, r3
 800d526:	d205      	bcs.n	800d534 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800d528:	f000 f90e 	bl	800d748 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2201      	movs	r2, #1
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	e002      	b.n	800d53a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800d53a:	4a04      	ldr	r2, [pc, #16]	; (800d54c <prvSampleTimeNow+0x3c>)
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800d540:	68fb      	ldr	r3, [r7, #12]
    }
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	20000944 	.word	0x20000944

0800d550 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800d550:	b580      	push	{r7, lr}
 800d552:	b086      	sub	sp, #24
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	607a      	str	r2, [r7, #4]
 800d55c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800d55e:	2300      	movs	r3, #0
 800d560:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	68ba      	ldr	r2, [r7, #8]
 800d566:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	429a      	cmp	r2, r3
 800d574:	d812      	bhi.n	800d59c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	1ad2      	subs	r2, r2, r3
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	429a      	cmp	r2, r3
 800d582:	d302      	bcc.n	800d58a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800d584:	2301      	movs	r3, #1
 800d586:	617b      	str	r3, [r7, #20]
 800d588:	e01b      	b.n	800d5c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d58a:	4b10      	ldr	r3, [pc, #64]	; (800d5cc <prvInsertTimerInActiveList+0x7c>)
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	3304      	adds	r3, #4
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f7fe fa64 	bl	800ba62 <vListInsert>
 800d59a:	e012      	b.n	800d5c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d206      	bcs.n	800d5b2 <prvInsertTimerInActiveList+0x62>
 800d5a4:	68ba      	ldr	r2, [r7, #8]
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d302      	bcc.n	800d5b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	617b      	str	r3, [r7, #20]
 800d5b0:	e007      	b.n	800d5c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5b2:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <prvInsertTimerInActiveList+0x80>)
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	f7fe fa50 	bl	800ba62 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800d5c2:	697b      	ldr	r3, [r7, #20]
    }
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3718      	adds	r7, #24
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	20000938 	.word	0x20000938
 800d5d0:	20000934 	.word	0x20000934

0800d5d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b086      	sub	sp, #24
 800d5d8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5da:	e0a0      	b.n	800d71e <prvProcessReceivedCommands+0x14a>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f2c0 809c 	blt.w	800d71c <prvProcessReceivedCommands+0x148>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	617b      	str	r3, [r7, #20]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	695b      	ldr	r3, [r3, #20]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d004      	beq.n	800d5fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	3304      	adds	r3, #4
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7fe fa6d 	bl	800bad4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d5fa:	463b      	mov	r3, r7
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff ff87 	bl	800d510 <prvSampleTimeNow>
 800d602:	6138      	str	r0, [r7, #16]

                switch( xMessage.xMessageID )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	3b01      	subs	r3, #1
 800d608:	2b08      	cmp	r3, #8
 800d60a:	f200 8088 	bhi.w	800d71e <prvProcessReceivedCommands+0x14a>
 800d60e:	a201      	add	r2, pc, #4	; (adr r2, 800d614 <prvProcessReceivedCommands+0x40>)
 800d610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d614:	0800d639 	.word	0x0800d639
 800d618:	0800d639 	.word	0x0800d639
 800d61c:	0800d6a1 	.word	0x0800d6a1
 800d620:	0800d6b5 	.word	0x0800d6b5
 800d624:	0800d6f3 	.word	0x0800d6f3
 800d628:	0800d639 	.word	0x0800d639
 800d62c:	0800d639 	.word	0x0800d639
 800d630:	0800d6a1 	.word	0x0800d6a1
 800d634:	0800d6b5 	.word	0x0800d6b5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d63e:	f043 0301 	orr.w	r3, r3, #1
 800d642:	b2da      	uxtb	r2, r3
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	697b      	ldr	r3, [r7, #20]
 800d64e:	699b      	ldr	r3, [r3, #24]
 800d650:	18d1      	adds	r1, r2, r3
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	693a      	ldr	r2, [r7, #16]
 800d656:	6978      	ldr	r0, [r7, #20]
 800d658:	f7ff ff7a 	bl	800d550 <prvInsertTimerInActiveList>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d05d      	beq.n	800d71e <prvProcessReceivedCommands+0x14a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d668:	f003 0304 	and.w	r3, r3, #4
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d009      	beq.n	800d684 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800d670:	68ba      	ldr	r2, [r7, #8]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	699b      	ldr	r3, [r3, #24]
 800d676:	4413      	add	r3, r2
 800d678:	693a      	ldr	r2, [r7, #16]
 800d67a:	4619      	mov	r1, r3
 800d67c:	6978      	ldr	r0, [r7, #20]
 800d67e:	f7ff fe71 	bl	800d364 <prvReloadTimer>
 800d682:	e008      	b.n	800d696 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d68a:	f023 0301 	bic.w	r3, r3, #1
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	6a1b      	ldr	r3, [r3, #32]
 800d69a:	6978      	ldr	r0, [r7, #20]
 800d69c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800d69e:	e03e      	b.n	800d71e <prvProcessReceivedCommands+0x14a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6a6:	f023 0301 	bic.w	r3, r3, #1
 800d6aa:	b2da      	uxtb	r2, r3
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800d6b2:	e034      	b.n	800d71e <prvProcessReceivedCommands+0x14a>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6ba:	f043 0301 	orr.w	r3, r3, #1
 800d6be:	b2da      	uxtb	r2, r3
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d6c6:	68ba      	ldr	r2, [r7, #8]
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	699b      	ldr	r3, [r3, #24]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d104      	bne.n	800d6de <prvProcessReceivedCommands+0x10a>
 800d6d4:	f44f 7156 	mov.w	r1, #856	; 0x358
 800d6d8:	4819      	ldr	r0, [pc, #100]	; (800d740 <prvProcessReceivedCommands+0x16c>)
 800d6da:	f001 fa37 	bl	800eb4c <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	699a      	ldr	r2, [r3, #24]
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	18d1      	adds	r1, r2, r3
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	693a      	ldr	r2, [r7, #16]
 800d6ea:	6978      	ldr	r0, [r7, #20]
 800d6ec:	f7ff ff30 	bl	800d550 <prvInsertTimerInActiveList>
                        break;
 800d6f0:	e015      	b.n	800d71e <prvProcessReceivedCommands+0x14a>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d103      	bne.n	800d708 <prvProcessReceivedCommands+0x134>
                                {
                                    vPortFree( pxTimer );
 800d700:	6978      	ldr	r0, [r7, #20]
 800d702:	f000 fb07 	bl	800dd14 <vPortFree>
 800d706:	e00a      	b.n	800d71e <prvProcessReceivedCommands+0x14a>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d70e:	f023 0301 	bic.w	r3, r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800d71a:	e000      	b.n	800d71e <prvProcessReceivedCommands+0x14a>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 800d71c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d71e:	4b09      	ldr	r3, [pc, #36]	; (800d744 <prvProcessReceivedCommands+0x170>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	1d39      	adds	r1, r7, #4
 800d724:	2200      	movs	r2, #0
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe faf2 	bl	800bd10 <xQueueReceive>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f47f af54 	bne.w	800d5dc <prvProcessReceivedCommands+0x8>
        }
    }
 800d734:	bf00      	nop
 800d736:	bf00      	nop
 800d738:	3718      	adds	r7, #24
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	08014b68 	.word	0x08014b68
 800d744:	2000093c 	.word	0x2000093c

0800d748 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d74e:	e009      	b.n	800d764 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d750:	4b0e      	ldr	r3, [pc, #56]	; (800d78c <prvSwitchTimerLists+0x44>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800d75a:	f04f 31ff 	mov.w	r1, #4294967295
 800d75e:	6838      	ldr	r0, [r7, #0]
 800d760:	f7ff fe22 	bl	800d3a8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d764:	4b09      	ldr	r3, [pc, #36]	; (800d78c <prvSwitchTimerLists+0x44>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d1f0      	bne.n	800d750 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800d76e:	4b07      	ldr	r3, [pc, #28]	; (800d78c <prvSwitchTimerLists+0x44>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800d774:	4b06      	ldr	r3, [pc, #24]	; (800d790 <prvSwitchTimerLists+0x48>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	4a04      	ldr	r2, [pc, #16]	; (800d78c <prvSwitchTimerLists+0x44>)
 800d77a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800d77c:	4a04      	ldr	r2, [pc, #16]	; (800d790 <prvSwitchTimerLists+0x48>)
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6013      	str	r3, [r2, #0]
    }
 800d782:	bf00      	nop
 800d784:	3708      	adds	r7, #8
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
 800d78a:	bf00      	nop
 800d78c:	20000934 	.word	0x20000934
 800d790:	20000938 	.word	0x20000938

0800d794 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800d798:	f000 f958 	bl	800da4c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800d79c:	4b12      	ldr	r3, [pc, #72]	; (800d7e8 <prvCheckForValidListAndQueue+0x54>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d11d      	bne.n	800d7e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800d7a4:	4811      	ldr	r0, [pc, #68]	; (800d7ec <prvCheckForValidListAndQueue+0x58>)
 800d7a6:	f7fe f90b 	bl	800b9c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800d7aa:	4811      	ldr	r0, [pc, #68]	; (800d7f0 <prvCheckForValidListAndQueue+0x5c>)
 800d7ac:	f7fe f908 	bl	800b9c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800d7b0:	4b10      	ldr	r3, [pc, #64]	; (800d7f4 <prvCheckForValidListAndQueue+0x60>)
 800d7b2:	4a0e      	ldr	r2, [pc, #56]	; (800d7ec <prvCheckForValidListAndQueue+0x58>)
 800d7b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800d7b6:	4b10      	ldr	r3, [pc, #64]	; (800d7f8 <prvCheckForValidListAndQueue+0x64>)
 800d7b8:	4a0d      	ldr	r2, [pc, #52]	; (800d7f0 <prvCheckForValidListAndQueue+0x5c>)
 800d7ba:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800d7bc:	2200      	movs	r2, #0
 800d7be:	210c      	movs	r1, #12
 800d7c0:	200a      	movs	r0, #10
 800d7c2:	f7fe fa37 	bl	800bc34 <xQueueGenericCreate>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	4a07      	ldr	r2, [pc, #28]	; (800d7e8 <prvCheckForValidListAndQueue+0x54>)
 800d7ca:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800d7cc:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <prvCheckForValidListAndQueue+0x54>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d005      	beq.n	800d7e0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d7d4:	4b04      	ldr	r3, [pc, #16]	; (800d7e8 <prvCheckForValidListAndQueue+0x54>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4908      	ldr	r1, [pc, #32]	; (800d7fc <prvCheckForValidListAndQueue+0x68>)
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fe fbf6 	bl	800bfcc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800d7e0:	f000 f95e 	bl	800daa0 <vPortExitCritical>
    }
 800d7e4:	bf00      	nop
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	2000093c 	.word	0x2000093c
 800d7ec:	2000090c 	.word	0x2000090c
 800d7f0:	20000920 	.word	0x20000920
 800d7f4:	20000934 	.word	0x20000934
 800d7f8:	20000938 	.word	0x20000938
 800d7fc:	08014b84 	.word	0x08014b84

0800d800 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800d800:	b480      	push	{r7}
 800d802:	b085      	sub	sp, #20
 800d804:	af00      	add	r7, sp, #0
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	3b04      	subs	r3, #4
 800d810:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d818:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	3b04      	subs	r3, #4
 800d81e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	f023 0201 	bic.w	r2, r3, #1
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	3b04      	subs	r3, #4
 800d82e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800d830:	4a0c      	ldr	r2, [pc, #48]	; (800d864 <pxPortInitialiseStack+0x64>)
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	3b14      	subs	r3, #20
 800d83a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800d83c:	687a      	ldr	r2, [r7, #4]
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	3b04      	subs	r3, #4
 800d846:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f06f 0202 	mvn.w	r2, #2
 800d84e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	3b20      	subs	r3, #32
 800d854:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800d856:	68fb      	ldr	r3, [r7, #12]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3714      	adds	r7, #20
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr
 800d864:	0800d869 	.word	0x0800d869

0800d868 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800d872:	4b0e      	ldr	r3, [pc, #56]	; (800d8ac <prvTaskExitError+0x44>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87a:	d003      	beq.n	800d884 <prvTaskExitError+0x1c>
 800d87c:	21e7      	movs	r1, #231	; 0xe7
 800d87e:	480c      	ldr	r0, [pc, #48]	; (800d8b0 <prvTaskExitError+0x48>)
 800d880:	f001 f964 	bl	800eb4c <vAssertCalled>
        __asm volatile
 800d884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	607b      	str	r3, [r7, #4]
    }
 800d896:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800d898:	bf00      	nop
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d0fc      	beq.n	800d89a <prvTaskExitError+0x32>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800d8a0:	bf00      	nop
 800d8a2:	bf00      	nop
 800d8a4:	3708      	adds	r7, #8
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2000002c 	.word	0x2000002c
 800d8b0:	08014b8c 	.word	0x08014b8c
	...

0800d8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800d8c0:	4b07      	ldr	r3, [pc, #28]	; (800d8e0 <pxCurrentTCBConst2>)
 800d8c2:	6819      	ldr	r1, [r3, #0]
 800d8c4:	6808      	ldr	r0, [r1, #0]
 800d8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ca:	f380 8809 	msr	PSP, r0
 800d8ce:	f3bf 8f6f 	isb	sy
 800d8d2:	f04f 0000 	mov.w	r0, #0
 800d8d6:	f380 8811 	msr	BASEPRI, r0
 800d8da:	4770      	bx	lr
 800d8dc:	f3af 8000 	nop.w

0800d8e0 <pxCurrentTCBConst2>:
 800d8e0:	200007d8 	.word	0x200007d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800d8e4:	bf00      	nop
 800d8e6:	bf00      	nop

0800d8e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800d8e8:	4808      	ldr	r0, [pc, #32]	; (800d90c <prvPortStartFirstTask+0x24>)
 800d8ea:	6800      	ldr	r0, [r0, #0]
 800d8ec:	6800      	ldr	r0, [r0, #0]
 800d8ee:	f380 8808 	msr	MSP, r0
 800d8f2:	f04f 0000 	mov.w	r0, #0
 800d8f6:	f380 8814 	msr	CONTROL, r0
 800d8fa:	b662      	cpsie	i
 800d8fc:	b661      	cpsie	f
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	f3bf 8f6f 	isb	sy
 800d906:	df00      	svc	0
 800d908:	bf00      	nop
 800d90a:	0000      	.short	0x0000
 800d90c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800d910:	bf00      	nop
 800d912:	bf00      	nop

0800d914 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d91a:	4b42      	ldr	r3, [pc, #264]	; (800da24 <xPortStartScheduler+0x110>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a42      	ldr	r2, [pc, #264]	; (800da28 <xPortStartScheduler+0x114>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d104      	bne.n	800d92e <xPortStartScheduler+0x1a>
 800d924:	f44f 7197 	mov.w	r1, #302	; 0x12e
 800d928:	4840      	ldr	r0, [pc, #256]	; (800da2c <xPortStartScheduler+0x118>)
 800d92a:	f001 f90f 	bl	800eb4c <vAssertCalled>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d92e:	4b3d      	ldr	r3, [pc, #244]	; (800da24 <xPortStartScheduler+0x110>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a3f      	ldr	r2, [pc, #252]	; (800da30 <xPortStartScheduler+0x11c>)
 800d934:	4293      	cmp	r3, r2
 800d936:	d104      	bne.n	800d942 <xPortStartScheduler+0x2e>
 800d938:	f240 112f 	movw	r1, #303	; 0x12f
 800d93c:	483b      	ldr	r0, [pc, #236]	; (800da2c <xPortStartScheduler+0x118>)
 800d93e:	f001 f905 	bl	800eb4c <vAssertCalled>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d942:	4b3c      	ldr	r3, [pc, #240]	; (800da34 <xPortStartScheduler+0x120>)
 800d944:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	22ff      	movs	r2, #255	; 0xff
 800d952:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d95c:	79fb      	ldrb	r3, [r7, #7]
 800d95e:	b2db      	uxtb	r3, r3
 800d960:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d964:	b2da      	uxtb	r2, r3
 800d966:	4b34      	ldr	r3, [pc, #208]	; (800da38 <xPortStartScheduler+0x124>)
 800d968:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d96a:	4b34      	ldr	r3, [pc, #208]	; (800da3c <xPortStartScheduler+0x128>)
 800d96c:	2207      	movs	r2, #7
 800d96e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d970:	e009      	b.n	800d986 <xPortStartScheduler+0x72>
            {
                ulMaxPRIGROUPValue--;
 800d972:	4b32      	ldr	r3, [pc, #200]	; (800da3c <xPortStartScheduler+0x128>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	3b01      	subs	r3, #1
 800d978:	4a30      	ldr	r2, [pc, #192]	; (800da3c <xPortStartScheduler+0x128>)
 800d97a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d97c:	79fb      	ldrb	r3, [r7, #7]
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	b2db      	uxtb	r3, r3
 800d984:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d986:	79fb      	ldrb	r3, [r7, #7]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d98e:	2b80      	cmp	r3, #128	; 0x80
 800d990:	d0ef      	beq.n	800d972 <xPortStartScheduler+0x5e>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800d992:	4b2a      	ldr	r3, [pc, #168]	; (800da3c <xPortStartScheduler+0x128>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f1c3 0307 	rsb	r3, r3, #7
 800d99a:	2b04      	cmp	r3, #4
 800d99c:	d004      	beq.n	800d9a8 <xPortStartScheduler+0x94>
 800d99e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800d9a2:	4822      	ldr	r0, [pc, #136]	; (800da2c <xPortStartScheduler+0x118>)
 800d9a4:	f001 f8d2 	bl	800eb4c <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d9a8:	4b24      	ldr	r3, [pc, #144]	; (800da3c <xPortStartScheduler+0x128>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f1c3 0307 	rsb	r3, r3, #7
 800d9b0:	2b04      	cmp	r3, #4
 800d9b2:	d004      	beq.n	800d9be <xPortStartScheduler+0xaa>
 800d9b4:	f240 1161 	movw	r1, #353	; 0x161
 800d9b8:	481c      	ldr	r0, [pc, #112]	; (800da2c <xPortStartScheduler+0x118>)
 800d9ba:	f001 f8c7 	bl	800eb4c <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d9be:	4b1f      	ldr	r3, [pc, #124]	; (800da3c <xPortStartScheduler+0x128>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	021b      	lsls	r3, r3, #8
 800d9c4:	4a1d      	ldr	r2, [pc, #116]	; (800da3c <xPortStartScheduler+0x128>)
 800d9c6:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d9c8:	4b1c      	ldr	r3, [pc, #112]	; (800da3c <xPortStartScheduler+0x128>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d9d0:	4a1a      	ldr	r2, [pc, #104]	; (800da3c <xPortStartScheduler+0x128>)
 800d9d2:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800d9dc:	4b18      	ldr	r3, [pc, #96]	; (800da40 <xPortStartScheduler+0x12c>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4a17      	ldr	r2, [pc, #92]	; (800da40 <xPortStartScheduler+0x12c>)
 800d9e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d9e6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800d9e8:	4b15      	ldr	r3, [pc, #84]	; (800da40 <xPortStartScheduler+0x12c>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a14      	ldr	r2, [pc, #80]	; (800da40 <xPortStartScheduler+0x12c>)
 800d9ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d9f2:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800d9f4:	f000 f8d2 	bl	800db9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800d9f8:	4b12      	ldr	r3, [pc, #72]	; (800da44 <xPortStartScheduler+0x130>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800d9fe:	f000 f8f1 	bl	800dbe4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800da02:	4b11      	ldr	r3, [pc, #68]	; (800da48 <xPortStartScheduler+0x134>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a10      	ldr	r2, [pc, #64]	; (800da48 <xPortStartScheduler+0x134>)
 800da08:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800da0c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800da0e:	f7ff ff6b 	bl	800d8e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800da12:	f7ff f907 	bl	800cc24 <vTaskSwitchContext>
    prvTaskExitError();
 800da16:	f7ff ff27 	bl	800d868 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800da1a:	2300      	movs	r3, #0
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3710      	adds	r7, #16
 800da20:	46bd      	mov	sp, r7
 800da22:	bd80      	pop	{r7, pc}
 800da24:	e000ed00 	.word	0xe000ed00
 800da28:	410fc271 	.word	0x410fc271
 800da2c:	08014b8c 	.word	0x08014b8c
 800da30:	410fc270 	.word	0x410fc270
 800da34:	e000e400 	.word	0xe000e400
 800da38:	20000948 	.word	0x20000948
 800da3c:	2000094c 	.word	0x2000094c
 800da40:	e000ed20 	.word	0xe000ed20
 800da44:	2000002c 	.word	0x2000002c
 800da48:	e000ef34 	.word	0xe000ef34

0800da4c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
        __asm volatile
 800da52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da56:	f383 8811 	msr	BASEPRI, r3
 800da5a:	f3bf 8f6f 	isb	sy
 800da5e:	f3bf 8f4f 	dsb	sy
 800da62:	607b      	str	r3, [r7, #4]
    }
 800da64:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800da66:	4b0b      	ldr	r3, [pc, #44]	; (800da94 <vPortEnterCritical+0x48>)
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	3301      	adds	r3, #1
 800da6c:	4a09      	ldr	r2, [pc, #36]	; (800da94 <vPortEnterCritical+0x48>)
 800da6e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800da70:	4b08      	ldr	r3, [pc, #32]	; (800da94 <vPortEnterCritical+0x48>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d109      	bne.n	800da8c <vPortEnterCritical+0x40>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800da78:	4b07      	ldr	r3, [pc, #28]	; (800da98 <vPortEnterCritical+0x4c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d004      	beq.n	800da8c <vPortEnterCritical+0x40>
 800da82:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
 800da86:	4805      	ldr	r0, [pc, #20]	; (800da9c <vPortEnterCritical+0x50>)
 800da88:	f001 f860 	bl	800eb4c <vAssertCalled>
    }
}
 800da8c:	bf00      	nop
 800da8e:	3708      	adds	r7, #8
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	2000002c 	.word	0x2000002c
 800da98:	e000ed04 	.word	0xe000ed04
 800da9c:	08014b8c 	.word	0x08014b8c

0800daa0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800daa6:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <vPortExitCritical+0x40>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d104      	bne.n	800dab8 <vPortExitCritical+0x18>
 800daae:	f240 11ad 	movw	r1, #429	; 0x1ad
 800dab2:	480c      	ldr	r0, [pc, #48]	; (800dae4 <vPortExitCritical+0x44>)
 800dab4:	f001 f84a 	bl	800eb4c <vAssertCalled>
    uxCriticalNesting--;
 800dab8:	4b09      	ldr	r3, [pc, #36]	; (800dae0 <vPortExitCritical+0x40>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3b01      	subs	r3, #1
 800dabe:	4a08      	ldr	r2, [pc, #32]	; (800dae0 <vPortExitCritical+0x40>)
 800dac0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800dac2:	4b07      	ldr	r3, [pc, #28]	; (800dae0 <vPortExitCritical+0x40>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d105      	bne.n	800dad6 <vPortExitCritical+0x36>
 800daca:	2300      	movs	r3, #0
 800dacc:	607b      	str	r3, [r7, #4]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800dad4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800dad6:	bf00      	nop
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	2000002c 	.word	0x2000002c
 800dae4:	08014b8c 	.word	0x08014b8c
	...

0800daf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800daf0:	f3ef 8009 	mrs	r0, PSP
 800daf4:	f3bf 8f6f 	isb	sy
 800daf8:	4b15      	ldr	r3, [pc, #84]	; (800db50 <pxCurrentTCBConst>)
 800dafa:	681a      	ldr	r2, [r3, #0]
 800dafc:	f01e 0f10 	tst.w	lr, #16
 800db00:	bf08      	it	eq
 800db02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800db06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0a:	6010      	str	r0, [r2, #0]
 800db0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800db10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800db14:	f380 8811 	msr	BASEPRI, r0
 800db18:	f3bf 8f4f 	dsb	sy
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f7ff f880 	bl	800cc24 <vTaskSwitchContext>
 800db24:	f04f 0000 	mov.w	r0, #0
 800db28:	f380 8811 	msr	BASEPRI, r0
 800db2c:	bc09      	pop	{r0, r3}
 800db2e:	6819      	ldr	r1, [r3, #0]
 800db30:	6808      	ldr	r0, [r1, #0]
 800db32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db36:	f01e 0f10 	tst.w	lr, #16
 800db3a:	bf08      	it	eq
 800db3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800db40:	f380 8809 	msr	PSP, r0
 800db44:	f3bf 8f6f 	isb	sy
 800db48:	4770      	bx	lr
 800db4a:	bf00      	nop
 800db4c:	f3af 8000 	nop.w

0800db50 <pxCurrentTCBConst>:
 800db50:	200007d8 	.word	0x200007d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800db54:	bf00      	nop
 800db56:	bf00      	nop

0800db58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
        __asm volatile
 800db5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db62:	f383 8811 	msr	BASEPRI, r3
 800db66:	f3bf 8f6f 	isb	sy
 800db6a:	f3bf 8f4f 	dsb	sy
 800db6e:	607b      	str	r3, [r7, #4]
    }
 800db70:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800db72:	f7fe ff0f 	bl	800c994 <xTaskIncrementTick>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d003      	beq.n	800db84 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800db7c:	4b06      	ldr	r3, [pc, #24]	; (800db98 <SysTick_Handler+0x40>)
 800db7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db82:	601a      	str	r2, [r3, #0]
 800db84:	2300      	movs	r3, #0
 800db86:	603b      	str	r3, [r7, #0]
        __asm volatile
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f383 8811 	msr	BASEPRI, r3
    }
 800db8e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800db90:	bf00      	nop
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	e000ed04 	.word	0xe000ed04

0800db9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800db9c:	b480      	push	{r7}
 800db9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dba0:	4b0b      	ldr	r3, [pc, #44]	; (800dbd0 <vPortSetupTimerInterrupt+0x34>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dba6:	4b0b      	ldr	r3, [pc, #44]	; (800dbd4 <vPortSetupTimerInterrupt+0x38>)
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dbac:	4b0a      	ldr	r3, [pc, #40]	; (800dbd8 <vPortSetupTimerInterrupt+0x3c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a0a      	ldr	r2, [pc, #40]	; (800dbdc <vPortSetupTimerInterrupt+0x40>)
 800dbb2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbb6:	099b      	lsrs	r3, r3, #6
 800dbb8:	4a09      	ldr	r2, [pc, #36]	; (800dbe0 <vPortSetupTimerInterrupt+0x44>)
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dbbe:	4b04      	ldr	r3, [pc, #16]	; (800dbd0 <vPortSetupTimerInterrupt+0x34>)
 800dbc0:	2207      	movs	r2, #7
 800dbc2:	601a      	str	r2, [r3, #0]
}
 800dbc4:	bf00      	nop
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr
 800dbce:	bf00      	nop
 800dbd0:	e000e010 	.word	0xe000e010
 800dbd4:	e000e018 	.word	0xe000e018
 800dbd8:	20000008 	.word	0x20000008
 800dbdc:	10624dd3 	.word	0x10624dd3
 800dbe0:	e000e014 	.word	0xe000e014

0800dbe4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800dbe4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dbf4 <vPortEnableVFP+0x10>
 800dbe8:	6801      	ldr	r1, [r0, #0]
 800dbea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dbee:	6001      	str	r1, [r0, #0]
 800dbf0:	4770      	bx	lr
 800dbf2:	0000      	.short	0x0000
 800dbf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800dbf8:	bf00      	nop
 800dbfa:	bf00      	nop

0800dbfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800dc02:	f3ef 8305 	mrs	r3, IPSR
 800dc06:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b0f      	cmp	r3, #15
 800dc0c:	d90e      	bls.n	800dc2c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dc0e:	4a10      	ldr	r2, [pc, #64]	; (800dc50 <vPortValidateInterruptPriority+0x54>)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	4413      	add	r3, r2
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dc18:	4b0e      	ldr	r3, [pc, #56]	; (800dc54 <vPortValidateInterruptPriority+0x58>)
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	78fa      	ldrb	r2, [r7, #3]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d204      	bcs.n	800dc2c <vPortValidateInterruptPriority+0x30>
 800dc22:	f240 21fe 	movw	r1, #766	; 0x2fe
 800dc26:	480c      	ldr	r0, [pc, #48]	; (800dc58 <vPortValidateInterruptPriority+0x5c>)
 800dc28:	f000 ff90 	bl	800eb4c <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800dc2c:	4b0b      	ldr	r3, [pc, #44]	; (800dc5c <vPortValidateInterruptPriority+0x60>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800dc34:	4b0a      	ldr	r3, [pc, #40]	; (800dc60 <vPortValidateInterruptPriority+0x64>)
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d904      	bls.n	800dc46 <vPortValidateInterruptPriority+0x4a>
 800dc3c:	f240 310e 	movw	r1, #782	; 0x30e
 800dc40:	4805      	ldr	r0, [pc, #20]	; (800dc58 <vPortValidateInterruptPriority+0x5c>)
 800dc42:	f000 ff83 	bl	800eb4c <vAssertCalled>
    }
 800dc46:	bf00      	nop
 800dc48:	3708      	adds	r7, #8
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}
 800dc4e:	bf00      	nop
 800dc50:	e000e3f0 	.word	0xe000e3f0
 800dc54:	20000948 	.word	0x20000948
 800dc58:	08014b8c 	.word	0x08014b8c
 800dc5c:	e000ed0c 	.word	0xe000ed0c
 800dc60:	2000094c 	.word	0x2000094c

0800dc64 <vConfigureTimerForRunTimeStats>:

static TIM_HandleTypeDef *vRuntimeCounter = NULL;

volatile uint32_t ulHighFrequencyTimerTicks = 0;

void vConfigureTimerForRunTimeStats( void ) {
 800dc64:	b580      	push	{r7, lr}
 800dc66:	af00      	add	r7, sp, #0
#ifdef configUsedTimer
    vRuntimeCounter = &configUsedTimer; // defined in FreeRTOSConfig.h
 800dc68:	4b0e      	ldr	r3, [pc, #56]	; (800dca4 <vConfigureTimerForRunTimeStats+0x40>)
 800dc6a:	4a0f      	ldr	r2, [pc, #60]	; (800dca8 <vConfigureTimerForRunTimeStats+0x44>)
 800dc6c:	601a      	str	r2, [r3, #0]
    if(vRuntimeCounter->Instance == TIM2 || vRuntimeCounter->Instance == TIM5)
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <vConfigureTimerForRunTimeStats+0x40>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc78:	d005      	beq.n	800dc86 <vConfigureTimerForRunTimeStats+0x22>
 800dc7a:	4b0a      	ldr	r3, [pc, #40]	; (800dca4 <vConfigureTimerForRunTimeStats+0x40>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4a0a      	ldr	r2, [pc, #40]	; (800dcac <vConfigureTimerForRunTimeStats+0x48>)
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d105      	bne.n	800dc92 <vConfigureTimerForRunTimeStats+0x2e>
    {
       HAL_TIM_Base_Start(vRuntimeCounter);
 800dc86:	4b07      	ldr	r3, [pc, #28]	; (800dca4 <vConfigureTimerForRunTimeStats+0x40>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7f7 fbb0 	bl	80053f0 <HAL_TIM_Base_Start>
 800dc90:	e005      	b.n	800dc9e <vConfigureTimerForRunTimeStats+0x3a>
    }
    else
    {
       HAL_TIM_Base_Start_IT(vRuntimeCounter);
 800dc92:	4b04      	ldr	r3, [pc, #16]	; (800dca4 <vConfigureTimerForRunTimeStats+0x40>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7f7 fc12 	bl	80054c0 <HAL_TIM_Base_Start_IT>
    }
#else
#error No Timer specified for runtime stats.
#endif
}
 800dc9c:	bf00      	nop
 800dc9e:	bf00      	nop
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20000950 	.word	0x20000950
 800dca8:	20000208 	.word	0x20000208
 800dcac:	40000c00 	.word	0x40000c00

0800dcb0 <vGetRuntimeCounter>:

uint32_t vGetRuntimeCounter()
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	af00      	add	r7, sp, #0
    if(vRuntimeCounter->Instance == TIM2 || vRuntimeCounter->Instance == TIM5)
 800dcb4:	4b0b      	ldr	r3, [pc, #44]	; (800dce4 <vGetRuntimeCounter+0x34>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcbe:	d005      	beq.n	800dccc <vGetRuntimeCounter+0x1c>
 800dcc0:	4b08      	ldr	r3, [pc, #32]	; (800dce4 <vGetRuntimeCounter+0x34>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	4a08      	ldr	r2, [pc, #32]	; (800dce8 <vGetRuntimeCounter+0x38>)
 800dcc8:	4293      	cmp	r3, r2
 800dcca:	d104      	bne.n	800dcd6 <vGetRuntimeCounter+0x26>
        return __HAL_TIM_GET_COUNTER(vRuntimeCounter);
 800dccc:	4b05      	ldr	r3, [pc, #20]	; (800dce4 <vGetRuntimeCounter+0x34>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcd4:	e001      	b.n	800dcda <vGetRuntimeCounter+0x2a>
    else
        return ulHighFrequencyTimerTicks;
 800dcd6:	4b05      	ldr	r3, [pc, #20]	; (800dcec <vGetRuntimeCounter+0x3c>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr
 800dce4:	20000950 	.word	0x20000950
 800dce8:	40000c00 	.word	0x40000c00
 800dcec:	20000954 	.word	0x20000954

0800dcf0 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 800dcf8:	f7fe fd24 	bl	800c744 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f004 fe85 	bl	8012a0c <malloc>
 800dd02:	4603      	mov	r3, r0
 800dd04:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800dd06:	f7fe fd2b 	bl	800c760 <xTaskResumeAll>
                vApplicationMallocFailedHook();
            }
        }
    #endif

    return pvReturn;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3710      	adds	r7, #16
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
    if( pv )
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d006      	beq.n	800dd30 <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800dd22:	f7fe fd0f 	bl	800c744 <vTaskSuspendAll>
        {
            free( pv );
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f004 fe78 	bl	8012a1c <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 800dd2c:	f7fe fd18 	bl	800c760 <xTaskResumeAll>
    }
}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <__malloc_lock>:
#include <reent.h>
#include "FreeRTOS.h"
#include <task.h>

void __malloc_lock(struct _reent* REENT)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b082      	sub	sp, #8
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
 800dd40:	f7fe fd00 	bl	800c744 <vTaskSuspendAll>
}
 800dd44:	bf00      	nop
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}

0800dd4c <__malloc_unlock>:


void __malloc_unlock(struct _reent* REENT)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
    ( void ) xTaskResumeAll();
 800dd54:	f7fe fd04 	bl	800c760 <xTaskResumeAll>
}
 800dd58:	bf00      	nop
 800dd5a:	3708      	adds	r7, #8
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <_ZNK4RTOS4Task13getTaskHandleEv>:

    /**
     * get task handle
     * @return RTOS id of task or 0 if task is not created in RTOS
     */
    osThreadId getTaskHandle() const { return m_handle;}
 800dd60:	b480      	push	{r7}
 800dd62:	b083      	sub	sp, #12
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>:
    */
   static uint32_t getMaxSystemMailNumber()  {return m_maxSystemMailNumber;}
private:
   struct MboxData_t
   {
       MboxData_t(osMailQId _id = 0, size_t _size = 0):id(_id), size(_size) {}
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	605a      	str	r2, [r3, #4]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	4618      	mov	r0, r3
 800dd94:	3714      	adds	r7, #20
 800dd96:	46bd      	mov	sp, r7
 800dd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9c:	4770      	bx	lr

0800dd9e <_ZN4RTOS10PostOfficeD1Ev>:
   };

   PostOffice();
   PostOffice(const PostOffice&) = delete;
   PostOffice operator = (const PostOffice&) = delete;
   ~PostOffice() {};
 800dd9e:	b580      	push	{r7, lr}
 800dda0:	b082      	sub	sp, #8
 800dda2:	af00      	add	r7, sp, #0
 800dda4:	6078      	str	r0, [r7, #4]
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	331c      	adds	r3, #28
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 f92a 	bl	800e004 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbED1Ev>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f000 f914 	bl	800dfe0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEED1Ev>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3708      	adds	r7, #8
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <_ZNK4RTOS4Task11getTaskNameEv>:

    /**
     * get task name
     * @return Name of Task
     */
    const char * getTaskName() const { return m_Name;}
 800ddc2:	b480      	push	{r7}
 800ddc4:	b083      	sub	sp, #12
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	6078      	str	r0, [r7, #4]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	689b      	ldr	r3, [r3, #8]
 800ddce:	4618      	mov	r0, r3
 800ddd0:	370c      	adds	r7, #12
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
	...

0800dddc <_ZN4RTOS10PostOfficeC1Ev>:
{


uint32_t PostOffice::m_maxSystemMailNumber = 10;   ///< default for number of message in system

PostOffice::PostOffice():
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
#ifdef DEBUG_RTOS_POSTOFFICE
   m_timeout(2000),
#else
   m_timeout(osWaitForever),
#endif
   m_mailPool(0)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2119      	movs	r1, #25
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 f91d 	bl	800e028 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	331c      	adds	r3, #28
 800ddf2:	4a14      	ldr	r2, [pc, #80]	; (800de44 <_ZN4RTOS10PostOfficeC1Ev+0x68>)
 800ddf4:	6812      	ldr	r2, [r2, #0]
 800ddf6:	4611      	mov	r1, r2
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 f97b 	bl	800e0f4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800de04:	635a      	str	r2, [r3, #52]	; 0x34
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	639a      	str	r2, [r3, #56]	; 0x38

{
   if (m_maxSystemMailNumber)
 800de0c:	4b0d      	ldr	r3, [pc, #52]	; (800de44 <_ZN4RTOS10PostOfficeC1Ev+0x68>)
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d012      	beq.n	800de3a <_ZN4RTOS10PostOfficeC1Ev+0x5e>
   {
      osPoolDef_t messagePool = {m_maxSystemMailNumber,
 800de14:	f107 030c 	add.w	r3, r7, #12
 800de18:	2200      	movs	r2, #0
 800de1a:	601a      	str	r2, [r3, #0]
 800de1c:	605a      	str	r2, [r3, #4]
 800de1e:	609a      	str	r2, [r3, #8]
 800de20:	2310      	movs	r3, #16
 800de22:	613b      	str	r3, [r7, #16]
                                 sizeof(mailStruct_t),
                                 0};
 800de24:	4b07      	ldr	r3, [pc, #28]	; (800de44 <_ZN4RTOS10PostOfficeC1Ev+0x68>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	60fb      	str	r3, [r7, #12]
     m_mailPool = osPoolCreate(&messagePool);
 800de2a:	f107 030c 	add.w	r3, r7, #12
 800de2e:	4618      	mov	r0, r3
 800de30:	f001 f8e0 	bl	800eff4 <osPoolCreate>
 800de34:	4602      	mov	r2, r0
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	639a      	str	r2, [r3, #56]	; 0x38
   }
}
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	20000030 	.word	0x20000030

0800de48 <__tcf_0>:


PostOffice& PostOffice::getInstance()
{
   static PostOffice m_instance;
 800de48:	b580      	push	{r7, lr}
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	4801      	ldr	r0, [pc, #4]	; (800de54 <__tcf_0+0xc>)
 800de4e:	f7ff ffa6 	bl	800dd9e <_ZN4RTOS10PostOfficeD1Ev>
 800de52:	bd80      	pop	{r7, pc}
 800de54:	20000958 	.word	0x20000958

0800de58 <_ZN4RTOS10PostOffice11getInstanceEv>:
{
 800de58:	b580      	push	{r7, lr}
 800de5a:	af00      	add	r7, sp, #0
   static PostOffice m_instance;
 800de5c:	4b12      	ldr	r3, [pc, #72]	; (800dea8 <_ZN4RTOS10PostOffice11getInstanceEv+0x50>)
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	f3bf 8f5b 	dmb	ish
 800de64:	b2db      	uxtb	r3, r3
 800de66:	f003 0301 	and.w	r3, r3, #1
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	bf0c      	ite	eq
 800de6e:	2301      	moveq	r3, #1
 800de70:	2300      	movne	r3, #0
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d013      	beq.n	800dea0 <_ZN4RTOS10PostOffice11getInstanceEv+0x48>
 800de78:	480b      	ldr	r0, [pc, #44]	; (800dea8 <_ZN4RTOS10PostOffice11getInstanceEv+0x50>)
 800de7a:	f004 fcc7 	bl	801280c <__cxa_guard_acquire>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b00      	cmp	r3, #0
 800de82:	bf14      	ite	ne
 800de84:	2301      	movne	r3, #1
 800de86:	2300      	moveq	r3, #0
 800de88:	b2db      	uxtb	r3, r3
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d008      	beq.n	800dea0 <_ZN4RTOS10PostOffice11getInstanceEv+0x48>
 800de8e:	4807      	ldr	r0, [pc, #28]	; (800deac <_ZN4RTOS10PostOffice11getInstanceEv+0x54>)
 800de90:	f7ff ffa4 	bl	800dddc <_ZN4RTOS10PostOfficeC1Ev>
 800de94:	4806      	ldr	r0, [pc, #24]	; (800deb0 <_ZN4RTOS10PostOffice11getInstanceEv+0x58>)
 800de96:	f004 fd04 	bl	80128a2 <atexit>
 800de9a:	4803      	ldr	r0, [pc, #12]	; (800dea8 <_ZN4RTOS10PostOffice11getInstanceEv+0x50>)
 800de9c:	f004 fcc2 	bl	8012824 <__cxa_guard_release>
   return m_instance;
 800dea0:	4b02      	ldr	r3, [pc, #8]	; (800deac <_ZN4RTOS10PostOffice11getInstanceEv+0x54>)
}
 800dea2:	4618      	mov	r0, r3
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	20000994 	.word	0x20000994
 800deac:	20000958 	.word	0x20000958
 800deb0:	0800de49 	.word	0x0800de49

0800deb4 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj>:

// param:
//
bool PostOffice::registerMailBox(const Task& obj, osMailQId mailBoxId, size_t size)
{
 800deb4:	b590      	push	{r4, r7, lr}
 800deb6:	b08d      	sub	sp, #52	; 0x34
 800deb8:	af02      	add	r7, sp, #8
 800deba:	60f8      	str	r0, [r7, #12]
 800debc:	60b9      	str	r1, [r7, #8]
 800debe:	607a      	str	r2, [r7, #4]
 800dec0:	603b      	str	r3, [r7, #0]
    bool xcode = true;
 800dec2:	2301      	movs	r3, #1
 800dec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osThreadId taskHandle = obj.getTaskHandle();
 800dec8:	68b8      	ldr	r0, [r7, #8]
 800deca:	f7ff ff49 	bl	800dd60 <_ZNK4RTOS4Task13getTaskHandleEv>
 800dece:	4603      	mov	r3, r0
 800ded0:	61fb      	str	r3, [r7, #28]

    if (0 != mailBoxId)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d016      	beq.n	800df06 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x52>
    {
       MboxData_t  data = {mailBoxId, size};
 800ded8:	f107 0314 	add.w	r3, r7, #20
 800dedc:	683a      	ldr	r2, [r7, #0]
 800dede:	6879      	ldr	r1, [r7, #4]
 800dee0:	4618      	mov	r0, r3
 800dee2:	f7ff ff49 	bl	800dd78 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>
       m_mailBoxMap[taskHandle] = data;
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f107 021c 	add.w	r2, r7, #28
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f000 f95a 	bl	800e1a8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_>
 800def4:	4603      	mov	r3, r0
 800def6:	461a      	mov	r2, r3
 800def8:	f107 0314 	add.w	r3, r7, #20
 800defc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df00:	e882 0003 	stmia.w	r2, {r0, r1}
 800df04:	e01b      	b.n	800df3e <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x8a>
    }
    else // deregister the message box...
    {
        auto delObj = m_mailBoxMap.erase(taskHandle);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f107 021c 	add.w	r2, r7, #28
 800df0c:	4611      	mov	r1, r2
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 f983 	bl	800e21a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_>
 800df14:	6238      	str	r0, [r7, #32]
        if (0 == delObj)
 800df16:	6a3b      	ldr	r3, [r7, #32]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d110      	bne.n	800df3e <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x8a>
        {
#ifdef DEBUG_RTOS_POSTOFFICE
        	fprintf(stderr, "*** %s Line %d: couldn't deregister Mailbox for task %s\n",
 800df1c:	4b0b      	ldr	r3, [pc, #44]	; (800df4c <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x98>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	68dc      	ldr	r4, [r3, #12]
 800df22:	68b8      	ldr	r0, [r7, #8]
 800df24:	f7ff ff4d 	bl	800ddc2 <_ZNK4RTOS4Task11getTaskNameEv>
 800df28:	4603      	mov	r3, r0
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	234d      	movs	r3, #77	; 0x4d
 800df2e:	4a08      	ldr	r2, [pc, #32]	; (800df50 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0x9c>)
 800df30:	4908      	ldr	r1, [pc, #32]	; (800df54 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj+0xa0>)
 800df32:	4620      	mov	r0, r4
 800df34:	f004 fcc2 	bl	80128bc <fiprintf>
            __FILE__, __LINE__, obj.getTaskName());
#endif
            xcode = false;
 800df38:	2300      	movs	r3, #0
 800df3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }
    return xcode;
 800df3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df42:	4618      	mov	r0, r3
 800df44:	372c      	adds	r7, #44	; 0x2c
 800df46:	46bd      	mov	sp, r7
 800df48:	bd90      	pop	{r4, r7, pc}
 800df4a:	bf00      	nop
 800df4c:	20000040 	.word	0x20000040
 800df50:	08014bbc 	.word	0x08014bbc
 800df54:	08014be8 	.word	0x08014be8

0800df58 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb>:
    return xcode;
}


bool PostOffice::registerMessageBox(const Task& obj, osMessageQId messageBoxId)
{
 800df58:	b590      	push	{r4, r7, lr}
 800df5a:	b08b      	sub	sp, #44	; 0x2c
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
    bool xcode = true;
 800df64:	2301      	movs	r3, #1
 800df66:	77fb      	strb	r3, [r7, #31]
    osThreadId taskHandle = obj.getTaskHandle();
 800df68:	68b8      	ldr	r0, [r7, #8]
 800df6a:	f7ff fef9 	bl	800dd60 <_ZNK4RTOS4Task13getTaskHandleEv>
 800df6e:	4603      	mov	r3, r0
 800df70:	617b      	str	r3, [r7, #20]
    if (0 != messageBoxId)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d00b      	beq.n	800df90 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x38>
    {
       m_messageBoxMap[taskHandle] = messageBoxId;
 800df78:	687c      	ldr	r4, [r7, #4]
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	331c      	adds	r3, #28
 800df7e:	f107 0214 	add.w	r2, r7, #20
 800df82:	4611      	mov	r1, r2
 800df84:	4618      	mov	r0, r3
 800df86:	f000 f9a9 	bl	800e2dc <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_>
 800df8a:	4603      	mov	r3, r0
 800df8c:	601c      	str	r4, [r3, #0]
 800df8e:	e01b      	b.n	800dfc8 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x70>
    }
    else // deregister the message box...
    {
        auto delObj = m_messageBoxMap.erase(taskHandle);
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	331c      	adds	r3, #28
 800df94:	f107 0214 	add.w	r2, r7, #20
 800df98:	4611      	mov	r1, r2
 800df9a:	4618      	mov	r0, r3
 800df9c:	f000 f9d1 	bl	800e342 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_>
 800dfa0:	61b8      	str	r0, [r7, #24]
        if (0 == delObj)
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d10f      	bne.n	800dfc8 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x70>
        {
#ifdef DEBUG_RTOS_POSTOFFICE
        	fprintf(stderr, "*** %s Line %d: couldn't deregister Messagebox for task %s\n",
 800dfa8:	4b0a      	ldr	r3, [pc, #40]	; (800dfd4 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x7c>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68dc      	ldr	r4, [r3, #12]
 800dfae:	68b8      	ldr	r0, [r7, #8]
 800dfb0:	f7ff ff07 	bl	800ddc2 <_ZNK4RTOS4Task11getTaskNameEv>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	9300      	str	r3, [sp, #0]
 800dfb8:	23e1      	movs	r3, #225	; 0xe1
 800dfba:	4a07      	ldr	r2, [pc, #28]	; (800dfd8 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x80>)
 800dfbc:	4907      	ldr	r1, [pc, #28]	; (800dfdc <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb+0x84>)
 800dfbe:	4620      	mov	r0, r4
 800dfc0:	f004 fc7c 	bl	80128bc <fiprintf>
            __FILE__, __LINE__, obj.getTaskName());
#endif
            xcode = false;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	77fb      	strb	r3, [r7, #31]
        }
    }
    return xcode;
 800dfc8:	7ffb      	ldrb	r3, [r7, #31]
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3724      	adds	r7, #36	; 0x24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd90      	pop	{r4, r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	20000040 	.word	0x20000040
 800dfd8:	08014bbc 	.word	0x08014bbc
 800dfdc:	08014d2c 	.word	0x08014d2c

0800dfe0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEED1Ev>:
        m_size = 0;
    }
}

template <typename T, typename U>
Embmap<T, U>::~Embmap()
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
{
   delete [] m_map;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	689b      	ldr	r3, [r3, #8]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d004      	beq.n	800dffa <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEED1Ev+0x1a>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	4618      	mov	r0, r3
 800dff6:	f004 fc07 	bl	8012808 <_ZdaPv>
}
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	4618      	mov	r0, r3
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbED1Ev>:
Embmap<T, U>::~Embmap()
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
   delete [] m_map;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	689b      	ldr	r3, [r3, #8]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d004      	beq.n	800e01e <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbED1Ev+0x1a>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	4618      	mov	r0, r3
 800e01a:	f004 fbf5 	bl	8012808 <_ZdaPv>
}
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej>:
Embmap<T, U>::Embmap(size_t size) :
 800e028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
   m_map(nullptr), m_begin(nullptr), m_end(nullptr)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	683a      	ldr	r2, [r7, #0]
 800e036:	601a      	str	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2200      	movs	r2, #0
 800e03c:	605a      	str	r2, [r3, #4]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2200      	movs	r2, #0
 800e042:	609a      	str	r2, [r3, #8]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	60da      	str	r2, [r3, #12]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2200      	movs	r2, #0
 800e04e:	611a      	str	r2, [r3, #16]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3314      	adds	r3, #20
 800e054:	2200      	movs	r2, #0
 800e056:	2100      	movs	r1, #0
 800e058:	4618      	mov	r0, r3
 800e05a:	f7ff fe8d 	bl	800dd78 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>
    m_map   = new(std::nothrow) EmbPair<T, U>[size];
 800e05e:	683c      	ldr	r4, [r7, #0]
 800e060:	4b1e      	ldr	r3, [pc, #120]	; (800e0dc <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xb4>)
 800e062:	429c      	cmp	r4, r3
 800e064:	d804      	bhi.n	800e070 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x48>
 800e066:	4623      	mov	r3, r4
 800e068:	005b      	lsls	r3, r3, #1
 800e06a:	4423      	add	r3, r4
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	e001      	b.n	800e074 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x4c>
 800e070:	f04f 33ff 	mov.w	r3, #4294967295
 800e074:	491a      	ldr	r1, [pc, #104]	; (800e0e0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xb8>)
 800e076:	4618      	mov	r0, r3
 800e078:	f004 fbe2 	bl	8012840 <_ZnajRKSt9nothrow_t>
 800e07c:	4603      	mov	r3, r0
 800e07e:	461e      	mov	r6, r3
 800e080:	2e00      	cmp	r6, #0
 800e082:	d00a      	beq.n	800e09a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x72>
 800e084:	4635      	mov	r5, r6
 800e086:	1e63      	subs	r3, r4, #1
 800e088:	461c      	mov	r4, r3
 800e08a:	2c00      	cmp	r4, #0
 800e08c:	db05      	blt.n	800e09a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x72>
 800e08e:	4628      	mov	r0, r5
 800e090:	f000 f9b7 	bl	800e402 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1Ev>
 800e094:	350c      	adds	r5, #12
 800e096:	3c01      	subs	r4, #1
 800e098:	e7f7      	b.n	800e08a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0x62>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	609e      	str	r6, [r3, #8]
    m_end   = m_map;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	689a      	ldr	r2, [r3, #8]
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	611a      	str	r2, [r3, #16]
    m_begin = m_map;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	689a      	ldr	r2, [r3, #8]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	60da      	str	r2, [r3, #12]
    if (nullptr == m_map)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	689b      	ldr	r3, [r3, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d10c      	bne.n	800e0d0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xa8>
        DEBOUT("coudn't get memory");
 800e0b6:	4b0b      	ldr	r3, [pc, #44]	; (800e0e4 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xbc>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	68d8      	ldr	r0, [r3, #12]
 800e0bc:	4b0a      	ldr	r3, [pc, #40]	; (800e0e8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xc0>)
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	23ae      	movs	r3, #174	; 0xae
 800e0c2:	4a0a      	ldr	r2, [pc, #40]	; (800e0ec <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xc4>)
 800e0c4:	490a      	ldr	r1, [pc, #40]	; (800e0f0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEC1Ej+0xc8>)
 800e0c6:	f004 fbf9 	bl	80128bc <fiprintf>
        m_size = 0;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	601a      	str	r2, [r3, #0]
}
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	0aaaaaaa 	.word	0x0aaaaaaa
 800e0e0:	08016278 	.word	0x08016278
 800e0e4:	20000040 	.word	0x20000040
 800e0e8:	08014e18 	.word	0x08014e18
 800e0ec:	08014dbc 	.word	0x08014dbc
 800e0f0:	08014e04 	.word	0x08014e04

0800e0f4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej>:
Embmap<T, U>::Embmap(size_t size) :
 800e0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af02      	add	r7, sp, #8
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
   m_map(nullptr), m_begin(nullptr), m_end(nullptr)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	683a      	ldr	r2, [r7, #0]
 800e102:	601a      	str	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	605a      	str	r2, [r3, #4]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	609a      	str	r2, [r3, #8]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	60da      	str	r2, [r3, #12]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	611a      	str	r2, [r3, #16]
    m_map   = new(std::nothrow) EmbPair<T, U>[size];
 800e11c:	683c      	ldr	r4, [r7, #0]
 800e11e:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800e122:	d201      	bcs.n	800e128 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x34>
 800e124:	00e3      	lsls	r3, r4, #3
 800e126:	e001      	b.n	800e12c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x38>
 800e128:	f04f 33ff 	mov.w	r3, #4294967295
 800e12c:	4919      	ldr	r1, [pc, #100]	; (800e194 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xa0>)
 800e12e:	4618      	mov	r0, r3
 800e130:	f004 fb86 	bl	8012840 <_ZnajRKSt9nothrow_t>
 800e134:	4603      	mov	r3, r0
 800e136:	461e      	mov	r6, r3
 800e138:	2e00      	cmp	r6, #0
 800e13a:	d00a      	beq.n	800e152 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x5e>
 800e13c:	4635      	mov	r5, r6
 800e13e:	1e63      	subs	r3, r4, #1
 800e140:	461c      	mov	r4, r3
 800e142:	2c00      	cmp	r4, #0
 800e144:	db05      	blt.n	800e152 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x5e>
 800e146:	4628      	mov	r0, r5
 800e148:	f000 f96b 	bl	800e422 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1Ev>
 800e14c:	3508      	adds	r5, #8
 800e14e:	3c01      	subs	r4, #1
 800e150:	e7f7      	b.n	800e142 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x4e>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	609e      	str	r6, [r3, #8]
    m_end   = m_map;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	689a      	ldr	r2, [r3, #8]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	611a      	str	r2, [r3, #16]
    m_begin = m_map;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	689a      	ldr	r2, [r3, #8]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	60da      	str	r2, [r3, #12]
    if (nullptr == m_map)
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	689b      	ldr	r3, [r3, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d10c      	bne.n	800e188 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0x94>
        DEBOUT("coudn't get memory");
 800e16e:	4b0a      	ldr	r3, [pc, #40]	; (800e198 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xa4>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	68d8      	ldr	r0, [r3, #12]
 800e174:	4b09      	ldr	r3, [pc, #36]	; (800e19c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xa8>)
 800e176:	9300      	str	r3, [sp, #0]
 800e178:	23ae      	movs	r3, #174	; 0xae
 800e17a:	4a09      	ldr	r2, [pc, #36]	; (800e1a0 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xac>)
 800e17c:	4909      	ldr	r1, [pc, #36]	; (800e1a4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEC1Ej+0xb0>)
 800e17e:	f004 fb9d 	bl	80128bc <fiprintf>
        m_size = 0;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2200      	movs	r2, #0
 800e186:	601a      	str	r2, [r3, #0]
}
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	4618      	mov	r0, r3
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e192:	bf00      	nop
 800e194:	08016278 	.word	0x08016278
 800e198:	20000040 	.word	0x20000040
 800e19c:	08014e18 	.word	0x08014e18
 800e1a0:	08014dbc 	.word	0x08014dbc
 800e1a4:	08014e04 	.word	0x08014e04

0800e1a8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_>:

template <typename T, typename U>
U& Embmap<T, U>::operator[](const T& key)
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b08a      	sub	sp, #40	; 0x28
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
{
    EmbPair<T, U> *it = find(key);
 800e1b2:	6839      	ldr	r1, [r7, #0]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f93f 	bl	800e438 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800e1ba:	6278      	str	r0, [r7, #36]	; 0x24
    if (it == m_end)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	691b      	ldr	r3, [r3, #16]
 800e1c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d123      	bne.n	800e20e <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_+0x66>
    {
      U a {m_error};
 800e1c6:	687a      	ldr	r2, [r7, #4]
 800e1c8:	f107 0308 	add.w	r3, r7, #8
 800e1cc:	3214      	adds	r2, #20
 800e1ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e1d2:	e883 0003 	stmia.w	r3, {r0, r1}
      if (false == (insert(EmbPair<T, U> (key, a))).second)
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	6819      	ldr	r1, [r3, #0]
 800e1da:	f107 0018 	add.w	r0, r7, #24
 800e1de:	f107 0308 	add.w	r3, r7, #8
 800e1e2:	cb0c      	ldmia	r3, {r2, r3}
 800e1e4:	f000 f986 	bl	800e4f4 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1ES1_S3_>
 800e1e8:	f107 0310 	add.w	r3, r7, #16
 800e1ec:	f107 0218 	add.w	r2, r7, #24
 800e1f0:	6879      	ldr	r1, [r7, #4]
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f000 f934 	bl	800e460 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE>
 800e1f8:	7d3b      	ldrb	r3, [r7, #20]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	bf0c      	ite	eq
 800e1fe:	2301      	moveq	r3, #1
 800e200:	2300      	movne	r3, #0
 800e202:	b2db      	uxtb	r3, r3
 800e204:	2b00      	cmp	r3, #0
 800e206:	d002      	beq.n	800e20e <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_+0x66>
      {
         return m_error;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	3314      	adds	r3, #20
 800e20c:	e001      	b.n	800e212 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEEixERKS1_+0x6a>
      }
    }
    return it->second;
 800e20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e210:	3304      	adds	r3, #4
}
 800e212:	4618      	mov	r0, r3
 800e214:	3728      	adds	r7, #40	; 0x28
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}

0800e21a <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_>:

template <typename T, typename U>
size_t Embmap<T, U>::erase(const T&  key)
 800e21a:	b590      	push	{r4, r7, lr}
 800e21c:	b085      	sub	sp, #20
 800e21e:	af00      	add	r7, sp, #0
 800e220:	6078      	str	r0, [r7, #4]
 800e222:	6039      	str	r1, [r7, #0]
{
    size_t ret = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	60fb      	str	r3, [r7, #12]
    if(!m_elements) return ret;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d101      	bne.n	800e234 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x1a>
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	e026      	b.n	800e282 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x68>
    EmbPair<T, U> *it = find(key);
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 f8fe 	bl	800e438 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800e23c:	60b8      	str	r0, [r7, #8]
    if (it != m_end)
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	429a      	cmp	r2, r3
 800e246:	d01b      	beq.n	800e280 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x66>
    {
      // we found something....
      if (it != m_end - 1)
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	691b      	ldr	r3, [r3, #16]
 800e24c:	3b0c      	subs	r3, #12
 800e24e:	68ba      	ldr	r2, [r7, #8]
 800e250:	429a      	cmp	r2, r3
 800e252:	d008      	beq.n	800e266 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE5eraseERKS1_+0x4c>
      {
          // if element is not last element in list, overwrite it with last
          *it = *(m_end -1);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	68ba      	ldr	r2, [r7, #8]
 800e25a:	4614      	mov	r4, r2
 800e25c:	3b0c      	subs	r3, #12
 800e25e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      }
        --m_end;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	691b      	ldr	r3, [r3, #16]
 800e26a:	f1a3 020c 	sub.w	r2, r3, #12
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	611a      	str	r2, [r3, #16]
      --m_elements;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	1e5a      	subs	r2, r3, #1
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	605a      	str	r2, [r3, #4]
      ret = 1;
 800e27c:	2301      	movs	r3, #1
 800e27e:	60fb      	str	r3, [r7, #12]
    }
    return ret;
 800e280:	68fb      	ldr	r3, [r7, #12]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3714      	adds	r7, #20
 800e286:	46bd      	mov	sp, r7
 800e288:	bd90      	pop	{r4, r7, pc}

0800e28a <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>:


template <typename T, typename U>
const EmbPair<T, U>* Embmap<T, U>::find(const T& key) const
 800e28a:	b480      	push	{r7}
 800e28c:	b085      	sub	sp, #20
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
 800e292:	6039      	str	r1, [r7, #0]
{
   if(!m_elements) return m_end;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d102      	bne.n	800e2a2 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x18>
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	e016      	b.n	800e2d0 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x46>
   EmbPair<T, U> *it = nullptr;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60fb      	str	r3, [r7, #12]
   for (it = m_begin; it != m_end; ++it)
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	68db      	ldr	r3, [r3, #12]
 800e2aa:	60fb      	str	r3, [r7, #12]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d00b      	beq.n	800e2ce <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x44>
   {
      if(it->first == key)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d101      	bne.n	800e2c6 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x3c>
      {
          return it;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	e004      	b.n	800e2d0 <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x46>
   for (it = m_begin; it != m_end; ++it)
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	330c      	adds	r3, #12
 800e2ca:	60fb      	str	r3, [r7, #12]
 800e2cc:	e7ee      	b.n	800e2ac <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_+0x22>
      }
   }
   return it;
 800e2ce:	68fb      	ldr	r3, [r7, #12]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3714      	adds	r7, #20
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_>:
U& Embmap<T, U>::operator[](const T& key)
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b088      	sub	sp, #32
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
    EmbPair<T, U> *it = find(key);
 800e2e6:	6839      	ldr	r1, [r7, #0]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 f91c 	bl	800e526 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800e2ee:	61f8      	str	r0, [r7, #28]
    if (it == m_end)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	691b      	ldr	r3, [r3, #16]
 800e2f4:	69fa      	ldr	r2, [r7, #28]
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d11d      	bne.n	800e336 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_+0x5a>
      U a {m_error};
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	695b      	ldr	r3, [r3, #20]
 800e2fe:	61bb      	str	r3, [r7, #24]
      if (false == (insert(EmbPair<T, U> (key, a))).second)
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	6819      	ldr	r1, [r3, #0]
 800e304:	f107 0310 	add.w	r3, r7, #16
 800e308:	69ba      	ldr	r2, [r7, #24]
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 f96a 	bl	800e5e4 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1ES1_S3_>
 800e310:	f107 0308 	add.w	r3, r7, #8
 800e314:	f107 0210 	add.w	r2, r7, #16
 800e318:	6879      	ldr	r1, [r7, #4]
 800e31a:	4618      	mov	r0, r3
 800e31c:	f000 f916 	bl	800e54c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE>
 800e320:	7b3b      	ldrb	r3, [r7, #12]
 800e322:	2b00      	cmp	r3, #0
 800e324:	bf0c      	ite	eq
 800e326:	2301      	moveq	r3, #1
 800e328:	2300      	movne	r3, #0
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d002      	beq.n	800e336 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_+0x5a>
         return m_error;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3314      	adds	r3, #20
 800e334:	e001      	b.n	800e33a <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbEixERKS1_+0x5e>
    return it->second;
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	3304      	adds	r3, #4
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3720      	adds	r7, #32
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_>:
size_t Embmap<T, U>::erase(const T&  key)
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
 800e34a:	6039      	str	r1, [r7, #0]
    size_t ret = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	60fb      	str	r3, [r7, #12]
    if(!m_elements) return ret;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d101      	bne.n	800e35c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x1a>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	e025      	b.n	800e3a8 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x66>
    EmbPair<T, U> *it = find(key);
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 f8e1 	bl	800e526 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800e364:	60b8      	str	r0, [r7, #8]
    if (it != m_end)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d01a      	beq.n	800e3a6 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x64>
      if (it != m_end - 1)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	691b      	ldr	r3, [r3, #16]
 800e374:	3b08      	subs	r3, #8
 800e376:	68ba      	ldr	r2, [r7, #8]
 800e378:	429a      	cmp	r2, r3
 800e37a:	d007      	beq.n	800e38c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE5eraseERKS1_+0x4a>
          *it = *(m_end -1);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	3b08      	subs	r3, #8
 800e384:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e388:	e882 0003 	stmia.w	r2, {r0, r1}
        --m_end;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	f1a3 0208 	sub.w	r2, r3, #8
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	611a      	str	r2, [r3, #16]
      --m_elements;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	1e5a      	subs	r2, r3, #1
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	605a      	str	r2, [r3, #4]
      ret = 1;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	60fb      	str	r3, [r7, #12]
    return ret;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3710      	adds	r7, #16
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>:
const EmbPair<T, U>* Embmap<T, U>::find(const T& key) const
 800e3b0:	b480      	push	{r7}
 800e3b2:	b085      	sub	sp, #20
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	6039      	str	r1, [r7, #0]
   if(!m_elements) return m_end;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d102      	bne.n	800e3c8 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x18>
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	691b      	ldr	r3, [r3, #16]
 800e3c6:	e016      	b.n	800e3f6 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x46>
   EmbPair<T, U> *it = nullptr;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	60fb      	str	r3, [r7, #12]
   for (it = m_begin; it != m_end; ++it)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	60fb      	str	r3, [r7, #12]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	691b      	ldr	r3, [r3, #16]
 800e3d6:	68fa      	ldr	r2, [r7, #12]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d00b      	beq.n	800e3f4 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x44>
      if(it->first == key)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	429a      	cmp	r2, r3
 800e3e6:	d101      	bne.n	800e3ec <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x3c>
          return it;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	e004      	b.n	800e3f6 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x46>
   for (it = m_begin; it != m_end; ++it)
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	60fb      	str	r3, [r7, #12]
 800e3f2:	e7ee      	b.n	800e3d2 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_+0x22>
   return it;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
}
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	3714      	adds	r7, #20
 800e3fa:	46bd      	mov	sp, r7
 800e3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e400:	4770      	bx	lr

0800e402 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1Ev>:
  EmbPair() {};
 800e402:	b580      	push	{r7, lr}
 800e404:	b082      	sub	sp, #8
 800e406:	af00      	add	r7, sp, #0
 800e408:	6078      	str	r0, [r7, #4]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3304      	adds	r3, #4
 800e40e:	2200      	movs	r2, #0
 800e410:	2100      	movs	r1, #0
 800e412:	4618      	mov	r0, r3
 800e414:	f7ff fcb0 	bl	800dd78 <_ZN4RTOS10PostOffice10MboxData_tC1EP11os_mailQ_cbj>
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	4618      	mov	r0, r3
 800e41c:	3708      	adds	r7, #8
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}

0800e422 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1Ev>:
 800e422:	b480      	push	{r7}
 800e424:	b083      	sub	sp, #12
 800e426:	af00      	add	r7, sp, #0
 800e428:	6078      	str	r0, [r7, #4]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	4618      	mov	r0, r3
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>:

template <typename T, typename U>
EmbPair<T, U>* Embmap<T, U>::find(const T& key)
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
{
    const Embmap<T, U> *ptr = this;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	617b      	str	r3, [r7, #20]
    const EmbPair<T, U>* cret = ptr->find(key);
 800e446:	6839      	ldr	r1, [r7, #0]
 800e448:	6978      	ldr	r0, [r7, #20]
 800e44a:	f7ff ff1e 	bl	800e28a <_ZNK4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800e44e:	6138      	str	r0, [r7, #16]
    EmbPair<T, U>* ret = const_cast<EmbPair<T, U>*>(cret);
 800e450:	693b      	ldr	r3, [r7, #16]
 800e452:	60fb      	str	r3, [r7, #12]

    return ret;
 800e454:	68fb      	ldr	r3, [r7, #12]
}
 800e456:	4618      	mov	r0, r3
 800e458:	3718      	adds	r7, #24
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
	...

0800e460 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE>:


template <typename T, typename U>
EmbPair<EmbPair<T, U>*, bool> Embmap<T, U>::insert(const EmbPair<T, U>& val)
 800e460:	b580      	push	{r7, lr}
 800e462:	b088      	sub	sp, #32
 800e464:	af02      	add	r7, sp, #8
 800e466:	60f8      	str	r0, [r7, #12]
 800e468:	60b9      	str	r1, [r7, #8]
 800e46a:	607a      	str	r2, [r7, #4]
{
    EmbPair<EmbPair<T, U>*, bool> ret(nullptr,false);
 800e46c:	2200      	movs	r2, #0
 800e46e:	2100      	movs	r1, #0
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f000 f8ca 	bl	800e60a <_ZN4RTOS7EmbPairIPNS0_IPvNS_10PostOffice10MboxData_tEEEbEC1ES5_b>

    if (m_size == m_elements)
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	685b      	ldr	r3, [r3, #4]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d10a      	bne.n	800e498 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x38>
    {
        DEBOUT("insert(): No free map space");
 800e482:	4b18      	ldr	r3, [pc, #96]	; (800e4e4 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x84>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68d8      	ldr	r0, [r3, #12]
 800e488:	4b17      	ldr	r3, [pc, #92]	; (800e4e8 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x88>)
 800e48a:	9300      	str	r3, [sp, #0]
 800e48c:	23ff      	movs	r3, #255	; 0xff
 800e48e:	4a17      	ldr	r2, [pc, #92]	; (800e4ec <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x8c>)
 800e490:	4917      	ldr	r1, [pc, #92]	; (800e4f0 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x90>)
 800e492:	f004 fa13 	bl	80128bc <fiprintf>
        return ret;
 800e496:	e021      	b.n	800e4dc <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x7c>
    }

    EmbPair<T, U>* it = find(val.first);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4619      	mov	r1, r3
 800e49c:	68b8      	ldr	r0, [r7, #8]
 800e49e:	f7ff ffcb 	bl	800e438 <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE4findERKS1_>
 800e4a2:	6178      	str	r0, [r7, #20]
    *it = val;
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	687a      	ldr	r2, [r7, #4]
 800e4a8:	ca07      	ldmia	r2, {r0, r1, r2}
 800e4aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(it == m_end)
 800e4ae:	68bb      	ldr	r3, [r7, #8]
 800e4b0:	691b      	ldr	r3, [r3, #16]
 800e4b2:	697a      	ldr	r2, [r7, #20]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d10a      	bne.n	800e4ce <_ZN4RTOS6EmbmapIPvNS_10PostOffice10MboxData_tEE6insertERKNS_7EmbPairIS1_S3_EE+0x6e>
    {
        ++m_end;
 800e4b8:	68bb      	ldr	r3, [r7, #8]
 800e4ba:	691b      	ldr	r3, [r3, #16]
 800e4bc:	f103 020c 	add.w	r2, r3, #12
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	611a      	str	r2, [r3, #16]
        ++m_elements;
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	1c5a      	adds	r2, r3, #1
 800e4ca:	68bb      	ldr	r3, [r7, #8]
 800e4cc:	605a      	str	r2, [r3, #4]
    }
    ret.first  = it;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	697a      	ldr	r2, [r7, #20]
 800e4d2:	601a      	str	r2, [r3, #0]
    ret.second = true;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	711a      	strb	r2, [r3, #4]

    return ret;
 800e4da:	bf00      	nop
}
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	3718      	adds	r7, #24
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}
 800e4e4:	20000040 	.word	0x20000040
 800e4e8:	08014e2c 	.word	0x08014e2c
 800e4ec:	08014dbc 	.word	0x08014dbc
 800e4f0:	08014e04 	.word	0x08014e04

0800e4f4 <_ZN4RTOS7EmbPairIPvNS_10PostOffice10MboxData_tEEC1ES1_S3_>:
  EmbPair(T first, U second):first(first), second(second){};
 800e4f4:	b480      	push	{r7}
 800e4f6:	b085      	sub	sp, #20
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	4639      	mov	r1, r7
 800e500:	e881 000c 	stmia.w	r1, {r2, r3}
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	601a      	str	r2, [r3, #0]
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	3304      	adds	r3, #4
 800e50e:	463a      	mov	r2, r7
 800e510:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e514:	e883 0003 	stmia.w	r3, {r0, r1}
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	4618      	mov	r0, r3
 800e51c:	3714      	adds	r7, #20
 800e51e:	46bd      	mov	sp, r7
 800e520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e524:	4770      	bx	lr

0800e526 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>:
EmbPair<T, U>* Embmap<T, U>::find(const T& key)
 800e526:	b580      	push	{r7, lr}
 800e528:	b086      	sub	sp, #24
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	6039      	str	r1, [r7, #0]
    const Embmap<T, U> *ptr = this;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	617b      	str	r3, [r7, #20]
    const EmbPair<T, U>* cret = ptr->find(key);
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6978      	ldr	r0, [r7, #20]
 800e538:	f7ff ff3a 	bl	800e3b0 <_ZNK4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800e53c:	6138      	str	r0, [r7, #16]
    EmbPair<T, U>* ret = const_cast<EmbPair<T, U>*>(cret);
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	60fb      	str	r3, [r7, #12]
    return ret;
 800e542:	68fb      	ldr	r3, [r7, #12]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3718      	adds	r7, #24
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE>:
EmbPair<EmbPair<T, U>*, bool> Embmap<T, U>::insert(const EmbPair<T, U>& val)
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b088      	sub	sp, #32
 800e550:	af02      	add	r7, sp, #8
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
    EmbPair<EmbPair<T, U>*, bool> ret(nullptr,false);
 800e558:	2200      	movs	r2, #0
 800e55a:	2100      	movs	r1, #0
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f000 f868 	bl	800e632 <_ZN4RTOS7EmbPairIPNS0_IPvP14os_messageQ_cbEEbEC1ES5_b>
    if (m_size == m_elements)
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	68bb      	ldr	r3, [r7, #8]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d10a      	bne.n	800e584 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x38>
        DEBOUT("insert(): No free map space");
 800e56e:	4b19      	ldr	r3, [pc, #100]	; (800e5d4 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x88>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68d8      	ldr	r0, [r3, #12]
 800e574:	4b18      	ldr	r3, [pc, #96]	; (800e5d8 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x8c>)
 800e576:	9300      	str	r3, [sp, #0]
 800e578:	23ff      	movs	r3, #255	; 0xff
 800e57a:	4a18      	ldr	r2, [pc, #96]	; (800e5dc <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x90>)
 800e57c:	4918      	ldr	r1, [pc, #96]	; (800e5e0 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x94>)
 800e57e:	f004 f99d 	bl	80128bc <fiprintf>
        return ret;
 800e582:	e022      	b.n	800e5ca <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x7e>
    EmbPair<T, U>* it = find(val.first);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4619      	mov	r1, r3
 800e588:	68b8      	ldr	r0, [r7, #8]
 800e58a:	f7ff ffcc 	bl	800e526 <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE4findERKS1_>
 800e58e:	6178      	str	r0, [r7, #20]
    *it = val;
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	687a      	ldr	r2, [r7, #4]
 800e594:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e598:	e883 0003 	stmia.w	r3, {r0, r1}
    if(it == m_end)
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	691b      	ldr	r3, [r3, #16]
 800e5a0:	697a      	ldr	r2, [r7, #20]
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	d10a      	bne.n	800e5bc <_ZN4RTOS6EmbmapIPvP14os_messageQ_cbE6insertERKNS_7EmbPairIS1_S3_EE+0x70>
        ++m_end;
 800e5a6:	68bb      	ldr	r3, [r7, #8]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	f103 0208 	add.w	r2, r3, #8
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	611a      	str	r2, [r3, #16]
        ++m_elements;
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	605a      	str	r2, [r3, #4]
    ret.first  = it;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	601a      	str	r2, [r3, #0]
    ret.second = true;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	711a      	strb	r2, [r3, #4]
    return ret;
 800e5c8:	bf00      	nop
}
 800e5ca:	68f8      	ldr	r0, [r7, #12]
 800e5cc:	3718      	adds	r7, #24
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20000040 	.word	0x20000040
 800e5d8:	08014e2c 	.word	0x08014e2c
 800e5dc:	08014dbc 	.word	0x08014dbc
 800e5e0:	08014e04 	.word	0x08014e04

0800e5e4 <_ZN4RTOS7EmbPairIPvP14os_messageQ_cbEC1ES1_S3_>:
  EmbPair(T first, U second):first(first), second(second){};
 800e5e4:	b480      	push	{r7}
 800e5e6:	b085      	sub	sp, #20
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	60f8      	str	r0, [r7, #12]
 800e5ec:	60b9      	str	r1, [r7, #8]
 800e5ee:	607a      	str	r2, [r7, #4]
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	68ba      	ldr	r2, [r7, #8]
 800e5f4:	601a      	str	r2, [r3, #0]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	687a      	ldr	r2, [r7, #4]
 800e5fa:	605a      	str	r2, [r3, #4]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	4618      	mov	r0, r3
 800e600:	3714      	adds	r7, #20
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <_ZN4RTOS7EmbPairIPNS0_IPvNS_10PostOffice10MboxData_tEEEbEC1ES5_b>:
 800e60a:	b480      	push	{r7}
 800e60c:	b085      	sub	sp, #20
 800e60e:	af00      	add	r7, sp, #0
 800e610:	60f8      	str	r0, [r7, #12]
 800e612:	60b9      	str	r1, [r7, #8]
 800e614:	4613      	mov	r3, r2
 800e616:	71fb      	strb	r3, [r7, #7]
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	68ba      	ldr	r2, [r7, #8]
 800e61c:	601a      	str	r2, [r3, #0]
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	79fa      	ldrb	r2, [r7, #7]
 800e622:	711a      	strb	r2, [r3, #4]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4618      	mov	r0, r3
 800e628:	3714      	adds	r7, #20
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr

0800e632 <_ZN4RTOS7EmbPairIPNS0_IPvP14os_messageQ_cbEEbEC1ES5_b>:
 800e632:	b480      	push	{r7}
 800e634:	b085      	sub	sp, #20
 800e636:	af00      	add	r7, sp, #0
 800e638:	60f8      	str	r0, [r7, #12]
 800e63a:	60b9      	str	r1, [r7, #8]
 800e63c:	4613      	mov	r3, r2
 800e63e:	71fb      	strb	r3, [r7, #7]
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	68ba      	ldr	r2, [r7, #8]
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	79fa      	ldrb	r2, [r7, #7]
 800e64a:	711a      	strb	r2, [r3, #4]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	4618      	mov	r0, r3
 800e650:	3714      	adds	r7, #20
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <_ZNK4RTOS4Task13isSchedulableEv>:
    /**
     * returns the status of the task, tasks are only schedulable when the task's
     * objekt is fully initialized
     * @return true if task might get scheduled by RTOS, else false
     */
    bool isSchedulable() const { return m_isFullInitialized;}
 800e65a:	b480      	push	{r7}
 800e65c:	b083      	sub	sp, #12
 800e65e:	af00      	add	r7, sp, #0
 800e660:	6078      	str	r0, [r7, #4]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	791b      	ldrb	r3, [r3, #4]
 800e666:	4618      	mov	r0, r3
 800e668:	370c      	adds	r7, #12
 800e66a:	46bd      	mov	sp, r7
 800e66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e670:	4770      	bx	lr
	...

0800e674 <taskFnc>:
#endif

// this is the task for RTOS.
// This function calls the task handler.
static void taskFnc(void *para)
{
 800e674:	b590      	push	{r4, r7, lr}
 800e676:	b087      	sub	sp, #28
 800e678:	af02      	add	r7, sp, #8
 800e67a:	6078      	str	r0, [r7, #4]
    // para is "this" pointer of task's object!
    RTOS::Task *obj = reinterpret_cast<RTOS::Task *>(para);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	60fb      	str	r3, [r7, #12]
#ifdef DEBUG_RTOS_TASK_BASE
    if (!obj->isSchedulable() || !obj->getTaskHandle())
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f7ff ffea 	bl	800e65a <_ZNK4RTOS4Task13isSchedulableEv>
 800e686:	4603      	mov	r3, r0
 800e688:	f083 0301 	eor.w	r3, r3, #1
 800e68c:	b2db      	uxtb	r3, r3
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d105      	bne.n	800e69e <taskFnc+0x2a>
 800e692:	68f8      	ldr	r0, [r7, #12]
 800e694:	f7ff fb64 	bl	800dd60 <_ZNK4RTOS4Task13getTaskHandleEv>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <taskFnc+0x2e>
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e000      	b.n	800e6a4 <taskFnc+0x30>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d015      	beq.n	800e6d4 <taskFnc+0x60>
    {
        fprintf(stderr,
 800e6a8:	4b0f      	ldr	r3, [pc, #60]	; (800e6e8 <taskFnc+0x74>)
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	68dc      	ldr	r4, [r3, #12]
                "*** %s Line %d: task %s is scheduled before fully initialized\n",
                __FILE__, __LINE__, (obj->getTaskName() ? obj->getTaskName() : "UNKWON"));
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f7ff fb87 	bl	800ddc2 <_ZNK4RTOS4Task11getTaskNameEv>
 800e6b4:	4603      	mov	r3, r0
        fprintf(stderr,
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d004      	beq.n	800e6c4 <taskFnc+0x50>
                __FILE__, __LINE__, (obj->getTaskName() ? obj->getTaskName() : "UNKWON"));
 800e6ba:	68f8      	ldr	r0, [r7, #12]
 800e6bc:	f7ff fb81 	bl	800ddc2 <_ZNK4RTOS4Task11getTaskNameEv>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	e000      	b.n	800e6c6 <taskFnc+0x52>
        fprintf(stderr,
 800e6c4:	4b09      	ldr	r3, [pc, #36]	; (800e6ec <taskFnc+0x78>)
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	2323      	movs	r3, #35	; 0x23
 800e6ca:	4a09      	ldr	r2, [pc, #36]	; (800e6f0 <taskFnc+0x7c>)
 800e6cc:	4909      	ldr	r1, [pc, #36]	; (800e6f4 <taskFnc+0x80>)
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f004 f8f4 	bl	80128bc <fiprintf>
    }

#endif
    obj->m_task();
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	68f8      	ldr	r0, [r7, #12]
 800e6dc:	4798      	blx	r3
}
 800e6de:	bf00      	nop
 800e6e0:	3714      	adds	r7, #20
 800e6e2:	46bd      	mov	sp, r7
 800e6e4:	bd90      	pop	{r4, r7, pc}
 800e6e6:	bf00      	nop
 800e6e8:	20000040 	.word	0x20000040
 800e6ec:	08014e48 	.word	0x08014e48
 800e6f0:	08014e50 	.word	0x08014e50
 800e6f4:	08014e78 	.word	0x08014e78

0800e6f8 <_ZN4RTOS4TaskC1EPKct10osPriorityb>:
const int32_t TIMEREVENT      = 0x01 << 2;
const int32_t SIGNALEVENT     = 0x01 << 3;


// Const and Dstr
Task::Task(const char * const pcName,
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b084      	sub	sp, #16
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60f8      	str	r0, [r7, #12]
 800e700:	60b9      	str	r1, [r7, #8]
 800e702:	4611      	mov	r1, r2
 800e704:	461a      	mov	r2, r3
 800e706:	460b      	mov	r3, r1
 800e708:	80fb      	strh	r3, [r7, #6]
 800e70a:	4613      	mov	r3, r2
 800e70c:	80bb      	strh	r3, [r7, #4]
             m_Name((char *)pcName),
             m_StackDepth(usStackDepth),
             m_Priority(uxPriority),
             m_handle(0),
             m_immidiateStart(immidiateStart),
             m_mutex(0)
 800e70e:	4a1c      	ldr	r2, [pc, #112]	; (800e780 <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x88>)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2200      	movs	r2, #0
 800e718:	711a      	strb	r2, [r3, #4]
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	609a      	str	r2, [r3, #8]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	88fa      	ldrh	r2, [r7, #6]
 800e724:	819a      	strh	r2, [r3, #12]
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	88ba      	ldrh	r2, [r7, #4]
 800e72a:	81da      	strh	r2, [r3, #14]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	2200      	movs	r2, #0
 800e730:	611a      	str	r2, [r3, #16]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	7e3a      	ldrb	r2, [r7, #24]
 800e736:	751a      	strb	r2, [r3, #20]
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2200      	movs	r2, #0
 800e73c:	619a      	str	r2, [r3, #24]
{
    if(true == m_immidiateStart)
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7d1b      	ldrb	r3, [r3, #20]
 800e742:	2b01      	cmp	r3, #1
 800e744:	d117      	bne.n	800e776 <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x7e>
    {
        if (osKernelRunning())
 800e746:	f000 fa65 	bl	800ec14 <osKernelRunning>
 800e74a:	4603      	mov	r3, r0
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	bf14      	ite	ne
 800e750:	2301      	movne	r3, #1
 800e752:	2300      	moveq	r3, #0
 800e754:	b2db      	uxtb	r3, r3
 800e756:	2b00      	cmp	r3, #0
 800e758:	d004      	beq.n	800e764 <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x6c>
        {
            // set prio to lowest prio, thus task will not be scheduled before
            // initialization of this object is complete.
            // If kernel is not running, there is no problem creating tasks.
            m_Priority = osPriorityIdle;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 800e760:	81da      	strh	r2, [r3, #14]
 800e762:	e002      	b.n	800e76a <_ZN4RTOS4TaskC1EPKct10osPriorityb+0x72>
        }
        else
        {
            // kernel is not running, the constructor is not interrupted by the scheduler
            m_isFullInitialized = true;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2201      	movs	r2, #1
 800e768:	711a      	strb	r2, [r3, #4]
        }
        createTask();
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 f81c 	bl	800e7a8 <_ZN4RTOS4Task10createTaskEv>
        m_Priority = uxPriority;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	88ba      	ldrh	r2, [r7, #4]
 800e774:	81da      	strh	r2, [r3, #14]

    }
}
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	4618      	mov	r0, r3
 800e77a:	3710      	adds	r7, #16
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	08016258 	.word	0x08016258

0800e784 <_ZN4RTOS4TaskD1Ev>:


Task::~Task()
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	4a05      	ldr	r2, [pc, #20]	; (800e7a4 <_ZN4RTOS4TaskD1Ev+0x20>)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	601a      	str	r2, [r3, #0]
{
    // remove task from RTOS scheduler list
    deleteTask();
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f000 f856 	bl	800e844 <_ZN4RTOS4Task10deleteTaskEv>
}
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
 800e7a2:	bf00      	nop
 800e7a4:	08016258 	.word	0x08016258

0800e7a8 <_ZN4RTOS4Task10createTaskEv>:
}



osThreadId Task::createTask()
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
    osThreadDef_t thread_def;
    if (0 == m_handle)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d12f      	bne.n	800e818 <_ZN4RTOS4Task10createTaskEv+0x70>
    {
          // parameter of Task _MUST_ be this-pointer.
          // Else task Code can't see context of object! this-pointer of task object is given parameter!
          // (Note: Normally, this-pointer is implicitly the first parameter of a method call in C++.)
          //        FreeRTOS uses C parameter passing, there is nothing like a this-pointer foreseen.)
        thread_def.instances = 1;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	617b      	str	r3, [r7, #20]
        thread_def.name      = m_Name;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	689b      	ldr	r3, [r3, #8]
 800e7c0:	61fb      	str	r3, [r7, #28]
        thread_def.pthread   = reinterpret_cast<os_pthread>(taskFnc);
 800e7c2:	4b1c      	ldr	r3, [pc, #112]	; (800e834 <_ZN4RTOS4Task10createTaskEv+0x8c>)
 800e7c4:	60fb      	str	r3, [r7, #12]
        thread_def.stacksize = m_StackDepth;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	899b      	ldrh	r3, [r3, #12]
 800e7ca:	61bb      	str	r3, [r7, #24]
        // if kernel is running, immediate scheduling must be prevented because this object
        // might needs m_handle. Set priority to idle and change it after task is created.
        thread_def.tpriority = (osKernelRunning() ? osPriorityIdle : m_Priority);
 800e7cc:	f000 fa22 	bl	800ec14 <osKernelRunning>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d103      	bne.n	800e7de <_ZN4RTOS4Task10createTaskEv+0x36>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e7dc:	e001      	b.n	800e7e2 <_ZN4RTOS4Task10createTaskEv+0x3a>
 800e7de:	f06f 0302 	mvn.w	r3, #2
 800e7e2:	823b      	strh	r3, [r7, #16]

        m_handle = osThreadCreate(&thread_def, this);
 800e7e4:	f107 030c 	add.w	r3, r7, #12
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f000 fa38 	bl	800ec60 <osThreadCreate>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	611a      	str	r2, [r3, #16]
        if (m_Priority != thread_def.tpriority)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800e7fc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e800:	429a      	cmp	r2, r3
 800e802:	d011      	beq.n	800e828 <_ZN4RTOS4Task10createTaskEv+0x80>
        {
          osThreadSetPriority(m_handle, m_Priority);
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	691a      	ldr	r2, [r3, #16]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800e80e:	4619      	mov	r1, r3
 800e810:	4610      	mov	r0, r2
 800e812:	f000 fb37 	bl	800ee84 <osThreadSetPriority>
 800e816:	e007      	b.n	800e828 <_ZN4RTOS4Task10createTaskEv+0x80>
        }
    }
#ifdef DEBUG_RTOS_TASK_BASE
    else
    {
        fprintf(stderr,
 800e818:	4b07      	ldr	r3, [pc, #28]	; (800e838 <_ZN4RTOS4Task10createTaskEv+0x90>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	68d8      	ldr	r0, [r3, #12]
 800e81e:	2390      	movs	r3, #144	; 0x90
 800e820:	4a06      	ldr	r2, [pc, #24]	; (800e83c <_ZN4RTOS4Task10createTaskEv+0x94>)
 800e822:	4907      	ldr	r1, [pc, #28]	; (800e840 <_ZN4RTOS4Task10createTaskEv+0x98>)
 800e824:	f004 f84a 	bl	80128bc <fiprintf>
                "*** %s Line %d: try to (re)create already running task\n",
                __FILE__, __LINE__);
    }
#endif
    return m_handle;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	691b      	ldr	r3, [r3, #16]
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3720      	adds	r7, #32
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	0800e675 	.word	0x0800e675
 800e838:	20000040 	.word	0x20000040
 800e83c:	08014e50 	.word	0x08014e50
 800e840:	08014eb8 	.word	0x08014eb8

0800e844 <_ZN4RTOS4Task10deleteTaskEv>:

osThreadId Task::deleteTask()
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
    // deregister message and mail Box in Post office (if there are any)
    PostOffice::getInstance().registerMessageBox(*this, (osMessageQId)0);
 800e84c:	f7ff fb04 	bl	800de58 <_ZN4RTOS10PostOffice11getInstanceEv>
 800e850:	4603      	mov	r3, r0
 800e852:	2200      	movs	r2, #0
 800e854:	6879      	ldr	r1, [r7, #4]
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fb7e 	bl	800df58 <_ZN4RTOS10PostOffice18registerMessageBoxERKNS_4TaskEP14os_messageQ_cb>
    PostOffice::getInstance().registerMailBox(*this, (osMailQId)0, 0);
 800e85c:	f7ff fafc 	bl	800de58 <_ZN4RTOS10PostOffice11getInstanceEv>
 800e860:	2300      	movs	r3, #0
 800e862:	2200      	movs	r2, #0
 800e864:	6879      	ldr	r1, [r7, #4]
 800e866:	f7ff fb25 	bl	800deb4 <_ZN4RTOS10PostOffice15registerMailBoxERKNS_4TaskEP11os_mailQ_cbj>

    osThreadId handle = m_handle;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	691b      	ldr	r3, [r3, #16]
 800e86e:	60fb      	str	r3, [r7, #12]
    // if the active tasks tries to delete itself, we will not return!
    // set m_handle to 0 to reenable a restart of task.
    m_handle = 0;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	611a      	str	r2, [r3, #16]

    osStatus xcode = osThreadTerminate( handle );
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f000 fac4 	bl	800ee04 <osThreadTerminate>
 800e87c:	60b8      	str	r0, [r7, #8]

    // this code is only reached if another task deletes us.
    // if error occurred, caller is notified via handle.
    if (osOK != xcode)
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d002      	beq.n	800e88a <_ZN4RTOS4Task10deleteTaskEv+0x46>
    {
      m_handle = handle;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	611a      	str	r2, [r3, #16]
    }
    return m_handle;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	691b      	ldr	r3, [r3, #16]
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
	...

0800e898 <enterCritical>:


// ====[ intern helper functions ]=====
inline
static uint32_t enterCritical()
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
  if (isInterrupt())  return portSET_INTERRUPT_MASK_FROM_ISR();
 800e89e:	4b0d      	ldr	r3, [pc, #52]	; (800e8d4 <enterCritical+0x3c>)
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00d      	beq.n	800e8c6 <enterCritical+0x2e>
        __asm volatile
 800e8aa:	f3ef 8211 	mrs	r2, BASEPRI
 800e8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	607a      	str	r2, [r7, #4]
 800e8c0:	603b      	str	r3, [r7, #0]
        return ulOriginalBASEPRI;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	e002      	b.n	800e8cc <enterCritical+0x34>
  else                vPortEnterCritical();
 800e8c6:	f7ff f8c1 	bl	800da4c <vPortEnterCritical>
  return 0;
 800e8ca:	2300      	movs	r3, #0
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	e000ed00 	.word	0xe000ed00

0800e8d8 <exitCritical>:

inline
static void exitCritical(uint32_t isrMask)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
  if (isInterrupt())  portCLEAR_INTERRUPT_MASK_FROM_ISR(isrMask);
 800e8e0:	4b09      	ldr	r3, [pc, #36]	; (800e908 <exitCritical+0x30>)
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d005      	beq.n	800e8f8 <exitCritical+0x20>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	60fb      	str	r3, [r7, #12]
        __asm volatile
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f383 8811 	msr	BASEPRI, r3
    }
 800e8f6:	e002      	b.n	800e8fe <exitCritical+0x26>
  else                vPortExitCritical();
 800e8f8:	f7ff f8d2 	bl	800daa0 <vPortExitCritical>
}
 800e8fc:	bf00      	nop
 800e8fe:	bf00      	nop
 800e900:	3710      	adds	r7, #16
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}
 800e906:	bf00      	nop
 800e908:	e000ed00 	.word	0xe000ed00

0800e90c <initTaskList>:

// ====[ intern debug functions ]=====
#ifdef DEBUG_CMSIS_API
static void initTaskList()
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af02      	add	r7, sp, #8
  unsigned int i = 0;
 800e912:	2300      	movs	r3, #0
 800e914:	607b      	str	r3, [r7, #4]
  uint32_t     isrMask;
  if (FALSE == isInit)
 800e916:	4b1d      	ldr	r3, [pc, #116]	; (800e98c <initTaskList+0x80>)
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d132      	bne.n	800e984 <initTaskList+0x78>
  {
     isrMask = enterCritical();    // enter critical section,
 800e91e:	f7ff ffbb 	bl	800e898 <enterCritical>
 800e922:	6038      	str	r0, [r7, #0]
     for (i = 1; i < sizeof(taskList)/sizeof(TaskInfoList_t); ++i)
 800e924:	2301      	movs	r3, #1
 800e926:	607b      	str	r3, [r7, #4]
 800e928:	e00c      	b.n	800e944 <initTaskList+0x38>
     {
        taskList[i-1].next = &(taskList[i]);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3b01      	subs	r3, #1
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	00d2      	lsls	r2, r2, #3
 800e932:	4917      	ldr	r1, [pc, #92]	; (800e990 <initTaskList+0x84>)
 800e934:	440a      	add	r2, r1
 800e936:	4916      	ldr	r1, [pc, #88]	; (800e990 <initTaskList+0x84>)
 800e938:	00db      	lsls	r3, r3, #3
 800e93a:	440b      	add	r3, r1
 800e93c:	605a      	str	r2, [r3, #4]
     for (i = 1; i < sizeof(taskList)/sizeof(TaskInfoList_t); ++i)
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3301      	adds	r3, #1
 800e942:	607b      	str	r3, [r7, #4]
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2b1d      	cmp	r3, #29
 800e948:	d9ef      	bls.n	800e92a <initTaskList+0x1e>
     }
     taskList[i-1].next = 0;   // i-1 points to last list element
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	4a10      	ldr	r2, [pc, #64]	; (800e990 <initTaskList+0x84>)
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	4413      	add	r3, r2
 800e954:	2200      	movs	r2, #0
 800e956:	605a      	str	r2, [r3, #4]
     freeList = taskList;      // only free elements in list
 800e958:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <initTaskList+0x88>)
 800e95a:	4a0d      	ldr	r2, [pc, #52]	; (800e990 <initTaskList+0x84>)
 800e95c:	601a      	str	r2, [r3, #0]
     usedList = 0;
 800e95e:	4b0e      	ldr	r3, [pc, #56]	; (800e998 <initTaskList+0x8c>)
 800e960:	2200      	movs	r2, #0
 800e962:	601a      	str	r2, [r3, #0]
     isInit = TRUE;
 800e964:	4b09      	ldr	r3, [pc, #36]	; (800e98c <initTaskList+0x80>)
 800e966:	2201      	movs	r2, #1
 800e968:	701a      	strb	r2, [r3, #0]
     exitCritical(isrMask);    // leave critical section.
 800e96a:	6838      	ldr	r0, [r7, #0]
 800e96c:	f7ff ffb4 	bl	800e8d8 <exitCritical>
     // Do some configuration checks
     DEBOUT(osKernelSystemId);
 800e970:	4b0a      	ldr	r3, [pc, #40]	; (800e99c <initTaskList+0x90>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	68d8      	ldr	r0, [r3, #12]
 800e976:	4b0a      	ldr	r3, [pc, #40]	; (800e9a0 <initTaskList+0x94>)
 800e978:	9300      	str	r3, [sp, #0]
 800e97a:	237c      	movs	r3, #124	; 0x7c
 800e97c:	4a09      	ldr	r2, [pc, #36]	; (800e9a4 <initTaskList+0x98>)
 800e97e:	490a      	ldr	r1, [pc, #40]	; (800e9a8 <initTaskList+0x9c>)
 800e980:	f003 ff9c 	bl	80128bc <fiprintf>
     if (configMAX_PRIORITIES <= (osPriorityRealtime-osPriorityIdle))
     {
         DEBOUT("FreeRTOS should be configured to support more priorities.");
     }
  }
}
 800e984:	bf00      	nop
 800e986:	3708      	adds	r7, #8
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}
 800e98c:	20000998 	.word	0x20000998
 800e990:	2000099c 	.word	0x2000099c
 800e994:	20000034 	.word	0x20000034
 800e998:	20000a8c 	.word	0x20000a8c
 800e99c:	20000040 	.word	0x20000040
 800e9a0:	08014f74 	.word	0x08014f74
 800e9a4:	08014f38 	.word	0x08014f38
 800e9a8:	08014f60 	.word	0x08014f60

0800e9ac <addToTaskList>:

static osStatus addToTaskList(TaskHandle_t taskId)
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af02      	add	r7, sp, #8
 800e9b2:	6078      	str	r0, [r7, #4]
    osStatus xcode = osOK;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	617b      	str	r3, [r7, #20]
    if (FALSE == isInit)
 800e9b8:	4b2b      	ldr	r3, [pc, #172]	; (800ea68 <addToTaskList+0xbc>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d101      	bne.n	800e9c4 <addToTaskList+0x18>
    {
        initTaskList();
 800e9c0:	f7ff ffa4 	bl	800e90c <initTaskList>
    }

   // first: check if id is already in list
    uint32_t isrMask = enterCritical();
 800e9c4:	f7ff ff68 	bl	800e898 <enterCritical>
 800e9c8:	60f8      	str	r0, [r7, #12]
    TaskInfoList_t *listPtr = usedList;
 800e9ca:	4b28      	ldr	r3, [pc, #160]	; (800ea6c <addToTaskList+0xc0>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	613b      	str	r3, [r7, #16]
    while ( listPtr && (osOK == xcode) )
 800e9d0:	e013      	b.n	800e9fa <addToTaskList+0x4e>
    {
        if (listPtr->info.taskId == taskId)
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	429a      	cmp	r2, r3
 800e9da:	d10b      	bne.n	800e9f4 <addToTaskList+0x48>
        {
            DEBOUT("try to add taskId more than once");
 800e9dc:	4b24      	ldr	r3, [pc, #144]	; (800ea70 <addToTaskList+0xc4>)
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68d8      	ldr	r0, [r3, #12]
 800e9e2:	4b24      	ldr	r3, [pc, #144]	; (800ea74 <addToTaskList+0xc8>)
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	2393      	movs	r3, #147	; 0x93
 800e9e8:	4a23      	ldr	r2, [pc, #140]	; (800ea78 <addToTaskList+0xcc>)
 800e9ea:	4924      	ldr	r1, [pc, #144]	; (800ea7c <addToTaskList+0xd0>)
 800e9ec:	f003 ff66 	bl	80128bc <fiprintf>
            xcode = osErrorOS;
 800e9f0:	23ff      	movs	r3, #255	; 0xff
 800e9f2:	617b      	str	r3, [r7, #20]
        }
        listPtr = listPtr->next;
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	685b      	ldr	r3, [r3, #4]
 800e9f8:	613b      	str	r3, [r7, #16]
    while ( listPtr && (osOK == xcode) )
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d002      	beq.n	800ea06 <addToTaskList+0x5a>
 800ea00:	697b      	ldr	r3, [r7, #20]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d0e5      	beq.n	800e9d2 <addToTaskList+0x26>
    }
    if (osOK == xcode)
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d10f      	bne.n	800ea2c <addToTaskList+0x80>
    {
      // now add in list!
      if(0 == freeList)
 800ea0c:	4b1c      	ldr	r3, [pc, #112]	; (800ea80 <addToTaskList+0xd4>)
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d10b      	bne.n	800ea2c <addToTaskList+0x80>
      {
         DEBOUT("max Number of task in debug list reached. Add more entries.");
 800ea14:	4b16      	ldr	r3, [pc, #88]	; (800ea70 <addToTaskList+0xc4>)
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	68d8      	ldr	r0, [r3, #12]
 800ea1a:	4b1a      	ldr	r3, [pc, #104]	; (800ea84 <addToTaskList+0xd8>)
 800ea1c:	9300      	str	r3, [sp, #0]
 800ea1e:	239d      	movs	r3, #157	; 0x9d
 800ea20:	4a15      	ldr	r2, [pc, #84]	; (800ea78 <addToTaskList+0xcc>)
 800ea22:	4916      	ldr	r1, [pc, #88]	; (800ea7c <addToTaskList+0xd0>)
 800ea24:	f003 ff4a 	bl	80128bc <fiprintf>
         xcode = osErrorOS;
 800ea28:	23ff      	movs	r3, #255	; 0xff
 800ea2a:	617b      	str	r3, [r7, #20]
      }
    }
    if (osOK == xcode)
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d112      	bne.n	800ea58 <addToTaskList+0xac>
    {
      // add first free element to used list
      listPtr = freeList;            // remember first free element.
 800ea32:	4b13      	ldr	r3, [pc, #76]	; (800ea80 <addToTaskList+0xd4>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	613b      	str	r3, [r7, #16]
      // remove entry from free list.
      freeList = freeList->next;
 800ea38:	4b11      	ldr	r3, [pc, #68]	; (800ea80 <addToTaskList+0xd4>)
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	685b      	ldr	r3, [r3, #4]
 800ea3e:	4a10      	ldr	r2, [pc, #64]	; (800ea80 <addToTaskList+0xd4>)
 800ea40:	6013      	str	r3, [r2, #0]
      // add entry on top of used list
      listPtr->next = usedList;
 800ea42:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <addToTaskList+0xc0>)
 800ea44:	681a      	ldr	r2, [r3, #0]
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	605a      	str	r2, [r3, #4]
      usedList = listPtr;
 800ea4a:	4a08      	ldr	r2, [pc, #32]	; (800ea6c <addToTaskList+0xc0>)
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	6013      	str	r3, [r2, #0]
      // enter info data
      usedList->info.taskId = taskId;
 800ea50:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <addToTaskList+0xc0>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	601a      	str	r2, [r3, #0]
    }
    exitCritical(isrMask);
 800ea58:	68f8      	ldr	r0, [r7, #12]
 800ea5a:	f7ff ff3d 	bl	800e8d8 <exitCritical>
    return osOK;
 800ea5e:	2300      	movs	r3, #0
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	3718      	adds	r7, #24
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	20000998 	.word	0x20000998
 800ea6c:	20000a8c 	.word	0x20000a8c
 800ea70:	20000040 	.word	0x20000040
 800ea74:	08014f88 	.word	0x08014f88
 800ea78:	08014f38 	.word	0x08014f38
 800ea7c:	08014f60 	.word	0x08014f60
 800ea80:	20000034 	.word	0x20000034
 800ea84:	08014fac 	.word	0x08014fac

0800ea88 <removeFromTaskList>:

static osStatus removeFromTaskList(TaskHandle_t taskId)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b08a      	sub	sp, #40	; 0x28
 800ea8c:	af02      	add	r7, sp, #8
 800ea8e:	6078      	str	r0, [r7, #4]
    osStatus        xcode   = osOK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	61fb      	str	r3, [r7, #28]
    TaskInfoList_t *prevPtr = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	61bb      	str	r3, [r7, #24]
    uint8_t         found   = FALSE;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	75fb      	strb	r3, [r7, #23]
    uint32_t        isrMask;
    if (FALSE == isInit)
 800ea9c:	4b24      	ldr	r3, [pc, #144]	; (800eb30 <removeFromTaskList+0xa8>)
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <removeFromTaskList+0x20>
    {
        initTaskList();
 800eaa4:	f7ff ff32 	bl	800e90c <initTaskList>
    }
    isrMask = enterCritical();
 800eaa8:	f7ff fef6 	bl	800e898 <enterCritical>
 800eaac:	60f8      	str	r0, [r7, #12]
    TaskInfoList_t *listPtr = usedList;
 800eaae:	4b21      	ldr	r3, [pc, #132]	; (800eb34 <removeFromTaskList+0xac>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	613b      	str	r3, [r7, #16]

    while (listPtr && FALSE == found)
 800eab4:	e01e      	b.n	800eaf4 <removeFromTaskList+0x6c>
    {
       if (listPtr->info.taskId == taskId)
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d114      	bne.n	800eaea <removeFromTaskList+0x62>
       {
           found = TRUE;
 800eac0:	2301      	movs	r3, #1
 800eac2:	75fb      	strb	r3, [r7, #23]
           // remove element from used list.
           if (prevPtr)
 800eac4:	69bb      	ldr	r3, [r7, #24]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d004      	beq.n	800ead4 <removeFromTaskList+0x4c>
           {
              prevPtr->next = listPtr->next;
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	685a      	ldr	r2, [r3, #4]
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	605a      	str	r2, [r3, #4]
 800ead2:	e003      	b.n	800eadc <removeFromTaskList+0x54>
           }
           else   // found Id in root element of list, set new root element
           {
               usedList = listPtr->next;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	4a16      	ldr	r2, [pc, #88]	; (800eb34 <removeFromTaskList+0xac>)
 800eada:	6013      	str	r3, [r2, #0]
           }
           // add entry on top of free list
           listPtr->next = freeList;
 800eadc:	4b16      	ldr	r3, [pc, #88]	; (800eb38 <removeFromTaskList+0xb0>)
 800eade:	681a      	ldr	r2, [r3, #0]
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	605a      	str	r2, [r3, #4]
           freeList = listPtr;
 800eae4:	4a14      	ldr	r2, [pc, #80]	; (800eb38 <removeFromTaskList+0xb0>)
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	6013      	str	r3, [r2, #0]
       }
       prevPtr = listPtr;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	61bb      	str	r3, [r7, #24]
       listPtr = listPtr->next;
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	613b      	str	r3, [r7, #16]
    while (listPtr && FALSE == found)
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d002      	beq.n	800eb00 <removeFromTaskList+0x78>
 800eafa:	7dfb      	ldrb	r3, [r7, #23]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d0da      	beq.n	800eab6 <removeFromTaskList+0x2e>
    }
    exitCritical(isrMask);
 800eb00:	68f8      	ldr	r0, [r7, #12]
 800eb02:	f7ff fee9 	bl	800e8d8 <exitCritical>
    if (FALSE == found)
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10b      	bne.n	800eb24 <removeFromTaskList+0x9c>
    {
        DEBOUT("couldn't find entry to delete");
 800eb0c:	4b0b      	ldr	r3, [pc, #44]	; (800eb3c <removeFromTaskList+0xb4>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68d8      	ldr	r0, [r3, #12]
 800eb12:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <removeFromTaskList+0xb8>)
 800eb14:	9300      	str	r3, [sp, #0]
 800eb16:	23d6      	movs	r3, #214	; 0xd6
 800eb18:	4a0a      	ldr	r2, [pc, #40]	; (800eb44 <removeFromTaskList+0xbc>)
 800eb1a:	490b      	ldr	r1, [pc, #44]	; (800eb48 <removeFromTaskList+0xc0>)
 800eb1c:	f003 fece 	bl	80128bc <fiprintf>
        xcode = osErrorOS;
 800eb20:	23ff      	movs	r3, #255	; 0xff
 800eb22:	61fb      	str	r3, [r7, #28]
    }
    return xcode;
 800eb24:	69fb      	ldr	r3, [r7, #28]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3720      	adds	r7, #32
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	20000998 	.word	0x20000998
 800eb34:	20000a8c 	.word	0x20000a8c
 800eb38:	20000034 	.word	0x20000034
 800eb3c:	20000040 	.word	0x20000040
 800eb40:	08014fe8 	.word	0x08014fe8
 800eb44:	08014f38 	.word	0x08014f38
 800eb48:	08014f60 	.word	0x08014f60

0800eb4c <vAssertCalled>:


// =====[ Helper functions ]=============
#if (defined (DEBUG) && defined (configOS_ASSERT)  &&  (configOS_ASSERT != 0))
void vAssertCalled(const char * const pcFileName, unsigned long ulLine)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	b084      	sub	sp, #16
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
 800eb54:	6039      	str	r1, [r7, #0]
   volatile uint32_t ulSetToNonZeroInDebuggerToContinue = 0;
 800eb56:	2300      	movs	r3, #0
 800eb58:	60bb      	str	r3, [r7, #8]

#if (defined (DEBUG_CMSIS_API))
    fprintf(stderr,"*** %s Line %" PRIu32 ": FreeRTOS assertion.\n",pcFileName, ulLine);
 800eb5a:	4b0b      	ldr	r3, [pc, #44]	; (800eb88 <vAssertCalled+0x3c>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68d8      	ldr	r0, [r3, #12]
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	4909      	ldr	r1, [pc, #36]	; (800eb8c <vAssertCalled+0x40>)
 800eb66:	f003 fea9 	bl	80128bc <fiprintf>
#endif
    uint32_t isrMask = enterCritical();
 800eb6a:	f7ff fe95 	bl	800e898 <enterCritical>
 800eb6e:	60f8      	str	r0, [r7, #12]
    {
        /* You can step out of this function to debug the assertion by using
        the debugger to set ulSetToNonZeroInDebuggerToContinue to a non-zero
        value. */
        while( ulSetToNonZeroInDebuggerToContinue == 0 )
 800eb70:	bf00      	nop
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d0fc      	beq.n	800eb72 <vAssertCalled+0x26>
        {
        }
    }
    exitCritical(isrMask);
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f7ff fead 	bl	800e8d8 <exitCritical>
}
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20000040 	.word	0x20000040
 800eb8c:	08015008 	.word	0x08015008

0800eb90 <taskFunc>:
}


/* generic task code for all Tasks!!!! */
static void taskFunc(void *param)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b086      	sub	sp, #24
 800eb94:	af02      	add	r7, sp, #8
 800eb96:	6078      	str	r0, [r7, #4]
    //TaskFunction_t
    TaskHookFunction_t taskCode = xTaskGetApplicationTaskTag( NULL );
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f7fe f829 	bl	800cbf0 <xTaskGetApplicationTaskTag>
 800eb9e:	60f8      	str	r0, [r7, #12]
    osThreadId myId = 0;
 800eba0:	2300      	movs	r3, #0
 800eba2:	60bb      	str	r3, [r7, #8]

    if (taskCode)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d003      	beq.n	800ebb2 <taskFunc+0x22>
    {
      taskCode(param);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	4798      	blx	r3
 800ebb0:	e00a      	b.n	800ebc8 <taskFunc+0x38>
    }
    else
    {
         DEBOUT("Can't start Task Code");
 800ebb2:	4b0a      	ldr	r3, [pc, #40]	; (800ebdc <taskFunc+0x4c>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68d8      	ldr	r0, [r3, #12]
 800ebb8:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <taskFunc+0x50>)
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800ebc0:	4a08      	ldr	r2, [pc, #32]	; (800ebe4 <taskFunc+0x54>)
 800ebc2:	4909      	ldr	r1, [pc, #36]	; (800ebe8 <taskFunc+0x58>)
 800ebc4:	f003 fe7a 	bl	80128bc <fiprintf>
    }

    myId = osThreadGetId();
 800ebc8:	f000 f8d6 	bl	800ed78 <osThreadGetId>
 800ebcc:	60b8      	str	r0, [r7, #8]
    osThreadTerminate(myId);
 800ebce:	68b8      	ldr	r0, [r7, #8]
 800ebd0:	f000 f918 	bl	800ee04 <osThreadTerminate>
}
 800ebd4:	bf00      	nop
 800ebd6:	3710      	adds	r7, #16
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	20000040 	.word	0x20000040
 800ebe0:	08015030 	.word	0x08015030
 800ebe4:	08014f38 	.word	0x08014f38
 800ebe8:	08014f60 	.word	0x08014f60

0800ebec <osKernelInitialize>:

/// Initialize the RTOS Kernel for creating objects.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osKernelInitialize shall be consistent in every CMSIS-RTOS.
osStatus osKernelInitialize (void)
{
 800ebec:	b480      	push	{r7}
 800ebee:	af00      	add	r7, sp, #0
    //prevent compile error
    return osOK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr

0800ebfc <osKernelStart>:

/// Start the RTOS Kernel.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
osStatus osKernelStart (void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	af00      	add	r7, sp, #0
    isKernelStarted = 1;
 800ec00:	4b03      	ldr	r3, [pc, #12]	; (800ec10 <osKernelStart+0x14>)
 800ec02:	2201      	movs	r2, #1
 800ec04:	601a      	str	r2, [r3, #0]
    vTaskStartScheduler();
 800ec06:	f7fd fd4d 	bl	800c6a4 <vTaskStartScheduler>
    return osErrorOS;            //Program is not supposed to reach this point!
 800ec0a:	23ff      	movs	r3, #255	; 0xff
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	bd80      	pop	{r7, pc}
 800ec10:	20000a90 	.word	0x20000a90

0800ec14 <osKernelRunning>:

/// Check if the RTOS kernel is already started.
/// \note MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
/// \return 0 RTOS is not started, 1 RTOS is started.
int32_t osKernelRunning(void)
{
 800ec14:	b480      	push	{r7}
 800ec16:	af00      	add	r7, sp, #0
    //prevent compile error
    return isKernelStarted;
 800ec18:	4b03      	ldr	r3, [pc, #12]	; (800ec28 <osKernelRunning+0x14>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
}
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	20000a90 	.word	0x20000a90

0800ec2c <osKernelSysTick>:

/// Get the RTOS kernel system timer counter
/// \note MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
/// \return RTOS kernel system timer as 32-bit value
uint32_t osKernelSysTick (void)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b082      	sub	sp, #8
 800ec30:	af00      	add	r7, sp, #0
    TickType_t ticks = 0;
 800ec32:	2300      	movs	r3, #0
 800ec34:	607b      	str	r3, [r7, #4]
    if (!isInterrupt())
 800ec36:	4b09      	ldr	r3, [pc, #36]	; (800ec5c <osKernelSysTick+0x30>)
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d103      	bne.n	800ec4a <osKernelSysTick+0x1e>
    {
       ticks = xTaskGetTickCount( );
 800ec42:	f7fd fe85 	bl	800c950 <xTaskGetTickCount>
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	e002      	b.n	800ec50 <osKernelSysTick+0x24>
    }
    else
    {
       ticks = xTaskGetTickCountFromISR( );
 800ec4a:	f7fd fe91 	bl	800c970 <xTaskGetTickCountFromISR>
 800ec4e:	6078      	str	r0, [r7, #4]
    }
    return (uint32_t)ticks;
 800ec50:	687b      	ldr	r3, [r7, #4]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3708      	adds	r7, #8
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	e000ed00 	.word	0xe000ed00

0800ec60 <osThreadCreate>:
/// \param[in]     thread_def    thread definition referenced with \ref osThread.
/// \param[in]     argument      pointer that is passed to the thread function as start argument.
/// \return thread ID for reference by other functions or NULL in case of error.
/// \note MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b08c      	sub	sp, #48	; 0x30
 800ec64:	af02      	add	r7, sp, #8
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
    osThreadId id = NULL;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	627b      	str	r3, [r7, #36]	; 0x24

    if(!thread_def)
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d10c      	bne.n	800ec8e <osThreadCreate+0x2e>
    {
        //error message here
        DEBOUT("Thread creation failed because of invalid definition!");
 800ec74:	4b38      	ldr	r3, [pc, #224]	; (800ed58 <osThreadCreate+0xf8>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	68d8      	ldr	r0, [r3, #12]
 800ec7a:	4b38      	ldr	r3, [pc, #224]	; (800ed5c <osThreadCreate+0xfc>)
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800ec82:	4a37      	ldr	r2, [pc, #220]	; (800ed60 <osThreadCreate+0x100>)
 800ec84:	4937      	ldr	r1, [pc, #220]	; (800ed64 <osThreadCreate+0x104>)
 800ec86:	f003 fe19 	bl	80128bc <fiprintf>
        return 0;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e05f      	b.n	800ed4e <osThreadCreate+0xee>
    }
    if(isInterrupt())    // interrupt mode
 800ec8e:	4b36      	ldr	r3, [pc, #216]	; (800ed68 <osThreadCreate+0x108>)
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <osThreadCreate+0x3e>
    {
        // CMSIS forbids thread creation from Interrupt!
        return 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e057      	b.n	800ed4e <osThreadCreate+0xee>
    }

    //--Parse to task-parameters
    TaskFunction_t taskCode = (TaskFunction_t)(thread_def->pthread);      // in C++ use reinterpret_cast to parse void(*)(const void*) to void(*)(void*)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	61fb      	str	r3, [r7, #28]
    char * const taskName = thread_def->name;                              //dummy name since it is for debugging purposes anyway
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	691b      	ldr	r3, [r3, #16]
 800eca8:	61bb      	str	r3, [r7, #24]
    uint16_t stackDepth = ((thread_def->stacksize) / sizeof(StackType_t)); //conversion from bytes into specified number of the variables the stack can hold
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	089b      	lsrs	r3, r3, #2
 800ecb0:	847b      	strh	r3, [r7, #34]	; 0x22
    void *parameters = argument;                                           //parameter for thread function
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	617b      	str	r3, [r7, #20]
    UBaseType_t priority = tskIDLE_PRIORITY;                               //priority
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	613b      	str	r3, [r7, #16]
    TaskHandle_t createdTask = NULL;                                       //taskHandle that will be written by a successful xTaskCreate
 800ecba:	2300      	movs	r3, #0
 800ecbc:	60bb      	str	r3, [r7, #8]

    // adapt CMSIS to FreeRtos priority levels
    // osPriorityIdle (-3) must be mapped to tskIDLE_PRIORITY (0)
    priority = thread_def->tpriority + (tskIDLE_PRIORITY - osPriorityIdle);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ecc4:	3303      	adds	r3, #3
 800ecc6:	613b      	str	r3, [r7, #16]

    // check stackDepth.
    // according to CMSIS-RTOS API description, 0 is default stack size
    if (0 == stackDepth)
 800ecc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d101      	bne.n	800ecd2 <osThreadCreate+0x72>
    {
        stackDepth = configMINIMAL_STACK_SIZE;  // defined in FreeRTOSConfig.h
 800ecce:	2378      	movs	r3, #120	; 0x78
 800ecd0:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    // check valid priority.
    if(thread_def->tpriority > osPriorityRealtime)
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	dd0c      	ble.n	800ecf6 <osThreadCreate+0x96>
    {
        //error message here
        DEBOUT("Thread creation failed because of invalid priority!");
 800ecdc:	4b1e      	ldr	r3, [pc, #120]	; (800ed58 <osThreadCreate+0xf8>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	68d8      	ldr	r0, [r3, #12]
 800ece2:	4b22      	ldr	r3, [pc, #136]	; (800ed6c <osThreadCreate+0x10c>)
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	f44f 73c2 	mov.w	r3, #388	; 0x184
 800ecea:	4a1d      	ldr	r2, [pc, #116]	; (800ed60 <osThreadCreate+0x100>)
 800ecec:	491d      	ldr	r1, [pc, #116]	; (800ed64 <osThreadCreate+0x104>)
 800ecee:	f003 fde5 	bl	80128bc <fiprintf>
        return 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	e02b      	b.n	800ed4e <osThreadCreate+0xee>
    }

    //  --Create Task
#if (defined( DEBUG_CMSIS_API) || (defined(configUSE_APPLICATION_TASK_TAG) && (configUSE_APPLICATION_TASK_TAG == 1)))
    uint32_t isrMask = enterCritical();   // protect creation AND add to internal list....
 800ecf6:	f7ff fdcf 	bl	800e898 <enterCritical>
 800ecfa:	60f8      	str	r0, [r7, #12]
#endif
    if (pdPASS == xTaskCreate(taskFunc, taskName, stackDepth, parameters, priority, &createdTask))
 800ecfc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ecfe:	f107 0308 	add.w	r3, r7, #8
 800ed02:	9301      	str	r3, [sp, #4]
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	9300      	str	r3, [sp, #0]
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	69b9      	ldr	r1, [r7, #24]
 800ed0c:	4818      	ldr	r0, [pc, #96]	; (800ed70 <osThreadCreate+0x110>)
 800ed0e:	f7fd f9d9 	bl	800c0c4 <xTaskCreate>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d10b      	bne.n	800ed30 <osThreadCreate+0xd0>
    {
        //success
        id = (osThreadId)createdTask;                                     //pass created taskHandle to id
 800ed18:	68bb      	ldr	r3, [r7, #8]
 800ed1a:	627b      	str	r3, [r7, #36]	; 0x24
        vTaskSetApplicationTaskTag(createdTask,(TaskHookFunction_t)taskCode);   // set Tag to task Code....
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	69f9      	ldr	r1, [r7, #28]
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fd ff49 	bl	800cbb8 <vTaskSetApplicationTaskTag>
        (void) ADDTOLIST(createdTask);
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f7ff fe3f 	bl	800e9ac <addToTaskList>
 800ed2e:	e00a      	b.n	800ed46 <osThreadCreate+0xe6>
    }
    else
    {
        //error message here
        DEBOUT("Thread creation failed!");
 800ed30:	4b09      	ldr	r3, [pc, #36]	; (800ed58 <osThreadCreate+0xf8>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68d8      	ldr	r0, [r3, #12]
 800ed36:	4b0f      	ldr	r3, [pc, #60]	; (800ed74 <osThreadCreate+0x114>)
 800ed38:	9300      	str	r3, [sp, #0]
 800ed3a:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800ed3e:	4a08      	ldr	r2, [pc, #32]	; (800ed60 <osThreadCreate+0x100>)
 800ed40:	4908      	ldr	r1, [pc, #32]	; (800ed64 <osThreadCreate+0x104>)
 800ed42:	f003 fdbb 	bl	80128bc <fiprintf>
    }
#if (defined( DEBUG_CMSIS_API) || (defined(configUSE_APPLICATION_TASK_TAG) && (configUSE_APPLICATION_TASK_TAG == 1)))
    exitCritical(isrMask);
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7ff fdc6 	bl	800e8d8 <exitCritical>
#endif

    return id;
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3728      	adds	r7, #40	; 0x28
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	bf00      	nop
 800ed58:	20000040 	.word	0x20000040
 800ed5c:	08015048 	.word	0x08015048
 800ed60:	08014f38 	.word	0x08014f38
 800ed64:	08014f60 	.word	0x08014f60
 800ed68:	e000ed00 	.word	0xe000ed00
 800ed6c:	08015080 	.word	0x08015080
 800ed70:	0800eb91 	.word	0x0800eb91
 800ed74:	080150b4 	.word	0x080150b4

0800ed78 <osThreadGetId>:

/// Return the thread ID of the current running thread.
/// \return thread ID for reference by other functions or NULL in case of error.
/// \note MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
osThreadId osThreadGetId (void)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af02      	add	r7, sp, #8
    osThreadId id = NULL;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	607b      	str	r3, [r7, #4]
    TaskHandle_t handle = NULL;
 800ed82:	2300      	movs	r3, #0
 800ed84:	603b      	str	r3, [r7, #0]

    if(isInterrupt())    // interrupt mode
 800ed86:	4b19      	ldr	r3, [pc, #100]	; (800edec <osThreadGetId+0x74>)
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <osThreadGetId+0x1e>
    {
        // CMSIS forbids call from Interrupt!
        return 0;
 800ed92:	2300      	movs	r3, #0
 800ed94:	e025      	b.n	800ede2 <osThreadGetId+0x6a>
    }

#if (defined( DEBUG_CMSIS_API))
    if(!osKernelRunning())
 800ed96:	f7ff ff3d 	bl	800ec14 <osKernelRunning>
 800ed9a:	4603      	mov	r3, r0
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d10b      	bne.n	800edb8 <osThreadGetId+0x40>
    {
        DEBOUT( "Can't get Thread ID while OS is not Running!");
 800eda0:	4b13      	ldr	r3, [pc, #76]	; (800edf0 <osThreadGetId+0x78>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	68d8      	ldr	r0, [r3, #12]
 800eda6:	4b13      	ldr	r3, [pc, #76]	; (800edf4 <osThreadGetId+0x7c>)
 800eda8:	9300      	str	r3, [sp, #0]
 800edaa:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800edae:	4a12      	ldr	r2, [pc, #72]	; (800edf8 <osThreadGetId+0x80>)
 800edb0:	4912      	ldr	r1, [pc, #72]	; (800edfc <osThreadGetId+0x84>)
 800edb2:	f003 fd83 	bl	80128bc <fiprintf>
 800edb6:	e002      	b.n	800edbe <osThreadGetId+0x46>
    }
    else
#endif
    {
       /*--Get current handle*/
       handle = xTaskGetCurrentTaskHandle();       //write the taskHandle of the current Task
 800edb8:	f7fe f9f8 	bl	800d1ac <xTaskGetCurrentTaskHandle>
 800edbc:	6038      	str	r0, [r7, #0]
    }
    if(handle != NULL)
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d002      	beq.n	800edca <osThreadGetId+0x52>
    {
        //success
        id = handle;                            //pass current handle to the current threadId
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	607b      	str	r3, [r7, #4]
 800edc8:	e00a      	b.n	800ede0 <osThreadGetId+0x68>
    }
    else
    {
        //error message here
        DEBOUT( "Was not able to get the ID of the current task!");
 800edca:	4b09      	ldr	r3, [pc, #36]	; (800edf0 <osThreadGetId+0x78>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68d8      	ldr	r0, [r3, #12]
 800edd0:	4b0b      	ldr	r3, [pc, #44]	; (800ee00 <osThreadGetId+0x88>)
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800edd8:	4a07      	ldr	r2, [pc, #28]	; (800edf8 <osThreadGetId+0x80>)
 800edda:	4908      	ldr	r1, [pc, #32]	; (800edfc <osThreadGetId+0x84>)
 800eddc:	f003 fd6e 	bl	80128bc <fiprintf>
    }
    return id;
 800ede0:	687b      	ldr	r3, [r7, #4]
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	e000ed00 	.word	0xe000ed00
 800edf0:	20000040 	.word	0x20000040
 800edf4:	080150cc 	.word	0x080150cc
 800edf8:	08014f38 	.word	0x08014f38
 800edfc:	08014f60 	.word	0x08014f60
 800ee00:	080150fc 	.word	0x080150fc

0800ee04 <osThreadTerminate>:
/// Terminate execution of a thread and remove it from Active Threads.
/// \param[in]     thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
osStatus osThreadTerminate (osThreadId thread_id)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b088      	sub	sp, #32
 800ee08:	af02      	add	r7, sp, #8
 800ee0a:	6078      	str	r0, [r7, #4]
    osStatus state = osOK;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	617b      	str	r3, [r7, #20]
#if ( INCLUDE_vTaskDelete == 1 )
    TaskHandle_t task = thread_id;                                  //pass the threadID of the task/thread to be deleted
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	613b      	str	r3, [r7, #16]

    if(isInterrupt())    // interrupt mode
 800ee14:	4b16      	ldr	r3, [pc, #88]	; (800ee70 <osThreadTerminate+0x6c>)
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <osThreadTerminate+0x24>
    {
        // CMSIS forbids call from Interrupt!
        state = osErrorISR;
 800ee20:	2382      	movs	r3, #130	; 0x82
 800ee22:	617b      	str	r3, [r7, #20]
        return state;
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	e01e      	b.n	800ee66 <osThreadTerminate+0x62>
    }

    /*--Delete task*/
    if (0 != task)
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d00d      	beq.n	800ee4a <osThreadTerminate+0x46>
    {
#ifdef DEBUG_CMSIS_API
        uint32_t isrMask = enterCritical();   // protect creation AND remove from internal list....
 800ee2e:	f7ff fd33 	bl	800e898 <enterCritical>
 800ee32:	60f8      	str	r0, [r7, #12]
#endif
        vTaskDelete(task);                                          //delete the task
 800ee34:	6938      	ldr	r0, [r7, #16]
 800ee36:	f7fd fac1 	bl	800c3bc <vTaskDelete>
        state = REMOVEFROMLIST(task);
 800ee3a:	6938      	ldr	r0, [r7, #16]
 800ee3c:	f7ff fe24 	bl	800ea88 <removeFromTaskList>
 800ee40:	6178      	str	r0, [r7, #20]
#ifdef DEBUG_CMSIS_API
        exitCritical(isrMask);
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	f7ff fd48 	bl	800e8d8 <exitCritical>
 800ee48:	e00c      	b.n	800ee64 <osThreadTerminate+0x60>
#endif

    }
    else
    {
        DEBOUT("try to terminate NULL Task");
 800ee4a:	4b0a      	ldr	r3, [pc, #40]	; (800ee74 <osThreadTerminate+0x70>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68d8      	ldr	r0, [r3, #12]
 800ee50:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <osThreadTerminate+0x74>)
 800ee52:	9300      	str	r3, [sp, #0]
 800ee54:	f240 13e5 	movw	r3, #485	; 0x1e5
 800ee58:	4a08      	ldr	r2, [pc, #32]	; (800ee7c <osThreadTerminate+0x78>)
 800ee5a:	4909      	ldr	r1, [pc, #36]	; (800ee80 <osThreadTerminate+0x7c>)
 800ee5c:	f003 fd2e 	bl	80128bc <fiprintf>
        state = osErrorParameter;
 800ee60:	2380      	movs	r3, #128	; 0x80
 800ee62:	617b      	str	r3, [r7, #20]
    state = osErrorOS;
    //error message here
    DEBOUT("INCLUDE_vTaskDelete must be enabled to terminate Task");
#endif

   return state;
 800ee64:	697b      	ldr	r3, [r7, #20]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3718      	adds	r7, #24
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	e000ed00 	.word	0xe000ed00
 800ee74:	20000040 	.word	0x20000040
 800ee78:	0801512c 	.word	0x0801512c
 800ee7c:	08014f38 	.word	0x08014f38
 800ee80:	08014f60 	.word	0x08014f60

0800ee84 <osThreadSetPriority>:
/// \param[in]     thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
/// \param[in]     priority      new priority value for the thread function.
/// \return status code that indicates the execution status of the function.
/// \note MUST REMAIN UNCHANGED: \b osThreadSetPriority shall be consistent in every CMSIS-RTOS.
osStatus osThreadSetPriority (osThreadId thread_id, osPriority priority)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af02      	add	r7, sp, #8
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	460b      	mov	r3, r1
 800ee8e:	807b      	strh	r3, [r7, #2]
    osStatus state = osOK;
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]
    TaskHandle_t task = thread_id;                                  //pass the threadID of the task/thread whose priority has to be set
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	613b      	str	r3, [r7, #16]
    UBaseType_t taskPriority = tskIDLE_PRIORITY;                    //pass priority
 800ee98:	2300      	movs	r3, #0
 800ee9a:	60fb      	str	r3, [r7, #12]

    if(isInterrupt())    // interrupt mode
 800ee9c:	4b27      	ldr	r3, [pc, #156]	; (800ef3c <osThreadSetPriority+0xb8>)
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d003      	beq.n	800eeb0 <osThreadSetPriority+0x2c>
    {
        // CMSIS forbids call from Interrupt!
        state =  osErrorISR;
 800eea8:	2382      	movs	r3, #130	; 0x82
 800eeaa:	617b      	str	r3, [r7, #20]
        return state;
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	e040      	b.n	800ef32 <osThreadSetPriority+0xae>
    }

#if (1 == INCLUDE_vTaskPrioritySet)     // check if we are allowed to do this...
    if (priority < osPriorityIdle || priority > osPriorityRealtime)
 800eeb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eeb4:	f113 0f03 	cmn.w	r3, #3
 800eeb8:	db03      	blt.n	800eec2 <osThreadSetPriority+0x3e>
 800eeba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eebe:	2b03      	cmp	r3, #3
 800eec0:	dd03      	ble.n	800eeca <osThreadSetPriority+0x46>
    {
        state = osErrorValue;
 800eec2:	2386      	movs	r3, #134	; 0x86
 800eec4:	617b      	str	r3, [r7, #20]
        return state;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	e033      	b.n	800ef32 <osThreadSetPriority+0xae>
    }

    // adapt CMSIS to FreeRtos priority levels
    // osPriorityIdle (-3) must be mapped to tskIDLE_PRIORITY (0)
    taskPriority = priority + (tskIDLE_PRIORITY - osPriorityIdle);
 800eeca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eece:	3303      	adds	r3, #3
 800eed0:	60fb      	str	r3, [r7, #12]

    if(!thread_id)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d10e      	bne.n	800eef6 <osThreadSetPriority+0x72>
    {
        //error message here
        DEBOUT("Priority of the NULL thread can not be changed!");
 800eed8:	4b19      	ldr	r3, [pc, #100]	; (800ef40 <osThreadSetPriority+0xbc>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	68d8      	ldr	r0, [r3, #12]
 800eede:	4b19      	ldr	r3, [pc, #100]	; (800ef44 <osThreadSetPriority+0xc0>)
 800eee0:	9300      	str	r3, [sp, #0]
 800eee2:	f240 2326 	movw	r3, #550	; 0x226
 800eee6:	4a18      	ldr	r2, [pc, #96]	; (800ef48 <osThreadSetPriority+0xc4>)
 800eee8:	4918      	ldr	r1, [pc, #96]	; (800ef4c <osThreadSetPriority+0xc8>)
 800eeea:	f003 fce7 	bl	80128bc <fiprintf>
        state = osErrorParameter;
 800eeee:	2380      	movs	r3, #128	; 0x80
 800eef0:	617b      	str	r3, [r7, #20]
        return state;
 800eef2:	697b      	ldr	r3, [r7, #20]
 800eef4:	e01d      	b.n	800ef32 <osThreadSetPriority+0xae>
    }
    /*--Set the priority*/
    vTaskPrioritySet(task, taskPriority);
 800eef6:	68f9      	ldr	r1, [r7, #12]
 800eef8:	6938      	ldr	r0, [r7, #16]
 800eefa:	f7fd fb05 	bl	800c508 <vTaskPrioritySet>
    if (osThreadGetPriority(thread_id) == priority)                 //check if the priority is the one that was supposed to be set
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f000 f828 	bl	800ef54 <osThreadGetPriority>
 800ef04:	4603      	mov	r3, r0
 800ef06:	461a      	mov	r2, r3
 800ef08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d102      	bne.n	800ef16 <osThreadSetPriority+0x92>
    {
        //success
        state = osOK;
 800ef10:	2300      	movs	r3, #0
 800ef12:	617b      	str	r3, [r7, #20]
 800ef14:	e00c      	b.n	800ef30 <osThreadSetPriority+0xac>
    }
    else
    {
        //error message here
        DEBOUT("Priority of the thread could not be changed!");
 800ef16:	4b0a      	ldr	r3, [pc, #40]	; (800ef40 <osThreadSetPriority+0xbc>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68d8      	ldr	r0, [r3, #12]
 800ef1c:	4b0c      	ldr	r3, [pc, #48]	; (800ef50 <osThreadSetPriority+0xcc>)
 800ef1e:	9300      	str	r3, [sp, #0]
 800ef20:	f44f 730d 	mov.w	r3, #564	; 0x234
 800ef24:	4a08      	ldr	r2, [pc, #32]	; (800ef48 <osThreadSetPriority+0xc4>)
 800ef26:	4909      	ldr	r1, [pc, #36]	; (800ef4c <osThreadSetPriority+0xc8>)
 800ef28:	f003 fcc8 	bl	80128bc <fiprintf>
        state = osErrorValue;
 800ef2c:	2386      	movs	r3, #134	; 0x86
 800ef2e:	617b      	str	r3, [r7, #20]
    state = osErrorOS;
    //error message here
    DEBOUT("INCLUDE_vTaskPrioritySet must be enabled to terminate Task");
#endif

    return state;
 800ef30:	697b      	ldr	r3, [r7, #20]
}
 800ef32:	4618      	mov	r0, r3
 800ef34:	3718      	adds	r7, #24
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	e000ed00 	.word	0xe000ed00
 800ef40:	20000040 	.word	0x20000040
 800ef44:	08015148 	.word	0x08015148
 800ef48:	08014f38 	.word	0x08014f38
 800ef4c:	08014f60 	.word	0x08014f60
 800ef50:	08015178 	.word	0x08015178

0800ef54 <osThreadGetPriority>:
/// Get current priority of an active thread.
/// \param[in]     thread_id     thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
/// \return current priority value of the thread function.
/// \note MUST REMAIN UNCHANGED: \b osThreadGetPriority shall be consistent in every CMSIS-RTOS.
osPriority osThreadGetPriority (osThreadId thread_id)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b088      	sub	sp, #32
 800ef58:	af02      	add	r7, sp, #8
 800ef5a:	6078      	str	r0, [r7, #4]
    TaskHandle_t task = thread_id;                     //pass the threadID of the task/thread whose priority has to be get
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	613b      	str	r3, [r7, #16]
    osPriority priority = osPriorityError;
 800ef60:	2384      	movs	r3, #132	; 0x84
 800ef62:	82fb      	strh	r3, [r7, #22]
    UBaseType_t prio = priority;
 800ef64:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef68:	60fb      	str	r3, [r7, #12]
    if(isInterrupt())    // interrupt mode
 800ef6a:	4b1c      	ldr	r3, [pc, #112]	; (800efdc <osThreadGetPriority+0x88>)
 800ef6c:	685b      	ldr	r3, [r3, #4]
 800ef6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d002      	beq.n	800ef7c <osThreadGetPriority+0x28>
    {
        // CMSIS forbids call from Interrupt!
        return priority;
 800ef76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef7a:	e02a      	b.n	800efd2 <osThreadGetPriority+0x7e>
    }

    if(!thread_id)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d10d      	bne.n	800ef9e <osThreadGetPriority+0x4a>
    {
        //error message here
        DEBOUT("Priority of the NULL thread can not be changed!");
 800ef82:	4b17      	ldr	r3, [pc, #92]	; (800efe0 <osThreadGetPriority+0x8c>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	68d8      	ldr	r0, [r3, #12]
 800ef88:	4b16      	ldr	r3, [pc, #88]	; (800efe4 <osThreadGetPriority+0x90>)
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	f240 2352 	movw	r3, #594	; 0x252
 800ef90:	4a15      	ldr	r2, [pc, #84]	; (800efe8 <osThreadGetPriority+0x94>)
 800ef92:	4916      	ldr	r1, [pc, #88]	; (800efec <osThreadGetPriority+0x98>)
 800ef94:	f003 fc92 	bl	80128bc <fiprintf>
        return priority;
 800ef98:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef9c:	e019      	b.n	800efd2 <osThreadGetPriority+0x7e>
    }

#if ( INCLUDE_uxTaskPriorityGet == 1 )
    /*--Get the priority*/
    prio = uxTaskPriorityGet(task);
 800ef9e:	6938      	ldr	r0, [r7, #16]
 800efa0:	f7fd fa98 	bl	800c4d4 <uxTaskPriorityGet>
 800efa4:	60f8      	str	r0, [r7, #12]

    if(prio <= (osPriorityRealtime - osPriorityIdle) + tskIDLE_PRIORITY)
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b06      	cmp	r3, #6
 800efaa:	d805      	bhi.n	800efb8 <osThreadGetPriority+0x64>
    {
        priority = prio + osPriorityIdle  - tskIDLE_PRIORITY;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	b29b      	uxth	r3, r3
 800efb0:	3b03      	subs	r3, #3
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	82fb      	strh	r3, [r7, #22]
 800efb6:	e00a      	b.n	800efce <osThreadGetPriority+0x7a>
    }
    else
    {
        //error message here
        DEBOUT("Priority could not be achieved!");
 800efb8:	4b09      	ldr	r3, [pc, #36]	; (800efe0 <osThreadGetPriority+0x8c>)
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68d8      	ldr	r0, [r3, #12]
 800efbe:	4b0c      	ldr	r3, [pc, #48]	; (800eff0 <osThreadGetPriority+0x9c>)
 800efc0:	9300      	str	r3, [sp, #0]
 800efc2:	f240 2361 	movw	r3, #609	; 0x261
 800efc6:	4a08      	ldr	r2, [pc, #32]	; (800efe8 <osThreadGetPriority+0x94>)
 800efc8:	4908      	ldr	r1, [pc, #32]	; (800efec <osThreadGetPriority+0x98>)
 800efca:	f003 fc77 	bl	80128bc <fiprintf>
    }
#else
    //error message here
    DEBOUT("INCLUDE_uxTaskPriorityGet must be enabled to terminate Task");
#endif
    return priority;
 800efce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3718      	adds	r7, #24
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	e000ed00 	.word	0xe000ed00
 800efe0:	20000040 	.word	0x20000040
 800efe4:	08015148 	.word	0x08015148
 800efe8:	08014f38 	.word	0x08014f38
 800efec:	08014f60 	.word	0x08014f60
 800eff0:	080151a8 	.word	0x080151a8

0800eff4 <osPoolCreate>:
/// Create and Initialize a memory pool.
/// \param[in]     pool_def      memory pool definition referenced with \ref osPool.
/// \return memory pool ID for reference by other functions or NULL in case of error.
/// \note MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b088      	sub	sp, #32
 800eff8:	af02      	add	r7, sp, #8
 800effa:	6078      	str	r0, [r7, #4]

  osPoolId thePool;
  size_t itemSize = 0;
 800effc:	2300      	movs	r3, #0
 800effe:	613b      	str	r3, [r7, #16]
  uint32_t i;

  if (isInterrupt())
 800f000:	4b3e      	ldr	r3, [pc, #248]	; (800f0fc <osPoolCreate+0x108>)
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d001      	beq.n	800f010 <osPoolCreate+0x1c>
  {
    // CMISIS forbids call from ISR
    return 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	e070      	b.n	800f0f2 <osPoolCreate+0xfe>
  }
  if (!pool_def)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d10c      	bne.n	800f030 <osPoolCreate+0x3c>
  {
    DEBOUT("NULL Pool Definition not allowed!");
 800f016:	4b3a      	ldr	r3, [pc, #232]	; (800f100 <osPoolCreate+0x10c>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68d8      	ldr	r0, [r3, #12]
 800f01c:	4b39      	ldr	r3, [pc, #228]	; (800f104 <osPoolCreate+0x110>)
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	f240 53de 	movw	r3, #1502	; 0x5de
 800f024:	4a38      	ldr	r2, [pc, #224]	; (800f108 <osPoolCreate+0x114>)
 800f026:	4939      	ldr	r1, [pc, #228]	; (800f10c <osPoolCreate+0x118>)
 800f028:	f003 fc48 	bl	80128bc <fiprintf>
    return 0;
 800f02c:	2300      	movs	r3, #0
 800f02e:	e060      	b.n	800f0f2 <osPoolCreate+0xfe>
  }
  itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	3303      	adds	r3, #3
 800f036:	f023 0303 	bic.w	r3, r3, #3
 800f03a:	613b      	str	r3, [r7, #16]
    DEBOUT("Couldn't allocate memory for Mem Pool admin data!");
  }
#else    /* alternate implementation, jw                                     */
  /* First have to allocate memory for the pool control data and pool memory */
  size_t wantedSize = sizeof(os_pool_cb_t)                 /* control block  */
                    + pool_def->pool_sz * sizeof(Marker);  /* markers        */
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
  size_t wantedSize = sizeof(os_pool_cb_t)                 /* control block  */
 800f040:	3318      	adds	r3, #24
 800f042:	60fb      	str	r3, [r7, #12]
  wantedSize = 4*((wantedSize+3)/4);             /* create 4 byte alignment! */
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	3303      	adds	r3, #3
 800f048:	f023 0303 	bic.w	r3, r3, #3
 800f04c:	60fb      	str	r3, [r7, #12]
  wantedSize += pool_def->pool_sz * itemSize;              /* pool itself    */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	fb02 f303 	mul.w	r3, r2, r3
 800f058:	68fa      	ldr	r2, [r7, #12]
 800f05a:	4413      	add	r3, r2
 800f05c:	60fb      	str	r3, [r7, #12]
  thePool = (osPoolId)pvPortMalloc(wantedSize);
 800f05e:	68f8      	ldr	r0, [r7, #12]
 800f060:	f7fe fe46 	bl	800dcf0 <pvPortMalloc>
 800f064:	60b8      	str	r0, [r7, #8]

  if (thePool)
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d036      	beq.n	800f0da <osPoolCreate+0xe6>
  {
    thePool->pool_sz = pool_def->pool_sz;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681a      	ldr	r2, [r3, #0]
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	60da      	str	r2, [r3, #12]
    thePool->item_sz = itemSize;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	693a      	ldr	r2, [r7, #16]
 800f078:	611a      	str	r2, [r3, #16]
    thePool->currentIndex = 0;
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2200      	movs	r2, #0
 800f07e:	615a      	str	r2, [r3, #20]
    /* Memory for markers */
    thePool->markers = (void *)thePool + sizeof(os_pool_cb_t);
 800f080:	68bb      	ldr	r3, [r7, #8]
 800f082:	f103 0218 	add.w	r2, r3, #24
 800f086:	68bb      	ldr	r3, [r7, #8]
 800f088:	605a      	str	r2, [r3, #4]
    for (i = 0; i < pool_def->pool_sz; i++)
 800f08a:	2300      	movs	r3, #0
 800f08c:	617b      	str	r3, [r7, #20]
 800f08e:	e008      	b.n	800f0a2 <osPoolCreate+0xae>
    {
      thePool->markers[i] = FREE;
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	685a      	ldr	r2, [r3, #4]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	4413      	add	r3, r2
 800f098:	2200      	movs	r2, #0
 800f09a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < pool_def->pool_sz; i++)
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	617b      	str	r3, [r7, #20]
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d3f1      	bcc.n	800f090 <osPoolCreate+0x9c>
    }
    /* Memory for the pool itself. (4 byte alligned)*/
    thePool->pool = (void *)(thePool) +  (wantedSize - pool_def->pool_sz * itemSize);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	693a      	ldr	r2, [r7, #16]
 800f0b2:	fb02 f303 	mul.w	r3, r2, r3
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	68ba      	ldr	r2, [r7, #8]
 800f0bc:	441a      	add	r2, r3
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	601a      	str	r2, [r3, #0]
#ifdef DEBUG_CMSIS_API
    memset(thePool->pool, POOLPATTERN, (pool_def->pool_sz * itemSize));
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	6818      	ldr	r0, [r3, #0]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	693a      	ldr	r2, [r7, #16]
 800f0cc:	fb02 f303 	mul.w	r3, r2, r3
 800f0d0:	461a      	mov	r2, r3
 800f0d2:	2177      	movs	r1, #119	; 0x77
 800f0d4:	f003 fcd2 	bl	8012a7c <memset>
 800f0d8:	e00a      	b.n	800f0f0 <osPoolCreate+0xfc>
#endif
  }
  else
  {
    DEBOUT("Couldn't allocate memory for Mem Pool data!");
 800f0da:	4b09      	ldr	r3, [pc, #36]	; (800f100 <osPoolCreate+0x10c>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68d8      	ldr	r0, [r3, #12]
 800f0e0:	4b0b      	ldr	r3, [pc, #44]	; (800f110 <osPoolCreate+0x11c>)
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	f240 632a 	movw	r3, #1578	; 0x62a
 800f0e8:	4a07      	ldr	r2, [pc, #28]	; (800f108 <osPoolCreate+0x114>)
 800f0ea:	4908      	ldr	r1, [pc, #32]	; (800f10c <osPoolCreate+0x118>)
 800f0ec:	f003 fbe6 	bl	80128bc <fiprintf>
  }
#endif
  return thePool;
 800f0f0:	68bb      	ldr	r3, [r7, #8]
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3718      	adds	r7, #24
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	e000ed00 	.word	0xe000ed00
 800f100:	20000040 	.word	0x20000040
 800f104:	08015750 	.word	0x08015750
 800f108:	08014f38 	.word	0x08014f38
 800f10c:	08014f60 	.word	0x08014f60
 800f110:	08015774 	.word	0x08015774

0800f114 <_ZN11ApplicationC1Ev>:
	HAL_SPI_Transmit(Platform::BSP::STM32Facade::instance(Platform::BSP::STM32Facade::SPI_Peripheral::UseSPI1), &b, 1, 0xFFFFFFFF);
}

uint16_t stack = 2048;
/* --Project includes. */
Application::Application(): m_sdTask("SD_Task", stack, osPriorityNormal, true)/*m_webserverTask("Webserver_Task",stack,osPriorityNormal,true)*/{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af02      	add	r7, sp, #8
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	4b06      	ldr	r3, [pc, #24]	; (800f138 <_ZN11ApplicationC1Ev+0x24>)
 800f120:	881a      	ldrh	r2, [r3, #0]
 800f122:	2301      	movs	r3, #1
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	2300      	movs	r3, #0
 800f128:	4904      	ldr	r1, [pc, #16]	; (800f13c <_ZN11ApplicationC1Ev+0x28>)
 800f12a:	f000 fea3 	bl	800fe74 <_ZN6SDTaskC1EPKct10osPriorityb>
//	std::printf("Network configuration:\r\n");
//	std::printf("  MAC ADDRESS: %x:%x:%x:%x:%x:%x\r\n", netInfo.mac[0], netInfo.mac[1], netInfo.mac[2], netInfo.mac[3], netInfo.mac[4], netInfo.mac[5]);
//	std::printf("  IP ADDRESS:  %d.%d.%d.%d\r\n", netInfo.ip[0], netInfo.ip[1], netInfo.ip[2], netInfo.ip[3]);
//	std::printf("  NETMASK:     %d.%d.%d.%d\r\n", netInfo.sn[0], netInfo.sn[1], netInfo.sn[2], netInfo.sn[3]);
//	std::printf("  GATEWAY:     %d.%d.%d.%d\r\n", netInfo.gw[0], netInfo.gw[1], netInfo.gw[2], netInfo.gw[3]);
}
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4618      	mov	r0, r3
 800f132:	3708      	adds	r7, #8
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	20000038 	.word	0x20000038
 800f13c:	08015a7c 	.word	0x08015a7c

0800f140 <HAL_GetTick>:

extern "C" {
uint32_t HAL_GetTick(void) {
 800f140:	b580      	push	{r7, lr}
 800f142:	af00      	add	r7, sp, #0
	return osKernelSysTick();
 800f144:	f7ff fd72 	bl	800ec2c <osKernelSysTick>
 800f148:	4603      	mov	r3, r0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	bd80      	pop	{r7, pc}
	...

0800f150 <startApplication>:

static uint8_t appMem[sizeof(Application)];

static Application *appPointer = nullptr;

extern "C" void startApplication() {
 800f150:	b598      	push	{r3, r4, r7, lr}
 800f152:	af00      	add	r7, sp, #0
	/* --Initialize the kernel. */
	osKernelInitialize();
 800f154:	f7ff fd4a 	bl	800ebec <osKernelInitialize>

	appPointer = new (appMem) Application;
 800f158:	4907      	ldr	r1, [pc, #28]	; (800f178 <startApplication+0x28>)
 800f15a:	f240 404c 	movw	r0, #1100	; 0x44c
 800f15e:	f7fb ff75 	bl	800b04c <_ZnwjPv>
 800f162:	4604      	mov	r4, r0
 800f164:	4620      	mov	r0, r4
 800f166:	f7ff ffd5 	bl	800f114 <_ZN11ApplicationC1Ev>
 800f16a:	4b04      	ldr	r3, [pc, #16]	; (800f17c <startApplication+0x2c>)
 800f16c:	601c      	str	r4, [r3, #0]
	/* --Run the kernel. */
	osKernelStart();
 800f16e:	f7ff fd45 	bl	800ebfc <osKernelStart>

}
 800f172:	bf00      	nop
 800f174:	bd98      	pop	{r3, r4, r7, pc}
 800f176:	bf00      	nop
 800f178:	20000c1c 	.word	0x20000c1c
 800f17c:	20001068 	.word	0x20001068

0800f180 <_Z41__static_initialization_and_destruction_0ii>:
 800f180:	b580      	push	{r7, lr}
 800f182:	b0b4      	sub	sp, #208	; 0xd0
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	6039      	str	r1, [r7, #0]
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	f040 85fe 	bne.w	800fd8e <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f198:	4293      	cmp	r3, r2
 800f19a:	f040 85f8 	bne.w	800fd8e <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	/* --Short-cuts for GPIOs. */
	using _Port=Port::Select;
	using _Pin=Pin::BitMask;

	/* --Port A. */
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 800f19e:	4ba1      	ldr	r3, [pc, #644]	; (800f424 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	3301      	adds	r3, #1
 800f1a4:	4a9f      	ldr	r2, [pc, #636]	; (800f424 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800f1a6:	6013      	str	r3, [r2, #0]
 800f1a8:	4b9e      	ldr	r3, [pc, #632]	; (800f424 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	bf0c      	ite	eq
 800f1b0:	2301      	moveq	r3, #1
 800f1b2:	2300      	movne	r3, #0
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00b      	beq.n	800f1d2 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	81bb      	strh	r3, [r7, #12]
 800f1be:	2301      	movs	r3, #1
 800f1c0:	81fb      	strh	r3, [r7, #14]
 800f1c2:	f107 020e 	add.w	r2, r7, #14
 800f1c6:	f107 030c 	add.w	r3, r7, #12
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4896      	ldr	r0, [pc, #600]	; (800f428 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 800f1ce:	f7fc fafd 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 800f1d2:	4b96      	ldr	r3, [pc, #600]	; (800f42c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	4a94      	ldr	r2, [pc, #592]	; (800f42c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800f1da:	6013      	str	r3, [r2, #0]
 800f1dc:	4b93      	ldr	r3, [pc, #588]	; (800f42c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2b01      	cmp	r3, #1
 800f1e2:	bf0c      	ite	eq
 800f1e4:	2301      	moveq	r3, #1
 800f1e6:	2300      	movne	r3, #0
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00b      	beq.n	800f206 <_Z41__static_initialization_and_destruction_0ii+0x86>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	823b      	strh	r3, [r7, #16]
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	827b      	strh	r3, [r7, #18]
 800f1f6:	f107 0212 	add.w	r2, r7, #18
 800f1fa:	f107 0310 	add.w	r3, r7, #16
 800f1fe:	4619      	mov	r1, r3
 800f200:	488b      	ldr	r0, [pc, #556]	; (800f430 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800f202:	f7fc fae3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 800f206:	4b8b      	ldr	r3, [pc, #556]	; (800f434 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	3301      	adds	r3, #1
 800f20c:	4a89      	ldr	r2, [pc, #548]	; (800f434 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	4b88      	ldr	r3, [pc, #544]	; (800f434 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	2b01      	cmp	r3, #1
 800f216:	bf0c      	ite	eq
 800f218:	2301      	moveq	r3, #1
 800f21a:	2300      	movne	r3, #0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00b      	beq.n	800f23a <_Z41__static_initialization_and_destruction_0ii+0xba>
 800f222:	2300      	movs	r3, #0
 800f224:	82bb      	strh	r3, [r7, #20]
 800f226:	2304      	movs	r3, #4
 800f228:	82fb      	strh	r3, [r7, #22]
 800f22a:	f107 0216 	add.w	r2, r7, #22
 800f22e:	f107 0314 	add.w	r3, r7, #20
 800f232:	4619      	mov	r1, r3
 800f234:	4880      	ldr	r0, [pc, #512]	; (800f438 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 800f236:	f7fc fac9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 800f23a:	4b80      	ldr	r3, [pc, #512]	; (800f43c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	3301      	adds	r3, #1
 800f240:	4a7e      	ldr	r2, [pc, #504]	; (800f43c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800f242:	6013      	str	r3, [r2, #0]
 800f244:	4b7d      	ldr	r3, [pc, #500]	; (800f43c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b01      	cmp	r3, #1
 800f24a:	bf0c      	ite	eq
 800f24c:	2301      	moveq	r3, #1
 800f24e:	2300      	movne	r3, #0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d00b      	beq.n	800f26e <_Z41__static_initialization_and_destruction_0ii+0xee>
 800f256:	2300      	movs	r3, #0
 800f258:	833b      	strh	r3, [r7, #24]
 800f25a:	2308      	movs	r3, #8
 800f25c:	837b      	strh	r3, [r7, #26]
 800f25e:	f107 021a 	add.w	r2, r7, #26
 800f262:	f107 0318 	add.w	r3, r7, #24
 800f266:	4619      	mov	r1, r3
 800f268:	4875      	ldr	r0, [pc, #468]	; (800f440 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800f26a:	f7fc faaf 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 800f26e:	4b75      	ldr	r3, [pc, #468]	; (800f444 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	3301      	adds	r3, #1
 800f274:	4a73      	ldr	r2, [pc, #460]	; (800f444 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800f276:	6013      	str	r3, [r2, #0]
 800f278:	4b72      	ldr	r3, [pc, #456]	; (800f444 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	bf0c      	ite	eq
 800f280:	2301      	moveq	r3, #1
 800f282:	2300      	movne	r3, #0
 800f284:	b2db      	uxtb	r3, r3
 800f286:	2b00      	cmp	r3, #0
 800f288:	d00b      	beq.n	800f2a2 <_Z41__static_initialization_and_destruction_0ii+0x122>
 800f28a:	2300      	movs	r3, #0
 800f28c:	83bb      	strh	r3, [r7, #28]
 800f28e:	2310      	movs	r3, #16
 800f290:	83fb      	strh	r3, [r7, #30]
 800f292:	f107 021e 	add.w	r2, r7, #30
 800f296:	f107 031c 	add.w	r3, r7, #28
 800f29a:	4619      	mov	r1, r3
 800f29c:	486a      	ldr	r0, [pc, #424]	; (800f448 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 800f29e:	f7fc fa95 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 800f2a2:	4b6a      	ldr	r3, [pc, #424]	; (800f44c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	4a68      	ldr	r2, [pc, #416]	; (800f44c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800f2aa:	6013      	str	r3, [r2, #0]
 800f2ac:	4b67      	ldr	r3, [pc, #412]	; (800f44c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	bf0c      	ite	eq
 800f2b4:	2301      	moveq	r3, #1
 800f2b6:	2300      	movne	r3, #0
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d00b      	beq.n	800f2d6 <_Z41__static_initialization_and_destruction_0ii+0x156>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	843b      	strh	r3, [r7, #32]
 800f2c2:	2320      	movs	r3, #32
 800f2c4:	847b      	strh	r3, [r7, #34]	; 0x22
 800f2c6:	f107 0222 	add.w	r2, r7, #34	; 0x22
 800f2ca:	f107 0320 	add.w	r3, r7, #32
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	485f      	ldr	r0, [pc, #380]	; (800f450 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 800f2d2:	f7fc fa7b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 800f2d6:	4b5f      	ldr	r3, [pc, #380]	; (800f454 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	4a5d      	ldr	r2, [pc, #372]	; (800f454 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800f2de:	6013      	str	r3, [r2, #0]
 800f2e0:	4b5c      	ldr	r3, [pc, #368]	; (800f454 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	bf0c      	ite	eq
 800f2e8:	2301      	moveq	r3, #1
 800f2ea:	2300      	movne	r3, #0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00b      	beq.n	800f30a <_Z41__static_initialization_and_destruction_0ii+0x18a>
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f2f6:	2340      	movs	r3, #64	; 0x40
 800f2f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f2fa:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800f2fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f302:	4619      	mov	r1, r3
 800f304:	4854      	ldr	r0, [pc, #336]	; (800f458 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 800f306:	f7fc fa61 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 800f30a:	4b54      	ldr	r3, [pc, #336]	; (800f45c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	3301      	adds	r3, #1
 800f310:	4a52      	ldr	r2, [pc, #328]	; (800f45c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800f312:	6013      	str	r3, [r2, #0]
 800f314:	4b51      	ldr	r3, [pc, #324]	; (800f45c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b01      	cmp	r3, #1
 800f31a:	bf0c      	ite	eq
 800f31c:	2301      	moveq	r3, #1
 800f31e:	2300      	movne	r3, #0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00b      	beq.n	800f33e <_Z41__static_initialization_and_destruction_0ii+0x1be>
 800f326:	2300      	movs	r3, #0
 800f328:	853b      	strh	r3, [r7, #40]	; 0x28
 800f32a:	2380      	movs	r3, #128	; 0x80
 800f32c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800f32e:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 800f332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f336:	4619      	mov	r1, r3
 800f338:	4849      	ldr	r0, [pc, #292]	; (800f460 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 800f33a:	f7fc fa47 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 800f33e:	4b49      	ldr	r3, [pc, #292]	; (800f464 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	3301      	adds	r3, #1
 800f344:	4a47      	ldr	r2, [pc, #284]	; (800f464 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800f346:	6013      	str	r3, [r2, #0]
 800f348:	4b46      	ldr	r3, [pc, #280]	; (800f464 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b01      	cmp	r3, #1
 800f34e:	bf0c      	ite	eq
 800f350:	2301      	moveq	r3, #1
 800f352:	2300      	movne	r3, #0
 800f354:	b2db      	uxtb	r3, r3
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00c      	beq.n	800f374 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 800f35a:	2300      	movs	r3, #0
 800f35c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f35e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f362:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f364:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800f368:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f36c:	4619      	mov	r1, r3
 800f36e:	483e      	ldr	r0, [pc, #248]	; (800f468 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 800f370:	f7fc fa2c 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 800f374:	4b3d      	ldr	r3, [pc, #244]	; (800f46c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	3301      	adds	r3, #1
 800f37a:	4a3c      	ldr	r2, [pc, #240]	; (800f46c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	4b3b      	ldr	r3, [pc, #236]	; (800f46c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b01      	cmp	r3, #1
 800f384:	bf0c      	ite	eq
 800f386:	2301      	moveq	r3, #1
 800f388:	2300      	movne	r3, #0
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d00c      	beq.n	800f3aa <_Z41__static_initialization_and_destruction_0ii+0x22a>
 800f390:	2300      	movs	r3, #0
 800f392:	863b      	strh	r3, [r7, #48]	; 0x30
 800f394:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f398:	867b      	strh	r3, [r7, #50]	; 0x32
 800f39a:	f107 0232 	add.w	r2, r7, #50	; 0x32
 800f39e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f3a2:	4619      	mov	r1, r3
 800f3a4:	4832      	ldr	r0, [pc, #200]	; (800f470 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 800f3a6:	f7fc fa11 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 800f3aa:	4b32      	ldr	r3, [pc, #200]	; (800f474 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	4a30      	ldr	r2, [pc, #192]	; (800f474 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800f3b2:	6013      	str	r3, [r2, #0]
 800f3b4:	4b2f      	ldr	r3, [pc, #188]	; (800f474 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	bf0c      	ite	eq
 800f3bc:	2301      	moveq	r3, #1
 800f3be:	2300      	movne	r3, #0
 800f3c0:	b2db      	uxtb	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d00c      	beq.n	800f3e0 <_Z41__static_initialization_and_destruction_0ii+0x260>
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	86bb      	strh	r3, [r7, #52]	; 0x34
 800f3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f3d0:	f107 0236 	add.w	r2, r7, #54	; 0x36
 800f3d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f3d8:	4619      	mov	r1, r3
 800f3da:	4827      	ldr	r0, [pc, #156]	; (800f478 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 800f3dc:	f7fc f9f6 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 800f3e0:	4b26      	ldr	r3, [pc, #152]	; (800f47c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	3301      	adds	r3, #1
 800f3e6:	4a25      	ldr	r2, [pc, #148]	; (800f47c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800f3e8:	6013      	str	r3, [r2, #0]
 800f3ea:	4b24      	ldr	r3, [pc, #144]	; (800f47c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b01      	cmp	r3, #1
 800f3f0:	bf0c      	ite	eq
 800f3f2:	2301      	moveq	r3, #1
 800f3f4:	2300      	movne	r3, #0
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d00c      	beq.n	800f416 <_Z41__static_initialization_and_destruction_0ii+0x296>
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	873b      	strh	r3, [r7, #56]	; 0x38
 800f400:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f404:	877b      	strh	r3, [r7, #58]	; 0x3a
 800f406:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 800f40a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f40e:	4619      	mov	r1, r3
 800f410:	481b      	ldr	r0, [pc, #108]	; (800f480 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800f412:	f7fc f9db 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 800f416:	4b1b      	ldr	r3, [pc, #108]	; (800f484 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	3301      	adds	r3, #1
 800f41c:	4a19      	ldr	r2, [pc, #100]	; (800f484 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	e032      	b.n	800f488 <_Z41__static_initialization_and_destruction_0ii+0x308>
 800f422:	bf00      	nop
 800f424:	2000106c 	.word	0x2000106c
 800f428:	20000a94 	.word	0x20000a94
 800f42c:	20001070 	.word	0x20001070
 800f430:	20000a9c 	.word	0x20000a9c
 800f434:	20001074 	.word	0x20001074
 800f438:	20000aa4 	.word	0x20000aa4
 800f43c:	20001078 	.word	0x20001078
 800f440:	20000aac 	.word	0x20000aac
 800f444:	2000107c 	.word	0x2000107c
 800f448:	20000ab4 	.word	0x20000ab4
 800f44c:	20001080 	.word	0x20001080
 800f450:	20000abc 	.word	0x20000abc
 800f454:	20001084 	.word	0x20001084
 800f458:	20000ac4 	.word	0x20000ac4
 800f45c:	20001088 	.word	0x20001088
 800f460:	20000acc 	.word	0x20000acc
 800f464:	2000108c 	.word	0x2000108c
 800f468:	20000ad4 	.word	0x20000ad4
 800f46c:	20001090 	.word	0x20001090
 800f470:	20000adc 	.word	0x20000adc
 800f474:	20001094 	.word	0x20001094
 800f478:	20000ae4 	.word	0x20000ae4
 800f47c:	20001098 	.word	0x20001098
 800f480:	20000aec 	.word	0x20000aec
 800f484:	2000109c 	.word	0x2000109c
 800f488:	4bac      	ldr	r3, [pc, #688]	; (800f73c <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	bf0c      	ite	eq
 800f490:	2301      	moveq	r3, #1
 800f492:	2300      	movne	r3, #0
 800f494:	b2db      	uxtb	r3, r3
 800f496:	2b00      	cmp	r3, #0
 800f498:	d00c      	beq.n	800f4b4 <_Z41__static_initialization_and_destruction_0ii+0x334>
 800f49a:	2300      	movs	r3, #0
 800f49c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800f49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800f4a4:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 800f4a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	48a4      	ldr	r0, [pc, #656]	; (800f740 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800f4b0:	f7fc f98c 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 800f4b4:	4ba3      	ldr	r3, [pc, #652]	; (800f744 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	4aa2      	ldr	r2, [pc, #648]	; (800f744 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800f4bc:	6013      	str	r3, [r2, #0]
 800f4be:	4ba1      	ldr	r3, [pc, #644]	; (800f744 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	bf0c      	ite	eq
 800f4c6:	2301      	moveq	r3, #1
 800f4c8:	2300      	movne	r3, #0
 800f4ca:	b2db      	uxtb	r3, r3
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00e      	beq.n	800f4ee <_Z41__static_initialization_and_destruction_0ii+0x36e>
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800f4d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800f4de:	f107 0242 	add.w	r2, r7, #66	; 0x42
 800f4e2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f4e6:	4619      	mov	r1, r3
 800f4e8:	4897      	ldr	r0, [pc, #604]	; (800f748 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800f4ea:	f7fc f96f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 800f4ee:	4b97      	ldr	r3, [pc, #604]	; (800f74c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	4a95      	ldr	r2, [pc, #596]	; (800f74c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800f4f6:	6013      	str	r3, [r2, #0]
 800f4f8:	4b94      	ldr	r3, [pc, #592]	; (800f74c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b01      	cmp	r3, #1
 800f4fe:	bf0c      	ite	eq
 800f500:	2301      	moveq	r3, #1
 800f502:	2300      	movne	r3, #0
 800f504:	b2db      	uxtb	r3, r3
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00e      	beq.n	800f528 <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 800f50a:	2300      	movs	r3, #0
 800f50c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800f510:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f514:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f518:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800f51c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f520:	4619      	mov	r1, r3
 800f522:	488b      	ldr	r0, [pc, #556]	; (800f750 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800f524:	f7fc f952 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 800f528:	4b8a      	ldr	r3, [pc, #552]	; (800f754 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	3301      	adds	r3, #1
 800f52e:	4a89      	ldr	r2, [pc, #548]	; (800f754 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800f530:	6013      	str	r3, [r2, #0]
 800f532:	4b88      	ldr	r3, [pc, #544]	; (800f754 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	2b01      	cmp	r3, #1
 800f538:	bf0c      	ite	eq
 800f53a:	2301      	moveq	r3, #1
 800f53c:	2300      	movne	r3, #0
 800f53e:	b2db      	uxtb	r3, r3
 800f540:	2b00      	cmp	r3, #0
 800f542:	d00e      	beq.n	800f562 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 800f544:	2300      	movs	r3, #0
 800f546:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800f54a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f54e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800f552:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 800f556:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800f55a:	4619      	mov	r1, r3
 800f55c:	487e      	ldr	r0, [pc, #504]	; (800f758 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800f55e:	f7fc f935 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port B. */
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 800f562:	4b7e      	ldr	r3, [pc, #504]	; (800f75c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	3301      	adds	r3, #1
 800f568:	4a7c      	ldr	r2, [pc, #496]	; (800f75c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	4b7b      	ldr	r3, [pc, #492]	; (800f75c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b01      	cmp	r3, #1
 800f572:	bf0c      	ite	eq
 800f574:	2301      	moveq	r3, #1
 800f576:	2300      	movne	r3, #0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d00d      	beq.n	800f59a <_Z41__static_initialization_and_destruction_0ii+0x41a>
 800f57e:	2301      	movs	r3, #1
 800f580:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f584:	2301      	movs	r3, #1
 800f586:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f58a:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 800f58e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800f592:	4619      	mov	r1, r3
 800f594:	4872      	ldr	r0, [pc, #456]	; (800f760 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800f596:	f7fc f919 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 800f59a:	4b72      	ldr	r3, [pc, #456]	; (800f764 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	4a70      	ldr	r2, [pc, #448]	; (800f764 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800f5a2:	6013      	str	r3, [r2, #0]
 800f5a4:	4b6f      	ldr	r3, [pc, #444]	; (800f764 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	bf0c      	ite	eq
 800f5ac:	2301      	moveq	r3, #1
 800f5ae:	2300      	movne	r3, #0
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00d      	beq.n	800f5d2 <_Z41__static_initialization_and_destruction_0ii+0x452>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800f5bc:	2302      	movs	r3, #2
 800f5be:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800f5c2:	f107 0252 	add.w	r2, r7, #82	; 0x52
 800f5c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	4866      	ldr	r0, [pc, #408]	; (800f768 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800f5ce:	f7fc f8fd 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 800f5d2:	4b66      	ldr	r3, [pc, #408]	; (800f76c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	4a64      	ldr	r2, [pc, #400]	; (800f76c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800f5da:	6013      	str	r3, [r2, #0]
 800f5dc:	4b63      	ldr	r3, [pc, #396]	; (800f76c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	bf0c      	ite	eq
 800f5e4:	2301      	moveq	r3, #1
 800f5e6:	2300      	movne	r3, #0
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00d      	beq.n	800f60a <_Z41__static_initialization_and_destruction_0ii+0x48a>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800f5f4:	2304      	movs	r3, #4
 800f5f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f5fa:	f107 0256 	add.w	r2, r7, #86	; 0x56
 800f5fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f602:	4619      	mov	r1, r3
 800f604:	485a      	ldr	r0, [pc, #360]	; (800f770 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800f606:	f7fc f8e1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 800f60a:	4b5a      	ldr	r3, [pc, #360]	; (800f774 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	3301      	adds	r3, #1
 800f610:	4a58      	ldr	r2, [pc, #352]	; (800f774 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800f612:	6013      	str	r3, [r2, #0]
 800f614:	4b57      	ldr	r3, [pc, #348]	; (800f774 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2b01      	cmp	r3, #1
 800f61a:	bf0c      	ite	eq
 800f61c:	2301      	moveq	r3, #1
 800f61e:	2300      	movne	r3, #0
 800f620:	b2db      	uxtb	r3, r3
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00d      	beq.n	800f642 <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 800f626:	2301      	movs	r3, #1
 800f628:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 800f62c:	2308      	movs	r3, #8
 800f62e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 800f632:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 800f636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f63a:	4619      	mov	r1, r3
 800f63c:	484e      	ldr	r0, [pc, #312]	; (800f778 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800f63e:	f7fc f8c5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 800f642:	4b4e      	ldr	r3, [pc, #312]	; (800f77c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	3301      	adds	r3, #1
 800f648:	4a4c      	ldr	r2, [pc, #304]	; (800f77c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800f64a:	6013      	str	r3, [r2, #0]
 800f64c:	4b4b      	ldr	r3, [pc, #300]	; (800f77c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2b01      	cmp	r3, #1
 800f652:	bf0c      	ite	eq
 800f654:	2301      	moveq	r3, #1
 800f656:	2300      	movne	r3, #0
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00d      	beq.n	800f67a <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 800f65e:	2301      	movs	r3, #1
 800f660:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800f664:	2310      	movs	r3, #16
 800f666:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800f66a:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 800f66e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f672:	4619      	mov	r1, r3
 800f674:	4842      	ldr	r0, [pc, #264]	; (800f780 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800f676:	f7fc f8a9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 800f67a:	4b42      	ldr	r3, [pc, #264]	; (800f784 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	3301      	adds	r3, #1
 800f680:	4a40      	ldr	r2, [pc, #256]	; (800f784 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800f682:	6013      	str	r3, [r2, #0]
 800f684:	4b3f      	ldr	r3, [pc, #252]	; (800f784 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	bf0c      	ite	eq
 800f68c:	2301      	moveq	r3, #1
 800f68e:	2300      	movne	r3, #0
 800f690:	b2db      	uxtb	r3, r3
 800f692:	2b00      	cmp	r3, #0
 800f694:	d00d      	beq.n	800f6b2 <_Z41__static_initialization_and_destruction_0ii+0x532>
 800f696:	2301      	movs	r3, #1
 800f698:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 800f69c:	2320      	movs	r3, #32
 800f69e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800f6a2:	f107 0262 	add.w	r2, r7, #98	; 0x62
 800f6a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4836      	ldr	r0, [pc, #216]	; (800f788 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800f6ae:	f7fc f88d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 800f6b2:	4b36      	ldr	r3, [pc, #216]	; (800f78c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	4a34      	ldr	r2, [pc, #208]	; (800f78c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800f6ba:	6013      	str	r3, [r2, #0]
 800f6bc:	4b33      	ldr	r3, [pc, #204]	; (800f78c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	bf0c      	ite	eq
 800f6c4:	2301      	moveq	r3, #1
 800f6c6:	2300      	movne	r3, #0
 800f6c8:	b2db      	uxtb	r3, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00e      	beq.n	800f6ec <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800f6d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f6d8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f6dc:	f107 0266 	add.w	r2, r7, #102	; 0x66
 800f6e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	482a      	ldr	r0, [pc, #168]	; (800f790 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 800f6e8:	f7fc f870 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 800f6ec:	4b29      	ldr	r3, [pc, #164]	; (800f794 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	3301      	adds	r3, #1
 800f6f2:	4a28      	ldr	r2, [pc, #160]	; (800f794 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800f6f4:	6013      	str	r3, [r2, #0]
 800f6f6:	4b27      	ldr	r3, [pc, #156]	; (800f794 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	bf0c      	ite	eq
 800f6fe:	2301      	moveq	r3, #1
 800f700:	2300      	movne	r3, #0
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d00e      	beq.n	800f726 <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 800f708:	2301      	movs	r3, #1
 800f70a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800f70e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f712:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 800f716:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 800f71a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f71e:	4619      	mov	r1, r3
 800f720:	481d      	ldr	r0, [pc, #116]	; (800f798 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 800f722:	f7fc f853 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 800f726:	4b1d      	ldr	r3, [pc, #116]	; (800f79c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	4a1b      	ldr	r2, [pc, #108]	; (800f79c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800f72e:	6013      	str	r3, [r2, #0]
 800f730:	4b1a      	ldr	r3, [pc, #104]	; (800f79c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	2b01      	cmp	r3, #1
 800f736:	bf08      	it	eq
 800f738:	2301      	moveq	r3, #1
 800f73a:	e031      	b.n	800f7a0 <_Z41__static_initialization_and_destruction_0ii+0x620>
 800f73c:	2000109c 	.word	0x2000109c
 800f740:	20000af4 	.word	0x20000af4
 800f744:	200010a0 	.word	0x200010a0
 800f748:	20000afc 	.word	0x20000afc
 800f74c:	200010a4 	.word	0x200010a4
 800f750:	20000b04 	.word	0x20000b04
 800f754:	200010a8 	.word	0x200010a8
 800f758:	20000b0c 	.word	0x20000b0c
 800f75c:	200010ac 	.word	0x200010ac
 800f760:	20000b14 	.word	0x20000b14
 800f764:	200010b0 	.word	0x200010b0
 800f768:	20000b1c 	.word	0x20000b1c
 800f76c:	200010b4 	.word	0x200010b4
 800f770:	20000b24 	.word	0x20000b24
 800f774:	200010b8 	.word	0x200010b8
 800f778:	20000b2c 	.word	0x20000b2c
 800f77c:	200010bc 	.word	0x200010bc
 800f780:	20000b34 	.word	0x20000b34
 800f784:	200010c0 	.word	0x200010c0
 800f788:	20000b3c 	.word	0x20000b3c
 800f78c:	200010c4 	.word	0x200010c4
 800f790:	20000b44 	.word	0x20000b44
 800f794:	200010c8 	.word	0x200010c8
 800f798:	20000b4c 	.word	0x20000b4c
 800f79c:	200010cc 	.word	0x200010cc
 800f7a0:	bf18      	it	ne
 800f7a2:	2300      	movne	r3, #0
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00e      	beq.n	800f7c8 <_Z41__static_initialization_and_destruction_0ii+0x648>
 800f7aa:	2301      	movs	r3, #1
 800f7ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800f7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800f7b8:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 800f7bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	48ae      	ldr	r0, [pc, #696]	; (800fa7c <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 800f7c4:	f7fc f802 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 800f7c8:	4bad      	ldr	r3, [pc, #692]	; (800fa80 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	4aac      	ldr	r2, [pc, #688]	; (800fa80 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800f7d0:	6013      	str	r3, [r2, #0]
 800f7d2:	4bab      	ldr	r3, [pc, #684]	; (800fa80 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	bf0c      	ite	eq
 800f7da:	2301      	moveq	r3, #1
 800f7dc:	2300      	movne	r3, #0
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d00e      	beq.n	800f802 <_Z41__static_initialization_and_destruction_0ii+0x682>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800f7ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f7ee:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800f7f2:	f107 0272 	add.w	r2, r7, #114	; 0x72
 800f7f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	48a1      	ldr	r0, [pc, #644]	; (800fa84 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 800f7fe:	f7fb ffe5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 800f802:	4ba1      	ldr	r3, [pc, #644]	; (800fa88 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	3301      	adds	r3, #1
 800f808:	4a9f      	ldr	r2, [pc, #636]	; (800fa88 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800f80a:	6013      	str	r3, [r2, #0]
 800f80c:	4b9e      	ldr	r3, [pc, #632]	; (800fa88 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	2b01      	cmp	r3, #1
 800f812:	bf0c      	ite	eq
 800f814:	2301      	moveq	r3, #1
 800f816:	2300      	movne	r3, #0
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00e      	beq.n	800f83c <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 800f81e:	2301      	movs	r3, #1
 800f820:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800f824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f828:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800f82c:	f107 0276 	add.w	r2, r7, #118	; 0x76
 800f830:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800f834:	4619      	mov	r1, r3
 800f836:	4895      	ldr	r0, [pc, #596]	; (800fa8c <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 800f838:	f7fb ffc8 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 800f83c:	4b94      	ldr	r3, [pc, #592]	; (800fa90 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	3301      	adds	r3, #1
 800f842:	4a93      	ldr	r2, [pc, #588]	; (800fa90 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800f844:	6013      	str	r3, [r2, #0]
 800f846:	4b92      	ldr	r3, [pc, #584]	; (800fa90 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	bf0c      	ite	eq
 800f84e:	2301      	moveq	r3, #1
 800f850:	2300      	movne	r3, #0
 800f852:	b2db      	uxtb	r3, r3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00e      	beq.n	800f876 <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 800f858:	2301      	movs	r3, #1
 800f85a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800f85e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f862:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800f866:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 800f86a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800f86e:	4619      	mov	r1, r3
 800f870:	4888      	ldr	r0, [pc, #544]	; (800fa94 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 800f872:	f7fb ffab 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 800f876:	4b88      	ldr	r3, [pc, #544]	; (800fa98 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	3301      	adds	r3, #1
 800f87c:	4a86      	ldr	r2, [pc, #536]	; (800fa98 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800f87e:	6013      	str	r3, [r2, #0]
 800f880:	4b85      	ldr	r3, [pc, #532]	; (800fa98 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2b01      	cmp	r3, #1
 800f886:	bf0c      	ite	eq
 800f888:	2301      	moveq	r3, #1
 800f88a:	2300      	movne	r3, #0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00e      	beq.n	800f8b0 <_Z41__static_initialization_and_destruction_0ii+0x730>
 800f892:	2301      	movs	r3, #1
 800f894:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800f898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f89c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800f8a0:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 800f8a4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	487c      	ldr	r0, [pc, #496]	; (800fa9c <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 800f8ac:	f7fb ff8e 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 800f8b0:	4b7b      	ldr	r3, [pc, #492]	; (800faa0 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	3301      	adds	r3, #1
 800f8b6:	4a7a      	ldr	r2, [pc, #488]	; (800faa0 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800f8b8:	6013      	str	r3, [r2, #0]
 800f8ba:	4b79      	ldr	r3, [pc, #484]	; (800faa0 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	bf0c      	ite	eq
 800f8c2:	2301      	moveq	r3, #1
 800f8c4:	2300      	movne	r3, #0
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d00e      	beq.n	800f8ea <_Z41__static_initialization_and_destruction_0ii+0x76a>
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 800f8d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8d6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 800f8da:	f107 0282 	add.w	r2, r7, #130	; 0x82
 800f8de:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	486f      	ldr	r0, [pc, #444]	; (800faa4 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 800f8e6:	f7fb ff71 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port C. */
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 800f8ea:	4b6f      	ldr	r3, [pc, #444]	; (800faa8 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	4a6d      	ldr	r2, [pc, #436]	; (800faa8 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800f8f2:	6013      	str	r3, [r2, #0]
 800f8f4:	4b6c      	ldr	r3, [pc, #432]	; (800faa8 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b01      	cmp	r3, #1
 800f8fa:	bf0c      	ite	eq
 800f8fc:	2301      	moveq	r3, #1
 800f8fe:	2300      	movne	r3, #0
 800f900:	b2db      	uxtb	r3, r3
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00d      	beq.n	800f922 <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 800f906:	2302      	movs	r3, #2
 800f908:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 800f90c:	2301      	movs	r3, #1
 800f90e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 800f912:	f107 0286 	add.w	r2, r7, #134	; 0x86
 800f916:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800f91a:	4619      	mov	r1, r3
 800f91c:	4863      	ldr	r0, [pc, #396]	; (800faac <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 800f91e:	f7fb ff55 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 800f922:	4b63      	ldr	r3, [pc, #396]	; (800fab0 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	3301      	adds	r3, #1
 800f928:	4a61      	ldr	r2, [pc, #388]	; (800fab0 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800f92a:	6013      	str	r3, [r2, #0]
 800f92c:	4b60      	ldr	r3, [pc, #384]	; (800fab0 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b01      	cmp	r3, #1
 800f932:	bf0c      	ite	eq
 800f934:	2301      	moveq	r3, #1
 800f936:	2300      	movne	r3, #0
 800f938:	b2db      	uxtb	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d00d      	beq.n	800f95a <_Z41__static_initialization_and_destruction_0ii+0x7da>
 800f93e:	2302      	movs	r3, #2
 800f940:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800f944:	2302      	movs	r3, #2
 800f946:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800f94a:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 800f94e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f952:	4619      	mov	r1, r3
 800f954:	4857      	ldr	r0, [pc, #348]	; (800fab4 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 800f956:	f7fb ff39 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 800f95a:	4b57      	ldr	r3, [pc, #348]	; (800fab8 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3301      	adds	r3, #1
 800f960:	4a55      	ldr	r2, [pc, #340]	; (800fab8 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800f962:	6013      	str	r3, [r2, #0]
 800f964:	4b54      	ldr	r3, [pc, #336]	; (800fab8 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b01      	cmp	r3, #1
 800f96a:	bf0c      	ite	eq
 800f96c:	2301      	moveq	r3, #1
 800f96e:	2300      	movne	r3, #0
 800f970:	b2db      	uxtb	r3, r3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d00d      	beq.n	800f992 <_Z41__static_initialization_and_destruction_0ii+0x812>
 800f976:	2302      	movs	r3, #2
 800f978:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800f97c:	2304      	movs	r3, #4
 800f97e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800f982:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 800f986:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800f98a:	4619      	mov	r1, r3
 800f98c:	484b      	ldr	r0, [pc, #300]	; (800fabc <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 800f98e:	f7fb ff1d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 800f992:	4b4b      	ldr	r3, [pc, #300]	; (800fac0 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	3301      	adds	r3, #1
 800f998:	4a49      	ldr	r2, [pc, #292]	; (800fac0 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800f99a:	6013      	str	r3, [r2, #0]
 800f99c:	4b48      	ldr	r3, [pc, #288]	; (800fac0 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	2b01      	cmp	r3, #1
 800f9a2:	bf0c      	ite	eq
 800f9a4:	2301      	moveq	r3, #1
 800f9a6:	2300      	movne	r3, #0
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d00d      	beq.n	800f9ca <_Z41__static_initialization_and_destruction_0ii+0x84a>
 800f9ae:	2302      	movs	r3, #2
 800f9b0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800f9b4:	2308      	movs	r3, #8
 800f9b6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800f9ba:	f107 0292 	add.w	r2, r7, #146	; 0x92
 800f9be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	483f      	ldr	r0, [pc, #252]	; (800fac4 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 800f9c6:	f7fb ff01 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 800f9ca:	4b3f      	ldr	r3, [pc, #252]	; (800fac8 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	3301      	adds	r3, #1
 800f9d0:	4a3d      	ldr	r2, [pc, #244]	; (800fac8 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800f9d2:	6013      	str	r3, [r2, #0]
 800f9d4:	4b3c      	ldr	r3, [pc, #240]	; (800fac8 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	bf0c      	ite	eq
 800f9dc:	2301      	moveq	r3, #1
 800f9de:	2300      	movne	r3, #0
 800f9e0:	b2db      	uxtb	r3, r3
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d00d      	beq.n	800fa02 <_Z41__static_initialization_and_destruction_0ii+0x882>
 800f9e6:	2302      	movs	r3, #2
 800f9e8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800f9ec:	2310      	movs	r3, #16
 800f9ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800f9f2:	f107 0296 	add.w	r2, r7, #150	; 0x96
 800f9f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4833      	ldr	r0, [pc, #204]	; (800facc <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 800f9fe:	f7fb fee5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 800fa02:	4b33      	ldr	r3, [pc, #204]	; (800fad0 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	3301      	adds	r3, #1
 800fa08:	4a31      	ldr	r2, [pc, #196]	; (800fad0 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800fa0a:	6013      	str	r3, [r2, #0]
 800fa0c:	4b30      	ldr	r3, [pc, #192]	; (800fad0 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	bf0c      	ite	eq
 800fa14:	2301      	moveq	r3, #1
 800fa16:	2300      	movne	r3, #0
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00d      	beq.n	800fa3a <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 800fa1e:	2302      	movs	r3, #2
 800fa20:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 800fa24:	2320      	movs	r3, #32
 800fa26:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800fa2a:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 800fa2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800fa32:	4619      	mov	r1, r3
 800fa34:	4827      	ldr	r0, [pc, #156]	; (800fad4 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 800fa36:	f7fb fec9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 800fa3a:	4b27      	ldr	r3, [pc, #156]	; (800fad8 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3301      	adds	r3, #1
 800fa40:	4a25      	ldr	r2, [pc, #148]	; (800fad8 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800fa42:	6013      	str	r3, [r2, #0]
 800fa44:	4b24      	ldr	r3, [pc, #144]	; (800fad8 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	bf0c      	ite	eq
 800fa4c:	2301      	moveq	r3, #1
 800fa4e:	2300      	movne	r3, #0
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d00d      	beq.n	800fa72 <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 800fa56:	2302      	movs	r3, #2
 800fa58:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 800fa5c:	2340      	movs	r3, #64	; 0x40
 800fa5e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800fa62:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 800fa66:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	481b      	ldr	r0, [pc, #108]	; (800fadc <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 800fa6e:	f7fb fead 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 800fa72:	4b1b      	ldr	r3, [pc, #108]	; (800fae0 <_Z41__static_initialization_and_destruction_0ii+0x960>)
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3301      	adds	r3, #1
 800fa78:	e034      	b.n	800fae4 <_Z41__static_initialization_and_destruction_0ii+0x964>
 800fa7a:	bf00      	nop
 800fa7c:	20000b54 	.word	0x20000b54
 800fa80:	200010d0 	.word	0x200010d0
 800fa84:	20000b5c 	.word	0x20000b5c
 800fa88:	200010d4 	.word	0x200010d4
 800fa8c:	20000b64 	.word	0x20000b64
 800fa90:	200010d8 	.word	0x200010d8
 800fa94:	20000b6c 	.word	0x20000b6c
 800fa98:	200010dc 	.word	0x200010dc
 800fa9c:	20000b74 	.word	0x20000b74
 800faa0:	200010e0 	.word	0x200010e0
 800faa4:	20000b7c 	.word	0x20000b7c
 800faa8:	200010e4 	.word	0x200010e4
 800faac:	20000b84 	.word	0x20000b84
 800fab0:	200010e8 	.word	0x200010e8
 800fab4:	20000b8c 	.word	0x20000b8c
 800fab8:	200010ec 	.word	0x200010ec
 800fabc:	20000b94 	.word	0x20000b94
 800fac0:	200010f0 	.word	0x200010f0
 800fac4:	20000b9c 	.word	0x20000b9c
 800fac8:	200010f4 	.word	0x200010f4
 800facc:	20000ba4 	.word	0x20000ba4
 800fad0:	200010f8 	.word	0x200010f8
 800fad4:	20000bac 	.word	0x20000bac
 800fad8:	200010fc 	.word	0x200010fc
 800fadc:	20000bb4 	.word	0x20000bb4
 800fae0:	20001100 	.word	0x20001100
 800fae4:	4aac      	ldr	r2, [pc, #688]	; (800fd98 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	4bab      	ldr	r3, [pc, #684]	; (800fd98 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	2b01      	cmp	r3, #1
 800faee:	bf0c      	ite	eq
 800faf0:	2301      	moveq	r3, #1
 800faf2:	2300      	movne	r3, #0
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d00d      	beq.n	800fb16 <_Z41__static_initialization_and_destruction_0ii+0x996>
 800fafa:	2302      	movs	r3, #2
 800fafc:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800fb00:	2380      	movs	r3, #128	; 0x80
 800fb02:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 800fb06:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 800fb0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800fb0e:	4619      	mov	r1, r3
 800fb10:	48a2      	ldr	r0, [pc, #648]	; (800fd9c <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 800fb12:	f7fb fe5b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 800fb16:	4ba2      	ldr	r3, [pc, #648]	; (800fda0 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	4aa0      	ldr	r2, [pc, #640]	; (800fda0 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800fb1e:	6013      	str	r3, [r2, #0]
 800fb20:	4b9f      	ldr	r3, [pc, #636]	; (800fda0 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	bf0c      	ite	eq
 800fb28:	2301      	moveq	r3, #1
 800fb2a:	2300      	movne	r3, #0
 800fb2c:	b2db      	uxtb	r3, r3
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d00e      	beq.n	800fb50 <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 800fb32:	2302      	movs	r3, #2
 800fb34:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800fb38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb3c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800fb40:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 800fb44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4896      	ldr	r0, [pc, #600]	; (800fda4 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 800fb4c:	f7fb fe3e 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 800fb50:	4b95      	ldr	r3, [pc, #596]	; (800fda8 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	3301      	adds	r3, #1
 800fb56:	4a94      	ldr	r2, [pc, #592]	; (800fda8 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800fb58:	6013      	str	r3, [r2, #0]
 800fb5a:	4b93      	ldr	r3, [pc, #588]	; (800fda8 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	bf0c      	ite	eq
 800fb62:	2301      	moveq	r3, #1
 800fb64:	2300      	movne	r3, #0
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d00e      	beq.n	800fb8a <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 800fb6c:	2302      	movs	r3, #2
 800fb6e:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800fb72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb76:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800fb7a:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 800fb7e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fb82:	4619      	mov	r1, r3
 800fb84:	4889      	ldr	r0, [pc, #548]	; (800fdac <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 800fb86:	f7fb fe21 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 800fb8a:	4b89      	ldr	r3, [pc, #548]	; (800fdb0 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	3301      	adds	r3, #1
 800fb90:	4a87      	ldr	r2, [pc, #540]	; (800fdb0 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800fb92:	6013      	str	r3, [r2, #0]
 800fb94:	4b86      	ldr	r3, [pc, #536]	; (800fdb0 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	bf0c      	ite	eq
 800fb9c:	2301      	moveq	r3, #1
 800fb9e:	2300      	movne	r3, #0
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00e      	beq.n	800fbc4 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 800fba6:	2302      	movs	r3, #2
 800fba8:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 800fbac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbb0:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800fbb4:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 800fbb8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	487d      	ldr	r0, [pc, #500]	; (800fdb4 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 800fbc0:	f7fb fe04 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 800fbc4:	4b7c      	ldr	r3, [pc, #496]	; (800fdb8 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	4a7b      	ldr	r2, [pc, #492]	; (800fdb8 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800fbcc:	6013      	str	r3, [r2, #0]
 800fbce:	4b7a      	ldr	r3, [pc, #488]	; (800fdb8 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b01      	cmp	r3, #1
 800fbd4:	bf0c      	ite	eq
 800fbd6:	2301      	moveq	r3, #1
 800fbd8:	2300      	movne	r3, #0
 800fbda:	b2db      	uxtb	r3, r3
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d00e      	beq.n	800fbfe <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 800fbe0:	2302      	movs	r3, #2
 800fbe2:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800fbe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fbea:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 800fbee:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 800fbf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fbf6:	4619      	mov	r1, r3
 800fbf8:	4870      	ldr	r0, [pc, #448]	; (800fdbc <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 800fbfa:	f7fb fde7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 800fbfe:	4b70      	ldr	r3, [pc, #448]	; (800fdc0 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	3301      	adds	r3, #1
 800fc04:	4a6e      	ldr	r2, [pc, #440]	; (800fdc0 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800fc06:	6013      	str	r3, [r2, #0]
 800fc08:	4b6d      	ldr	r3, [pc, #436]	; (800fdc0 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	bf0c      	ite	eq
 800fc10:	2301      	moveq	r3, #1
 800fc12:	2300      	movne	r3, #0
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d00e      	beq.n	800fc38 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800fc20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc24:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800fc28:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 800fc2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800fc30:	4619      	mov	r1, r3
 800fc32:	4864      	ldr	r0, [pc, #400]	; (800fdc4 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 800fc34:	f7fb fdca 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 800fc38:	4b63      	ldr	r3, [pc, #396]	; (800fdc8 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	4a62      	ldr	r2, [pc, #392]	; (800fdc8 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800fc40:	6013      	str	r3, [r2, #0]
 800fc42:	4b61      	ldr	r3, [pc, #388]	; (800fdc8 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	bf0c      	ite	eq
 800fc4a:	2301      	moveq	r3, #1
 800fc4c:	2300      	movne	r3, #0
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d00e      	beq.n	800fc72 <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 800fc54:	2302      	movs	r3, #2
 800fc56:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800fc5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc5e:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 800fc62:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 800fc66:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4857      	ldr	r0, [pc, #348]	; (800fdcc <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 800fc6e:	f7fb fdad 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 800fc72:	4b57      	ldr	r3, [pc, #348]	; (800fdd0 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	3301      	adds	r3, #1
 800fc78:	4a55      	ldr	r2, [pc, #340]	; (800fdd0 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800fc7a:	6013      	str	r3, [r2, #0]
 800fc7c:	4b54      	ldr	r3, [pc, #336]	; (800fdd0 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	2b01      	cmp	r3, #1
 800fc82:	bf0c      	ite	eq
 800fc84:	2301      	moveq	r3, #1
 800fc86:	2300      	movne	r3, #0
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00e      	beq.n	800fcac <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 800fc8e:	2302      	movs	r3, #2
 800fc90:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 800fc94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fc98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800fc9c:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 800fca0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fca4:	4619      	mov	r1, r3
 800fca6:	484b      	ldr	r0, [pc, #300]	; (800fdd4 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 800fca8:	f7fb fd90 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 800fcac:	4b4a      	ldr	r3, [pc, #296]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	4a49      	ldr	r2, [pc, #292]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800fcb4:	6013      	str	r3, [r2, #0]
 800fcb6:	4b48      	ldr	r3, [pc, #288]	; (800fdd8 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	2b01      	cmp	r3, #1
 800fcbc:	bf0c      	ite	eq
 800fcbe:	2301      	moveq	r3, #1
 800fcc0:	2300      	movne	r3, #0
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d00e      	beq.n	800fce6 <_Z41__static_initialization_and_destruction_0ii+0xb66>
 800fcc8:	2302      	movs	r3, #2
 800fcca:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 800fcce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fcd2:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 800fcd6:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 800fcda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800fcde:	4619      	mov	r1, r3
 800fce0:	483e      	ldr	r0, [pc, #248]	; (800fddc <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 800fce2:	f7fb fd73 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port D. */
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 800fce6:	4b3e      	ldr	r3, [pc, #248]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3301      	adds	r3, #1
 800fcec:	4a3c      	ldr	r2, [pc, #240]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	4b3b      	ldr	r3, [pc, #236]	; (800fde0 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b01      	cmp	r3, #1
 800fcf6:	bf0c      	ite	eq
 800fcf8:	2301      	moveq	r3, #1
 800fcfa:	2300      	movne	r3, #0
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00d      	beq.n	800fd1e <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 800fd02:	2303      	movs	r3, #3
 800fd04:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 800fd08:	2304      	movs	r3, #4
 800fd0a:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 800fd0e:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 800fd12:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fd16:	4619      	mov	r1, r3
 800fd18:	4832      	ldr	r0, [pc, #200]	; (800fde4 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 800fd1a:	f7fb fd57 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port H. */
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 800fd1e:	4b32      	ldr	r3, [pc, #200]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	3301      	adds	r3, #1
 800fd24:	4a30      	ldr	r2, [pc, #192]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800fd26:	6013      	str	r3, [r2, #0]
 800fd28:	4b2f      	ldr	r3, [pc, #188]	; (800fde8 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	bf0c      	ite	eq
 800fd30:	2301      	moveq	r3, #1
 800fd32:	2300      	movne	r3, #0
 800fd34:	b2db      	uxtb	r3, r3
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00d      	beq.n	800fd56 <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 800fd3a:	2307      	movs	r3, #7
 800fd3c:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 800fd40:	2301      	movs	r3, #1
 800fd42:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 800fd46:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 800fd4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800fd4e:	4619      	mov	r1, r3
 800fd50:	4826      	ldr	r0, [pc, #152]	; (800fdec <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 800fd52:	f7fb fd3b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 800fd56:	4b26      	ldr	r3, [pc, #152]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3301      	adds	r3, #1
 800fd5c:	4a24      	ldr	r2, [pc, #144]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800fd5e:	6013      	str	r3, [r2, #0]
 800fd60:	4b23      	ldr	r3, [pc, #140]	; (800fdf0 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2b01      	cmp	r3, #1
 800fd66:	bf0c      	ite	eq
 800fd68:	2301      	moveq	r3, #1
 800fd6a:	2300      	movne	r3, #0
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00d      	beq.n	800fd8e <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 800fd72:	2307      	movs	r3, #7
 800fd74:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 800fd78:	2302      	movs	r3, #2
 800fd7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 800fd7e:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 800fd82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fd86:	4619      	mov	r1, r3
 800fd88:	481a      	ldr	r0, [pc, #104]	; (800fdf4 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 800fd8a:	f7fb fd1f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 800fd8e:	bf00      	nop
 800fd90:	37d0      	adds	r7, #208	; 0xd0
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}
 800fd96:	bf00      	nop
 800fd98:	20001100 	.word	0x20001100
 800fd9c:	20000bbc 	.word	0x20000bbc
 800fda0:	20001104 	.word	0x20001104
 800fda4:	20000bc4 	.word	0x20000bc4
 800fda8:	20001108 	.word	0x20001108
 800fdac:	20000bcc 	.word	0x20000bcc
 800fdb0:	2000110c 	.word	0x2000110c
 800fdb4:	20000bd4 	.word	0x20000bd4
 800fdb8:	20001110 	.word	0x20001110
 800fdbc:	20000bdc 	.word	0x20000bdc
 800fdc0:	20001114 	.word	0x20001114
 800fdc4:	20000be4 	.word	0x20000be4
 800fdc8:	20001118 	.word	0x20001118
 800fdcc:	20000bec 	.word	0x20000bec
 800fdd0:	2000111c 	.word	0x2000111c
 800fdd4:	20000bf4 	.word	0x20000bf4
 800fdd8:	20001120 	.word	0x20001120
 800fddc:	20000bfc 	.word	0x20000bfc
 800fde0:	20001124 	.word	0x20001124
 800fde4:	20000c04 	.word	0x20000c04
 800fde8:	20001128 	.word	0x20001128
 800fdec:	20000c0c 	.word	0x20000c0c
 800fdf0:	2000112c 	.word	0x2000112c
 800fdf4:	20000c14 	.word	0x20000c14

0800fdf8 <_GLOBAL__sub_I__Z6cs_selv>:
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	af00      	add	r7, sp, #0
 800fdfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800fe00:	2001      	movs	r0, #1
 800fe02:	f7ff f9bd 	bl	800f180 <_Z41__static_initialization_and_destruction_0ii>
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <_Z7bufsizePc>:
char buffer[BUFFER_SIZE];  // to store strings..

int i=0;

int bufsize (char *buf)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
	int i=0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	1c5a      	adds	r2, r3, #1
 800fe18:	607a      	str	r2, [r7, #4]
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	bf14      	ite	ne
 800fe20:	2301      	movne	r3, #1
 800fe22:	2300      	moveq	r3, #0
 800fe24:	b2db      	uxtb	r3, r3
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <_Z7bufsizePc+0x2a>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	3301      	adds	r3, #1
 800fe2e:	60fb      	str	r3, [r7, #12]
 800fe30:	e7f0      	b.n	800fe14 <_Z7bufsizePc+0xc>
	return i;
 800fe32:	68fb      	ldr	r3, [r7, #12]
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3714      	adds	r7, #20
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <_Z12clear_bufferv>:

void clear_buffer (void)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
	for (int i=0; i<BUFFER_SIZE; i++) buffer[i] = '\0';
 800fe46:	2300      	movs	r3, #0
 800fe48:	607b      	str	r3, [r7, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2b7f      	cmp	r3, #127	; 0x7f
 800fe4e:	dc08      	bgt.n	800fe62 <_Z12clear_bufferv+0x22>
 800fe50:	4a07      	ldr	r2, [pc, #28]	; (800fe70 <_Z12clear_bufferv+0x30>)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	4413      	add	r3, r2
 800fe56:	2200      	movs	r2, #0
 800fe58:	701a      	strb	r2, [r3, #0]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	3301      	adds	r3, #1
 800fe5e:	607b      	str	r3, [r7, #4]
 800fe60:	e7f3      	b.n	800fe4a <_Z12clear_bufferv+0xa>
}
 800fe62:	bf00      	nop
 800fe64:	370c      	adds	r7, #12
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	200019b4 	.word	0x200019b4

0800fe74 <_ZN6SDTaskC1EPKct10osPriorityb>:

SDTask::SDTask(const char * const name,
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b086      	sub	sp, #24
 800fe78:	af02      	add	r7, sp, #8
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	4611      	mov	r1, r2
 800fe80:	461a      	mov	r2, r3
 800fe82:	460b      	mov	r3, r1
 800fe84:	80fb      	strh	r3, [r7, #6]
 800fe86:	4613      	mov	r3, r2
 800fe88:	80bb      	strh	r3, [r7, #4]
            uint16_t    stackDepth,
			osPriority priority,
            bool        immidiateStart):Task(name, stackDepth, priority, immidiateStart){
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800fe90:	88fa      	ldrh	r2, [r7, #6]
 800fe92:	7e3b      	ldrb	r3, [r7, #24]
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	460b      	mov	r3, r1
 800fe98:	68b9      	ldr	r1, [r7, #8]
 800fe9a:	f7fe fc2d 	bl	800e6f8 <_ZN4RTOS4TaskC1EPKct10osPriorityb>
 800fe9e:	4a04      	ldr	r2, [pc, #16]	; (800feb0 <_ZN6SDTaskC1EPKct10osPriorityb+0x3c>)
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	601a      	str	r2, [r3, #0]
}
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	0801626c 	.word	0x0801626c

0800feb4 <_ZN6SDTask6m_taskEv>:

void SDTask::m_task(){
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  printf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 800febc:	480b      	ldr	r0, [pc, #44]	; (800feec <_ZN6SDTask6m_taskEv+0x38>)
 800febe:	f003 fa39 	bl	8013334 <puts>

  HAL_Delay (500);
 800fec2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fec6:	f7f2 fb1f 	bl	8002508 <HAL_Delay>

  fresult = f_mount(&fs, "", 1);
 800feca:	2201      	movs	r2, #1
 800fecc:	4908      	ldr	r1, [pc, #32]	; (800fef0 <_ZN6SDTask6m_taskEv+0x3c>)
 800fece:	4809      	ldr	r0, [pc, #36]	; (800fef4 <_ZN6SDTask6m_taskEv+0x40>)
 800fed0:	f7f9 fd3e 	bl	8009950 <f_mount>
 800fed4:	4603      	mov	r3, r0
 800fed6:	461a      	mov	r2, r3
 800fed8:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <_ZN6SDTask6m_taskEv+0x44>)
 800feda:	701a      	strb	r2, [r3, #0]
  if (fresult != FR_OK) printf ("ERROR!!! in mounting SD CARD...\n\n");
 800fedc:	4b06      	ldr	r3, [pc, #24]	; (800fef8 <_ZN6SDTask6m_taskEv+0x44>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00d      	beq.n	800ff00 <_ZN6SDTask6m_taskEv+0x4c>
 800fee4:	4805      	ldr	r0, [pc, #20]	; (800fefc <_ZN6SDTask6m_taskEv+0x48>)
 800fee6:	f003 fa25 	bl	8013334 <puts>
 800feea:	e00c      	b.n	800ff06 <_ZN6SDTask6m_taskEv+0x52>
 800feec:	08015a84 	.word	0x08015a84
 800fef0:	08015aa4 	.word	0x08015aa4
 800fef4:	20001130 	.word	0x20001130
 800fef8:	20001998 	.word	0x20001998
 800fefc:	08015aa8 	.word	0x08015aa8
  else printf("SD CARD mounted successfully...\n\n");
 800ff00:	48a8      	ldr	r0, [pc, #672]	; (80101a4 <_ZN6SDTask6m_taskEv+0x2f0>)
 800ff02:	f003 fa17 	bl	8013334 <puts>


    	/*************** Card capacity details ********************/

    	/* Check free space */
    	f_getfree("", &fre_clust, &pfs);
 800ff06:	4aa8      	ldr	r2, [pc, #672]	; (80101a8 <_ZN6SDTask6m_taskEv+0x2f4>)
 800ff08:	49a8      	ldr	r1, [pc, #672]	; (80101ac <_ZN6SDTask6m_taskEv+0x2f8>)
 800ff0a:	48a9      	ldr	r0, [pc, #676]	; (80101b0 <_ZN6SDTask6m_taskEv+0x2fc>)
 800ff0c:	f7fa fcf1 	bl	800a8f2 <f_getfree>

    	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800ff10:	4ba5      	ldr	r3, [pc, #660]	; (80101a8 <_ZN6SDTask6m_taskEv+0x2f4>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	69db      	ldr	r3, [r3, #28]
 800ff16:	3b02      	subs	r3, #2
 800ff18:	4aa3      	ldr	r2, [pc, #652]	; (80101a8 <_ZN6SDTask6m_taskEv+0x2f4>)
 800ff1a:	6812      	ldr	r2, [r2, #0]
 800ff1c:	8952      	ldrh	r2, [r2, #10]
 800ff1e:	fb02 f303 	mul.w	r3, r2, r3
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7f0 fc22 	bl	800076c <__aeabi_ui2d>
 800ff28:	f04f 0200 	mov.w	r2, #0
 800ff2c:	4ba1      	ldr	r3, [pc, #644]	; (80101b4 <_ZN6SDTask6m_taskEv+0x300>)
 800ff2e:	f7f0 f9b1 	bl	8000294 <__aeabi_dmul>
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	4610      	mov	r0, r2
 800ff38:	4619      	mov	r1, r3
 800ff3a:	f7f0 fc91 	bl	8000860 <__aeabi_d2uiz>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	4a9d      	ldr	r2, [pc, #628]	; (80101b8 <_ZN6SDTask6m_taskEv+0x304>)
 800ff42:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Total Size: \t%lu\n",total);
 800ff44:	4b9c      	ldr	r3, [pc, #624]	; (80101b8 <_ZN6SDTask6m_taskEv+0x304>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	499c      	ldr	r1, [pc, #624]	; (80101bc <_ZN6SDTask6m_taskEv+0x308>)
 800ff4c:	489c      	ldr	r0, [pc, #624]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 800ff4e:	f003 fa4d 	bl	80133ec <siprintf>
    	printf(buffer);
 800ff52:	489b      	ldr	r0, [pc, #620]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 800ff54:	f003 f968 	bl	8013228 <iprintf>
    	clear_buffer();
 800ff58:	f7ff ff72 	bl	800fe40 <_Z12clear_bufferv>
    	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800ff5c:	4b92      	ldr	r3, [pc, #584]	; (80101a8 <_ZN6SDTask6m_taskEv+0x2f4>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	895b      	ldrh	r3, [r3, #10]
 800ff62:	461a      	mov	r2, r3
 800ff64:	4b91      	ldr	r3, [pc, #580]	; (80101ac <_ZN6SDTask6m_taskEv+0x2f8>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	fb02 f303 	mul.w	r3, r2, r3
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7f0 fbfd 	bl	800076c <__aeabi_ui2d>
 800ff72:	f04f 0200 	mov.w	r2, #0
 800ff76:	4b8f      	ldr	r3, [pc, #572]	; (80101b4 <_ZN6SDTask6m_taskEv+0x300>)
 800ff78:	f7f0 f98c 	bl	8000294 <__aeabi_dmul>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	460b      	mov	r3, r1
 800ff80:	4610      	mov	r0, r2
 800ff82:	4619      	mov	r1, r3
 800ff84:	f7f0 fc6c 	bl	8000860 <__aeabi_d2uiz>
 800ff88:	4603      	mov	r3, r0
 800ff8a:	4a8e      	ldr	r2, [pc, #568]	; (80101c4 <_ZN6SDTask6m_taskEv+0x310>)
 800ff8c:	6013      	str	r3, [r2, #0]
    	sprintf (buffer, "SD CARD Free Space: \t%lu\n\n",free_space);
 800ff8e:	4b8d      	ldr	r3, [pc, #564]	; (80101c4 <_ZN6SDTask6m_taskEv+0x310>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	461a      	mov	r2, r3
 800ff94:	498c      	ldr	r1, [pc, #560]	; (80101c8 <_ZN6SDTask6m_taskEv+0x314>)
 800ff96:	488a      	ldr	r0, [pc, #552]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 800ff98:	f003 fa28 	bl	80133ec <siprintf>
    	printf(buffer);
 800ff9c:	4888      	ldr	r0, [pc, #544]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 800ff9e:	f003 f943 	bl	8013228 <iprintf>
    	clear_buffer();
 800ffa2:	f7ff ff4d 	bl	800fe40 <_Z12clear_bufferv>


    	/************* The following operation is using PUTS and GETS *********************/

    	/* Open file to write/ create a file if it doesn't exist */
        fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800ffa6:	2213      	movs	r2, #19
 800ffa8:	4988      	ldr	r1, [pc, #544]	; (80101cc <_ZN6SDTask6m_taskEv+0x318>)
 800ffaa:	4889      	ldr	r0, [pc, #548]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 800ffac:	f7f9 fd16 	bl	80099dc <f_open>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	4b87      	ldr	r3, [pc, #540]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 800ffb6:	701a      	strb	r2, [r3, #0]

    	/* Writing text */
    	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &fil);
 800ffb8:	4985      	ldr	r1, [pc, #532]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 800ffba:	4887      	ldr	r0, [pc, #540]	; (80101d8 <_ZN6SDTask6m_taskEv+0x324>)
 800ffbc:	f7fa fead 	bl	800ad1a <f_puts>

    	/* Close file */
    	fresult = f_close(&fil);
 800ffc0:	4883      	ldr	r0, [pc, #524]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 800ffc2:	f7fa fa48 	bl	800a456 <f_close>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	461a      	mov	r2, r3
 800ffca:	4b82      	ldr	r3, [pc, #520]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 800ffcc:	701a      	strb	r2, [r3, #0]

    	if (fresult == FR_OK)printf ("File1.txt created and the data is written \n");
 800ffce:	4b81      	ldr	r3, [pc, #516]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d102      	bne.n	800ffdc <_ZN6SDTask6m_taskEv+0x128>
 800ffd6:	4881      	ldr	r0, [pc, #516]	; (80101dc <_ZN6SDTask6m_taskEv+0x328>)
 800ffd8:	f003 f9ac 	bl	8013334 <puts>

    	/* Open file to read */
    	fresult = f_open(&fil, "file1.txt", FA_READ);
 800ffdc:	2201      	movs	r2, #1
 800ffde:	497b      	ldr	r1, [pc, #492]	; (80101cc <_ZN6SDTask6m_taskEv+0x318>)
 800ffe0:	487b      	ldr	r0, [pc, #492]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 800ffe2:	f7f9 fcfb 	bl	80099dc <f_open>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	461a      	mov	r2, r3
 800ffea:	4b7a      	ldr	r3, [pc, #488]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 800ffec:	701a      	strb	r2, [r3, #0]

    	/* Read string from the file */
    	f_gets(buffer, f_size(&fil), &fil);
 800ffee:	4b78      	ldr	r3, [pc, #480]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 800fff0:	68db      	ldr	r3, [r3, #12]
 800fff2:	4a77      	ldr	r2, [pc, #476]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 800fff4:	4619      	mov	r1, r3
 800fff6:	4872      	ldr	r0, [pc, #456]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 800fff8:	f7fa fddb 	bl	800abb2 <f_gets>

    	printf("File1.txt is opened and it contains the data as shown below\n");
 800fffc:	4878      	ldr	r0, [pc, #480]	; (80101e0 <_ZN6SDTask6m_taskEv+0x32c>)
 800fffe:	f003 f999 	bl	8013334 <puts>
    	printf(buffer);
 8010002:	486f      	ldr	r0, [pc, #444]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 8010004:	f003 f910 	bl	8013228 <iprintf>
    	printf("\n\n");
 8010008:	4876      	ldr	r0, [pc, #472]	; (80101e4 <_ZN6SDTask6m_taskEv+0x330>)
 801000a:	f003 f993 	bl	8013334 <puts>

    	/* Close file */
    	f_close(&fil);
 801000e:	4870      	ldr	r0, [pc, #448]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 8010010:	f7fa fa21 	bl	800a456 <f_close>

    	clear_buffer();
 8010014:	f7ff ff14 	bl	800fe40 <_Z12clear_bufferv>


    	/**************** The following operation is using f_write and f_read **************************/

    	/* Create second file with read write access and open it */
    	fresult = f_open(&fil, "file2.txt", FA_CREATE_ALWAYS | FA_WRITE);
 8010018:	220a      	movs	r2, #10
 801001a:	4973      	ldr	r1, [pc, #460]	; (80101e8 <_ZN6SDTask6m_taskEv+0x334>)
 801001c:	486c      	ldr	r0, [pc, #432]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 801001e:	f7f9 fcdd 	bl	80099dc <f_open>
 8010022:	4603      	mov	r3, r0
 8010024:	461a      	mov	r2, r3
 8010026:	4b6b      	ldr	r3, [pc, #428]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010028:	701a      	strb	r2, [r3, #0]

    	/* Writing text */
    	strcpy (buffer, "This is File2.txt, written using ...f_write... and it says Hello from Controllerstech\n");
 801002a:	4a65      	ldr	r2, [pc, #404]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 801002c:	4b6f      	ldr	r3, [pc, #444]	; (80101ec <_ZN6SDTask6m_taskEv+0x338>)
 801002e:	4610      	mov	r0, r2
 8010030:	4619      	mov	r1, r3
 8010032:	2357      	movs	r3, #87	; 0x57
 8010034:	461a      	mov	r2, r3
 8010036:	f002 fcf9 	bl	8012a2c <memcpy>

    	fresult = f_write(&fil, buffer, bufsize(buffer), &bw);
 801003a:	4861      	ldr	r0, [pc, #388]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 801003c:	f7ff fee4 	bl	800fe08 <_Z7bufsizePc>
 8010040:	4603      	mov	r3, r0
 8010042:	461a      	mov	r2, r3
 8010044:	4b6a      	ldr	r3, [pc, #424]	; (80101f0 <_ZN6SDTask6m_taskEv+0x33c>)
 8010046:	495e      	ldr	r1, [pc, #376]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 8010048:	4861      	ldr	r0, [pc, #388]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 801004a:	f7f9 fff2 	bl	800a032 <f_write>
 801004e:	4603      	mov	r3, r0
 8010050:	461a      	mov	r2, r3
 8010052:	4b60      	ldr	r3, [pc, #384]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010054:	701a      	strb	r2, [r3, #0]

    	printf ("File2.txt created and data is written\n");
 8010056:	4867      	ldr	r0, [pc, #412]	; (80101f4 <_ZN6SDTask6m_taskEv+0x340>)
 8010058:	f003 f96c 	bl	8013334 <puts>

    	/* Close file */
    	f_close(&fil);
 801005c:	485c      	ldr	r0, [pc, #368]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 801005e:	f7fa f9fa 	bl	800a456 <f_close>



    	// clearing buffer to show that result obtained is from the file
    	clear_buffer();
 8010062:	f7ff feed 	bl	800fe40 <_Z12clear_bufferv>

    	/* Open second file to read */
    	fresult = f_open(&fil, "file2.txt", FA_READ);
 8010066:	2201      	movs	r2, #1
 8010068:	495f      	ldr	r1, [pc, #380]	; (80101e8 <_ZN6SDTask6m_taskEv+0x334>)
 801006a:	4859      	ldr	r0, [pc, #356]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 801006c:	f7f9 fcb6 	bl	80099dc <f_open>
 8010070:	4603      	mov	r3, r0
 8010072:	461a      	mov	r2, r3
 8010074:	4b57      	ldr	r3, [pc, #348]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010076:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK)printf ("file2.txt is open and the data is shown below\n");
 8010078:	4b56      	ldr	r3, [pc, #344]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d102      	bne.n	8010086 <_ZN6SDTask6m_taskEv+0x1d2>
 8010080:	485d      	ldr	r0, [pc, #372]	; (80101f8 <_ZN6SDTask6m_taskEv+0x344>)
 8010082:	f003 f957 	bl	8013334 <puts>

    	/* Read data from the file
    	 * Please see the function details for the arguments */
    	f_read (&fil, buffer, f_size(&fil), &br);
 8010086:	4b52      	ldr	r3, [pc, #328]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 8010088:	68da      	ldr	r2, [r3, #12]
 801008a:	4b5c      	ldr	r3, [pc, #368]	; (80101fc <_ZN6SDTask6m_taskEv+0x348>)
 801008c:	494c      	ldr	r1, [pc, #304]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 801008e:	4850      	ldr	r0, [pc, #320]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 8010090:	f7f9 fe70 	bl	8009d74 <f_read>
    	printf(buffer);
 8010094:	484a      	ldr	r0, [pc, #296]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 8010096:	f003 f8c7 	bl	8013228 <iprintf>
    	printf("\n\n");
 801009a:	4852      	ldr	r0, [pc, #328]	; (80101e4 <_ZN6SDTask6m_taskEv+0x330>)
 801009c:	f003 f94a 	bl	8013334 <puts>

    	/* Close file */
    	f_close(&fil);
 80100a0:	484b      	ldr	r0, [pc, #300]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100a2:	f7fa f9d8 	bl	800a456 <f_close>

    	clear_buffer();
 80100a6:	f7ff fecb 	bl	800fe40 <_Z12clear_bufferv>


    	/*********************UPDATING an existing file ***************************/

    	/* Open the file with write access */
    	fresult = f_open(&fil, "file2.txt", FA_OPEN_EXISTING | FA_READ | FA_WRITE);
 80100aa:	2203      	movs	r2, #3
 80100ac:	494e      	ldr	r1, [pc, #312]	; (80101e8 <_ZN6SDTask6m_taskEv+0x334>)
 80100ae:	4848      	ldr	r0, [pc, #288]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100b0:	f7f9 fc94 	bl	80099dc <f_open>
 80100b4:	4603      	mov	r3, r0
 80100b6:	461a      	mov	r2, r3
 80100b8:	4b46      	ldr	r3, [pc, #280]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 80100ba:	701a      	strb	r2, [r3, #0]

    	/* Move to offset to the end of the file */
    	fresult = f_lseek(&fil, f_size(&fil));
 80100bc:	4b44      	ldr	r3, [pc, #272]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100be:	68db      	ldr	r3, [r3, #12]
 80100c0:	4619      	mov	r1, r3
 80100c2:	4843      	ldr	r0, [pc, #268]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100c4:	f7fa f9f1 	bl	800a4aa <f_lseek>
 80100c8:	4603      	mov	r3, r0
 80100ca:	461a      	mov	r2, r3
 80100cc:	4b41      	ldr	r3, [pc, #260]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 80100ce:	701a      	strb	r2, [r3, #0]

    	if (fresult == FR_OK)printf ("About to update the file2.txt\n");
 80100d0:	4b40      	ldr	r3, [pc, #256]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d102      	bne.n	80100de <_ZN6SDTask6m_taskEv+0x22a>
 80100d8:	4849      	ldr	r0, [pc, #292]	; (8010200 <_ZN6SDTask6m_taskEv+0x34c>)
 80100da:	f003 f92b 	bl	8013334 <puts>

    	/* write the string to the file */
    	fresult = (FRESULT)f_puts("This is updated data and it should be in the end", &fil);
 80100de:	493c      	ldr	r1, [pc, #240]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100e0:	4848      	ldr	r0, [pc, #288]	; (8010204 <_ZN6SDTask6m_taskEv+0x350>)
 80100e2:	f7fa fe1a 	bl	800ad1a <f_puts>
 80100e6:	4603      	mov	r3, r0
 80100e8:	b2da      	uxtb	r2, r3
 80100ea:	4b3a      	ldr	r3, [pc, #232]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 80100ec:	701a      	strb	r2, [r3, #0]

    	f_close (&fil);
 80100ee:	4838      	ldr	r0, [pc, #224]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100f0:	f7fa f9b1 	bl	800a456 <f_close>

    	clear_buffer();
 80100f4:	f7ff fea4 	bl	800fe40 <_Z12clear_bufferv>

    	/* Open to read the file */
    	fresult = f_open (&fil, "file2.txt", FA_READ);
 80100f8:	2201      	movs	r2, #1
 80100fa:	493b      	ldr	r1, [pc, #236]	; (80101e8 <_ZN6SDTask6m_taskEv+0x334>)
 80100fc:	4834      	ldr	r0, [pc, #208]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 80100fe:	f7f9 fc6d 	bl	80099dc <f_open>
 8010102:	4603      	mov	r3, r0
 8010104:	461a      	mov	r2, r3
 8010106:	4b33      	ldr	r3, [pc, #204]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010108:	701a      	strb	r2, [r3, #0]

    	/* Read string from the file */
    	fresult = f_read (&fil, buffer, f_size(&fil), &br);
 801010a:	4b31      	ldr	r3, [pc, #196]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 801010c:	68da      	ldr	r2, [r3, #12]
 801010e:	4b3b      	ldr	r3, [pc, #236]	; (80101fc <_ZN6SDTask6m_taskEv+0x348>)
 8010110:	492b      	ldr	r1, [pc, #172]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 8010112:	482f      	ldr	r0, [pc, #188]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 8010114:	f7f9 fe2e 	bl	8009d74 <f_read>
 8010118:	4603      	mov	r3, r0
 801011a:	461a      	mov	r2, r3
 801011c:	4b2d      	ldr	r3, [pc, #180]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 801011e:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK)printf ("Below is the data from updated file2.txt\n");
 8010120:	4b2c      	ldr	r3, [pc, #176]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d102      	bne.n	801012e <_ZN6SDTask6m_taskEv+0x27a>
 8010128:	4837      	ldr	r0, [pc, #220]	; (8010208 <_ZN6SDTask6m_taskEv+0x354>)
 801012a:	f003 f903 	bl	8013334 <puts>
    	printf(buffer);
 801012e:	4824      	ldr	r0, [pc, #144]	; (80101c0 <_ZN6SDTask6m_taskEv+0x30c>)
 8010130:	f003 f87a 	bl	8013228 <iprintf>
    	printf("\n\n");
 8010134:	482b      	ldr	r0, [pc, #172]	; (80101e4 <_ZN6SDTask6m_taskEv+0x330>)
 8010136:	f003 f8fd 	bl	8013334 <puts>

    	/* Close file */
    	f_close(&fil);
 801013a:	4825      	ldr	r0, [pc, #148]	; (80101d0 <_ZN6SDTask6m_taskEv+0x31c>)
 801013c:	f7fa f98b 	bl	800a456 <f_close>

    	clear_buffer();
 8010140:	f7ff fe7e 	bl	800fe40 <_Z12clear_bufferv>


    	/*************************REMOVING FILES FROM THE DIRECTORY ****************************/

    	fresult = f_unlink("/file1.txt");
 8010144:	4831      	ldr	r0, [pc, #196]	; (801020c <_ZN6SDTask6m_taskEv+0x358>)
 8010146:	f7fa fc89 	bl	800aa5c <f_unlink>
 801014a:	4603      	mov	r3, r0
 801014c:	461a      	mov	r2, r3
 801014e:	4b21      	ldr	r3, [pc, #132]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010150:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK) printf("file1.txt removed successfully...\n");
 8010152:	4b20      	ldr	r3, [pc, #128]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010154:	781b      	ldrb	r3, [r3, #0]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d102      	bne.n	8010160 <_ZN6SDTask6m_taskEv+0x2ac>
 801015a:	482d      	ldr	r0, [pc, #180]	; (8010210 <_ZN6SDTask6m_taskEv+0x35c>)
 801015c:	f003 f8ea 	bl	8013334 <puts>

    	fresult = f_unlink("/file2.txt");
 8010160:	482c      	ldr	r0, [pc, #176]	; (8010214 <_ZN6SDTask6m_taskEv+0x360>)
 8010162:	f7fa fc7b 	bl	800aa5c <f_unlink>
 8010166:	4603      	mov	r3, r0
 8010168:	461a      	mov	r2, r3
 801016a:	4b1a      	ldr	r3, [pc, #104]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 801016c:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK) printf("file2.txt removed successfully...\n");
 801016e:	4b19      	ldr	r3, [pc, #100]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d102      	bne.n	801017c <_ZN6SDTask6m_taskEv+0x2c8>
 8010176:	4828      	ldr	r0, [pc, #160]	; (8010218 <_ZN6SDTask6m_taskEv+0x364>)
 8010178:	f003 f8dc 	bl	8013334 <puts>

    	/* Unmount SDCARD */
    	fresult = f_mount(NULL, "/", 1);
 801017c:	2201      	movs	r2, #1
 801017e:	4927      	ldr	r1, [pc, #156]	; (801021c <_ZN6SDTask6m_taskEv+0x368>)
 8010180:	2000      	movs	r0, #0
 8010182:	f7f9 fbe5 	bl	8009950 <f_mount>
 8010186:	4603      	mov	r3, r0
 8010188:	461a      	mov	r2, r3
 801018a:	4b12      	ldr	r3, [pc, #72]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 801018c:	701a      	strb	r2, [r3, #0]
    	if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 801018e:	4b11      	ldr	r3, [pc, #68]	; (80101d4 <_ZN6SDTask6m_taskEv+0x320>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d102      	bne.n	801019c <_ZN6SDTask6m_taskEv+0x2e8>
 8010196:	4822      	ldr	r0, [pc, #136]	; (8010220 <_ZN6SDTask6m_taskEv+0x36c>)
 8010198:	f003 f8cc 	bl	8013334 <puts>
}
 801019c:	bf00      	nop
 801019e:	3708      	adds	r7, #8
 80101a0:	46bd      	mov	sp, r7
 80101a2:	bd80      	pop	{r7, pc}
 80101a4:	08015acc 	.word	0x08015acc
 80101a8:	200019a4 	.word	0x200019a4
 80101ac:	200019a8 	.word	0x200019a8
 80101b0:	08015aa4 	.word	0x08015aa4
 80101b4:	3fe00000 	.word	0x3fe00000
 80101b8:	200019ac 	.word	0x200019ac
 80101bc:	08015af0 	.word	0x08015af0
 80101c0:	200019b4 	.word	0x200019b4
 80101c4:	200019b0 	.word	0x200019b0
 80101c8:	08015b0c 	.word	0x08015b0c
 80101cc:	08015b28 	.word	0x08015b28
 80101d0:	20001568 	.word	0x20001568
 80101d4:	20001998 	.word	0x20001998
 80101d8:	08015b34 	.word	0x08015b34
 80101dc:	08015b7c 	.word	0x08015b7c
 80101e0:	08015ba8 	.word	0x08015ba8
 80101e4:	08015be4 	.word	0x08015be4
 80101e8:	08015be8 	.word	0x08015be8
 80101ec:	08015bf4 	.word	0x08015bf4
 80101f0:	200019a0 	.word	0x200019a0
 80101f4:	08015c4c 	.word	0x08015c4c
 80101f8:	08015c74 	.word	0x08015c74
 80101fc:	2000199c 	.word	0x2000199c
 8010200:	08015ca4 	.word	0x08015ca4
 8010204:	08015cc4 	.word	0x08015cc4
 8010208:	08015cf8 	.word	0x08015cf8
 801020c:	08015d24 	.word	0x08015d24
 8010210:	08015d30 	.word	0x08015d30
 8010214:	08015d54 	.word	0x08015d54
 8010218:	08015d60 	.word	0x08015d60
 801021c:	08015d84 	.word	0x08015d84
 8010220:	08015d88 	.word	0x08015d88

08010224 <_ZN6SDTaskD1Ev>:

#define	SD_CS_GPIO_PORT			GPIOB
#define SD_CS_PIN			GPIO_PIN_5


class SDTask: public RTOS::Task{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	4a05      	ldr	r2, [pc, #20]	; (8010244 <_ZN6SDTaskD1Ev+0x20>)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	601a      	str	r2, [r3, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	4618      	mov	r0, r3
 8010236:	f7fe faa5 	bl	800e784 <_ZN4RTOS4TaskD1Ev>
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	4618      	mov	r0, r3
 801023e:	3708      	adds	r7, #8
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	0801626c 	.word	0x0801626c

08010248 <_ZN6SDTaskD0Ev>:
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f7ff ffe7 	bl	8010224 <_ZN6SDTaskD1Ev>
 8010256:	f240 414c 	movw	r1, #1100	; 0x44c
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	f002 fad2 	bl	8012804 <_ZdlPvj>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <_Z41__static_initialization_and_destruction_0ii>:
 801026c:	b580      	push	{r7, lr}
 801026e:	b0b4      	sub	sp, #208	; 0xd0
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2b01      	cmp	r3, #1
 801027a:	f040 85fe 	bne.w	8010e7a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010284:	4293      	cmp	r3, r2
 8010286:	f040 85f8 	bne.w	8010e7a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 801028a:	4ba1      	ldr	r3, [pc, #644]	; (8010510 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3301      	adds	r3, #1
 8010290:	4a9f      	ldr	r2, [pc, #636]	; (8010510 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8010292:	6013      	str	r3, [r2, #0]
 8010294:	4b9e      	ldr	r3, [pc, #632]	; (8010510 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	2b01      	cmp	r3, #1
 801029a:	bf0c      	ite	eq
 801029c:	2301      	moveq	r3, #1
 801029e:	2300      	movne	r3, #0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d00b      	beq.n	80102be <_Z41__static_initialization_and_destruction_0ii+0x52>
 80102a6:	2300      	movs	r3, #0
 80102a8:	81bb      	strh	r3, [r7, #12]
 80102aa:	2301      	movs	r3, #1
 80102ac:	81fb      	strh	r3, [r7, #14]
 80102ae:	f107 020e 	add.w	r2, r7, #14
 80102b2:	f107 030c 	add.w	r3, r7, #12
 80102b6:	4619      	mov	r1, r3
 80102b8:	4896      	ldr	r0, [pc, #600]	; (8010514 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 80102ba:	f7fb fa87 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 80102be:	4b96      	ldr	r3, [pc, #600]	; (8010518 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	3301      	adds	r3, #1
 80102c4:	4a94      	ldr	r2, [pc, #592]	; (8010518 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80102c6:	6013      	str	r3, [r2, #0]
 80102c8:	4b93      	ldr	r3, [pc, #588]	; (8010518 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	2b01      	cmp	r3, #1
 80102ce:	bf0c      	ite	eq
 80102d0:	2301      	moveq	r3, #1
 80102d2:	2300      	movne	r3, #0
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d00b      	beq.n	80102f2 <_Z41__static_initialization_and_destruction_0ii+0x86>
 80102da:	2300      	movs	r3, #0
 80102dc:	823b      	strh	r3, [r7, #16]
 80102de:	2302      	movs	r3, #2
 80102e0:	827b      	strh	r3, [r7, #18]
 80102e2:	f107 0212 	add.w	r2, r7, #18
 80102e6:	f107 0310 	add.w	r3, r7, #16
 80102ea:	4619      	mov	r1, r3
 80102ec:	488b      	ldr	r0, [pc, #556]	; (801051c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 80102ee:	f7fb fa6d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 80102f2:	4b8b      	ldr	r3, [pc, #556]	; (8010520 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	3301      	adds	r3, #1
 80102f8:	4a89      	ldr	r2, [pc, #548]	; (8010520 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80102fa:	6013      	str	r3, [r2, #0]
 80102fc:	4b88      	ldr	r3, [pc, #544]	; (8010520 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	2b01      	cmp	r3, #1
 8010302:	bf0c      	ite	eq
 8010304:	2301      	moveq	r3, #1
 8010306:	2300      	movne	r3, #0
 8010308:	b2db      	uxtb	r3, r3
 801030a:	2b00      	cmp	r3, #0
 801030c:	d00b      	beq.n	8010326 <_Z41__static_initialization_and_destruction_0ii+0xba>
 801030e:	2300      	movs	r3, #0
 8010310:	82bb      	strh	r3, [r7, #20]
 8010312:	2304      	movs	r3, #4
 8010314:	82fb      	strh	r3, [r7, #22]
 8010316:	f107 0216 	add.w	r2, r7, #22
 801031a:	f107 0314 	add.w	r3, r7, #20
 801031e:	4619      	mov	r1, r3
 8010320:	4880      	ldr	r0, [pc, #512]	; (8010524 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8010322:	f7fb fa53 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 8010326:	4b80      	ldr	r3, [pc, #512]	; (8010528 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3301      	adds	r3, #1
 801032c:	4a7e      	ldr	r2, [pc, #504]	; (8010528 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	4b7d      	ldr	r3, [pc, #500]	; (8010528 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	2b01      	cmp	r3, #1
 8010336:	bf0c      	ite	eq
 8010338:	2301      	moveq	r3, #1
 801033a:	2300      	movne	r3, #0
 801033c:	b2db      	uxtb	r3, r3
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00b      	beq.n	801035a <_Z41__static_initialization_and_destruction_0ii+0xee>
 8010342:	2300      	movs	r3, #0
 8010344:	833b      	strh	r3, [r7, #24]
 8010346:	2308      	movs	r3, #8
 8010348:	837b      	strh	r3, [r7, #26]
 801034a:	f107 021a 	add.w	r2, r7, #26
 801034e:	f107 0318 	add.w	r3, r7, #24
 8010352:	4619      	mov	r1, r3
 8010354:	4875      	ldr	r0, [pc, #468]	; (801052c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8010356:	f7fb fa39 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 801035a:	4b75      	ldr	r3, [pc, #468]	; (8010530 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	3301      	adds	r3, #1
 8010360:	4a73      	ldr	r2, [pc, #460]	; (8010530 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010362:	6013      	str	r3, [r2, #0]
 8010364:	4b72      	ldr	r3, [pc, #456]	; (8010530 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	2b01      	cmp	r3, #1
 801036a:	bf0c      	ite	eq
 801036c:	2301      	moveq	r3, #1
 801036e:	2300      	movne	r3, #0
 8010370:	b2db      	uxtb	r3, r3
 8010372:	2b00      	cmp	r3, #0
 8010374:	d00b      	beq.n	801038e <_Z41__static_initialization_and_destruction_0ii+0x122>
 8010376:	2300      	movs	r3, #0
 8010378:	83bb      	strh	r3, [r7, #28]
 801037a:	2310      	movs	r3, #16
 801037c:	83fb      	strh	r3, [r7, #30]
 801037e:	f107 021e 	add.w	r2, r7, #30
 8010382:	f107 031c 	add.w	r3, r7, #28
 8010386:	4619      	mov	r1, r3
 8010388:	486a      	ldr	r0, [pc, #424]	; (8010534 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 801038a:	f7fb fa1f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 801038e:	4b6a      	ldr	r3, [pc, #424]	; (8010538 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	3301      	adds	r3, #1
 8010394:	4a68      	ldr	r2, [pc, #416]	; (8010538 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8010396:	6013      	str	r3, [r2, #0]
 8010398:	4b67      	ldr	r3, [pc, #412]	; (8010538 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	2b01      	cmp	r3, #1
 801039e:	bf0c      	ite	eq
 80103a0:	2301      	moveq	r3, #1
 80103a2:	2300      	movne	r3, #0
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00b      	beq.n	80103c2 <_Z41__static_initialization_and_destruction_0ii+0x156>
 80103aa:	2300      	movs	r3, #0
 80103ac:	843b      	strh	r3, [r7, #32]
 80103ae:	2320      	movs	r3, #32
 80103b0:	847b      	strh	r3, [r7, #34]	; 0x22
 80103b2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 80103b6:	f107 0320 	add.w	r3, r7, #32
 80103ba:	4619      	mov	r1, r3
 80103bc:	485f      	ldr	r0, [pc, #380]	; (801053c <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80103be:	f7fb fa05 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 80103c2:	4b5f      	ldr	r3, [pc, #380]	; (8010540 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	3301      	adds	r3, #1
 80103c8:	4a5d      	ldr	r2, [pc, #372]	; (8010540 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80103ca:	6013      	str	r3, [r2, #0]
 80103cc:	4b5c      	ldr	r3, [pc, #368]	; (8010540 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	2b01      	cmp	r3, #1
 80103d2:	bf0c      	ite	eq
 80103d4:	2301      	moveq	r3, #1
 80103d6:	2300      	movne	r3, #0
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d00b      	beq.n	80103f6 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 80103de:	2300      	movs	r3, #0
 80103e0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80103e2:	2340      	movs	r3, #64	; 0x40
 80103e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80103e6:	f107 0226 	add.w	r2, r7, #38	; 0x26
 80103ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103ee:	4619      	mov	r1, r3
 80103f0:	4854      	ldr	r0, [pc, #336]	; (8010544 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80103f2:	f7fb f9eb 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 80103f6:	4b54      	ldr	r3, [pc, #336]	; (8010548 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	3301      	adds	r3, #1
 80103fc:	4a52      	ldr	r2, [pc, #328]	; (8010548 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80103fe:	6013      	str	r3, [r2, #0]
 8010400:	4b51      	ldr	r3, [pc, #324]	; (8010548 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	2b01      	cmp	r3, #1
 8010406:	bf0c      	ite	eq
 8010408:	2301      	moveq	r3, #1
 801040a:	2300      	movne	r3, #0
 801040c:	b2db      	uxtb	r3, r3
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00b      	beq.n	801042a <_Z41__static_initialization_and_destruction_0ii+0x1be>
 8010412:	2300      	movs	r3, #0
 8010414:	853b      	strh	r3, [r7, #40]	; 0x28
 8010416:	2380      	movs	r3, #128	; 0x80
 8010418:	857b      	strh	r3, [r7, #42]	; 0x2a
 801041a:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 801041e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010422:	4619      	mov	r1, r3
 8010424:	4849      	ldr	r0, [pc, #292]	; (801054c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8010426:	f7fb f9d1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 801042a:	4b49      	ldr	r3, [pc, #292]	; (8010550 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	3301      	adds	r3, #1
 8010430:	4a47      	ldr	r2, [pc, #284]	; (8010550 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010432:	6013      	str	r3, [r2, #0]
 8010434:	4b46      	ldr	r3, [pc, #280]	; (8010550 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	2b01      	cmp	r3, #1
 801043a:	bf0c      	ite	eq
 801043c:	2301      	moveq	r3, #1
 801043e:	2300      	movne	r3, #0
 8010440:	b2db      	uxtb	r3, r3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d00c      	beq.n	8010460 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 8010446:	2300      	movs	r3, #0
 8010448:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801044a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801044e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8010450:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8010454:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010458:	4619      	mov	r1, r3
 801045a:	483e      	ldr	r0, [pc, #248]	; (8010554 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 801045c:	f7fb f9b6 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 8010460:	4b3d      	ldr	r3, [pc, #244]	; (8010558 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	3301      	adds	r3, #1
 8010466:	4a3c      	ldr	r2, [pc, #240]	; (8010558 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8010468:	6013      	str	r3, [r2, #0]
 801046a:	4b3b      	ldr	r3, [pc, #236]	; (8010558 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2b01      	cmp	r3, #1
 8010470:	bf0c      	ite	eq
 8010472:	2301      	moveq	r3, #1
 8010474:	2300      	movne	r3, #0
 8010476:	b2db      	uxtb	r3, r3
 8010478:	2b00      	cmp	r3, #0
 801047a:	d00c      	beq.n	8010496 <_Z41__static_initialization_and_destruction_0ii+0x22a>
 801047c:	2300      	movs	r3, #0
 801047e:	863b      	strh	r3, [r7, #48]	; 0x30
 8010480:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010484:	867b      	strh	r3, [r7, #50]	; 0x32
 8010486:	f107 0232 	add.w	r2, r7, #50	; 0x32
 801048a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801048e:	4619      	mov	r1, r3
 8010490:	4832      	ldr	r0, [pc, #200]	; (801055c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8010492:	f7fb f99b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 8010496:	4b32      	ldr	r3, [pc, #200]	; (8010560 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	3301      	adds	r3, #1
 801049c:	4a30      	ldr	r2, [pc, #192]	; (8010560 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 801049e:	6013      	str	r3, [r2, #0]
 80104a0:	4b2f      	ldr	r3, [pc, #188]	; (8010560 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	2b01      	cmp	r3, #1
 80104a6:	bf0c      	ite	eq
 80104a8:	2301      	moveq	r3, #1
 80104aa:	2300      	movne	r3, #0
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d00c      	beq.n	80104cc <_Z41__static_initialization_and_destruction_0ii+0x260>
 80104b2:	2300      	movs	r3, #0
 80104b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80104b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80104bc:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80104c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80104c4:	4619      	mov	r1, r3
 80104c6:	4827      	ldr	r0, [pc, #156]	; (8010564 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80104c8:	f7fb f980 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 80104cc:	4b26      	ldr	r3, [pc, #152]	; (8010568 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	3301      	adds	r3, #1
 80104d2:	4a25      	ldr	r2, [pc, #148]	; (8010568 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80104d4:	6013      	str	r3, [r2, #0]
 80104d6:	4b24      	ldr	r3, [pc, #144]	; (8010568 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b01      	cmp	r3, #1
 80104dc:	bf0c      	ite	eq
 80104de:	2301      	moveq	r3, #1
 80104e0:	2300      	movne	r3, #0
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d00c      	beq.n	8010502 <_Z41__static_initialization_and_destruction_0ii+0x296>
 80104e8:	2300      	movs	r3, #0
 80104ea:	873b      	strh	r3, [r7, #56]	; 0x38
 80104ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80104f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80104f2:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80104f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80104fa:	4619      	mov	r1, r3
 80104fc:	481b      	ldr	r0, [pc, #108]	; (801056c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 80104fe:	f7fb f965 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 8010502:	4b1b      	ldr	r3, [pc, #108]	; (8010570 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	3301      	adds	r3, #1
 8010508:	4a19      	ldr	r2, [pc, #100]	; (8010570 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 801050a:	6013      	str	r3, [r2, #0]
 801050c:	e032      	b.n	8010574 <_Z41__static_initialization_and_destruction_0ii+0x308>
 801050e:	bf00      	nop
 8010510:	2000106c 	.word	0x2000106c
 8010514:	20000a94 	.word	0x20000a94
 8010518:	20001070 	.word	0x20001070
 801051c:	20000a9c 	.word	0x20000a9c
 8010520:	20001074 	.word	0x20001074
 8010524:	20000aa4 	.word	0x20000aa4
 8010528:	20001078 	.word	0x20001078
 801052c:	20000aac 	.word	0x20000aac
 8010530:	2000107c 	.word	0x2000107c
 8010534:	20000ab4 	.word	0x20000ab4
 8010538:	20001080 	.word	0x20001080
 801053c:	20000abc 	.word	0x20000abc
 8010540:	20001084 	.word	0x20001084
 8010544:	20000ac4 	.word	0x20000ac4
 8010548:	20001088 	.word	0x20001088
 801054c:	20000acc 	.word	0x20000acc
 8010550:	2000108c 	.word	0x2000108c
 8010554:	20000ad4 	.word	0x20000ad4
 8010558:	20001090 	.word	0x20001090
 801055c:	20000adc 	.word	0x20000adc
 8010560:	20001094 	.word	0x20001094
 8010564:	20000ae4 	.word	0x20000ae4
 8010568:	20001098 	.word	0x20001098
 801056c:	20000aec 	.word	0x20000aec
 8010570:	2000109c 	.word	0x2000109c
 8010574:	4bac      	ldr	r3, [pc, #688]	; (8010828 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	2b01      	cmp	r3, #1
 801057a:	bf0c      	ite	eq
 801057c:	2301      	moveq	r3, #1
 801057e:	2300      	movne	r3, #0
 8010580:	b2db      	uxtb	r3, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00c      	beq.n	80105a0 <_Z41__static_initialization_and_destruction_0ii+0x334>
 8010586:	2300      	movs	r3, #0
 8010588:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801058a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801058e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8010590:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 8010594:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010598:	4619      	mov	r1, r3
 801059a:	48a4      	ldr	r0, [pc, #656]	; (801082c <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 801059c:	f7fb f916 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 80105a0:	4ba3      	ldr	r3, [pc, #652]	; (8010830 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	3301      	adds	r3, #1
 80105a6:	4aa2      	ldr	r2, [pc, #648]	; (8010830 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 80105a8:	6013      	str	r3, [r2, #0]
 80105aa:	4ba1      	ldr	r3, [pc, #644]	; (8010830 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	bf0c      	ite	eq
 80105b2:	2301      	moveq	r3, #1
 80105b4:	2300      	movne	r3, #0
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00e      	beq.n	80105da <_Z41__static_initialization_and_destruction_0ii+0x36e>
 80105bc:	2300      	movs	r3, #0
 80105be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80105c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80105c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80105ca:	f107 0242 	add.w	r2, r7, #66	; 0x42
 80105ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80105d2:	4619      	mov	r1, r3
 80105d4:	4897      	ldr	r0, [pc, #604]	; (8010834 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 80105d6:	f7fb f8f9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 80105da:	4b97      	ldr	r3, [pc, #604]	; (8010838 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3301      	adds	r3, #1
 80105e0:	4a95      	ldr	r2, [pc, #596]	; (8010838 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 80105e2:	6013      	str	r3, [r2, #0]
 80105e4:	4b94      	ldr	r3, [pc, #592]	; (8010838 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	bf0c      	ite	eq
 80105ec:	2301      	moveq	r3, #1
 80105ee:	2300      	movne	r3, #0
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d00e      	beq.n	8010614 <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 80105f6:	2300      	movs	r3, #0
 80105f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80105fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010600:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8010604:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8010608:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801060c:	4619      	mov	r1, r3
 801060e:	488b      	ldr	r0, [pc, #556]	; (801083c <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8010610:	f7fb f8dc 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 8010614:	4b8a      	ldr	r3, [pc, #552]	; (8010840 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	3301      	adds	r3, #1
 801061a:	4a89      	ldr	r2, [pc, #548]	; (8010840 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 801061c:	6013      	str	r3, [r2, #0]
 801061e:	4b88      	ldr	r3, [pc, #544]	; (8010840 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	2b01      	cmp	r3, #1
 8010624:	bf0c      	ite	eq
 8010626:	2301      	moveq	r3, #1
 8010628:	2300      	movne	r3, #0
 801062a:	b2db      	uxtb	r3, r3
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00e      	beq.n	801064e <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 8010630:	2300      	movs	r3, #0
 8010632:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8010636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801063a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801063e:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 8010642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010646:	4619      	mov	r1, r3
 8010648:	487e      	ldr	r0, [pc, #504]	; (8010844 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 801064a:	f7fb f8bf 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 801064e:	4b7e      	ldr	r3, [pc, #504]	; (8010848 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3301      	adds	r3, #1
 8010654:	4a7c      	ldr	r2, [pc, #496]	; (8010848 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8010656:	6013      	str	r3, [r2, #0]
 8010658:	4b7b      	ldr	r3, [pc, #492]	; (8010848 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	2b01      	cmp	r3, #1
 801065e:	bf0c      	ite	eq
 8010660:	2301      	moveq	r3, #1
 8010662:	2300      	movne	r3, #0
 8010664:	b2db      	uxtb	r3, r3
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00d      	beq.n	8010686 <_Z41__static_initialization_and_destruction_0ii+0x41a>
 801066a:	2301      	movs	r3, #1
 801066c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8010670:	2301      	movs	r3, #1
 8010672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8010676:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 801067a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801067e:	4619      	mov	r1, r3
 8010680:	4872      	ldr	r0, [pc, #456]	; (801084c <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8010682:	f7fb f8a3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 8010686:	4b72      	ldr	r3, [pc, #456]	; (8010850 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3301      	adds	r3, #1
 801068c:	4a70      	ldr	r2, [pc, #448]	; (8010850 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 801068e:	6013      	str	r3, [r2, #0]
 8010690:	4b6f      	ldr	r3, [pc, #444]	; (8010850 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b01      	cmp	r3, #1
 8010696:	bf0c      	ite	eq
 8010698:	2301      	moveq	r3, #1
 801069a:	2300      	movne	r3, #0
 801069c:	b2db      	uxtb	r3, r3
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00d      	beq.n	80106be <_Z41__static_initialization_and_destruction_0ii+0x452>
 80106a2:	2301      	movs	r3, #1
 80106a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 80106a8:	2302      	movs	r3, #2
 80106aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80106ae:	f107 0252 	add.w	r2, r7, #82	; 0x52
 80106b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80106b6:	4619      	mov	r1, r3
 80106b8:	4866      	ldr	r0, [pc, #408]	; (8010854 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 80106ba:	f7fb f887 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 80106be:	4b66      	ldr	r3, [pc, #408]	; (8010858 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	3301      	adds	r3, #1
 80106c4:	4a64      	ldr	r2, [pc, #400]	; (8010858 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80106c6:	6013      	str	r3, [r2, #0]
 80106c8:	4b63      	ldr	r3, [pc, #396]	; (8010858 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	2b01      	cmp	r3, #1
 80106ce:	bf0c      	ite	eq
 80106d0:	2301      	moveq	r3, #1
 80106d2:	2300      	movne	r3, #0
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00d      	beq.n	80106f6 <_Z41__static_initialization_and_destruction_0ii+0x48a>
 80106da:	2301      	movs	r3, #1
 80106dc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80106e0:	2304      	movs	r3, #4
 80106e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80106e6:	f107 0256 	add.w	r2, r7, #86	; 0x56
 80106ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80106ee:	4619      	mov	r1, r3
 80106f0:	485a      	ldr	r0, [pc, #360]	; (801085c <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 80106f2:	f7fb f86b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 80106f6:	4b5a      	ldr	r3, [pc, #360]	; (8010860 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	3301      	adds	r3, #1
 80106fc:	4a58      	ldr	r2, [pc, #352]	; (8010860 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 80106fe:	6013      	str	r3, [r2, #0]
 8010700:	4b57      	ldr	r3, [pc, #348]	; (8010860 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	2b01      	cmp	r3, #1
 8010706:	bf0c      	ite	eq
 8010708:	2301      	moveq	r3, #1
 801070a:	2300      	movne	r3, #0
 801070c:	b2db      	uxtb	r3, r3
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00d      	beq.n	801072e <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 8010712:	2301      	movs	r3, #1
 8010714:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8010718:	2308      	movs	r3, #8
 801071a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 801071e:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 8010722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010726:	4619      	mov	r1, r3
 8010728:	484e      	ldr	r0, [pc, #312]	; (8010864 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 801072a:	f7fb f84f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 801072e:	4b4e      	ldr	r3, [pc, #312]	; (8010868 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	3301      	adds	r3, #1
 8010734:	4a4c      	ldr	r2, [pc, #304]	; (8010868 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8010736:	6013      	str	r3, [r2, #0]
 8010738:	4b4b      	ldr	r3, [pc, #300]	; (8010868 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b01      	cmp	r3, #1
 801073e:	bf0c      	ite	eq
 8010740:	2301      	moveq	r3, #1
 8010742:	2300      	movne	r3, #0
 8010744:	b2db      	uxtb	r3, r3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d00d      	beq.n	8010766 <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 801074a:	2301      	movs	r3, #1
 801074c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8010750:	2310      	movs	r3, #16
 8010752:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8010756:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 801075a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801075e:	4619      	mov	r1, r3
 8010760:	4842      	ldr	r0, [pc, #264]	; (801086c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8010762:	f7fb f833 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 8010766:	4b42      	ldr	r3, [pc, #264]	; (8010870 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	3301      	adds	r3, #1
 801076c:	4a40      	ldr	r2, [pc, #256]	; (8010870 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 801076e:	6013      	str	r3, [r2, #0]
 8010770:	4b3f      	ldr	r3, [pc, #252]	; (8010870 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b01      	cmp	r3, #1
 8010776:	bf0c      	ite	eq
 8010778:	2301      	moveq	r3, #1
 801077a:	2300      	movne	r3, #0
 801077c:	b2db      	uxtb	r3, r3
 801077e:	2b00      	cmp	r3, #0
 8010780:	d00d      	beq.n	801079e <_Z41__static_initialization_and_destruction_0ii+0x532>
 8010782:	2301      	movs	r3, #1
 8010784:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010788:	2320      	movs	r3, #32
 801078a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801078e:	f107 0262 	add.w	r2, r7, #98	; 0x62
 8010792:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010796:	4619      	mov	r1, r3
 8010798:	4836      	ldr	r0, [pc, #216]	; (8010874 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 801079a:	f7fb f817 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 801079e:	4b36      	ldr	r3, [pc, #216]	; (8010878 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	3301      	adds	r3, #1
 80107a4:	4a34      	ldr	r2, [pc, #208]	; (8010878 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80107a6:	6013      	str	r3, [r2, #0]
 80107a8:	4b33      	ldr	r3, [pc, #204]	; (8010878 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	2b01      	cmp	r3, #1
 80107ae:	bf0c      	ite	eq
 80107b0:	2301      	moveq	r3, #1
 80107b2:	2300      	movne	r3, #0
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d00e      	beq.n	80107d8 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 80107ba:	2301      	movs	r3, #1
 80107bc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80107c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80107c4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80107c8:	f107 0266 	add.w	r2, r7, #102	; 0x66
 80107cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80107d0:	4619      	mov	r1, r3
 80107d2:	482a      	ldr	r0, [pc, #168]	; (801087c <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80107d4:	f7fa fffa 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 80107d8:	4b29      	ldr	r3, [pc, #164]	; (8010880 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3301      	adds	r3, #1
 80107de:	4a28      	ldr	r2, [pc, #160]	; (8010880 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80107e0:	6013      	str	r3, [r2, #0]
 80107e2:	4b27      	ldr	r3, [pc, #156]	; (8010880 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	bf0c      	ite	eq
 80107ea:	2301      	moveq	r3, #1
 80107ec:	2300      	movne	r3, #0
 80107ee:	b2db      	uxtb	r3, r3
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d00e      	beq.n	8010812 <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 80107f4:	2301      	movs	r3, #1
 80107f6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80107fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80107fe:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8010802:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 8010806:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801080a:	4619      	mov	r1, r3
 801080c:	481d      	ldr	r0, [pc, #116]	; (8010884 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 801080e:	f7fa ffdd 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 8010812:	4b1d      	ldr	r3, [pc, #116]	; (8010888 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	3301      	adds	r3, #1
 8010818:	4a1b      	ldr	r2, [pc, #108]	; (8010888 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 801081a:	6013      	str	r3, [r2, #0]
 801081c:	4b1a      	ldr	r3, [pc, #104]	; (8010888 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	2b01      	cmp	r3, #1
 8010822:	bf08      	it	eq
 8010824:	2301      	moveq	r3, #1
 8010826:	e031      	b.n	801088c <_Z41__static_initialization_and_destruction_0ii+0x620>
 8010828:	2000109c 	.word	0x2000109c
 801082c:	20000af4 	.word	0x20000af4
 8010830:	200010a0 	.word	0x200010a0
 8010834:	20000afc 	.word	0x20000afc
 8010838:	200010a4 	.word	0x200010a4
 801083c:	20000b04 	.word	0x20000b04
 8010840:	200010a8 	.word	0x200010a8
 8010844:	20000b0c 	.word	0x20000b0c
 8010848:	200010ac 	.word	0x200010ac
 801084c:	20000b14 	.word	0x20000b14
 8010850:	200010b0 	.word	0x200010b0
 8010854:	20000b1c 	.word	0x20000b1c
 8010858:	200010b4 	.word	0x200010b4
 801085c:	20000b24 	.word	0x20000b24
 8010860:	200010b8 	.word	0x200010b8
 8010864:	20000b2c 	.word	0x20000b2c
 8010868:	200010bc 	.word	0x200010bc
 801086c:	20000b34 	.word	0x20000b34
 8010870:	200010c0 	.word	0x200010c0
 8010874:	20000b3c 	.word	0x20000b3c
 8010878:	200010c4 	.word	0x200010c4
 801087c:	20000b44 	.word	0x20000b44
 8010880:	200010c8 	.word	0x200010c8
 8010884:	20000b4c 	.word	0x20000b4c
 8010888:	200010cc 	.word	0x200010cc
 801088c:	bf18      	it	ne
 801088e:	2300      	movne	r3, #0
 8010890:	b2db      	uxtb	r3, r3
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00e      	beq.n	80108b4 <_Z41__static_initialization_and_destruction_0ii+0x648>
 8010896:	2301      	movs	r3, #1
 8010898:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 801089c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108a0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80108a4:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 80108a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80108ac:	4619      	mov	r1, r3
 80108ae:	48ae      	ldr	r0, [pc, #696]	; (8010b68 <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 80108b0:	f7fa ff8c 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 80108b4:	4bad      	ldr	r3, [pc, #692]	; (8010b6c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	3301      	adds	r3, #1
 80108ba:	4aac      	ldr	r2, [pc, #688]	; (8010b6c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 80108bc:	6013      	str	r3, [r2, #0]
 80108be:	4bab      	ldr	r3, [pc, #684]	; (8010b6c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	2b01      	cmp	r3, #1
 80108c4:	bf0c      	ite	eq
 80108c6:	2301      	moveq	r3, #1
 80108c8:	2300      	movne	r3, #0
 80108ca:	b2db      	uxtb	r3, r3
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d00e      	beq.n	80108ee <_Z41__static_initialization_and_destruction_0ii+0x682>
 80108d0:	2301      	movs	r3, #1
 80108d2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80108d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80108da:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80108de:	f107 0272 	add.w	r2, r7, #114	; 0x72
 80108e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80108e6:	4619      	mov	r1, r3
 80108e8:	48a1      	ldr	r0, [pc, #644]	; (8010b70 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 80108ea:	f7fa ff6f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 80108ee:	4ba1      	ldr	r3, [pc, #644]	; (8010b74 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	3301      	adds	r3, #1
 80108f4:	4a9f      	ldr	r2, [pc, #636]	; (8010b74 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 80108f6:	6013      	str	r3, [r2, #0]
 80108f8:	4b9e      	ldr	r3, [pc, #632]	; (8010b74 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	2b01      	cmp	r3, #1
 80108fe:	bf0c      	ite	eq
 8010900:	2301      	moveq	r3, #1
 8010902:	2300      	movne	r3, #0
 8010904:	b2db      	uxtb	r3, r3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d00e      	beq.n	8010928 <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 801090a:	2301      	movs	r3, #1
 801090c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8010910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010914:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8010918:	f107 0276 	add.w	r2, r7, #118	; 0x76
 801091c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010920:	4619      	mov	r1, r3
 8010922:	4895      	ldr	r0, [pc, #596]	; (8010b78 <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 8010924:	f7fa ff52 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 8010928:	4b94      	ldr	r3, [pc, #592]	; (8010b7c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	3301      	adds	r3, #1
 801092e:	4a93      	ldr	r2, [pc, #588]	; (8010b7c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 8010930:	6013      	str	r3, [r2, #0]
 8010932:	4b92      	ldr	r3, [pc, #584]	; (8010b7c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b01      	cmp	r3, #1
 8010938:	bf0c      	ite	eq
 801093a:	2301      	moveq	r3, #1
 801093c:	2300      	movne	r3, #0
 801093e:	b2db      	uxtb	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00e      	beq.n	8010962 <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 8010944:	2301      	movs	r3, #1
 8010946:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801094a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801094e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8010952:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 8010956:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801095a:	4619      	mov	r1, r3
 801095c:	4888      	ldr	r0, [pc, #544]	; (8010b80 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 801095e:	f7fa ff35 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 8010962:	4b88      	ldr	r3, [pc, #544]	; (8010b84 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	3301      	adds	r3, #1
 8010968:	4a86      	ldr	r2, [pc, #536]	; (8010b84 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 801096a:	6013      	str	r3, [r2, #0]
 801096c:	4b85      	ldr	r3, [pc, #532]	; (8010b84 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b01      	cmp	r3, #1
 8010972:	bf0c      	ite	eq
 8010974:	2301      	moveq	r3, #1
 8010976:	2300      	movne	r3, #0
 8010978:	b2db      	uxtb	r3, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	d00e      	beq.n	801099c <_Z41__static_initialization_and_destruction_0ii+0x730>
 801097e:	2301      	movs	r3, #1
 8010980:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8010984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010988:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801098c:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 8010990:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010994:	4619      	mov	r1, r3
 8010996:	487c      	ldr	r0, [pc, #496]	; (8010b88 <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 8010998:	f7fa ff18 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 801099c:	4b7b      	ldr	r3, [pc, #492]	; (8010b8c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	3301      	adds	r3, #1
 80109a2:	4a7a      	ldr	r2, [pc, #488]	; (8010b8c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 80109a4:	6013      	str	r3, [r2, #0]
 80109a6:	4b79      	ldr	r3, [pc, #484]	; (8010b8c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	2b01      	cmp	r3, #1
 80109ac:	bf0c      	ite	eq
 80109ae:	2301      	moveq	r3, #1
 80109b0:	2300      	movne	r3, #0
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d00e      	beq.n	80109d6 <_Z41__static_initialization_and_destruction_0ii+0x76a>
 80109b8:	2301      	movs	r3, #1
 80109ba:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80109be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109c2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80109c6:	f107 0282 	add.w	r2, r7, #130	; 0x82
 80109ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80109ce:	4619      	mov	r1, r3
 80109d0:	486f      	ldr	r0, [pc, #444]	; (8010b90 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 80109d2:	f7fa fefb 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 80109d6:	4b6f      	ldr	r3, [pc, #444]	; (8010b94 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	3301      	adds	r3, #1
 80109dc:	4a6d      	ldr	r2, [pc, #436]	; (8010b94 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80109de:	6013      	str	r3, [r2, #0]
 80109e0:	4b6c      	ldr	r3, [pc, #432]	; (8010b94 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	2b01      	cmp	r3, #1
 80109e6:	bf0c      	ite	eq
 80109e8:	2301      	moveq	r3, #1
 80109ea:	2300      	movne	r3, #0
 80109ec:	b2db      	uxtb	r3, r3
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d00d      	beq.n	8010a0e <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 80109f2:	2302      	movs	r3, #2
 80109f4:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 80109f8:	2301      	movs	r3, #1
 80109fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 80109fe:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8010a02:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8010a06:	4619      	mov	r1, r3
 8010a08:	4863      	ldr	r0, [pc, #396]	; (8010b98 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 8010a0a:	f7fa fedf 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 8010a0e:	4b63      	ldr	r3, [pc, #396]	; (8010b9c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	3301      	adds	r3, #1
 8010a14:	4a61      	ldr	r2, [pc, #388]	; (8010b9c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 8010a16:	6013      	str	r3, [r2, #0]
 8010a18:	4b60      	ldr	r3, [pc, #384]	; (8010b9c <_Z41__static_initialization_and_destruction_0ii+0x930>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	2b01      	cmp	r3, #1
 8010a1e:	bf0c      	ite	eq
 8010a20:	2301      	moveq	r3, #1
 8010a22:	2300      	movne	r3, #0
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d00d      	beq.n	8010a46 <_Z41__static_initialization_and_destruction_0ii+0x7da>
 8010a2a:	2302      	movs	r3, #2
 8010a2c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8010a30:	2302      	movs	r3, #2
 8010a32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8010a36:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 8010a3a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010a3e:	4619      	mov	r1, r3
 8010a40:	4857      	ldr	r0, [pc, #348]	; (8010ba0 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 8010a42:	f7fa fec3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 8010a46:	4b57      	ldr	r3, [pc, #348]	; (8010ba4 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	3301      	adds	r3, #1
 8010a4c:	4a55      	ldr	r2, [pc, #340]	; (8010ba4 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8010a4e:	6013      	str	r3, [r2, #0]
 8010a50:	4b54      	ldr	r3, [pc, #336]	; (8010ba4 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	2b01      	cmp	r3, #1
 8010a56:	bf0c      	ite	eq
 8010a58:	2301      	moveq	r3, #1
 8010a5a:	2300      	movne	r3, #0
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d00d      	beq.n	8010a7e <_Z41__static_initialization_and_destruction_0ii+0x812>
 8010a62:	2302      	movs	r3, #2
 8010a64:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8010a68:	2304      	movs	r3, #4
 8010a6a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8010a6e:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 8010a72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010a76:	4619      	mov	r1, r3
 8010a78:	484b      	ldr	r0, [pc, #300]	; (8010ba8 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 8010a7a:	f7fa fea7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 8010a7e:	4b4b      	ldr	r3, [pc, #300]	; (8010bac <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	3301      	adds	r3, #1
 8010a84:	4a49      	ldr	r2, [pc, #292]	; (8010bac <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8010a86:	6013      	str	r3, [r2, #0]
 8010a88:	4b48      	ldr	r3, [pc, #288]	; (8010bac <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	bf0c      	ite	eq
 8010a90:	2301      	moveq	r3, #1
 8010a92:	2300      	movne	r3, #0
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d00d      	beq.n	8010ab6 <_Z41__static_initialization_and_destruction_0ii+0x84a>
 8010a9a:	2302      	movs	r3, #2
 8010a9c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8010aa0:	2308      	movs	r3, #8
 8010aa2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8010aa6:	f107 0292 	add.w	r2, r7, #146	; 0x92
 8010aaa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010aae:	4619      	mov	r1, r3
 8010ab0:	483f      	ldr	r0, [pc, #252]	; (8010bb0 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 8010ab2:	f7fa fe8b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 8010ab6:	4b3f      	ldr	r3, [pc, #252]	; (8010bb4 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	3301      	adds	r3, #1
 8010abc:	4a3d      	ldr	r2, [pc, #244]	; (8010bb4 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8010abe:	6013      	str	r3, [r2, #0]
 8010ac0:	4b3c      	ldr	r3, [pc, #240]	; (8010bb4 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	bf0c      	ite	eq
 8010ac8:	2301      	moveq	r3, #1
 8010aca:	2300      	movne	r3, #0
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d00d      	beq.n	8010aee <_Z41__static_initialization_and_destruction_0ii+0x882>
 8010ad2:	2302      	movs	r3, #2
 8010ad4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8010ad8:	2310      	movs	r3, #16
 8010ada:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8010ade:	f107 0296 	add.w	r2, r7, #150	; 0x96
 8010ae2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010ae6:	4619      	mov	r1, r3
 8010ae8:	4833      	ldr	r0, [pc, #204]	; (8010bb8 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 8010aea:	f7fa fe6f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 8010aee:	4b33      	ldr	r3, [pc, #204]	; (8010bbc <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	3301      	adds	r3, #1
 8010af4:	4a31      	ldr	r2, [pc, #196]	; (8010bbc <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	4b30      	ldr	r3, [pc, #192]	; (8010bbc <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	bf0c      	ite	eq
 8010b00:	2301      	moveq	r3, #1
 8010b02:	2300      	movne	r3, #0
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d00d      	beq.n	8010b26 <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 8010b0a:	2302      	movs	r3, #2
 8010b0c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8010b10:	2320      	movs	r3, #32
 8010b12:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8010b16:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 8010b1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010b1e:	4619      	mov	r1, r3
 8010b20:	4827      	ldr	r0, [pc, #156]	; (8010bc0 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 8010b22:	f7fa fe53 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 8010b26:	4b27      	ldr	r3, [pc, #156]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	4a25      	ldr	r2, [pc, #148]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 8010b2e:	6013      	str	r3, [r2, #0]
 8010b30:	4b24      	ldr	r3, [pc, #144]	; (8010bc4 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	2b01      	cmp	r3, #1
 8010b36:	bf0c      	ite	eq
 8010b38:	2301      	moveq	r3, #1
 8010b3a:	2300      	movne	r3, #0
 8010b3c:	b2db      	uxtb	r3, r3
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d00d      	beq.n	8010b5e <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 8010b42:	2302      	movs	r3, #2
 8010b44:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8010b48:	2340      	movs	r3, #64	; 0x40
 8010b4a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8010b4e:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 8010b52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010b56:	4619      	mov	r1, r3
 8010b58:	481b      	ldr	r0, [pc, #108]	; (8010bc8 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 8010b5a:	f7fa fe37 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 8010b5e:	4b1b      	ldr	r3, [pc, #108]	; (8010bcc <_Z41__static_initialization_and_destruction_0ii+0x960>)
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	3301      	adds	r3, #1
 8010b64:	e034      	b.n	8010bd0 <_Z41__static_initialization_and_destruction_0ii+0x964>
 8010b66:	bf00      	nop
 8010b68:	20000b54 	.word	0x20000b54
 8010b6c:	200010d0 	.word	0x200010d0
 8010b70:	20000b5c 	.word	0x20000b5c
 8010b74:	200010d4 	.word	0x200010d4
 8010b78:	20000b64 	.word	0x20000b64
 8010b7c:	200010d8 	.word	0x200010d8
 8010b80:	20000b6c 	.word	0x20000b6c
 8010b84:	200010dc 	.word	0x200010dc
 8010b88:	20000b74 	.word	0x20000b74
 8010b8c:	200010e0 	.word	0x200010e0
 8010b90:	20000b7c 	.word	0x20000b7c
 8010b94:	200010e4 	.word	0x200010e4
 8010b98:	20000b84 	.word	0x20000b84
 8010b9c:	200010e8 	.word	0x200010e8
 8010ba0:	20000b8c 	.word	0x20000b8c
 8010ba4:	200010ec 	.word	0x200010ec
 8010ba8:	20000b94 	.word	0x20000b94
 8010bac:	200010f0 	.word	0x200010f0
 8010bb0:	20000b9c 	.word	0x20000b9c
 8010bb4:	200010f4 	.word	0x200010f4
 8010bb8:	20000ba4 	.word	0x20000ba4
 8010bbc:	200010f8 	.word	0x200010f8
 8010bc0:	20000bac 	.word	0x20000bac
 8010bc4:	200010fc 	.word	0x200010fc
 8010bc8:	20000bb4 	.word	0x20000bb4
 8010bcc:	20001100 	.word	0x20001100
 8010bd0:	4aac      	ldr	r2, [pc, #688]	; (8010e84 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 8010bd2:	6013      	str	r3, [r2, #0]
 8010bd4:	4bab      	ldr	r3, [pc, #684]	; (8010e84 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	2b01      	cmp	r3, #1
 8010bda:	bf0c      	ite	eq
 8010bdc:	2301      	moveq	r3, #1
 8010bde:	2300      	movne	r3, #0
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d00d      	beq.n	8010c02 <_Z41__static_initialization_and_destruction_0ii+0x996>
 8010be6:	2302      	movs	r3, #2
 8010be8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8010bec:	2380      	movs	r3, #128	; 0x80
 8010bee:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8010bf2:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 8010bf6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010bfa:	4619      	mov	r1, r3
 8010bfc:	48a2      	ldr	r0, [pc, #648]	; (8010e88 <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 8010bfe:	f7fa fde5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 8010c02:	4ba2      	ldr	r3, [pc, #648]	; (8010e8c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	3301      	adds	r3, #1
 8010c08:	4aa0      	ldr	r2, [pc, #640]	; (8010e8c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 8010c0a:	6013      	str	r3, [r2, #0]
 8010c0c:	4b9f      	ldr	r3, [pc, #636]	; (8010e8c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	bf0c      	ite	eq
 8010c14:	2301      	moveq	r3, #1
 8010c16:	2300      	movne	r3, #0
 8010c18:	b2db      	uxtb	r3, r3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d00e      	beq.n	8010c3c <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 8010c1e:	2302      	movs	r3, #2
 8010c20:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8010c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c28:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8010c2c:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 8010c30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8010c34:	4619      	mov	r1, r3
 8010c36:	4896      	ldr	r0, [pc, #600]	; (8010e90 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 8010c38:	f7fa fdc8 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 8010c3c:	4b95      	ldr	r3, [pc, #596]	; (8010e94 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	3301      	adds	r3, #1
 8010c42:	4a94      	ldr	r2, [pc, #592]	; (8010e94 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8010c44:	6013      	str	r3, [r2, #0]
 8010c46:	4b93      	ldr	r3, [pc, #588]	; (8010e94 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b01      	cmp	r3, #1
 8010c4c:	bf0c      	ite	eq
 8010c4e:	2301      	moveq	r3, #1
 8010c50:	2300      	movne	r3, #0
 8010c52:	b2db      	uxtb	r3, r3
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d00e      	beq.n	8010c76 <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 8010c58:	2302      	movs	r3, #2
 8010c5a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8010c5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010c62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8010c66:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 8010c6a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8010c6e:	4619      	mov	r1, r3
 8010c70:	4889      	ldr	r0, [pc, #548]	; (8010e98 <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 8010c72:	f7fa fdab 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 8010c76:	4b89      	ldr	r3, [pc, #548]	; (8010e9c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	4a87      	ldr	r2, [pc, #540]	; (8010e9c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8010c7e:	6013      	str	r3, [r2, #0]
 8010c80:	4b86      	ldr	r3, [pc, #536]	; (8010e9c <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	bf0c      	ite	eq
 8010c88:	2301      	moveq	r3, #1
 8010c8a:	2300      	movne	r3, #0
 8010c8c:	b2db      	uxtb	r3, r3
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00e      	beq.n	8010cb0 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 8010c92:	2302      	movs	r3, #2
 8010c94:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8010c98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c9c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8010ca0:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 8010ca4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010ca8:	4619      	mov	r1, r3
 8010caa:	487d      	ldr	r0, [pc, #500]	; (8010ea0 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 8010cac:	f7fa fd8e 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 8010cb0:	4b7c      	ldr	r3, [pc, #496]	; (8010ea4 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	3301      	adds	r3, #1
 8010cb6:	4a7b      	ldr	r2, [pc, #492]	; (8010ea4 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8010cb8:	6013      	str	r3, [r2, #0]
 8010cba:	4b7a      	ldr	r3, [pc, #488]	; (8010ea4 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b01      	cmp	r3, #1
 8010cc0:	bf0c      	ite	eq
 8010cc2:	2301      	moveq	r3, #1
 8010cc4:	2300      	movne	r3, #0
 8010cc6:	b2db      	uxtb	r3, r3
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d00e      	beq.n	8010cea <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 8010ccc:	2302      	movs	r3, #2
 8010cce:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8010cd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010cd6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8010cda:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 8010cde:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010ce2:	4619      	mov	r1, r3
 8010ce4:	4870      	ldr	r0, [pc, #448]	; (8010ea8 <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 8010ce6:	f7fa fd71 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 8010cea:	4b70      	ldr	r3, [pc, #448]	; (8010eac <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	3301      	adds	r3, #1
 8010cf0:	4a6e      	ldr	r2, [pc, #440]	; (8010eac <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	4b6d      	ldr	r3, [pc, #436]	; (8010eac <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	2b01      	cmp	r3, #1
 8010cfa:	bf0c      	ite	eq
 8010cfc:	2301      	moveq	r3, #1
 8010cfe:	2300      	movne	r3, #0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d00e      	beq.n	8010d24 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 8010d06:	2302      	movs	r3, #2
 8010d08:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8010d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d10:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8010d14:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 8010d18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010d1c:	4619      	mov	r1, r3
 8010d1e:	4864      	ldr	r0, [pc, #400]	; (8010eb0 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 8010d20:	f7fa fd54 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 8010d24:	4b63      	ldr	r3, [pc, #396]	; (8010eb4 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	3301      	adds	r3, #1
 8010d2a:	4a62      	ldr	r2, [pc, #392]	; (8010eb4 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 8010d2c:	6013      	str	r3, [r2, #0]
 8010d2e:	4b61      	ldr	r3, [pc, #388]	; (8010eb4 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	bf0c      	ite	eq
 8010d36:	2301      	moveq	r3, #1
 8010d38:	2300      	movne	r3, #0
 8010d3a:	b2db      	uxtb	r3, r3
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00e      	beq.n	8010d5e <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 8010d40:	2302      	movs	r3, #2
 8010d42:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8010d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d4a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 8010d4e:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 8010d52:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010d56:	4619      	mov	r1, r3
 8010d58:	4857      	ldr	r0, [pc, #348]	; (8010eb8 <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 8010d5a:	f7fa fd37 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 8010d5e:	4b57      	ldr	r3, [pc, #348]	; (8010ebc <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	3301      	adds	r3, #1
 8010d64:	4a55      	ldr	r2, [pc, #340]	; (8010ebc <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8010d66:	6013      	str	r3, [r2, #0]
 8010d68:	4b54      	ldr	r3, [pc, #336]	; (8010ebc <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b01      	cmp	r3, #1
 8010d6e:	bf0c      	ite	eq
 8010d70:	2301      	moveq	r3, #1
 8010d72:	2300      	movne	r3, #0
 8010d74:	b2db      	uxtb	r3, r3
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d00e      	beq.n	8010d98 <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 8010d7a:	2302      	movs	r3, #2
 8010d7c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8010d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8010d88:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 8010d8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010d90:	4619      	mov	r1, r3
 8010d92:	484b      	ldr	r0, [pc, #300]	; (8010ec0 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 8010d94:	f7fa fd1a 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 8010d98:	4b4a      	ldr	r3, [pc, #296]	; (8010ec4 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	3301      	adds	r3, #1
 8010d9e:	4a49      	ldr	r2, [pc, #292]	; (8010ec4 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	4b48      	ldr	r3, [pc, #288]	; (8010ec4 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	2b01      	cmp	r3, #1
 8010da8:	bf0c      	ite	eq
 8010daa:	2301      	moveq	r3, #1
 8010dac:	2300      	movne	r3, #0
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d00e      	beq.n	8010dd2 <_Z41__static_initialization_and_destruction_0ii+0xb66>
 8010db4:	2302      	movs	r3, #2
 8010db6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8010dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dbe:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8010dc2:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 8010dc6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8010dca:	4619      	mov	r1, r3
 8010dcc:	483e      	ldr	r0, [pc, #248]	; (8010ec8 <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 8010dce:	f7fa fcfd 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 8010dd2:	4b3e      	ldr	r3, [pc, #248]	; (8010ecc <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	3301      	adds	r3, #1
 8010dd8:	4a3c      	ldr	r2, [pc, #240]	; (8010ecc <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 8010dda:	6013      	str	r3, [r2, #0]
 8010ddc:	4b3b      	ldr	r3, [pc, #236]	; (8010ecc <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	bf0c      	ite	eq
 8010de4:	2301      	moveq	r3, #1
 8010de6:	2300      	movne	r3, #0
 8010de8:	b2db      	uxtb	r3, r3
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d00d      	beq.n	8010e0a <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 8010dee:	2303      	movs	r3, #3
 8010df0:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8010df4:	2304      	movs	r3, #4
 8010df6:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8010dfa:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 8010dfe:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010e02:	4619      	mov	r1, r3
 8010e04:	4832      	ldr	r0, [pc, #200]	; (8010ed0 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 8010e06:	f7fa fce1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 8010e0a:	4b32      	ldr	r3, [pc, #200]	; (8010ed4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	4a30      	ldr	r2, [pc, #192]	; (8010ed4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8010e12:	6013      	str	r3, [r2, #0]
 8010e14:	4b2f      	ldr	r3, [pc, #188]	; (8010ed4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	bf0c      	ite	eq
 8010e1c:	2301      	moveq	r3, #1
 8010e1e:	2300      	movne	r3, #0
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d00d      	beq.n	8010e42 <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 8010e26:	2307      	movs	r3, #7
 8010e28:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8010e32:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8010e36:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010e3a:	4619      	mov	r1, r3
 8010e3c:	4826      	ldr	r0, [pc, #152]	; (8010ed8 <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 8010e3e:	f7fa fcc5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 8010e42:	4b26      	ldr	r3, [pc, #152]	; (8010edc <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	3301      	adds	r3, #1
 8010e48:	4a24      	ldr	r2, [pc, #144]	; (8010edc <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8010e4a:	6013      	str	r3, [r2, #0]
 8010e4c:	4b23      	ldr	r3, [pc, #140]	; (8010edc <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	bf0c      	ite	eq
 8010e54:	2301      	moveq	r3, #1
 8010e56:	2300      	movne	r3, #0
 8010e58:	b2db      	uxtb	r3, r3
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00d      	beq.n	8010e7a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 8010e5e:	2307      	movs	r3, #7
 8010e60:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8010e64:	2302      	movs	r3, #2
 8010e66:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8010e6a:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 8010e6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8010e72:	4619      	mov	r1, r3
 8010e74:	481a      	ldr	r0, [pc, #104]	; (8010ee0 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 8010e76:	f7fa fca9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 8010e7a:	bf00      	nop
 8010e7c:	37d0      	adds	r7, #208	; 0xd0
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	20001100 	.word	0x20001100
 8010e88:	20000bbc 	.word	0x20000bbc
 8010e8c:	20001104 	.word	0x20001104
 8010e90:	20000bc4 	.word	0x20000bc4
 8010e94:	20001108 	.word	0x20001108
 8010e98:	20000bcc 	.word	0x20000bcc
 8010e9c:	2000110c 	.word	0x2000110c
 8010ea0:	20000bd4 	.word	0x20000bd4
 8010ea4:	20001110 	.word	0x20001110
 8010ea8:	20000bdc 	.word	0x20000bdc
 8010eac:	20001114 	.word	0x20001114
 8010eb0:	20000be4 	.word	0x20000be4
 8010eb4:	20001118 	.word	0x20001118
 8010eb8:	20000bec 	.word	0x20000bec
 8010ebc:	2000111c 	.word	0x2000111c
 8010ec0:	20000bf4 	.word	0x20000bf4
 8010ec4:	20001120 	.word	0x20001120
 8010ec8:	20000bfc 	.word	0x20000bfc
 8010ecc:	20001124 	.word	0x20001124
 8010ed0:	20000c04 	.word	0x20000c04
 8010ed4:	20001128 	.word	0x20001128
 8010ed8:	20000c0c 	.word	0x20000c0c
 8010edc:	2000112c 	.word	0x2000112c
 8010ee0:	20000c14 	.word	0x20000c14

08010ee4 <_GLOBAL__sub_I_fs>:
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010eec:	2001      	movs	r0, #1
 8010eee:	f7ff f9bd 	bl	801026c <_Z41__static_initialization_and_destruction_0ii>
 8010ef2:	bd80      	pop	{r7, pc}

08010ef4 <_Z41__static_initialization_and_destruction_0ii>:
			values.z = z;
			//Daten an SD-Task senden
			//osMessagePut(sensorMessageId, values, 0);
		//}
	}
}
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b0b4      	sub	sp, #208	; 0xd0
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	2b01      	cmp	r3, #1
 8010f02:	f040 85fe 	bne.w	8011b02 <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	f040 85f8 	bne.w	8011b02 <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	/* --Short-cuts for GPIOs. */
	using _Port=Port::Select;
	using _Pin=Pin::BitMask;

	/* --Port A. */
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 8010f12:	4ba1      	ldr	r3, [pc, #644]	; (8011198 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	3301      	adds	r3, #1
 8010f18:	4a9f      	ldr	r2, [pc, #636]	; (8011198 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8010f1a:	6013      	str	r3, [r2, #0]
 8010f1c:	4b9e      	ldr	r3, [pc, #632]	; (8011198 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	bf0c      	ite	eq
 8010f24:	2301      	moveq	r3, #1
 8010f26:	2300      	movne	r3, #0
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00b      	beq.n	8010f46 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8010f2e:	2300      	movs	r3, #0
 8010f30:	81bb      	strh	r3, [r7, #12]
 8010f32:	2301      	movs	r3, #1
 8010f34:	81fb      	strh	r3, [r7, #14]
 8010f36:	f107 020e 	add.w	r2, r7, #14
 8010f3a:	f107 030c 	add.w	r3, r7, #12
 8010f3e:	4619      	mov	r1, r3
 8010f40:	4896      	ldr	r0, [pc, #600]	; (801119c <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8010f42:	f7fa fc43 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 8010f46:	4b96      	ldr	r3, [pc, #600]	; (80111a0 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	4a94      	ldr	r2, [pc, #592]	; (80111a0 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8010f4e:	6013      	str	r3, [r2, #0]
 8010f50:	4b93      	ldr	r3, [pc, #588]	; (80111a0 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b01      	cmp	r3, #1
 8010f56:	bf0c      	ite	eq
 8010f58:	2301      	moveq	r3, #1
 8010f5a:	2300      	movne	r3, #0
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d00b      	beq.n	8010f7a <_Z41__static_initialization_and_destruction_0ii+0x86>
 8010f62:	2300      	movs	r3, #0
 8010f64:	823b      	strh	r3, [r7, #16]
 8010f66:	2302      	movs	r3, #2
 8010f68:	827b      	strh	r3, [r7, #18]
 8010f6a:	f107 0212 	add.w	r2, r7, #18
 8010f6e:	f107 0310 	add.w	r3, r7, #16
 8010f72:	4619      	mov	r1, r3
 8010f74:	488b      	ldr	r0, [pc, #556]	; (80111a4 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8010f76:	f7fa fc29 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 8010f7a:	4b8b      	ldr	r3, [pc, #556]	; (80111a8 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	3301      	adds	r3, #1
 8010f80:	4a89      	ldr	r2, [pc, #548]	; (80111a8 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8010f82:	6013      	str	r3, [r2, #0]
 8010f84:	4b88      	ldr	r3, [pc, #544]	; (80111a8 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b01      	cmp	r3, #1
 8010f8a:	bf0c      	ite	eq
 8010f8c:	2301      	moveq	r3, #1
 8010f8e:	2300      	movne	r3, #0
 8010f90:	b2db      	uxtb	r3, r3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d00b      	beq.n	8010fae <_Z41__static_initialization_and_destruction_0ii+0xba>
 8010f96:	2300      	movs	r3, #0
 8010f98:	82bb      	strh	r3, [r7, #20]
 8010f9a:	2304      	movs	r3, #4
 8010f9c:	82fb      	strh	r3, [r7, #22]
 8010f9e:	f107 0216 	add.w	r2, r7, #22
 8010fa2:	f107 0314 	add.w	r3, r7, #20
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	4880      	ldr	r0, [pc, #512]	; (80111ac <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8010faa:	f7fa fc0f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 8010fae:	4b80      	ldr	r3, [pc, #512]	; (80111b0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	3301      	adds	r3, #1
 8010fb4:	4a7e      	ldr	r2, [pc, #504]	; (80111b0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8010fb6:	6013      	str	r3, [r2, #0]
 8010fb8:	4b7d      	ldr	r3, [pc, #500]	; (80111b0 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	2b01      	cmp	r3, #1
 8010fbe:	bf0c      	ite	eq
 8010fc0:	2301      	moveq	r3, #1
 8010fc2:	2300      	movne	r3, #0
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00b      	beq.n	8010fe2 <_Z41__static_initialization_and_destruction_0ii+0xee>
 8010fca:	2300      	movs	r3, #0
 8010fcc:	833b      	strh	r3, [r7, #24]
 8010fce:	2308      	movs	r3, #8
 8010fd0:	837b      	strh	r3, [r7, #26]
 8010fd2:	f107 021a 	add.w	r2, r7, #26
 8010fd6:	f107 0318 	add.w	r3, r7, #24
 8010fda:	4619      	mov	r1, r3
 8010fdc:	4875      	ldr	r0, [pc, #468]	; (80111b4 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8010fde:	f7fa fbf5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 8010fe2:	4b75      	ldr	r3, [pc, #468]	; (80111b8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	4a73      	ldr	r2, [pc, #460]	; (80111b8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010fea:	6013      	str	r3, [r2, #0]
 8010fec:	4b72      	ldr	r3, [pc, #456]	; (80111b8 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	bf0c      	ite	eq
 8010ff4:	2301      	moveq	r3, #1
 8010ff6:	2300      	movne	r3, #0
 8010ff8:	b2db      	uxtb	r3, r3
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00b      	beq.n	8011016 <_Z41__static_initialization_and_destruction_0ii+0x122>
 8010ffe:	2300      	movs	r3, #0
 8011000:	83bb      	strh	r3, [r7, #28]
 8011002:	2310      	movs	r3, #16
 8011004:	83fb      	strh	r3, [r7, #30]
 8011006:	f107 021e 	add.w	r2, r7, #30
 801100a:	f107 031c 	add.w	r3, r7, #28
 801100e:	4619      	mov	r1, r3
 8011010:	486a      	ldr	r0, [pc, #424]	; (80111bc <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8011012:	f7fa fbdb 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 8011016:	4b6a      	ldr	r3, [pc, #424]	; (80111c0 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	3301      	adds	r3, #1
 801101c:	4a68      	ldr	r2, [pc, #416]	; (80111c0 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 801101e:	6013      	str	r3, [r2, #0]
 8011020:	4b67      	ldr	r3, [pc, #412]	; (80111c0 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	2b01      	cmp	r3, #1
 8011026:	bf0c      	ite	eq
 8011028:	2301      	moveq	r3, #1
 801102a:	2300      	movne	r3, #0
 801102c:	b2db      	uxtb	r3, r3
 801102e:	2b00      	cmp	r3, #0
 8011030:	d00b      	beq.n	801104a <_Z41__static_initialization_and_destruction_0ii+0x156>
 8011032:	2300      	movs	r3, #0
 8011034:	843b      	strh	r3, [r7, #32]
 8011036:	2320      	movs	r3, #32
 8011038:	847b      	strh	r3, [r7, #34]	; 0x22
 801103a:	f107 0222 	add.w	r2, r7, #34	; 0x22
 801103e:	f107 0320 	add.w	r3, r7, #32
 8011042:	4619      	mov	r1, r3
 8011044:	485f      	ldr	r0, [pc, #380]	; (80111c4 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8011046:	f7fa fbc1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 801104a:	4b5f      	ldr	r3, [pc, #380]	; (80111c8 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	3301      	adds	r3, #1
 8011050:	4a5d      	ldr	r2, [pc, #372]	; (80111c8 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8011052:	6013      	str	r3, [r2, #0]
 8011054:	4b5c      	ldr	r3, [pc, #368]	; (80111c8 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	2b01      	cmp	r3, #1
 801105a:	bf0c      	ite	eq
 801105c:	2301      	moveq	r3, #1
 801105e:	2300      	movne	r3, #0
 8011060:	b2db      	uxtb	r3, r3
 8011062:	2b00      	cmp	r3, #0
 8011064:	d00b      	beq.n	801107e <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8011066:	2300      	movs	r3, #0
 8011068:	84bb      	strh	r3, [r7, #36]	; 0x24
 801106a:	2340      	movs	r3, #64	; 0x40
 801106c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801106e:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8011072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011076:	4619      	mov	r1, r3
 8011078:	4854      	ldr	r0, [pc, #336]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 801107a:	f7fa fba7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 801107e:	4b54      	ldr	r3, [pc, #336]	; (80111d0 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	3301      	adds	r3, #1
 8011084:	4a52      	ldr	r2, [pc, #328]	; (80111d0 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8011086:	6013      	str	r3, [r2, #0]
 8011088:	4b51      	ldr	r3, [pc, #324]	; (80111d0 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b01      	cmp	r3, #1
 801108e:	bf0c      	ite	eq
 8011090:	2301      	moveq	r3, #1
 8011092:	2300      	movne	r3, #0
 8011094:	b2db      	uxtb	r3, r3
 8011096:	2b00      	cmp	r3, #0
 8011098:	d00b      	beq.n	80110b2 <_Z41__static_initialization_and_destruction_0ii+0x1be>
 801109a:	2300      	movs	r3, #0
 801109c:	853b      	strh	r3, [r7, #40]	; 0x28
 801109e:	2380      	movs	r3, #128	; 0x80
 80110a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80110a2:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 80110a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80110aa:	4619      	mov	r1, r3
 80110ac:	4849      	ldr	r0, [pc, #292]	; (80111d4 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80110ae:	f7fa fb8d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 80110b2:	4b49      	ldr	r3, [pc, #292]	; (80111d8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	3301      	adds	r3, #1
 80110b8:	4a47      	ldr	r2, [pc, #284]	; (80111d8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80110ba:	6013      	str	r3, [r2, #0]
 80110bc:	4b46      	ldr	r3, [pc, #280]	; (80111d8 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	bf0c      	ite	eq
 80110c4:	2301      	moveq	r3, #1
 80110c6:	2300      	movne	r3, #0
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d00c      	beq.n	80110e8 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 80110ce:	2300      	movs	r3, #0
 80110d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80110d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80110d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80110d8:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80110dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80110e0:	4619      	mov	r1, r3
 80110e2:	483e      	ldr	r0, [pc, #248]	; (80111dc <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 80110e4:	f7fa fb72 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 80110e8:	4b3d      	ldr	r3, [pc, #244]	; (80111e0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	3301      	adds	r3, #1
 80110ee:	4a3c      	ldr	r2, [pc, #240]	; (80111e0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80110f0:	6013      	str	r3, [r2, #0]
 80110f2:	4b3b      	ldr	r3, [pc, #236]	; (80111e0 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	2b01      	cmp	r3, #1
 80110f8:	bf0c      	ite	eq
 80110fa:	2301      	moveq	r3, #1
 80110fc:	2300      	movne	r3, #0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00c      	beq.n	801111e <_Z41__static_initialization_and_destruction_0ii+0x22a>
 8011104:	2300      	movs	r3, #0
 8011106:	863b      	strh	r3, [r7, #48]	; 0x30
 8011108:	f44f 7300 	mov.w	r3, #512	; 0x200
 801110c:	867b      	strh	r3, [r7, #50]	; 0x32
 801110e:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8011112:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011116:	4619      	mov	r1, r3
 8011118:	4832      	ldr	r0, [pc, #200]	; (80111e4 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 801111a:	f7fa fb57 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 801111e:	4b32      	ldr	r3, [pc, #200]	; (80111e8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	3301      	adds	r3, #1
 8011124:	4a30      	ldr	r2, [pc, #192]	; (80111e8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8011126:	6013      	str	r3, [r2, #0]
 8011128:	4b2f      	ldr	r3, [pc, #188]	; (80111e8 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b01      	cmp	r3, #1
 801112e:	bf0c      	ite	eq
 8011130:	2301      	moveq	r3, #1
 8011132:	2300      	movne	r3, #0
 8011134:	b2db      	uxtb	r3, r3
 8011136:	2b00      	cmp	r3, #0
 8011138:	d00c      	beq.n	8011154 <_Z41__static_initialization_and_destruction_0ii+0x260>
 801113a:	2300      	movs	r3, #0
 801113c:	86bb      	strh	r3, [r7, #52]	; 0x34
 801113e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011142:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011144:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8011148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801114c:	4619      	mov	r1, r3
 801114e:	4827      	ldr	r0, [pc, #156]	; (80111ec <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8011150:	f7fa fb3c 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 8011154:	4b26      	ldr	r3, [pc, #152]	; (80111f0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	3301      	adds	r3, #1
 801115a:	4a25      	ldr	r2, [pc, #148]	; (80111f0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 801115c:	6013      	str	r3, [r2, #0]
 801115e:	4b24      	ldr	r3, [pc, #144]	; (80111f0 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	2b01      	cmp	r3, #1
 8011164:	bf0c      	ite	eq
 8011166:	2301      	moveq	r3, #1
 8011168:	2300      	movne	r3, #0
 801116a:	b2db      	uxtb	r3, r3
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00c      	beq.n	801118a <_Z41__static_initialization_and_destruction_0ii+0x296>
 8011170:	2300      	movs	r3, #0
 8011172:	873b      	strh	r3, [r7, #56]	; 0x38
 8011174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011178:	877b      	strh	r3, [r7, #58]	; 0x3a
 801117a:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 801117e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011182:	4619      	mov	r1, r3
 8011184:	481b      	ldr	r0, [pc, #108]	; (80111f4 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8011186:	f7fa fb21 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 801118a:	4b1b      	ldr	r3, [pc, #108]	; (80111f8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	3301      	adds	r3, #1
 8011190:	4a19      	ldr	r2, [pc, #100]	; (80111f8 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8011192:	6013      	str	r3, [r2, #0]
 8011194:	e032      	b.n	80111fc <_Z41__static_initialization_and_destruction_0ii+0x308>
 8011196:	bf00      	nop
 8011198:	2000106c 	.word	0x2000106c
 801119c:	20000a94 	.word	0x20000a94
 80111a0:	20001070 	.word	0x20001070
 80111a4:	20000a9c 	.word	0x20000a9c
 80111a8:	20001074 	.word	0x20001074
 80111ac:	20000aa4 	.word	0x20000aa4
 80111b0:	20001078 	.word	0x20001078
 80111b4:	20000aac 	.word	0x20000aac
 80111b8:	2000107c 	.word	0x2000107c
 80111bc:	20000ab4 	.word	0x20000ab4
 80111c0:	20001080 	.word	0x20001080
 80111c4:	20000abc 	.word	0x20000abc
 80111c8:	20001084 	.word	0x20001084
 80111cc:	20000ac4 	.word	0x20000ac4
 80111d0:	20001088 	.word	0x20001088
 80111d4:	20000acc 	.word	0x20000acc
 80111d8:	2000108c 	.word	0x2000108c
 80111dc:	20000ad4 	.word	0x20000ad4
 80111e0:	20001090 	.word	0x20001090
 80111e4:	20000adc 	.word	0x20000adc
 80111e8:	20001094 	.word	0x20001094
 80111ec:	20000ae4 	.word	0x20000ae4
 80111f0:	20001098 	.word	0x20001098
 80111f4:	20000aec 	.word	0x20000aec
 80111f8:	2000109c 	.word	0x2000109c
 80111fc:	4bac      	ldr	r3, [pc, #688]	; (80114b0 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	2b01      	cmp	r3, #1
 8011202:	bf0c      	ite	eq
 8011204:	2301      	moveq	r3, #1
 8011206:	2300      	movne	r3, #0
 8011208:	b2db      	uxtb	r3, r3
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00c      	beq.n	8011228 <_Z41__static_initialization_and_destruction_0ii+0x334>
 801120e:	2300      	movs	r3, #0
 8011210:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011216:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011218:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 801121c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011220:	4619      	mov	r1, r3
 8011222:	48a4      	ldr	r0, [pc, #656]	; (80114b4 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 8011224:	f7fa fad2 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 8011228:	4ba3      	ldr	r3, [pc, #652]	; (80114b8 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	3301      	adds	r3, #1
 801122e:	4aa2      	ldr	r2, [pc, #648]	; (80114b8 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8011230:	6013      	str	r3, [r2, #0]
 8011232:	4ba1      	ldr	r3, [pc, #644]	; (80114b8 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	2b01      	cmp	r3, #1
 8011238:	bf0c      	ite	eq
 801123a:	2301      	moveq	r3, #1
 801123c:	2300      	movne	r3, #0
 801123e:	b2db      	uxtb	r3, r3
 8011240:	2b00      	cmp	r3, #0
 8011242:	d00e      	beq.n	8011262 <_Z41__static_initialization_and_destruction_0ii+0x36e>
 8011244:	2300      	movs	r3, #0
 8011246:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801124a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801124e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011252:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8011256:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801125a:	4619      	mov	r1, r3
 801125c:	4897      	ldr	r0, [pc, #604]	; (80114bc <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 801125e:	f7fa fab5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 8011262:	4b97      	ldr	r3, [pc, #604]	; (80114c0 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	3301      	adds	r3, #1
 8011268:	4a95      	ldr	r2, [pc, #596]	; (80114c0 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 801126a:	6013      	str	r3, [r2, #0]
 801126c:	4b94      	ldr	r3, [pc, #592]	; (80114c0 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2b01      	cmp	r3, #1
 8011272:	bf0c      	ite	eq
 8011274:	2301      	moveq	r3, #1
 8011276:	2300      	movne	r3, #0
 8011278:	b2db      	uxtb	r3, r3
 801127a:	2b00      	cmp	r3, #0
 801127c:	d00e      	beq.n	801129c <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 801127e:	2300      	movs	r3, #0
 8011280:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011284:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011288:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801128c:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8011290:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011294:	4619      	mov	r1, r3
 8011296:	488b      	ldr	r0, [pc, #556]	; (80114c4 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8011298:	f7fa fa98 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 801129c:	4b8a      	ldr	r3, [pc, #552]	; (80114c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	3301      	adds	r3, #1
 80112a2:	4a89      	ldr	r2, [pc, #548]	; (80114c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80112a4:	6013      	str	r3, [r2, #0]
 80112a6:	4b88      	ldr	r3, [pc, #544]	; (80114c8 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b01      	cmp	r3, #1
 80112ac:	bf0c      	ite	eq
 80112ae:	2301      	moveq	r3, #1
 80112b0:	2300      	movne	r3, #0
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00e      	beq.n	80112d6 <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 80112b8:	2300      	movs	r3, #0
 80112ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80112be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112c2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80112c6:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 80112ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112ce:	4619      	mov	r1, r3
 80112d0:	487e      	ldr	r0, [pc, #504]	; (80114cc <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 80112d2:	f7fa fa7b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port B. */
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 80112d6:	4b7e      	ldr	r3, [pc, #504]	; (80114d0 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	3301      	adds	r3, #1
 80112dc:	4a7c      	ldr	r2, [pc, #496]	; (80114d0 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80112de:	6013      	str	r3, [r2, #0]
 80112e0:	4b7b      	ldr	r3, [pc, #492]	; (80114d0 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b01      	cmp	r3, #1
 80112e6:	bf0c      	ite	eq
 80112e8:	2301      	moveq	r3, #1
 80112ea:	2300      	movne	r3, #0
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00d      	beq.n	801130e <_Z41__static_initialization_and_destruction_0ii+0x41a>
 80112f2:	2301      	movs	r3, #1
 80112f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80112f8:	2301      	movs	r3, #1
 80112fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80112fe:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8011302:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011306:	4619      	mov	r1, r3
 8011308:	4872      	ldr	r0, [pc, #456]	; (80114d4 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 801130a:	f7fa fa5f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 801130e:	4b72      	ldr	r3, [pc, #456]	; (80114d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3301      	adds	r3, #1
 8011314:	4a70      	ldr	r2, [pc, #448]	; (80114d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	4b6f      	ldr	r3, [pc, #444]	; (80114d8 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b01      	cmp	r3, #1
 801131e:	bf0c      	ite	eq
 8011320:	2301      	moveq	r3, #1
 8011322:	2300      	movne	r3, #0
 8011324:	b2db      	uxtb	r3, r3
 8011326:	2b00      	cmp	r3, #0
 8011328:	d00d      	beq.n	8011346 <_Z41__static_initialization_and_destruction_0ii+0x452>
 801132a:	2301      	movs	r3, #1
 801132c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8011330:	2302      	movs	r3, #2
 8011332:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8011336:	f107 0252 	add.w	r2, r7, #82	; 0x52
 801133a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801133e:	4619      	mov	r1, r3
 8011340:	4866      	ldr	r0, [pc, #408]	; (80114dc <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8011342:	f7fa fa43 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 8011346:	4b66      	ldr	r3, [pc, #408]	; (80114e0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	3301      	adds	r3, #1
 801134c:	4a64      	ldr	r2, [pc, #400]	; (80114e0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 801134e:	6013      	str	r3, [r2, #0]
 8011350:	4b63      	ldr	r3, [pc, #396]	; (80114e0 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	2b01      	cmp	r3, #1
 8011356:	bf0c      	ite	eq
 8011358:	2301      	moveq	r3, #1
 801135a:	2300      	movne	r3, #0
 801135c:	b2db      	uxtb	r3, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00d      	beq.n	801137e <_Z41__static_initialization_and_destruction_0ii+0x48a>
 8011362:	2301      	movs	r3, #1
 8011364:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8011368:	2304      	movs	r3, #4
 801136a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801136e:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8011372:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011376:	4619      	mov	r1, r3
 8011378:	485a      	ldr	r0, [pc, #360]	; (80114e4 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 801137a:	f7fa fa27 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 801137e:	4b5a      	ldr	r3, [pc, #360]	; (80114e8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	3301      	adds	r3, #1
 8011384:	4a58      	ldr	r2, [pc, #352]	; (80114e8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8011386:	6013      	str	r3, [r2, #0]
 8011388:	4b57      	ldr	r3, [pc, #348]	; (80114e8 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b01      	cmp	r3, #1
 801138e:	bf0c      	ite	eq
 8011390:	2301      	moveq	r3, #1
 8011392:	2300      	movne	r3, #0
 8011394:	b2db      	uxtb	r3, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	d00d      	beq.n	80113b6 <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 801139a:	2301      	movs	r3, #1
 801139c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80113a0:	2308      	movs	r3, #8
 80113a2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 80113a6:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 80113aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80113ae:	4619      	mov	r1, r3
 80113b0:	484e      	ldr	r0, [pc, #312]	; (80114ec <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 80113b2:	f7fa fa0b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 80113b6:	4b4e      	ldr	r3, [pc, #312]	; (80114f0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	3301      	adds	r3, #1
 80113bc:	4a4c      	ldr	r2, [pc, #304]	; (80114f0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80113be:	6013      	str	r3, [r2, #0]
 80113c0:	4b4b      	ldr	r3, [pc, #300]	; (80114f0 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	bf0c      	ite	eq
 80113c8:	2301      	moveq	r3, #1
 80113ca:	2300      	movne	r3, #0
 80113cc:	b2db      	uxtb	r3, r3
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00d      	beq.n	80113ee <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 80113d2:	2301      	movs	r3, #1
 80113d4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80113d8:	2310      	movs	r3, #16
 80113da:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80113de:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 80113e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80113e6:	4619      	mov	r1, r3
 80113e8:	4842      	ldr	r0, [pc, #264]	; (80114f4 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 80113ea:	f7fa f9ef 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 80113ee:	4b42      	ldr	r3, [pc, #264]	; (80114f8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	3301      	adds	r3, #1
 80113f4:	4a40      	ldr	r2, [pc, #256]	; (80114f8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80113f6:	6013      	str	r3, [r2, #0]
 80113f8:	4b3f      	ldr	r3, [pc, #252]	; (80114f8 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	bf0c      	ite	eq
 8011400:	2301      	moveq	r3, #1
 8011402:	2300      	movne	r3, #0
 8011404:	b2db      	uxtb	r3, r3
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00d      	beq.n	8011426 <_Z41__static_initialization_and_destruction_0ii+0x532>
 801140a:	2301      	movs	r3, #1
 801140c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8011410:	2320      	movs	r3, #32
 8011412:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8011416:	f107 0262 	add.w	r2, r7, #98	; 0x62
 801141a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801141e:	4619      	mov	r1, r3
 8011420:	4836      	ldr	r0, [pc, #216]	; (80114fc <_Z41__static_initialization_and_destruction_0ii+0x608>)
 8011422:	f7fa f9d3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 8011426:	4b36      	ldr	r3, [pc, #216]	; (8011500 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	3301      	adds	r3, #1
 801142c:	4a34      	ldr	r2, [pc, #208]	; (8011500 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 801142e:	6013      	str	r3, [r2, #0]
 8011430:	4b33      	ldr	r3, [pc, #204]	; (8011500 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b01      	cmp	r3, #1
 8011436:	bf0c      	ite	eq
 8011438:	2301      	moveq	r3, #1
 801143a:	2300      	movne	r3, #0
 801143c:	b2db      	uxtb	r3, r3
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00e      	beq.n	8011460 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 8011442:	2301      	movs	r3, #1
 8011444:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8011448:	f44f 7380 	mov.w	r3, #256	; 0x100
 801144c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8011450:	f107 0266 	add.w	r2, r7, #102	; 0x66
 8011454:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011458:	4619      	mov	r1, r3
 801145a:	482a      	ldr	r0, [pc, #168]	; (8011504 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 801145c:	f7fa f9b6 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 8011460:	4b29      	ldr	r3, [pc, #164]	; (8011508 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	3301      	adds	r3, #1
 8011466:	4a28      	ldr	r2, [pc, #160]	; (8011508 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 8011468:	6013      	str	r3, [r2, #0]
 801146a:	4b27      	ldr	r3, [pc, #156]	; (8011508 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	2b01      	cmp	r3, #1
 8011470:	bf0c      	ite	eq
 8011472:	2301      	moveq	r3, #1
 8011474:	2300      	movne	r3, #0
 8011476:	b2db      	uxtb	r3, r3
 8011478:	2b00      	cmp	r3, #0
 801147a:	d00e      	beq.n	801149a <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 801147c:	2301      	movs	r3, #1
 801147e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8011482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011486:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 801148a:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 801148e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011492:	4619      	mov	r1, r3
 8011494:	481d      	ldr	r0, [pc, #116]	; (801150c <_Z41__static_initialization_and_destruction_0ii+0x618>)
 8011496:	f7fa f999 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 801149a:	4b1d      	ldr	r3, [pc, #116]	; (8011510 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	3301      	adds	r3, #1
 80114a0:	4a1b      	ldr	r2, [pc, #108]	; (8011510 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80114a2:	6013      	str	r3, [r2, #0]
 80114a4:	4b1a      	ldr	r3, [pc, #104]	; (8011510 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	bf08      	it	eq
 80114ac:	2301      	moveq	r3, #1
 80114ae:	e031      	b.n	8011514 <_Z41__static_initialization_and_destruction_0ii+0x620>
 80114b0:	2000109c 	.word	0x2000109c
 80114b4:	20000af4 	.word	0x20000af4
 80114b8:	200010a0 	.word	0x200010a0
 80114bc:	20000afc 	.word	0x20000afc
 80114c0:	200010a4 	.word	0x200010a4
 80114c4:	20000b04 	.word	0x20000b04
 80114c8:	200010a8 	.word	0x200010a8
 80114cc:	20000b0c 	.word	0x20000b0c
 80114d0:	200010ac 	.word	0x200010ac
 80114d4:	20000b14 	.word	0x20000b14
 80114d8:	200010b0 	.word	0x200010b0
 80114dc:	20000b1c 	.word	0x20000b1c
 80114e0:	200010b4 	.word	0x200010b4
 80114e4:	20000b24 	.word	0x20000b24
 80114e8:	200010b8 	.word	0x200010b8
 80114ec:	20000b2c 	.word	0x20000b2c
 80114f0:	200010bc 	.word	0x200010bc
 80114f4:	20000b34 	.word	0x20000b34
 80114f8:	200010c0 	.word	0x200010c0
 80114fc:	20000b3c 	.word	0x20000b3c
 8011500:	200010c4 	.word	0x200010c4
 8011504:	20000b44 	.word	0x20000b44
 8011508:	200010c8 	.word	0x200010c8
 801150c:	20000b4c 	.word	0x20000b4c
 8011510:	200010cc 	.word	0x200010cc
 8011514:	bf18      	it	ne
 8011516:	2300      	movne	r3, #0
 8011518:	b2db      	uxtb	r3, r3
 801151a:	2b00      	cmp	r3, #0
 801151c:	d00e      	beq.n	801153c <_Z41__static_initialization_and_destruction_0ii+0x648>
 801151e:	2301      	movs	r3, #1
 8011520:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8011524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011528:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 801152c:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 8011530:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8011534:	4619      	mov	r1, r3
 8011536:	48ae      	ldr	r0, [pc, #696]	; (80117f0 <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 8011538:	f7fa f948 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 801153c:	4bad      	ldr	r3, [pc, #692]	; (80117f4 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	3301      	adds	r3, #1
 8011542:	4aac      	ldr	r2, [pc, #688]	; (80117f4 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 8011544:	6013      	str	r3, [r2, #0]
 8011546:	4bab      	ldr	r3, [pc, #684]	; (80117f4 <_Z41__static_initialization_and_destruction_0ii+0x900>)
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	2b01      	cmp	r3, #1
 801154c:	bf0c      	ite	eq
 801154e:	2301      	moveq	r3, #1
 8011550:	2300      	movne	r3, #0
 8011552:	b2db      	uxtb	r3, r3
 8011554:	2b00      	cmp	r3, #0
 8011556:	d00e      	beq.n	8011576 <_Z41__static_initialization_and_destruction_0ii+0x682>
 8011558:	2301      	movs	r3, #1
 801155a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 801155e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011562:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8011566:	f107 0272 	add.w	r2, r7, #114	; 0x72
 801156a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801156e:	4619      	mov	r1, r3
 8011570:	48a1      	ldr	r0, [pc, #644]	; (80117f8 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 8011572:	f7fa f92b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 8011576:	4ba1      	ldr	r3, [pc, #644]	; (80117fc <_Z41__static_initialization_and_destruction_0ii+0x908>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	3301      	adds	r3, #1
 801157c:	4a9f      	ldr	r2, [pc, #636]	; (80117fc <_Z41__static_initialization_and_destruction_0ii+0x908>)
 801157e:	6013      	str	r3, [r2, #0]
 8011580:	4b9e      	ldr	r3, [pc, #632]	; (80117fc <_Z41__static_initialization_and_destruction_0ii+0x908>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	2b01      	cmp	r3, #1
 8011586:	bf0c      	ite	eq
 8011588:	2301      	moveq	r3, #1
 801158a:	2300      	movne	r3, #0
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d00e      	beq.n	80115b0 <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 8011592:	2301      	movs	r3, #1
 8011594:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8011598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801159c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80115a0:	f107 0276 	add.w	r2, r7, #118	; 0x76
 80115a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80115a8:	4619      	mov	r1, r3
 80115aa:	4895      	ldr	r0, [pc, #596]	; (8011800 <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 80115ac:	f7fa f90e 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 80115b0:	4b94      	ldr	r3, [pc, #592]	; (8011804 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3301      	adds	r3, #1
 80115b6:	4a93      	ldr	r2, [pc, #588]	; (8011804 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 80115b8:	6013      	str	r3, [r2, #0]
 80115ba:	4b92      	ldr	r3, [pc, #584]	; (8011804 <_Z41__static_initialization_and_destruction_0ii+0x910>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	bf0c      	ite	eq
 80115c2:	2301      	moveq	r3, #1
 80115c4:	2300      	movne	r3, #0
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00e      	beq.n	80115ea <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 80115cc:	2301      	movs	r3, #1
 80115ce:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80115d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80115d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80115da:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 80115de:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80115e2:	4619      	mov	r1, r3
 80115e4:	4888      	ldr	r0, [pc, #544]	; (8011808 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 80115e6:	f7fa f8f1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 80115ea:	4b88      	ldr	r3, [pc, #544]	; (801180c <_Z41__static_initialization_and_destruction_0ii+0x918>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	3301      	adds	r3, #1
 80115f0:	4a86      	ldr	r2, [pc, #536]	; (801180c <_Z41__static_initialization_and_destruction_0ii+0x918>)
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	4b85      	ldr	r3, [pc, #532]	; (801180c <_Z41__static_initialization_and_destruction_0ii+0x918>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	bf0c      	ite	eq
 80115fc:	2301      	moveq	r3, #1
 80115fe:	2300      	movne	r3, #0
 8011600:	b2db      	uxtb	r3, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00e      	beq.n	8011624 <_Z41__static_initialization_and_destruction_0ii+0x730>
 8011606:	2301      	movs	r3, #1
 8011608:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 801160c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011610:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8011614:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 8011618:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 801161c:	4619      	mov	r1, r3
 801161e:	487c      	ldr	r0, [pc, #496]	; (8011810 <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 8011620:	f7fa f8d4 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 8011624:	4b7b      	ldr	r3, [pc, #492]	; (8011814 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	3301      	adds	r3, #1
 801162a:	4a7a      	ldr	r2, [pc, #488]	; (8011814 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 801162c:	6013      	str	r3, [r2, #0]
 801162e:	4b79      	ldr	r3, [pc, #484]	; (8011814 <_Z41__static_initialization_and_destruction_0ii+0x920>)
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	2b01      	cmp	r3, #1
 8011634:	bf0c      	ite	eq
 8011636:	2301      	moveq	r3, #1
 8011638:	2300      	movne	r3, #0
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b00      	cmp	r3, #0
 801163e:	d00e      	beq.n	801165e <_Z41__static_initialization_and_destruction_0ii+0x76a>
 8011640:	2301      	movs	r3, #1
 8011642:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8011646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801164a:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 801164e:	f107 0282 	add.w	r2, r7, #130	; 0x82
 8011652:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011656:	4619      	mov	r1, r3
 8011658:	486f      	ldr	r0, [pc, #444]	; (8011818 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 801165a:	f7fa f8b7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port C. */
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 801165e:	4b6f      	ldr	r3, [pc, #444]	; (801181c <_Z41__static_initialization_and_destruction_0ii+0x928>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	3301      	adds	r3, #1
 8011664:	4a6d      	ldr	r2, [pc, #436]	; (801181c <_Z41__static_initialization_and_destruction_0ii+0x928>)
 8011666:	6013      	str	r3, [r2, #0]
 8011668:	4b6c      	ldr	r3, [pc, #432]	; (801181c <_Z41__static_initialization_and_destruction_0ii+0x928>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	2b01      	cmp	r3, #1
 801166e:	bf0c      	ite	eq
 8011670:	2301      	moveq	r3, #1
 8011672:	2300      	movne	r3, #0
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d00d      	beq.n	8011696 <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 801167a:	2302      	movs	r3, #2
 801167c:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8011680:	2301      	movs	r3, #1
 8011682:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8011686:	f107 0286 	add.w	r2, r7, #134	; 0x86
 801168a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801168e:	4619      	mov	r1, r3
 8011690:	4863      	ldr	r0, [pc, #396]	; (8011820 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 8011692:	f7fa f89b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 8011696:	4b63      	ldr	r3, [pc, #396]	; (8011824 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	3301      	adds	r3, #1
 801169c:	4a61      	ldr	r2, [pc, #388]	; (8011824 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 801169e:	6013      	str	r3, [r2, #0]
 80116a0:	4b60      	ldr	r3, [pc, #384]	; (8011824 <_Z41__static_initialization_and_destruction_0ii+0x930>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	bf0c      	ite	eq
 80116a8:	2301      	moveq	r3, #1
 80116aa:	2300      	movne	r3, #0
 80116ac:	b2db      	uxtb	r3, r3
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00d      	beq.n	80116ce <_Z41__static_initialization_and_destruction_0ii+0x7da>
 80116b2:	2302      	movs	r3, #2
 80116b4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80116b8:	2302      	movs	r3, #2
 80116ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80116be:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 80116c2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80116c6:	4619      	mov	r1, r3
 80116c8:	4857      	ldr	r0, [pc, #348]	; (8011828 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 80116ca:	f7fa f87f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 80116ce:	4b57      	ldr	r3, [pc, #348]	; (801182c <_Z41__static_initialization_and_destruction_0ii+0x938>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	3301      	adds	r3, #1
 80116d4:	4a55      	ldr	r2, [pc, #340]	; (801182c <_Z41__static_initialization_and_destruction_0ii+0x938>)
 80116d6:	6013      	str	r3, [r2, #0]
 80116d8:	4b54      	ldr	r3, [pc, #336]	; (801182c <_Z41__static_initialization_and_destruction_0ii+0x938>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b01      	cmp	r3, #1
 80116de:	bf0c      	ite	eq
 80116e0:	2301      	moveq	r3, #1
 80116e2:	2300      	movne	r3, #0
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d00d      	beq.n	8011706 <_Z41__static_initialization_and_destruction_0ii+0x812>
 80116ea:	2302      	movs	r3, #2
 80116ec:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80116f0:	2304      	movs	r3, #4
 80116f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80116f6:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 80116fa:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80116fe:	4619      	mov	r1, r3
 8011700:	484b      	ldr	r0, [pc, #300]	; (8011830 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 8011702:	f7fa f863 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 8011706:	4b4b      	ldr	r3, [pc, #300]	; (8011834 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	3301      	adds	r3, #1
 801170c:	4a49      	ldr	r2, [pc, #292]	; (8011834 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 801170e:	6013      	str	r3, [r2, #0]
 8011710:	4b48      	ldr	r3, [pc, #288]	; (8011834 <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2b01      	cmp	r3, #1
 8011716:	bf0c      	ite	eq
 8011718:	2301      	moveq	r3, #1
 801171a:	2300      	movne	r3, #0
 801171c:	b2db      	uxtb	r3, r3
 801171e:	2b00      	cmp	r3, #0
 8011720:	d00d      	beq.n	801173e <_Z41__static_initialization_and_destruction_0ii+0x84a>
 8011722:	2302      	movs	r3, #2
 8011724:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8011728:	2308      	movs	r3, #8
 801172a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 801172e:	f107 0292 	add.w	r2, r7, #146	; 0x92
 8011732:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011736:	4619      	mov	r1, r3
 8011738:	483f      	ldr	r0, [pc, #252]	; (8011838 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 801173a:	f7fa f847 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 801173e:	4b3f      	ldr	r3, [pc, #252]	; (801183c <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	3301      	adds	r3, #1
 8011744:	4a3d      	ldr	r2, [pc, #244]	; (801183c <_Z41__static_initialization_and_destruction_0ii+0x948>)
 8011746:	6013      	str	r3, [r2, #0]
 8011748:	4b3c      	ldr	r3, [pc, #240]	; (801183c <_Z41__static_initialization_and_destruction_0ii+0x948>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	2b01      	cmp	r3, #1
 801174e:	bf0c      	ite	eq
 8011750:	2301      	moveq	r3, #1
 8011752:	2300      	movne	r3, #0
 8011754:	b2db      	uxtb	r3, r3
 8011756:	2b00      	cmp	r3, #0
 8011758:	d00d      	beq.n	8011776 <_Z41__static_initialization_and_destruction_0ii+0x882>
 801175a:	2302      	movs	r3, #2
 801175c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8011760:	2310      	movs	r3, #16
 8011762:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8011766:	f107 0296 	add.w	r2, r7, #150	; 0x96
 801176a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801176e:	4619      	mov	r1, r3
 8011770:	4833      	ldr	r0, [pc, #204]	; (8011840 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 8011772:	f7fa f82b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 8011776:	4b33      	ldr	r3, [pc, #204]	; (8011844 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	3301      	adds	r3, #1
 801177c:	4a31      	ldr	r2, [pc, #196]	; (8011844 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 801177e:	6013      	str	r3, [r2, #0]
 8011780:	4b30      	ldr	r3, [pc, #192]	; (8011844 <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	2b01      	cmp	r3, #1
 8011786:	bf0c      	ite	eq
 8011788:	2301      	moveq	r3, #1
 801178a:	2300      	movne	r3, #0
 801178c:	b2db      	uxtb	r3, r3
 801178e:	2b00      	cmp	r3, #0
 8011790:	d00d      	beq.n	80117ae <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 8011792:	2302      	movs	r3, #2
 8011794:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8011798:	2320      	movs	r3, #32
 801179a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 801179e:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 80117a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80117a6:	4619      	mov	r1, r3
 80117a8:	4827      	ldr	r0, [pc, #156]	; (8011848 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 80117aa:	f7fa f80f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 80117ae:	4b27      	ldr	r3, [pc, #156]	; (801184c <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	3301      	adds	r3, #1
 80117b4:	4a25      	ldr	r2, [pc, #148]	; (801184c <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	4b24      	ldr	r3, [pc, #144]	; (801184c <_Z41__static_initialization_and_destruction_0ii+0x958>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b01      	cmp	r3, #1
 80117be:	bf0c      	ite	eq
 80117c0:	2301      	moveq	r3, #1
 80117c2:	2300      	movne	r3, #0
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00d      	beq.n	80117e6 <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 80117ca:	2302      	movs	r3, #2
 80117cc:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80117d0:	2340      	movs	r3, #64	; 0x40
 80117d2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80117d6:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 80117da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80117de:	4619      	mov	r1, r3
 80117e0:	481b      	ldr	r0, [pc, #108]	; (8011850 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 80117e2:	f7f9 fff3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 80117e6:	4b1b      	ldr	r3, [pc, #108]	; (8011854 <_Z41__static_initialization_and_destruction_0ii+0x960>)
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	3301      	adds	r3, #1
 80117ec:	e034      	b.n	8011858 <_Z41__static_initialization_and_destruction_0ii+0x964>
 80117ee:	bf00      	nop
 80117f0:	20000b54 	.word	0x20000b54
 80117f4:	200010d0 	.word	0x200010d0
 80117f8:	20000b5c 	.word	0x20000b5c
 80117fc:	200010d4 	.word	0x200010d4
 8011800:	20000b64 	.word	0x20000b64
 8011804:	200010d8 	.word	0x200010d8
 8011808:	20000b6c 	.word	0x20000b6c
 801180c:	200010dc 	.word	0x200010dc
 8011810:	20000b74 	.word	0x20000b74
 8011814:	200010e0 	.word	0x200010e0
 8011818:	20000b7c 	.word	0x20000b7c
 801181c:	200010e4 	.word	0x200010e4
 8011820:	20000b84 	.word	0x20000b84
 8011824:	200010e8 	.word	0x200010e8
 8011828:	20000b8c 	.word	0x20000b8c
 801182c:	200010ec 	.word	0x200010ec
 8011830:	20000b94 	.word	0x20000b94
 8011834:	200010f0 	.word	0x200010f0
 8011838:	20000b9c 	.word	0x20000b9c
 801183c:	200010f4 	.word	0x200010f4
 8011840:	20000ba4 	.word	0x20000ba4
 8011844:	200010f8 	.word	0x200010f8
 8011848:	20000bac 	.word	0x20000bac
 801184c:	200010fc 	.word	0x200010fc
 8011850:	20000bb4 	.word	0x20000bb4
 8011854:	20001100 	.word	0x20001100
 8011858:	4aac      	ldr	r2, [pc, #688]	; (8011b0c <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 801185a:	6013      	str	r3, [r2, #0]
 801185c:	4bab      	ldr	r3, [pc, #684]	; (8011b0c <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b01      	cmp	r3, #1
 8011862:	bf0c      	ite	eq
 8011864:	2301      	moveq	r3, #1
 8011866:	2300      	movne	r3, #0
 8011868:	b2db      	uxtb	r3, r3
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00d      	beq.n	801188a <_Z41__static_initialization_and_destruction_0ii+0x996>
 801186e:	2302      	movs	r3, #2
 8011870:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 8011874:	2380      	movs	r3, #128	; 0x80
 8011876:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 801187a:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 801187e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8011882:	4619      	mov	r1, r3
 8011884:	48a2      	ldr	r0, [pc, #648]	; (8011b10 <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 8011886:	f7f9 ffa1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 801188a:	4ba2      	ldr	r3, [pc, #648]	; (8011b14 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	3301      	adds	r3, #1
 8011890:	4aa0      	ldr	r2, [pc, #640]	; (8011b14 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 8011892:	6013      	str	r3, [r2, #0]
 8011894:	4b9f      	ldr	r3, [pc, #636]	; (8011b14 <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2b01      	cmp	r3, #1
 801189a:	bf0c      	ite	eq
 801189c:	2301      	moveq	r3, #1
 801189e:	2300      	movne	r3, #0
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d00e      	beq.n	80118c4 <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 80118a6:	2302      	movs	r3, #2
 80118a8:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80118ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80118b0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80118b4:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 80118b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80118bc:	4619      	mov	r1, r3
 80118be:	4896      	ldr	r0, [pc, #600]	; (8011b18 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 80118c0:	f7f9 ff84 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 80118c4:	4b95      	ldr	r3, [pc, #596]	; (8011b1c <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	3301      	adds	r3, #1
 80118ca:	4a94      	ldr	r2, [pc, #592]	; (8011b1c <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 80118cc:	6013      	str	r3, [r2, #0]
 80118ce:	4b93      	ldr	r3, [pc, #588]	; (8011b1c <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	bf0c      	ite	eq
 80118d6:	2301      	moveq	r3, #1
 80118d8:	2300      	movne	r3, #0
 80118da:	b2db      	uxtb	r3, r3
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00e      	beq.n	80118fe <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 80118e0:	2302      	movs	r3, #2
 80118e2:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80118e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118ea:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80118ee:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 80118f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80118f6:	4619      	mov	r1, r3
 80118f8:	4889      	ldr	r0, [pc, #548]	; (8011b20 <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 80118fa:	f7f9 ff67 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 80118fe:	4b89      	ldr	r3, [pc, #548]	; (8011b24 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	3301      	adds	r3, #1
 8011904:	4a87      	ldr	r2, [pc, #540]	; (8011b24 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8011906:	6013      	str	r3, [r2, #0]
 8011908:	4b86      	ldr	r3, [pc, #536]	; (8011b24 <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	2b01      	cmp	r3, #1
 801190e:	bf0c      	ite	eq
 8011910:	2301      	moveq	r3, #1
 8011912:	2300      	movne	r3, #0
 8011914:	b2db      	uxtb	r3, r3
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00e      	beq.n	8011938 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 801191a:	2302      	movs	r3, #2
 801191c:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 8011920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011924:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8011928:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 801192c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011930:	4619      	mov	r1, r3
 8011932:	487d      	ldr	r0, [pc, #500]	; (8011b28 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 8011934:	f7f9 ff4a 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 8011938:	4b7c      	ldr	r3, [pc, #496]	; (8011b2c <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	3301      	adds	r3, #1
 801193e:	4a7b      	ldr	r2, [pc, #492]	; (8011b2c <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8011940:	6013      	str	r3, [r2, #0]
 8011942:	4b7a      	ldr	r3, [pc, #488]	; (8011b2c <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	2b01      	cmp	r3, #1
 8011948:	bf0c      	ite	eq
 801194a:	2301      	moveq	r3, #1
 801194c:	2300      	movne	r3, #0
 801194e:	b2db      	uxtb	r3, r3
 8011950:	2b00      	cmp	r3, #0
 8011952:	d00e      	beq.n	8011972 <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 8011954:	2302      	movs	r3, #2
 8011956:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 801195a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801195e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8011962:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 8011966:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801196a:	4619      	mov	r1, r3
 801196c:	4870      	ldr	r0, [pc, #448]	; (8011b30 <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 801196e:	f7f9 ff2d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 8011972:	4b70      	ldr	r3, [pc, #448]	; (8011b34 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	3301      	adds	r3, #1
 8011978:	4a6e      	ldr	r2, [pc, #440]	; (8011b34 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 801197a:	6013      	str	r3, [r2, #0]
 801197c:	4b6d      	ldr	r3, [pc, #436]	; (8011b34 <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	2b01      	cmp	r3, #1
 8011982:	bf0c      	ite	eq
 8011984:	2301      	moveq	r3, #1
 8011986:	2300      	movne	r3, #0
 8011988:	b2db      	uxtb	r3, r3
 801198a:	2b00      	cmp	r3, #0
 801198c:	d00e      	beq.n	80119ac <_Z41__static_initialization_and_destruction_0ii+0xab8>
 801198e:	2302      	movs	r3, #2
 8011990:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8011994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011998:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 801199c:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 80119a0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80119a4:	4619      	mov	r1, r3
 80119a6:	4864      	ldr	r0, [pc, #400]	; (8011b38 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 80119a8:	f7f9 ff10 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 80119ac:	4b63      	ldr	r3, [pc, #396]	; (8011b3c <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	3301      	adds	r3, #1
 80119b2:	4a62      	ldr	r2, [pc, #392]	; (8011b3c <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 80119b4:	6013      	str	r3, [r2, #0]
 80119b6:	4b61      	ldr	r3, [pc, #388]	; (8011b3c <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	bf0c      	ite	eq
 80119be:	2301      	moveq	r3, #1
 80119c0:	2300      	movne	r3, #0
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d00e      	beq.n	80119e6 <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 80119c8:	2302      	movs	r3, #2
 80119ca:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 80119ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80119d2:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 80119d6:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 80119da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80119de:	4619      	mov	r1, r3
 80119e0:	4857      	ldr	r0, [pc, #348]	; (8011b40 <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 80119e2:	f7f9 fef3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 80119e6:	4b57      	ldr	r3, [pc, #348]	; (8011b44 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	3301      	adds	r3, #1
 80119ec:	4a55      	ldr	r2, [pc, #340]	; (8011b44 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 80119ee:	6013      	str	r3, [r2, #0]
 80119f0:	4b54      	ldr	r3, [pc, #336]	; (8011b44 <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	2b01      	cmp	r3, #1
 80119f6:	bf0c      	ite	eq
 80119f8:	2301      	moveq	r3, #1
 80119fa:	2300      	movne	r3, #0
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00e      	beq.n	8011a20 <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 8011a02:	2302      	movs	r3, #2
 8011a04:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8011a08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8011a10:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 8011a14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8011a18:	4619      	mov	r1, r3
 8011a1a:	484b      	ldr	r0, [pc, #300]	; (8011b48 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 8011a1c:	f7f9 fed6 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 8011a20:	4b4a      	ldr	r3, [pc, #296]	; (8011b4c <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	3301      	adds	r3, #1
 8011a26:	4a49      	ldr	r2, [pc, #292]	; (8011b4c <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8011a28:	6013      	str	r3, [r2, #0]
 8011a2a:	4b48      	ldr	r3, [pc, #288]	; (8011b4c <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	bf0c      	ite	eq
 8011a32:	2301      	moveq	r3, #1
 8011a34:	2300      	movne	r3, #0
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d00e      	beq.n	8011a5a <_Z41__static_initialization_and_destruction_0ii+0xb66>
 8011a3c:	2302      	movs	r3, #2
 8011a3e:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 8011a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011a46:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 8011a4a:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 8011a4e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8011a52:	4619      	mov	r1, r3
 8011a54:	483e      	ldr	r0, [pc, #248]	; (8011b50 <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 8011a56:	f7f9 feb9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port D. */
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 8011a5a:	4b3e      	ldr	r3, [pc, #248]	; (8011b54 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	3301      	adds	r3, #1
 8011a60:	4a3c      	ldr	r2, [pc, #240]	; (8011b54 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 8011a62:	6013      	str	r3, [r2, #0]
 8011a64:	4b3b      	ldr	r3, [pc, #236]	; (8011b54 <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	bf0c      	ite	eq
 8011a6c:	2301      	moveq	r3, #1
 8011a6e:	2300      	movne	r3, #0
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d00d      	beq.n	8011a92 <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 8011a76:	2303      	movs	r3, #3
 8011a78:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8011a7c:	2304      	movs	r3, #4
 8011a7e:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 8011a82:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 8011a86:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	4832      	ldr	r0, [pc, #200]	; (8011b58 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 8011a8e:	f7f9 fe9d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port H. */
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 8011a92:	4b32      	ldr	r3, [pc, #200]	; (8011b5c <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	3301      	adds	r3, #1
 8011a98:	4a30      	ldr	r2, [pc, #192]	; (8011b5c <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8011a9a:	6013      	str	r3, [r2, #0]
 8011a9c:	4b2f      	ldr	r3, [pc, #188]	; (8011b5c <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	2b01      	cmp	r3, #1
 8011aa2:	bf0c      	ite	eq
 8011aa4:	2301      	moveq	r3, #1
 8011aa6:	2300      	movne	r3, #0
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00d      	beq.n	8011aca <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 8011aae:	2307      	movs	r3, #7
 8011ab0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 8011ab4:	2301      	movs	r3, #1
 8011ab6:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8011aba:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8011abe:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8011ac2:	4619      	mov	r1, r3
 8011ac4:	4826      	ldr	r0, [pc, #152]	; (8011b60 <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 8011ac6:	f7f9 fe81 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 8011aca:	4b26      	ldr	r3, [pc, #152]	; (8011b64 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	3301      	adds	r3, #1
 8011ad0:	4a24      	ldr	r2, [pc, #144]	; (8011b64 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8011ad2:	6013      	str	r3, [r2, #0]
 8011ad4:	4b23      	ldr	r3, [pc, #140]	; (8011b64 <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	bf0c      	ite	eq
 8011adc:	2301      	moveq	r3, #1
 8011ade:	2300      	movne	r3, #0
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d00d      	beq.n	8011b02 <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 8011ae6:	2307      	movs	r3, #7
 8011ae8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8011aec:	2302      	movs	r3, #2
 8011aee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8011af2:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 8011af6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8011afa:	4619      	mov	r1, r3
 8011afc:	481a      	ldr	r0, [pc, #104]	; (8011b68 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 8011afe:	f7f9 fe65 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 8011b02:	bf00      	nop
 8011b04:	37d0      	adds	r7, #208	; 0xd0
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	20001100 	.word	0x20001100
 8011b10:	20000bbc 	.word	0x20000bbc
 8011b14:	20001104 	.word	0x20001104
 8011b18:	20000bc4 	.word	0x20000bc4
 8011b1c:	20001108 	.word	0x20001108
 8011b20:	20000bcc 	.word	0x20000bcc
 8011b24:	2000110c 	.word	0x2000110c
 8011b28:	20000bd4 	.word	0x20000bd4
 8011b2c:	20001110 	.word	0x20001110
 8011b30:	20000bdc 	.word	0x20000bdc
 8011b34:	20001114 	.word	0x20001114
 8011b38:	20000be4 	.word	0x20000be4
 8011b3c:	20001118 	.word	0x20001118
 8011b40:	20000bec 	.word	0x20000bec
 8011b44:	2000111c 	.word	0x2000111c
 8011b48:	20000bf4 	.word	0x20000bf4
 8011b4c:	20001120 	.word	0x20001120
 8011b50:	20000bfc 	.word	0x20000bfc
 8011b54:	20001124 	.word	0x20001124
 8011b58:	20000c04 	.word	0x20000c04
 8011b5c:	20001128 	.word	0x20001128
 8011b60:	20000c0c 	.word	0x20000c0c
 8011b64:	2000112c 	.word	0x2000112c
 8011b68:	20000c14 	.word	0x20000c14

08011b6c <_GLOBAL__sub_I__ZN10SensorTaskC2EPKct10osPrioritybP14os_messageQ_cb>:
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011b74:	2001      	movs	r0, #1
 8011b76:	f7ff f9bd 	bl	8010ef4 <_Z41__static_initialization_and_destruction_0ii>
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <_Z41__static_initialization_and_destruction_0ii>:
		loopback_tcps(0, RX_BUF, 5000);
		// LwIP-Aufgaben bearbeiten
		//sys_check_timeouts();
	}

}
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b0b4      	sub	sp, #208	; 0xd0
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b01      	cmp	r3, #1
 8011b8a:	f040 85fe 	bne.w	801278a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011b94:	4293      	cmp	r3, r2
 8011b96:	f040 85f8 	bne.w	801278a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
	/* --Short-cuts for GPIOs. */
	using _Port=Port::Select;
	using _Pin=Pin::BitMask;

	/* --Port A. */
	inline static const PortPin BaseBoard0{_Port::PortA, _Pin::Pin0};
 8011b9a:	4ba1      	ldr	r3, [pc, #644]	; (8011e20 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	3301      	adds	r3, #1
 8011ba0:	4a9f      	ldr	r2, [pc, #636]	; (8011e20 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8011ba2:	6013      	str	r3, [r2, #0]
 8011ba4:	4b9e      	ldr	r3, [pc, #632]	; (8011e20 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	2b01      	cmp	r3, #1
 8011baa:	bf0c      	ite	eq
 8011bac:	2301      	moveq	r3, #1
 8011bae:	2300      	movne	r3, #0
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d00b      	beq.n	8011bce <_Z41__static_initialization_and_destruction_0ii+0x52>
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	81bb      	strh	r3, [r7, #12]
 8011bba:	2301      	movs	r3, #1
 8011bbc:	81fb      	strh	r3, [r7, #14]
 8011bbe:	f107 020e 	add.w	r2, r7, #14
 8011bc2:	f107 030c 	add.w	r3, r7, #12
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	4896      	ldr	r0, [pc, #600]	; (8011e24 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8011bca:	f7f9 fdff 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard1{_Port::PortA, _Pin::Pin1};
 8011bce:	4b96      	ldr	r3, [pc, #600]	; (8011e28 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	3301      	adds	r3, #1
 8011bd4:	4a94      	ldr	r2, [pc, #592]	; (8011e28 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8011bd6:	6013      	str	r3, [r2, #0]
 8011bd8:	4b93      	ldr	r3, [pc, #588]	; (8011e28 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	bf0c      	ite	eq
 8011be0:	2301      	moveq	r3, #1
 8011be2:	2300      	movne	r3, #0
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00b      	beq.n	8011c02 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8011bea:	2300      	movs	r3, #0
 8011bec:	823b      	strh	r3, [r7, #16]
 8011bee:	2302      	movs	r3, #2
 8011bf0:	827b      	strh	r3, [r7, #18]
 8011bf2:	f107 0212 	add.w	r2, r7, #18
 8011bf6:	f107 0310 	add.w	r3, r7, #16
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	488b      	ldr	r0, [pc, #556]	; (8011e2c <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8011bfe:	f7f9 fde5 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard2{_Port::PortA, _Pin::Pin2};
 8011c02:	4b8b      	ldr	r3, [pc, #556]	; (8011e30 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3301      	adds	r3, #1
 8011c08:	4a89      	ldr	r2, [pc, #548]	; (8011e30 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8011c0a:	6013      	str	r3, [r2, #0]
 8011c0c:	4b88      	ldr	r3, [pc, #544]	; (8011e30 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b01      	cmp	r3, #1
 8011c12:	bf0c      	ite	eq
 8011c14:	2301      	moveq	r3, #1
 8011c16:	2300      	movne	r3, #0
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d00b      	beq.n	8011c36 <_Z41__static_initialization_and_destruction_0ii+0xba>
 8011c1e:	2300      	movs	r3, #0
 8011c20:	82bb      	strh	r3, [r7, #20]
 8011c22:	2304      	movs	r3, #4
 8011c24:	82fb      	strh	r3, [r7, #22]
 8011c26:	f107 0216 	add.w	r2, r7, #22
 8011c2a:	f107 0314 	add.w	r3, r7, #20
 8011c2e:	4619      	mov	r1, r3
 8011c30:	4880      	ldr	r0, [pc, #512]	; (8011e34 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8011c32:	f7f9 fdcb 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard3{_Port::PortA, _Pin::Pin3};
 8011c36:	4b80      	ldr	r3, [pc, #512]	; (8011e38 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	4a7e      	ldr	r2, [pc, #504]	; (8011e38 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8011c3e:	6013      	str	r3, [r2, #0]
 8011c40:	4b7d      	ldr	r3, [pc, #500]	; (8011e38 <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	bf0c      	ite	eq
 8011c48:	2301      	moveq	r3, #1
 8011c4a:	2300      	movne	r3, #0
 8011c4c:	b2db      	uxtb	r3, r3
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00b      	beq.n	8011c6a <_Z41__static_initialization_and_destruction_0ii+0xee>
 8011c52:	2300      	movs	r3, #0
 8011c54:	833b      	strh	r3, [r7, #24]
 8011c56:	2308      	movs	r3, #8
 8011c58:	837b      	strh	r3, [r7, #26]
 8011c5a:	f107 021a 	add.w	r2, r7, #26
 8011c5e:	f107 0318 	add.w	r3, r7, #24
 8011c62:	4619      	mov	r1, r3
 8011c64:	4875      	ldr	r0, [pc, #468]	; (8011e3c <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 8011c66:	f7f9 fdb1 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard4{_Port::PortA, _Pin::Pin4};
 8011c6a:	4b75      	ldr	r3, [pc, #468]	; (8011e40 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	3301      	adds	r3, #1
 8011c70:	4a73      	ldr	r2, [pc, #460]	; (8011e40 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8011c72:	6013      	str	r3, [r2, #0]
 8011c74:	4b72      	ldr	r3, [pc, #456]	; (8011e40 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	2b01      	cmp	r3, #1
 8011c7a:	bf0c      	ite	eq
 8011c7c:	2301      	moveq	r3, #1
 8011c7e:	2300      	movne	r3, #0
 8011c80:	b2db      	uxtb	r3, r3
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00b      	beq.n	8011c9e <_Z41__static_initialization_and_destruction_0ii+0x122>
 8011c86:	2300      	movs	r3, #0
 8011c88:	83bb      	strh	r3, [r7, #28]
 8011c8a:	2310      	movs	r3, #16
 8011c8c:	83fb      	strh	r3, [r7, #30]
 8011c8e:	f107 021e 	add.w	r2, r7, #30
 8011c92:	f107 031c 	add.w	r3, r7, #28
 8011c96:	4619      	mov	r1, r3
 8011c98:	486a      	ldr	r0, [pc, #424]	; (8011e44 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 8011c9a:	f7f9 fd97 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard5{_Port::PortA, _Pin::Pin5};
 8011c9e:	4b6a      	ldr	r3, [pc, #424]	; (8011e48 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	3301      	adds	r3, #1
 8011ca4:	4a68      	ldr	r2, [pc, #416]	; (8011e48 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8011ca6:	6013      	str	r3, [r2, #0]
 8011ca8:	4b67      	ldr	r3, [pc, #412]	; (8011e48 <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	2b01      	cmp	r3, #1
 8011cae:	bf0c      	ite	eq
 8011cb0:	2301      	moveq	r3, #1
 8011cb2:	2300      	movne	r3, #0
 8011cb4:	b2db      	uxtb	r3, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00b      	beq.n	8011cd2 <_Z41__static_initialization_and_destruction_0ii+0x156>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	843b      	strh	r3, [r7, #32]
 8011cbe:	2320      	movs	r3, #32
 8011cc0:	847b      	strh	r3, [r7, #34]	; 0x22
 8011cc2:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8011cc6:	f107 0320 	add.w	r3, r7, #32
 8011cca:	4619      	mov	r1, r3
 8011ccc:	485f      	ldr	r0, [pc, #380]	; (8011e4c <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8011cce:	f7f9 fd7d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard6{_Port::PortA, _Pin::Pin6};
 8011cd2:	4b5f      	ldr	r3, [pc, #380]	; (8011e50 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	4a5d      	ldr	r2, [pc, #372]	; (8011e50 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8011cda:	6013      	str	r3, [r2, #0]
 8011cdc:	4b5c      	ldr	r3, [pc, #368]	; (8011e50 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	bf0c      	ite	eq
 8011ce4:	2301      	moveq	r3, #1
 8011ce6:	2300      	movne	r3, #0
 8011ce8:	b2db      	uxtb	r3, r3
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00b      	beq.n	8011d06 <_Z41__static_initialization_and_destruction_0ii+0x18a>
 8011cee:	2300      	movs	r3, #0
 8011cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
 8011cf2:	2340      	movs	r3, #64	; 0x40
 8011cf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011cf6:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8011cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011cfe:	4619      	mov	r1, r3
 8011d00:	4854      	ldr	r0, [pc, #336]	; (8011e54 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8011d02:	f7f9 fd63 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard7{_Port::PortA, _Pin::Pin7};
 8011d06:	4b54      	ldr	r3, [pc, #336]	; (8011e58 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	3301      	adds	r3, #1
 8011d0c:	4a52      	ldr	r2, [pc, #328]	; (8011e58 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8011d0e:	6013      	str	r3, [r2, #0]
 8011d10:	4b51      	ldr	r3, [pc, #324]	; (8011e58 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	bf0c      	ite	eq
 8011d18:	2301      	moveq	r3, #1
 8011d1a:	2300      	movne	r3, #0
 8011d1c:	b2db      	uxtb	r3, r3
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d00b      	beq.n	8011d3a <_Z41__static_initialization_and_destruction_0ii+0x1be>
 8011d22:	2300      	movs	r3, #0
 8011d24:	853b      	strh	r3, [r7, #40]	; 0x28
 8011d26:	2380      	movs	r3, #128	; 0x80
 8011d28:	857b      	strh	r3, [r7, #42]	; 0x2a
 8011d2a:	f107 022a 	add.w	r2, r7, #42	; 0x2a
 8011d2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011d32:	4619      	mov	r1, r3
 8011d34:	4849      	ldr	r0, [pc, #292]	; (8011e5c <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8011d36:	f7f9 fd49 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard8{_Port::PortA, _Pin::Pin8};
 8011d3a:	4b49      	ldr	r3, [pc, #292]	; (8011e60 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	3301      	adds	r3, #1
 8011d40:	4a47      	ldr	r2, [pc, #284]	; (8011e60 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8011d42:	6013      	str	r3, [r2, #0]
 8011d44:	4b46      	ldr	r3, [pc, #280]	; (8011e60 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b01      	cmp	r3, #1
 8011d4a:	bf0c      	ite	eq
 8011d4c:	2301      	moveq	r3, #1
 8011d4e:	2300      	movne	r3, #0
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d00c      	beq.n	8011d70 <_Z41__static_initialization_and_destruction_0ii+0x1f4>
 8011d56:	2300      	movs	r3, #0
 8011d58:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8011d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8011d60:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8011d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011d68:	4619      	mov	r1, r3
 8011d6a:	483e      	ldr	r0, [pc, #248]	; (8011e64 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8011d6c:	f7f9 fd2e 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard9{_Port::PortA, _Pin::Pin9};
 8011d70:	4b3d      	ldr	r3, [pc, #244]	; (8011e68 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	3301      	adds	r3, #1
 8011d76:	4a3c      	ldr	r2, [pc, #240]	; (8011e68 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8011d78:	6013      	str	r3, [r2, #0]
 8011d7a:	4b3b      	ldr	r3, [pc, #236]	; (8011e68 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b01      	cmp	r3, #1
 8011d80:	bf0c      	ite	eq
 8011d82:	2301      	moveq	r3, #1
 8011d84:	2300      	movne	r3, #0
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d00c      	beq.n	8011da6 <_Z41__static_initialization_and_destruction_0ii+0x22a>
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	863b      	strh	r3, [r7, #48]	; 0x30
 8011d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011d94:	867b      	strh	r3, [r7, #50]	; 0x32
 8011d96:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8011d9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d9e:	4619      	mov	r1, r3
 8011da0:	4832      	ldr	r0, [pc, #200]	; (8011e6c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8011da2:	f7f9 fd13 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard10{_Port::PortA, _Pin::Pin10};
 8011da6:	4b32      	ldr	r3, [pc, #200]	; (8011e70 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	3301      	adds	r3, #1
 8011dac:	4a30      	ldr	r2, [pc, #192]	; (8011e70 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8011dae:	6013      	str	r3, [r2, #0]
 8011db0:	4b2f      	ldr	r3, [pc, #188]	; (8011e70 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2b01      	cmp	r3, #1
 8011db6:	bf0c      	ite	eq
 8011db8:	2301      	moveq	r3, #1
 8011dba:	2300      	movne	r3, #0
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d00c      	beq.n	8011ddc <_Z41__static_initialization_and_destruction_0ii+0x260>
 8011dc2:	2300      	movs	r3, #0
 8011dc4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8011dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011dca:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011dcc:	f107 0236 	add.w	r2, r7, #54	; 0x36
 8011dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	4827      	ldr	r0, [pc, #156]	; (8011e74 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8011dd8:	f7f9 fcf8 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard11{_Port::PortA, _Pin::Pin11};
 8011ddc:	4b26      	ldr	r3, [pc, #152]	; (8011e78 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	3301      	adds	r3, #1
 8011de2:	4a25      	ldr	r2, [pc, #148]	; (8011e78 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8011de4:	6013      	str	r3, [r2, #0]
 8011de6:	4b24      	ldr	r3, [pc, #144]	; (8011e78 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	2b01      	cmp	r3, #1
 8011dec:	bf0c      	ite	eq
 8011dee:	2301      	moveq	r3, #1
 8011df0:	2300      	movne	r3, #0
 8011df2:	b2db      	uxtb	r3, r3
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d00c      	beq.n	8011e12 <_Z41__static_initialization_and_destruction_0ii+0x296>
 8011df8:	2300      	movs	r3, #0
 8011dfa:	873b      	strh	r3, [r7, #56]	; 0x38
 8011dfc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e00:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011e02:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 8011e06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	481b      	ldr	r0, [pc, #108]	; (8011e7c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8011e0e:	f7f9 fcdd 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard12{_Port::PortA, _Pin::Pin12};
 8011e12:	4b1b      	ldr	r3, [pc, #108]	; (8011e80 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8011e14:	681b      	ldr	r3, [r3, #0]
 8011e16:	3301      	adds	r3, #1
 8011e18:	4a19      	ldr	r2, [pc, #100]	; (8011e80 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8011e1a:	6013      	str	r3, [r2, #0]
 8011e1c:	e032      	b.n	8011e84 <_Z41__static_initialization_and_destruction_0ii+0x308>
 8011e1e:	bf00      	nop
 8011e20:	2000106c 	.word	0x2000106c
 8011e24:	20000a94 	.word	0x20000a94
 8011e28:	20001070 	.word	0x20001070
 8011e2c:	20000a9c 	.word	0x20000a9c
 8011e30:	20001074 	.word	0x20001074
 8011e34:	20000aa4 	.word	0x20000aa4
 8011e38:	20001078 	.word	0x20001078
 8011e3c:	20000aac 	.word	0x20000aac
 8011e40:	2000107c 	.word	0x2000107c
 8011e44:	20000ab4 	.word	0x20000ab4
 8011e48:	20001080 	.word	0x20001080
 8011e4c:	20000abc 	.word	0x20000abc
 8011e50:	20001084 	.word	0x20001084
 8011e54:	20000ac4 	.word	0x20000ac4
 8011e58:	20001088 	.word	0x20001088
 8011e5c:	20000acc 	.word	0x20000acc
 8011e60:	2000108c 	.word	0x2000108c
 8011e64:	20000ad4 	.word	0x20000ad4
 8011e68:	20001090 	.word	0x20001090
 8011e6c:	20000adc 	.word	0x20000adc
 8011e70:	20001094 	.word	0x20001094
 8011e74:	20000ae4 	.word	0x20000ae4
 8011e78:	20001098 	.word	0x20001098
 8011e7c:	20000aec 	.word	0x20000aec
 8011e80:	2000109c 	.word	0x2000109c
 8011e84:	4bac      	ldr	r3, [pc, #688]	; (8012138 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b01      	cmp	r3, #1
 8011e8a:	bf0c      	ite	eq
 8011e8c:	2301      	moveq	r3, #1
 8011e8e:	2300      	movne	r3, #0
 8011e90:	b2db      	uxtb	r3, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d00c      	beq.n	8011eb0 <_Z41__static_initialization_and_destruction_0ii+0x334>
 8011e96:	2300      	movs	r3, #0
 8011e98:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011e9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011ea0:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 8011ea4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	48a4      	ldr	r0, [pc, #656]	; (801213c <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 8011eac:	f7f9 fc8e 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard13{_Port::PortA, _Pin::Pin13};
 8011eb0:	4ba3      	ldr	r3, [pc, #652]	; (8012140 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3301      	adds	r3, #1
 8011eb6:	4aa2      	ldr	r2, [pc, #648]	; (8012140 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8011eb8:	6013      	str	r3, [r2, #0]
 8011eba:	4ba1      	ldr	r3, [pc, #644]	; (8012140 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2b01      	cmp	r3, #1
 8011ec0:	bf0c      	ite	eq
 8011ec2:	2301      	moveq	r3, #1
 8011ec4:	2300      	movne	r3, #0
 8011ec6:	b2db      	uxtb	r3, r3
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d00e      	beq.n	8011eea <_Z41__static_initialization_and_destruction_0ii+0x36e>
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011ed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ed6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011eda:	f107 0242 	add.w	r2, r7, #66	; 0x42
 8011ede:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	4897      	ldr	r0, [pc, #604]	; (8012144 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 8011ee6:	f7f9 fc71 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard14{_Port::PortA, _Pin::Pin14};
 8011eea:	4b97      	ldr	r3, [pc, #604]	; (8012148 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	3301      	adds	r3, #1
 8011ef0:	4a95      	ldr	r2, [pc, #596]	; (8012148 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 8011ef2:	6013      	str	r3, [r2, #0]
 8011ef4:	4b94      	ldr	r3, [pc, #592]	; (8012148 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2b01      	cmp	r3, #1
 8011efa:	bf0c      	ite	eq
 8011efc:	2301      	moveq	r3, #1
 8011efe:	2300      	movne	r3, #0
 8011f00:	b2db      	uxtb	r3, r3
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d00e      	beq.n	8011f24 <_Z41__static_initialization_and_destruction_0ii+0x3a8>
 8011f06:	2300      	movs	r3, #0
 8011f08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011f0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011f10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011f14:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8011f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011f1c:	4619      	mov	r1, r3
 8011f1e:	488b      	ldr	r0, [pc, #556]	; (801214c <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 8011f20:	f7f9 fc54 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard15{_Port::PortA, _Pin::Pin15};
 8011f24:	4b8a      	ldr	r3, [pc, #552]	; (8012150 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	3301      	adds	r3, #1
 8011f2a:	4a89      	ldr	r2, [pc, #548]	; (8012150 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8011f2c:	6013      	str	r3, [r2, #0]
 8011f2e:	4b88      	ldr	r3, [pc, #544]	; (8012150 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2b01      	cmp	r3, #1
 8011f34:	bf0c      	ite	eq
 8011f36:	2301      	moveq	r3, #1
 8011f38:	2300      	movne	r3, #0
 8011f3a:	b2db      	uxtb	r3, r3
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00e      	beq.n	8011f5e <_Z41__static_initialization_and_destruction_0ii+0x3e2>
 8011f40:	2300      	movs	r3, #0
 8011f42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011f4e:	f107 024a 	add.w	r2, r7, #74	; 0x4a
 8011f52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f56:	4619      	mov	r1, r3
 8011f58:	487e      	ldr	r0, [pc, #504]	; (8012154 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 8011f5a:	f7f9 fc37 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port B. */
	inline static const PortPin BaseBoard16{_Port::PortB, _Pin::Pin0};
 8011f5e:	4b7e      	ldr	r3, [pc, #504]	; (8012158 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	3301      	adds	r3, #1
 8011f64:	4a7c      	ldr	r2, [pc, #496]	; (8012158 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8011f66:	6013      	str	r3, [r2, #0]
 8011f68:	4b7b      	ldr	r3, [pc, #492]	; (8012158 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	bf0c      	ite	eq
 8011f70:	2301      	moveq	r3, #1
 8011f72:	2300      	movne	r3, #0
 8011f74:	b2db      	uxtb	r3, r3
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d00d      	beq.n	8011f96 <_Z41__static_initialization_and_destruction_0ii+0x41a>
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8011f80:	2301      	movs	r3, #1
 8011f82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8011f86:	f107 024e 	add.w	r2, r7, #78	; 0x4e
 8011f8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011f8e:	4619      	mov	r1, r3
 8011f90:	4872      	ldr	r0, [pc, #456]	; (801215c <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 8011f92:	f7f9 fc1b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard17{_Port::PortB, _Pin::Pin1};
 8011f96:	4b72      	ldr	r3, [pc, #456]	; (8012160 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	4a70      	ldr	r2, [pc, #448]	; (8012160 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8011f9e:	6013      	str	r3, [r2, #0]
 8011fa0:	4b6f      	ldr	r3, [pc, #444]	; (8012160 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b01      	cmp	r3, #1
 8011fa6:	bf0c      	ite	eq
 8011fa8:	2301      	moveq	r3, #1
 8011faa:	2300      	movne	r3, #0
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00d      	beq.n	8011fce <_Z41__static_initialization_and_destruction_0ii+0x452>
 8011fb2:	2301      	movs	r3, #1
 8011fb4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8011fb8:	2302      	movs	r3, #2
 8011fba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8011fbe:	f107 0252 	add.w	r2, r7, #82	; 0x52
 8011fc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011fc6:	4619      	mov	r1, r3
 8011fc8:	4866      	ldr	r0, [pc, #408]	; (8012164 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 8011fca:	f7f9 fbff 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard18{_Port::PortB, _Pin::Pin2};
 8011fce:	4b66      	ldr	r3, [pc, #408]	; (8012168 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	3301      	adds	r3, #1
 8011fd4:	4a64      	ldr	r2, [pc, #400]	; (8012168 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8011fd6:	6013      	str	r3, [r2, #0]
 8011fd8:	4b63      	ldr	r3, [pc, #396]	; (8012168 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	bf0c      	ite	eq
 8011fe0:	2301      	moveq	r3, #1
 8011fe2:	2300      	movne	r3, #0
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d00d      	beq.n	8012006 <_Z41__static_initialization_and_destruction_0ii+0x48a>
 8011fea:	2301      	movs	r3, #1
 8011fec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 8011ff0:	2304      	movs	r3, #4
 8011ff2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8011ff6:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8011ffa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8011ffe:	4619      	mov	r1, r3
 8012000:	485a      	ldr	r0, [pc, #360]	; (801216c <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 8012002:	f7f9 fbe3 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard19{_Port::PortB, _Pin::Pin3};
 8012006:	4b5a      	ldr	r3, [pc, #360]	; (8012170 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	3301      	adds	r3, #1
 801200c:	4a58      	ldr	r2, [pc, #352]	; (8012170 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 801200e:	6013      	str	r3, [r2, #0]
 8012010:	4b57      	ldr	r3, [pc, #348]	; (8012170 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	2b01      	cmp	r3, #1
 8012016:	bf0c      	ite	eq
 8012018:	2301      	moveq	r3, #1
 801201a:	2300      	movne	r3, #0
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00d      	beq.n	801203e <_Z41__static_initialization_and_destruction_0ii+0x4c2>
 8012022:	2301      	movs	r3, #1
 8012024:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8012028:	2308      	movs	r3, #8
 801202a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 801202e:	f107 025a 	add.w	r2, r7, #90	; 0x5a
 8012032:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8012036:	4619      	mov	r1, r3
 8012038:	484e      	ldr	r0, [pc, #312]	; (8012174 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 801203a:	f7f9 fbc7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard20{_Port::PortB, _Pin::Pin4};
 801203e:	4b4e      	ldr	r3, [pc, #312]	; (8012178 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	3301      	adds	r3, #1
 8012044:	4a4c      	ldr	r2, [pc, #304]	; (8012178 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 8012046:	6013      	str	r3, [r2, #0]
 8012048:	4b4b      	ldr	r3, [pc, #300]	; (8012178 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	2b01      	cmp	r3, #1
 801204e:	bf0c      	ite	eq
 8012050:	2301      	moveq	r3, #1
 8012052:	2300      	movne	r3, #0
 8012054:	b2db      	uxtb	r3, r3
 8012056:	2b00      	cmp	r3, #0
 8012058:	d00d      	beq.n	8012076 <_Z41__static_initialization_and_destruction_0ii+0x4fa>
 801205a:	2301      	movs	r3, #1
 801205c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8012060:	2310      	movs	r3, #16
 8012062:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012066:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 801206a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801206e:	4619      	mov	r1, r3
 8012070:	4842      	ldr	r0, [pc, #264]	; (801217c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 8012072:	f7f9 fbab 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard21{_Port::PortB, _Pin::Pin5};
 8012076:	4b42      	ldr	r3, [pc, #264]	; (8012180 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	3301      	adds	r3, #1
 801207c:	4a40      	ldr	r2, [pc, #256]	; (8012180 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 801207e:	6013      	str	r3, [r2, #0]
 8012080:	4b3f      	ldr	r3, [pc, #252]	; (8012180 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b01      	cmp	r3, #1
 8012086:	bf0c      	ite	eq
 8012088:	2301      	moveq	r3, #1
 801208a:	2300      	movne	r3, #0
 801208c:	b2db      	uxtb	r3, r3
 801208e:	2b00      	cmp	r3, #0
 8012090:	d00d      	beq.n	80120ae <_Z41__static_initialization_and_destruction_0ii+0x532>
 8012092:	2301      	movs	r3, #1
 8012094:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8012098:	2320      	movs	r3, #32
 801209a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 801209e:	f107 0262 	add.w	r2, r7, #98	; 0x62
 80120a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80120a6:	4619      	mov	r1, r3
 80120a8:	4836      	ldr	r0, [pc, #216]	; (8012184 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 80120aa:	f7f9 fb8f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard24{_Port::PortB, _Pin::Pin8};
 80120ae:	4b36      	ldr	r3, [pc, #216]	; (8012188 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	3301      	adds	r3, #1
 80120b4:	4a34      	ldr	r2, [pc, #208]	; (8012188 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80120b6:	6013      	str	r3, [r2, #0]
 80120b8:	4b33      	ldr	r3, [pc, #204]	; (8012188 <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b01      	cmp	r3, #1
 80120be:	bf0c      	ite	eq
 80120c0:	2301      	moveq	r3, #1
 80120c2:	2300      	movne	r3, #0
 80120c4:	b2db      	uxtb	r3, r3
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d00e      	beq.n	80120e8 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 80120ca:	2301      	movs	r3, #1
 80120cc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80120d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120d4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80120d8:	f107 0266 	add.w	r2, r7, #102	; 0x66
 80120dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80120e0:	4619      	mov	r1, r3
 80120e2:	482a      	ldr	r0, [pc, #168]	; (801218c <_Z41__static_initialization_and_destruction_0ii+0x610>)
 80120e4:	f7f9 fb72 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard25{_Port::PortB, _Pin::Pin9};
 80120e8:	4b29      	ldr	r3, [pc, #164]	; (8012190 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	3301      	adds	r3, #1
 80120ee:	4a28      	ldr	r2, [pc, #160]	; (8012190 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80120f0:	6013      	str	r3, [r2, #0]
 80120f2:	4b27      	ldr	r3, [pc, #156]	; (8012190 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	bf0c      	ite	eq
 80120fa:	2301      	moveq	r3, #1
 80120fc:	2300      	movne	r3, #0
 80120fe:	b2db      	uxtb	r3, r3
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00e      	beq.n	8012122 <_Z41__static_initialization_and_destruction_0ii+0x5a6>
 8012104:	2301      	movs	r3, #1
 8012106:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801210a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801210e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8012112:	f107 026a 	add.w	r2, r7, #106	; 0x6a
 8012116:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801211a:	4619      	mov	r1, r3
 801211c:	481d      	ldr	r0, [pc, #116]	; (8012194 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 801211e:	f7f9 fb55 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard26{_Port::PortB, _Pin::Pin10};
 8012122:	4b1d      	ldr	r3, [pc, #116]	; (8012198 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	3301      	adds	r3, #1
 8012128:	4a1b      	ldr	r2, [pc, #108]	; (8012198 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 801212a:	6013      	str	r3, [r2, #0]
 801212c:	4b1a      	ldr	r3, [pc, #104]	; (8012198 <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	2b01      	cmp	r3, #1
 8012132:	bf08      	it	eq
 8012134:	2301      	moveq	r3, #1
 8012136:	e031      	b.n	801219c <_Z41__static_initialization_and_destruction_0ii+0x620>
 8012138:	2000109c 	.word	0x2000109c
 801213c:	20000af4 	.word	0x20000af4
 8012140:	200010a0 	.word	0x200010a0
 8012144:	20000afc 	.word	0x20000afc
 8012148:	200010a4 	.word	0x200010a4
 801214c:	20000b04 	.word	0x20000b04
 8012150:	200010a8 	.word	0x200010a8
 8012154:	20000b0c 	.word	0x20000b0c
 8012158:	200010ac 	.word	0x200010ac
 801215c:	20000b14 	.word	0x20000b14
 8012160:	200010b0 	.word	0x200010b0
 8012164:	20000b1c 	.word	0x20000b1c
 8012168:	200010b4 	.word	0x200010b4
 801216c:	20000b24 	.word	0x20000b24
 8012170:	200010b8 	.word	0x200010b8
 8012174:	20000b2c 	.word	0x20000b2c
 8012178:	200010bc 	.word	0x200010bc
 801217c:	20000b34 	.word	0x20000b34
 8012180:	200010c0 	.word	0x200010c0
 8012184:	20000b3c 	.word	0x20000b3c
 8012188:	200010c4 	.word	0x200010c4
 801218c:	20000b44 	.word	0x20000b44
 8012190:	200010c8 	.word	0x200010c8
 8012194:	20000b4c 	.word	0x20000b4c
 8012198:	200010cc 	.word	0x200010cc
 801219c:	bf18      	it	ne
 801219e:	2300      	movne	r3, #0
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d00e      	beq.n	80121c4 <_Z41__static_initialization_and_destruction_0ii+0x648>
 80121a6:	2301      	movs	r3, #1
 80121a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80121ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80121b0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80121b4:	f107 026e 	add.w	r2, r7, #110	; 0x6e
 80121b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80121bc:	4619      	mov	r1, r3
 80121be:	48ae      	ldr	r0, [pc, #696]	; (8012478 <_Z41__static_initialization_and_destruction_0ii+0x8fc>)
 80121c0:	f7f9 fb04 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard27{_Port::PortB, _Pin::Pin11};
 80121c4:	4bad      	ldr	r3, [pc, #692]	; (801247c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	3301      	adds	r3, #1
 80121ca:	4aac      	ldr	r2, [pc, #688]	; (801247c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 80121cc:	6013      	str	r3, [r2, #0]
 80121ce:	4bab      	ldr	r3, [pc, #684]	; (801247c <_Z41__static_initialization_and_destruction_0ii+0x900>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b01      	cmp	r3, #1
 80121d4:	bf0c      	ite	eq
 80121d6:	2301      	moveq	r3, #1
 80121d8:	2300      	movne	r3, #0
 80121da:	b2db      	uxtb	r3, r3
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00e      	beq.n	80121fe <_Z41__static_initialization_and_destruction_0ii+0x682>
 80121e0:	2301      	movs	r3, #1
 80121e2:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 80121e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80121ea:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80121ee:	f107 0272 	add.w	r2, r7, #114	; 0x72
 80121f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80121f6:	4619      	mov	r1, r3
 80121f8:	48a1      	ldr	r0, [pc, #644]	; (8012480 <_Z41__static_initialization_and_destruction_0ii+0x904>)
 80121fa:	f7f9 fae7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard28{_Port::PortB, _Pin::Pin12};
 80121fe:	4ba1      	ldr	r3, [pc, #644]	; (8012484 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	3301      	adds	r3, #1
 8012204:	4a9f      	ldr	r2, [pc, #636]	; (8012484 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 8012206:	6013      	str	r3, [r2, #0]
 8012208:	4b9e      	ldr	r3, [pc, #632]	; (8012484 <_Z41__static_initialization_and_destruction_0ii+0x908>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	2b01      	cmp	r3, #1
 801220e:	bf0c      	ite	eq
 8012210:	2301      	moveq	r3, #1
 8012212:	2300      	movne	r3, #0
 8012214:	b2db      	uxtb	r3, r3
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00e      	beq.n	8012238 <_Z41__static_initialization_and_destruction_0ii+0x6bc>
 801221a:	2301      	movs	r3, #1
 801221c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8012220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012224:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8012228:	f107 0276 	add.w	r2, r7, #118	; 0x76
 801222c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8012230:	4619      	mov	r1, r3
 8012232:	4895      	ldr	r0, [pc, #596]	; (8012488 <_Z41__static_initialization_and_destruction_0ii+0x90c>)
 8012234:	f7f9 faca 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard29{_Port::PortB, _Pin::Pin13};
 8012238:	4b94      	ldr	r3, [pc, #592]	; (801248c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	3301      	adds	r3, #1
 801223e:	4a93      	ldr	r2, [pc, #588]	; (801248c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 8012240:	6013      	str	r3, [r2, #0]
 8012242:	4b92      	ldr	r3, [pc, #584]	; (801248c <_Z41__static_initialization_and_destruction_0ii+0x910>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	2b01      	cmp	r3, #1
 8012248:	bf0c      	ite	eq
 801224a:	2301      	moveq	r3, #1
 801224c:	2300      	movne	r3, #0
 801224e:	b2db      	uxtb	r3, r3
 8012250:	2b00      	cmp	r3, #0
 8012252:	d00e      	beq.n	8012272 <_Z41__static_initialization_and_destruction_0ii+0x6f6>
 8012254:	2301      	movs	r3, #1
 8012256:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 801225a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801225e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8012262:	f107 027a 	add.w	r2, r7, #122	; 0x7a
 8012266:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801226a:	4619      	mov	r1, r3
 801226c:	4888      	ldr	r0, [pc, #544]	; (8012490 <_Z41__static_initialization_and_destruction_0ii+0x914>)
 801226e:	f7f9 faad 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard30{_Port::PortB, _Pin::Pin14};
 8012272:	4b88      	ldr	r3, [pc, #544]	; (8012494 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3301      	adds	r3, #1
 8012278:	4a86      	ldr	r2, [pc, #536]	; (8012494 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 801227a:	6013      	str	r3, [r2, #0]
 801227c:	4b85      	ldr	r3, [pc, #532]	; (8012494 <_Z41__static_initialization_and_destruction_0ii+0x918>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	2b01      	cmp	r3, #1
 8012282:	bf0c      	ite	eq
 8012284:	2301      	moveq	r3, #1
 8012286:	2300      	movne	r3, #0
 8012288:	b2db      	uxtb	r3, r3
 801228a:	2b00      	cmp	r3, #0
 801228c:	d00e      	beq.n	80122ac <_Z41__static_initialization_and_destruction_0ii+0x730>
 801228e:	2301      	movs	r3, #1
 8012290:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8012294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012298:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 801229c:	f107 027e 	add.w	r2, r7, #126	; 0x7e
 80122a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80122a4:	4619      	mov	r1, r3
 80122a6:	487c      	ldr	r0, [pc, #496]	; (8012498 <_Z41__static_initialization_and_destruction_0ii+0x91c>)
 80122a8:	f7f9 fa90 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard31{_Port::PortB, _Pin::Pin15};
 80122ac:	4b7b      	ldr	r3, [pc, #492]	; (801249c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	3301      	adds	r3, #1
 80122b2:	4a7a      	ldr	r2, [pc, #488]	; (801249c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 80122b4:	6013      	str	r3, [r2, #0]
 80122b6:	4b79      	ldr	r3, [pc, #484]	; (801249c <_Z41__static_initialization_and_destruction_0ii+0x920>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	2b01      	cmp	r3, #1
 80122bc:	bf0c      	ite	eq
 80122be:	2301      	moveq	r3, #1
 80122c0:	2300      	movne	r3, #0
 80122c2:	b2db      	uxtb	r3, r3
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d00e      	beq.n	80122e6 <_Z41__static_initialization_and_destruction_0ii+0x76a>
 80122c8:	2301      	movs	r3, #1
 80122ca:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 80122ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122d2:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 80122d6:	f107 0282 	add.w	r2, r7, #130	; 0x82
 80122da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80122de:	4619      	mov	r1, r3
 80122e0:	486f      	ldr	r0, [pc, #444]	; (80124a0 <_Z41__static_initialization_and_destruction_0ii+0x924>)
 80122e2:	f7f9 fa73 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port C. */
	inline static const PortPin BaseBoard32{_Port::PortC, _Pin::Pin0};
 80122e6:	4b6f      	ldr	r3, [pc, #444]	; (80124a4 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	3301      	adds	r3, #1
 80122ec:	4a6d      	ldr	r2, [pc, #436]	; (80124a4 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	4b6c      	ldr	r3, [pc, #432]	; (80124a4 <_Z41__static_initialization_and_destruction_0ii+0x928>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	bf0c      	ite	eq
 80122f8:	2301      	moveq	r3, #1
 80122fa:	2300      	movne	r3, #0
 80122fc:	b2db      	uxtb	r3, r3
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d00d      	beq.n	801231e <_Z41__static_initialization_and_destruction_0ii+0x7a2>
 8012302:	2302      	movs	r3, #2
 8012304:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8012308:	2301      	movs	r3, #1
 801230a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 801230e:	f107 0286 	add.w	r2, r7, #134	; 0x86
 8012312:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012316:	4619      	mov	r1, r3
 8012318:	4863      	ldr	r0, [pc, #396]	; (80124a8 <_Z41__static_initialization_and_destruction_0ii+0x92c>)
 801231a:	f7f9 fa57 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard33{_Port::PortC, _Pin::Pin1};
 801231e:	4b63      	ldr	r3, [pc, #396]	; (80124ac <_Z41__static_initialization_and_destruction_0ii+0x930>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	3301      	adds	r3, #1
 8012324:	4a61      	ldr	r2, [pc, #388]	; (80124ac <_Z41__static_initialization_and_destruction_0ii+0x930>)
 8012326:	6013      	str	r3, [r2, #0]
 8012328:	4b60      	ldr	r3, [pc, #384]	; (80124ac <_Z41__static_initialization_and_destruction_0ii+0x930>)
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2b01      	cmp	r3, #1
 801232e:	bf0c      	ite	eq
 8012330:	2301      	moveq	r3, #1
 8012332:	2300      	movne	r3, #0
 8012334:	b2db      	uxtb	r3, r3
 8012336:	2b00      	cmp	r3, #0
 8012338:	d00d      	beq.n	8012356 <_Z41__static_initialization_and_destruction_0ii+0x7da>
 801233a:	2302      	movs	r3, #2
 801233c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8012340:	2302      	movs	r3, #2
 8012342:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8012346:	f107 028a 	add.w	r2, r7, #138	; 0x8a
 801234a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801234e:	4619      	mov	r1, r3
 8012350:	4857      	ldr	r0, [pc, #348]	; (80124b0 <_Z41__static_initialization_and_destruction_0ii+0x934>)
 8012352:	f7f9 fa3b 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard34{_Port::PortC, _Pin::Pin2};
 8012356:	4b57      	ldr	r3, [pc, #348]	; (80124b4 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	3301      	adds	r3, #1
 801235c:	4a55      	ldr	r2, [pc, #340]	; (80124b4 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 801235e:	6013      	str	r3, [r2, #0]
 8012360:	4b54      	ldr	r3, [pc, #336]	; (80124b4 <_Z41__static_initialization_and_destruction_0ii+0x938>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2b01      	cmp	r3, #1
 8012366:	bf0c      	ite	eq
 8012368:	2301      	moveq	r3, #1
 801236a:	2300      	movne	r3, #0
 801236c:	b2db      	uxtb	r3, r3
 801236e:	2b00      	cmp	r3, #0
 8012370:	d00d      	beq.n	801238e <_Z41__static_initialization_and_destruction_0ii+0x812>
 8012372:	2302      	movs	r3, #2
 8012374:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8012378:	2304      	movs	r3, #4
 801237a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 801237e:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 8012382:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8012386:	4619      	mov	r1, r3
 8012388:	484b      	ldr	r0, [pc, #300]	; (80124b8 <_Z41__static_initialization_and_destruction_0ii+0x93c>)
 801238a:	f7f9 fa1f 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard35{_Port::PortC, _Pin::Pin3};
 801238e:	4b4b      	ldr	r3, [pc, #300]	; (80124bc <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	3301      	adds	r3, #1
 8012394:	4a49      	ldr	r2, [pc, #292]	; (80124bc <_Z41__static_initialization_and_destruction_0ii+0x940>)
 8012396:	6013      	str	r3, [r2, #0]
 8012398:	4b48      	ldr	r3, [pc, #288]	; (80124bc <_Z41__static_initialization_and_destruction_0ii+0x940>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b01      	cmp	r3, #1
 801239e:	bf0c      	ite	eq
 80123a0:	2301      	moveq	r3, #1
 80123a2:	2300      	movne	r3, #0
 80123a4:	b2db      	uxtb	r3, r3
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d00d      	beq.n	80123c6 <_Z41__static_initialization_and_destruction_0ii+0x84a>
 80123aa:	2302      	movs	r3, #2
 80123ac:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80123b0:	2308      	movs	r3, #8
 80123b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80123b6:	f107 0292 	add.w	r2, r7, #146	; 0x92
 80123ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80123be:	4619      	mov	r1, r3
 80123c0:	483f      	ldr	r0, [pc, #252]	; (80124c0 <_Z41__static_initialization_and_destruction_0ii+0x944>)
 80123c2:	f7f9 fa03 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard36{_Port::PortC, _Pin::Pin4};
 80123c6:	4b3f      	ldr	r3, [pc, #252]	; (80124c4 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	3301      	adds	r3, #1
 80123cc:	4a3d      	ldr	r2, [pc, #244]	; (80124c4 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 80123ce:	6013      	str	r3, [r2, #0]
 80123d0:	4b3c      	ldr	r3, [pc, #240]	; (80124c4 <_Z41__static_initialization_and_destruction_0ii+0x948>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	bf0c      	ite	eq
 80123d8:	2301      	moveq	r3, #1
 80123da:	2300      	movne	r3, #0
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00d      	beq.n	80123fe <_Z41__static_initialization_and_destruction_0ii+0x882>
 80123e2:	2302      	movs	r3, #2
 80123e4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80123e8:	2310      	movs	r3, #16
 80123ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80123ee:	f107 0296 	add.w	r2, r7, #150	; 0x96
 80123f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80123f6:	4619      	mov	r1, r3
 80123f8:	4833      	ldr	r0, [pc, #204]	; (80124c8 <_Z41__static_initialization_and_destruction_0ii+0x94c>)
 80123fa:	f7f9 f9e7 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard37{_Port::PortC, _Pin::Pin5};
 80123fe:	4b33      	ldr	r3, [pc, #204]	; (80124cc <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	3301      	adds	r3, #1
 8012404:	4a31      	ldr	r2, [pc, #196]	; (80124cc <_Z41__static_initialization_and_destruction_0ii+0x950>)
 8012406:	6013      	str	r3, [r2, #0]
 8012408:	4b30      	ldr	r3, [pc, #192]	; (80124cc <_Z41__static_initialization_and_destruction_0ii+0x950>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	2b01      	cmp	r3, #1
 801240e:	bf0c      	ite	eq
 8012410:	2301      	moveq	r3, #1
 8012412:	2300      	movne	r3, #0
 8012414:	b2db      	uxtb	r3, r3
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00d      	beq.n	8012436 <_Z41__static_initialization_and_destruction_0ii+0x8ba>
 801241a:	2302      	movs	r3, #2
 801241c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8012420:	2320      	movs	r3, #32
 8012422:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8012426:	f107 029a 	add.w	r2, r7, #154	; 0x9a
 801242a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801242e:	4619      	mov	r1, r3
 8012430:	4827      	ldr	r0, [pc, #156]	; (80124d0 <_Z41__static_initialization_and_destruction_0ii+0x954>)
 8012432:	f7f9 f9cb 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard38{_Port::PortC, _Pin::Pin6};
 8012436:	4b27      	ldr	r3, [pc, #156]	; (80124d4 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	3301      	adds	r3, #1
 801243c:	4a25      	ldr	r2, [pc, #148]	; (80124d4 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 801243e:	6013      	str	r3, [r2, #0]
 8012440:	4b24      	ldr	r3, [pc, #144]	; (80124d4 <_Z41__static_initialization_and_destruction_0ii+0x958>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b01      	cmp	r3, #1
 8012446:	bf0c      	ite	eq
 8012448:	2301      	moveq	r3, #1
 801244a:	2300      	movne	r3, #0
 801244c:	b2db      	uxtb	r3, r3
 801244e:	2b00      	cmp	r3, #0
 8012450:	d00d      	beq.n	801246e <_Z41__static_initialization_and_destruction_0ii+0x8f2>
 8012452:	2302      	movs	r3, #2
 8012454:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8012458:	2340      	movs	r3, #64	; 0x40
 801245a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 801245e:	f107 029e 	add.w	r2, r7, #158	; 0x9e
 8012462:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012466:	4619      	mov	r1, r3
 8012468:	481b      	ldr	r0, [pc, #108]	; (80124d8 <_Z41__static_initialization_and_destruction_0ii+0x95c>)
 801246a:	f7f9 f9af 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard39{_Port::PortC, _Pin::Pin7};
 801246e:	4b1b      	ldr	r3, [pc, #108]	; (80124dc <_Z41__static_initialization_and_destruction_0ii+0x960>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	3301      	adds	r3, #1
 8012474:	e034      	b.n	80124e0 <_Z41__static_initialization_and_destruction_0ii+0x964>
 8012476:	bf00      	nop
 8012478:	20000b54 	.word	0x20000b54
 801247c:	200010d0 	.word	0x200010d0
 8012480:	20000b5c 	.word	0x20000b5c
 8012484:	200010d4 	.word	0x200010d4
 8012488:	20000b64 	.word	0x20000b64
 801248c:	200010d8 	.word	0x200010d8
 8012490:	20000b6c 	.word	0x20000b6c
 8012494:	200010dc 	.word	0x200010dc
 8012498:	20000b74 	.word	0x20000b74
 801249c:	200010e0 	.word	0x200010e0
 80124a0:	20000b7c 	.word	0x20000b7c
 80124a4:	200010e4 	.word	0x200010e4
 80124a8:	20000b84 	.word	0x20000b84
 80124ac:	200010e8 	.word	0x200010e8
 80124b0:	20000b8c 	.word	0x20000b8c
 80124b4:	200010ec 	.word	0x200010ec
 80124b8:	20000b94 	.word	0x20000b94
 80124bc:	200010f0 	.word	0x200010f0
 80124c0:	20000b9c 	.word	0x20000b9c
 80124c4:	200010f4 	.word	0x200010f4
 80124c8:	20000ba4 	.word	0x20000ba4
 80124cc:	200010f8 	.word	0x200010f8
 80124d0:	20000bac 	.word	0x20000bac
 80124d4:	200010fc 	.word	0x200010fc
 80124d8:	20000bb4 	.word	0x20000bb4
 80124dc:	20001100 	.word	0x20001100
 80124e0:	4aac      	ldr	r2, [pc, #688]	; (8012794 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 80124e2:	6013      	str	r3, [r2, #0]
 80124e4:	4bab      	ldr	r3, [pc, #684]	; (8012794 <_Z41__static_initialization_and_destruction_0ii+0xc18>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	bf0c      	ite	eq
 80124ec:	2301      	moveq	r3, #1
 80124ee:	2300      	movne	r3, #0
 80124f0:	b2db      	uxtb	r3, r3
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d00d      	beq.n	8012512 <_Z41__static_initialization_and_destruction_0ii+0x996>
 80124f6:	2302      	movs	r3, #2
 80124f8:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 80124fc:	2380      	movs	r3, #128	; 0x80
 80124fe:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
 8012502:	f107 02a2 	add.w	r2, r7, #162	; 0xa2
 8012506:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801250a:	4619      	mov	r1, r3
 801250c:	48a2      	ldr	r0, [pc, #648]	; (8012798 <_Z41__static_initialization_and_destruction_0ii+0xc1c>)
 801250e:	f7f9 f95d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard40{_Port::PortC, _Pin::Pin8};
 8012512:	4ba2      	ldr	r3, [pc, #648]	; (801279c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	3301      	adds	r3, #1
 8012518:	4aa0      	ldr	r2, [pc, #640]	; (801279c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 801251a:	6013      	str	r3, [r2, #0]
 801251c:	4b9f      	ldr	r3, [pc, #636]	; (801279c <_Z41__static_initialization_and_destruction_0ii+0xc20>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	2b01      	cmp	r3, #1
 8012522:	bf0c      	ite	eq
 8012524:	2301      	moveq	r3, #1
 8012526:	2300      	movne	r3, #0
 8012528:	b2db      	uxtb	r3, r3
 801252a:	2b00      	cmp	r3, #0
 801252c:	d00e      	beq.n	801254c <_Z41__static_initialization_and_destruction_0ii+0x9d0>
 801252e:	2302      	movs	r3, #2
 8012530:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8012534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012538:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 801253c:	f107 02a6 	add.w	r2, r7, #166	; 0xa6
 8012540:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8012544:	4619      	mov	r1, r3
 8012546:	4896      	ldr	r0, [pc, #600]	; (80127a0 <_Z41__static_initialization_and_destruction_0ii+0xc24>)
 8012548:	f7f9 f940 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard41{_Port::PortC, _Pin::Pin9};
 801254c:	4b95      	ldr	r3, [pc, #596]	; (80127a4 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	3301      	adds	r3, #1
 8012552:	4a94      	ldr	r2, [pc, #592]	; (80127a4 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8012554:	6013      	str	r3, [r2, #0]
 8012556:	4b93      	ldr	r3, [pc, #588]	; (80127a4 <_Z41__static_initialization_and_destruction_0ii+0xc28>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	2b01      	cmp	r3, #1
 801255c:	bf0c      	ite	eq
 801255e:	2301      	moveq	r3, #1
 8012560:	2300      	movne	r3, #0
 8012562:	b2db      	uxtb	r3, r3
 8012564:	2b00      	cmp	r3, #0
 8012566:	d00e      	beq.n	8012586 <_Z41__static_initialization_and_destruction_0ii+0xa0a>
 8012568:	2302      	movs	r3, #2
 801256a:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 801256e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012572:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8012576:	f107 02aa 	add.w	r2, r7, #170	; 0xaa
 801257a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801257e:	4619      	mov	r1, r3
 8012580:	4889      	ldr	r0, [pc, #548]	; (80127a8 <_Z41__static_initialization_and_destruction_0ii+0xc2c>)
 8012582:	f7f9 f923 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard42{_Port::PortC, _Pin::Pin10};
 8012586:	4b89      	ldr	r3, [pc, #548]	; (80127ac <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	3301      	adds	r3, #1
 801258c:	4a87      	ldr	r2, [pc, #540]	; (80127ac <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 801258e:	6013      	str	r3, [r2, #0]
 8012590:	4b86      	ldr	r3, [pc, #536]	; (80127ac <_Z41__static_initialization_and_destruction_0ii+0xc30>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	2b01      	cmp	r3, #1
 8012596:	bf0c      	ite	eq
 8012598:	2301      	moveq	r3, #1
 801259a:	2300      	movne	r3, #0
 801259c:	b2db      	uxtb	r3, r3
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00e      	beq.n	80125c0 <_Z41__static_initialization_and_destruction_0ii+0xa44>
 80125a2:	2302      	movs	r3, #2
 80125a4:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
 80125a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80125ac:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80125b0:	f107 02ae 	add.w	r2, r7, #174	; 0xae
 80125b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80125b8:	4619      	mov	r1, r3
 80125ba:	487d      	ldr	r0, [pc, #500]	; (80127b0 <_Z41__static_initialization_and_destruction_0ii+0xc34>)
 80125bc:	f7f9 f906 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard43{_Port::PortC, _Pin::Pin11};
 80125c0:	4b7c      	ldr	r3, [pc, #496]	; (80127b4 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	3301      	adds	r3, #1
 80125c6:	4a7b      	ldr	r2, [pc, #492]	; (80127b4 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 80125c8:	6013      	str	r3, [r2, #0]
 80125ca:	4b7a      	ldr	r3, [pc, #488]	; (80127b4 <_Z41__static_initialization_and_destruction_0ii+0xc38>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	bf0c      	ite	eq
 80125d2:	2301      	moveq	r3, #1
 80125d4:	2300      	movne	r3, #0
 80125d6:	b2db      	uxtb	r3, r3
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00e      	beq.n	80125fa <_Z41__static_initialization_and_destruction_0ii+0xa7e>
 80125dc:	2302      	movs	r3, #2
 80125de:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 80125e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125e6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80125ea:	f107 02b2 	add.w	r2, r7, #178	; 0xb2
 80125ee:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80125f2:	4619      	mov	r1, r3
 80125f4:	4870      	ldr	r0, [pc, #448]	; (80127b8 <_Z41__static_initialization_and_destruction_0ii+0xc3c>)
 80125f6:	f7f9 f8e9 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard44{_Port::PortC, _Pin::Pin12};
 80125fa:	4b70      	ldr	r3, [pc, #448]	; (80127bc <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	3301      	adds	r3, #1
 8012600:	4a6e      	ldr	r2, [pc, #440]	; (80127bc <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 8012602:	6013      	str	r3, [r2, #0]
 8012604:	4b6d      	ldr	r3, [pc, #436]	; (80127bc <_Z41__static_initialization_and_destruction_0ii+0xc40>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	2b01      	cmp	r3, #1
 801260a:	bf0c      	ite	eq
 801260c:	2301      	moveq	r3, #1
 801260e:	2300      	movne	r3, #0
 8012610:	b2db      	uxtb	r3, r3
 8012612:	2b00      	cmp	r3, #0
 8012614:	d00e      	beq.n	8012634 <_Z41__static_initialization_and_destruction_0ii+0xab8>
 8012616:	2302      	movs	r3, #2
 8012618:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 801261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012620:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 8012624:	f107 02b6 	add.w	r2, r7, #182	; 0xb6
 8012628:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801262c:	4619      	mov	r1, r3
 801262e:	4864      	ldr	r0, [pc, #400]	; (80127c0 <_Z41__static_initialization_and_destruction_0ii+0xc44>)
 8012630:	f7f9 f8cc 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard45{_Port::PortC, _Pin::Pin13};
 8012634:	4b63      	ldr	r3, [pc, #396]	; (80127c4 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	3301      	adds	r3, #1
 801263a:	4a62      	ldr	r2, [pc, #392]	; (80127c4 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 801263c:	6013      	str	r3, [r2, #0]
 801263e:	4b61      	ldr	r3, [pc, #388]	; (80127c4 <_Z41__static_initialization_and_destruction_0ii+0xc48>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b01      	cmp	r3, #1
 8012644:	bf0c      	ite	eq
 8012646:	2301      	moveq	r3, #1
 8012648:	2300      	movne	r3, #0
 801264a:	b2db      	uxtb	r3, r3
 801264c:	2b00      	cmp	r3, #0
 801264e:	d00e      	beq.n	801266e <_Z41__static_initialization_and_destruction_0ii+0xaf2>
 8012650:	2302      	movs	r3, #2
 8012652:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8012656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801265a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
 801265e:	f107 02ba 	add.w	r2, r7, #186	; 0xba
 8012662:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8012666:	4619      	mov	r1, r3
 8012668:	4857      	ldr	r0, [pc, #348]	; (80127c8 <_Z41__static_initialization_and_destruction_0ii+0xc4c>)
 801266a:	f7f9 f8af 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard46{_Port::PortC, _Pin::Pin14};
 801266e:	4b57      	ldr	r3, [pc, #348]	; (80127cc <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	3301      	adds	r3, #1
 8012674:	4a55      	ldr	r2, [pc, #340]	; (80127cc <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 8012676:	6013      	str	r3, [r2, #0]
 8012678:	4b54      	ldr	r3, [pc, #336]	; (80127cc <_Z41__static_initialization_and_destruction_0ii+0xc50>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	2b01      	cmp	r3, #1
 801267e:	bf0c      	ite	eq
 8012680:	2301      	moveq	r3, #1
 8012682:	2300      	movne	r3, #0
 8012684:	b2db      	uxtb	r3, r3
 8012686:	2b00      	cmp	r3, #0
 8012688:	d00e      	beq.n	80126a8 <_Z41__static_initialization_and_destruction_0ii+0xb2c>
 801268a:	2302      	movs	r3, #2
 801268c:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
 8012690:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012694:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8012698:	f107 02be 	add.w	r2, r7, #190	; 0xbe
 801269c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80126a0:	4619      	mov	r1, r3
 80126a2:	484b      	ldr	r0, [pc, #300]	; (80127d0 <_Z41__static_initialization_and_destruction_0ii+0xc54>)
 80126a4:	f7f9 f892 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard47{_Port::PortC, _Pin::Pin15};
 80126a8:	4b4a      	ldr	r3, [pc, #296]	; (80127d4 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	3301      	adds	r3, #1
 80126ae:	4a49      	ldr	r2, [pc, #292]	; (80127d4 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 80126b0:	6013      	str	r3, [r2, #0]
 80126b2:	4b48      	ldr	r3, [pc, #288]	; (80127d4 <_Z41__static_initialization_and_destruction_0ii+0xc58>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2b01      	cmp	r3, #1
 80126b8:	bf0c      	ite	eq
 80126ba:	2301      	moveq	r3, #1
 80126bc:	2300      	movne	r3, #0
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d00e      	beq.n	80126e2 <_Z41__static_initialization_and_destruction_0ii+0xb66>
 80126c4:	2302      	movs	r3, #2
 80126c6:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
 80126ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126ce:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
 80126d2:	f107 02c2 	add.w	r2, r7, #194	; 0xc2
 80126d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80126da:	4619      	mov	r1, r3
 80126dc:	483e      	ldr	r0, [pc, #248]	; (80127d8 <_Z41__static_initialization_and_destruction_0ii+0xc5c>)
 80126de:	f7f9 f875 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port D. */
	inline static const PortPin BaseBoard48{_Port::PortD, _Pin::Pin2};
 80126e2:	4b3e      	ldr	r3, [pc, #248]	; (80127dc <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	3301      	adds	r3, #1
 80126e8:	4a3c      	ldr	r2, [pc, #240]	; (80127dc <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 80126ea:	6013      	str	r3, [r2, #0]
 80126ec:	4b3b      	ldr	r3, [pc, #236]	; (80127dc <_Z41__static_initialization_and_destruction_0ii+0xc60>)
 80126ee:	681b      	ldr	r3, [r3, #0]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	bf0c      	ite	eq
 80126f4:	2301      	moveq	r3, #1
 80126f6:	2300      	movne	r3, #0
 80126f8:	b2db      	uxtb	r3, r3
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d00d      	beq.n	801271a <_Z41__static_initialization_and_destruction_0ii+0xb9e>
 80126fe:	2303      	movs	r3, #3
 8012700:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
 8012704:	2304      	movs	r3, #4
 8012706:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
 801270a:	f107 02c6 	add.w	r2, r7, #198	; 0xc6
 801270e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8012712:	4619      	mov	r1, r3
 8012714:	4832      	ldr	r0, [pc, #200]	; (80127e0 <_Z41__static_initialization_and_destruction_0ii+0xc64>)
 8012716:	f7f9 f859 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>

	/* --Port H. */
	inline static const PortPin BaseBoard49{_Port::PortH, _Pin::Pin0};
 801271a:	4b32      	ldr	r3, [pc, #200]	; (80127e4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	3301      	adds	r3, #1
 8012720:	4a30      	ldr	r2, [pc, #192]	; (80127e4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8012722:	6013      	str	r3, [r2, #0]
 8012724:	4b2f      	ldr	r3, [pc, #188]	; (80127e4 <_Z41__static_initialization_and_destruction_0ii+0xc68>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	2b01      	cmp	r3, #1
 801272a:	bf0c      	ite	eq
 801272c:	2301      	moveq	r3, #1
 801272e:	2300      	movne	r3, #0
 8012730:	b2db      	uxtb	r3, r3
 8012732:	2b00      	cmp	r3, #0
 8012734:	d00d      	beq.n	8012752 <_Z41__static_initialization_and_destruction_0ii+0xbd6>
 8012736:	2307      	movs	r3, #7
 8012738:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
 801273c:	2301      	movs	r3, #1
 801273e:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
 8012742:	f107 02ca 	add.w	r2, r7, #202	; 0xca
 8012746:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801274a:	4619      	mov	r1, r3
 801274c:	4826      	ldr	r0, [pc, #152]	; (80127e8 <_Z41__static_initialization_and_destruction_0ii+0xc6c>)
 801274e:	f7f9 f83d 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
	inline static const PortPin BaseBoard50{_Port::PortH, _Pin::Pin1};
 8012752:	4b26      	ldr	r3, [pc, #152]	; (80127ec <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	3301      	adds	r3, #1
 8012758:	4a24      	ldr	r2, [pc, #144]	; (80127ec <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 801275a:	6013      	str	r3, [r2, #0]
 801275c:	4b23      	ldr	r3, [pc, #140]	; (80127ec <_Z41__static_initialization_and_destruction_0ii+0xc70>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b01      	cmp	r3, #1
 8012762:	bf0c      	ite	eq
 8012764:	2301      	moveq	r3, #1
 8012766:	2300      	movne	r3, #0
 8012768:	b2db      	uxtb	r3, r3
 801276a:	2b00      	cmp	r3, #0
 801276c:	d00d      	beq.n	801278a <_Z41__static_initialization_and_destruction_0ii+0xc0e>
 801276e:	2307      	movs	r3, #7
 8012770:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
 8012774:	2302      	movs	r3, #2
 8012776:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 801277a:	f107 02ce 	add.w	r2, r7, #206	; 0xce
 801277e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8012782:	4619      	mov	r1, r3
 8012784:	481a      	ldr	r0, [pc, #104]	; (80127f0 <_Z41__static_initialization_and_destruction_0ii+0xc74>)
 8012786:	f7f9 f821 	bl	800b7cc <_ZNSt4pairIN8Platform3BSP4PortENS1_3PinEEC1INS2_6SelectENS3_7BitMaskELb0EEEOT_OT0_>
 801278a:	bf00      	nop
 801278c:	37d0      	adds	r7, #208	; 0xd0
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	20001100 	.word	0x20001100
 8012798:	20000bbc 	.word	0x20000bbc
 801279c:	20001104 	.word	0x20001104
 80127a0:	20000bc4 	.word	0x20000bc4
 80127a4:	20001108 	.word	0x20001108
 80127a8:	20000bcc 	.word	0x20000bcc
 80127ac:	2000110c 	.word	0x2000110c
 80127b0:	20000bd4 	.word	0x20000bd4
 80127b4:	20001110 	.word	0x20001110
 80127b8:	20000bdc 	.word	0x20000bdc
 80127bc:	20001114 	.word	0x20001114
 80127c0:	20000be4 	.word	0x20000be4
 80127c4:	20001118 	.word	0x20001118
 80127c8:	20000bec 	.word	0x20000bec
 80127cc:	2000111c 	.word	0x2000111c
 80127d0:	20000bf4 	.word	0x20000bf4
 80127d4:	20001120 	.word	0x20001120
 80127d8:	20000bfc 	.word	0x20000bfc
 80127dc:	20001124 	.word	0x20001124
 80127e0:	20000c04 	.word	0x20000c04
 80127e4:	20001128 	.word	0x20001128
 80127e8:	20000c0c 	.word	0x20000c0c
 80127ec:	2000112c 	.word	0x2000112c
 80127f0:	20000c14 	.word	0x20000c14

080127f4 <_GLOBAL__sub_I_socknumlist>:
 80127f4:	b580      	push	{r7, lr}
 80127f6:	af00      	add	r7, sp, #0
 80127f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80127fc:	2001      	movs	r0, #1
 80127fe:	f7ff f9bd 	bl	8011b7c <_Z41__static_initialization_and_destruction_0ii>
 8012802:	bd80      	pop	{r7, pc}

08012804 <_ZdlPvj>:
 8012804:	f000 b821 	b.w	801284a <_ZdlPv>

08012808 <_ZdaPv>:
 8012808:	f000 b81f 	b.w	801284a <_ZdlPv>

0801280c <__cxa_guard_acquire>:
 801280c:	6803      	ldr	r3, [r0, #0]
 801280e:	07db      	lsls	r3, r3, #31
 8012810:	d406      	bmi.n	8012820 <__cxa_guard_acquire+0x14>
 8012812:	7843      	ldrb	r3, [r0, #1]
 8012814:	b103      	cbz	r3, 8012818 <__cxa_guard_acquire+0xc>
 8012816:	deff      	udf	#255	; 0xff
 8012818:	2301      	movs	r3, #1
 801281a:	7043      	strb	r3, [r0, #1]
 801281c:	4618      	mov	r0, r3
 801281e:	4770      	bx	lr
 8012820:	2000      	movs	r0, #0
 8012822:	4770      	bx	lr

08012824 <__cxa_guard_release>:
 8012824:	2301      	movs	r3, #1
 8012826:	6003      	str	r3, [r0, #0]
 8012828:	4770      	bx	lr
	...

0801282c <_ZSt15get_new_handlerv>:
 801282c:	4b02      	ldr	r3, [pc, #8]	; (8012838 <_ZSt15get_new_handlerv+0xc>)
 801282e:	6818      	ldr	r0, [r3, #0]
 8012830:	f3bf 8f5b 	dmb	ish
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	20001a34 	.word	0x20001a34

0801283c <_Znaj>:
 801283c:	f000 b819 	b.w	8012872 <_Znwj>

08012840 <_ZnajRKSt9nothrow_t>:
 8012840:	f7ff bffc 	b.w	801283c <_Znaj>

08012844 <__cxa_pure_virtual>:
 8012844:	b508      	push	{r3, lr}
 8012846:	f000 f80f 	bl	8012868 <_ZSt9terminatev>

0801284a <_ZdlPv>:
 801284a:	f000 b8e7 	b.w	8012a1c <free>

0801284e <_ZN10__cxxabiv111__terminateEPFvvE>:
 801284e:	b508      	push	{r3, lr}
 8012850:	4780      	blx	r0
 8012852:	f000 f81f 	bl	8012894 <abort>
	...

08012858 <_ZSt13get_terminatev>:
 8012858:	4b02      	ldr	r3, [pc, #8]	; (8012864 <_ZSt13get_terminatev+0xc>)
 801285a:	6818      	ldr	r0, [r3, #0]
 801285c:	f3bf 8f5b 	dmb	ish
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	2000003c 	.word	0x2000003c

08012868 <_ZSt9terminatev>:
 8012868:	b508      	push	{r3, lr}
 801286a:	f7ff fff5 	bl	8012858 <_ZSt13get_terminatev>
 801286e:	f7ff ffee 	bl	801284e <_ZN10__cxxabiv111__terminateEPFvvE>

08012872 <_Znwj>:
 8012872:	2801      	cmp	r0, #1
 8012874:	bf38      	it	cc
 8012876:	2001      	movcc	r0, #1
 8012878:	b510      	push	{r4, lr}
 801287a:	4604      	mov	r4, r0
 801287c:	4620      	mov	r0, r4
 801287e:	f000 f8c5 	bl	8012a0c <malloc>
 8012882:	b930      	cbnz	r0, 8012892 <_Znwj+0x20>
 8012884:	f7ff ffd2 	bl	801282c <_ZSt15get_new_handlerv>
 8012888:	b908      	cbnz	r0, 801288e <_Znwj+0x1c>
 801288a:	f000 f803 	bl	8012894 <abort>
 801288e:	4780      	blx	r0
 8012890:	e7f4      	b.n	801287c <_Znwj+0xa>
 8012892:	bd10      	pop	{r4, pc}

08012894 <abort>:
 8012894:	b508      	push	{r3, lr}
 8012896:	2006      	movs	r0, #6
 8012898:	f000 fd8c 	bl	80133b4 <raise>
 801289c:	2001      	movs	r0, #1
 801289e:	f7ef fd07 	bl	80022b0 <_exit>

080128a2 <atexit>:
 80128a2:	2300      	movs	r3, #0
 80128a4:	4601      	mov	r1, r0
 80128a6:	461a      	mov	r2, r3
 80128a8:	4618      	mov	r0, r3
 80128aa:	f000 bf03 	b.w	80136b4 <__register_exitproc>
	...

080128b0 <__errno>:
 80128b0:	4b01      	ldr	r3, [pc, #4]	; (80128b8 <__errno+0x8>)
 80128b2:	6818      	ldr	r0, [r3, #0]
 80128b4:	4770      	bx	lr
 80128b6:	bf00      	nop
 80128b8:	20000040 	.word	0x20000040

080128bc <fiprintf>:
 80128bc:	b40e      	push	{r1, r2, r3}
 80128be:	b503      	push	{r0, r1, lr}
 80128c0:	4601      	mov	r1, r0
 80128c2:	ab03      	add	r3, sp, #12
 80128c4:	4805      	ldr	r0, [pc, #20]	; (80128dc <fiprintf+0x20>)
 80128c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80128ca:	6800      	ldr	r0, [r0, #0]
 80128cc:	9301      	str	r3, [sp, #4]
 80128ce:	f000 f9e7 	bl	8012ca0 <_vfiprintf_r>
 80128d2:	b002      	add	sp, #8
 80128d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80128d8:	b003      	add	sp, #12
 80128da:	4770      	bx	lr
 80128dc:	20000040 	.word	0x20000040

080128e0 <_fputs_r>:
 80128e0:	b570      	push	{r4, r5, r6, lr}
 80128e2:	460e      	mov	r6, r1
 80128e4:	4614      	mov	r4, r2
 80128e6:	4605      	mov	r5, r0
 80128e8:	b118      	cbz	r0, 80128f2 <_fputs_r+0x12>
 80128ea:	6983      	ldr	r3, [r0, #24]
 80128ec:	b90b      	cbnz	r3, 80128f2 <_fputs_r+0x12>
 80128ee:	f001 f86d 	bl	80139cc <__sinit>
 80128f2:	4b2b      	ldr	r3, [pc, #172]	; (80129a0 <_fputs_r+0xc0>)
 80128f4:	429c      	cmp	r4, r3
 80128f6:	d11e      	bne.n	8012936 <_fputs_r+0x56>
 80128f8:	686c      	ldr	r4, [r5, #4]
 80128fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80128fc:	07da      	lsls	r2, r3, #31
 80128fe:	d405      	bmi.n	801290c <_fputs_r+0x2c>
 8012900:	89a3      	ldrh	r3, [r4, #12]
 8012902:	059b      	lsls	r3, r3, #22
 8012904:	d402      	bmi.n	801290c <_fputs_r+0x2c>
 8012906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012908:	f000 f87d 	bl	8012a06 <__retarget_lock_acquire_recursive>
 801290c:	89a3      	ldrh	r3, [r4, #12]
 801290e:	0718      	lsls	r0, r3, #28
 8012910:	d51b      	bpl.n	801294a <_fputs_r+0x6a>
 8012912:	6923      	ldr	r3, [r4, #16]
 8012914:	b1cb      	cbz	r3, 801294a <_fputs_r+0x6a>
 8012916:	3e01      	subs	r6, #1
 8012918:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801291c:	bb39      	cbnz	r1, 801296e <_fputs_r+0x8e>
 801291e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012920:	f015 0501 	ands.w	r5, r5, #1
 8012924:	d139      	bne.n	801299a <_fputs_r+0xba>
 8012926:	89a3      	ldrh	r3, [r4, #12]
 8012928:	0599      	lsls	r1, r3, #22
 801292a:	d402      	bmi.n	8012932 <_fputs_r+0x52>
 801292c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801292e:	f000 f86c 	bl	8012a0a <__retarget_lock_release_recursive>
 8012932:	4628      	mov	r0, r5
 8012934:	bd70      	pop	{r4, r5, r6, pc}
 8012936:	4b1b      	ldr	r3, [pc, #108]	; (80129a4 <_fputs_r+0xc4>)
 8012938:	429c      	cmp	r4, r3
 801293a:	d101      	bne.n	8012940 <_fputs_r+0x60>
 801293c:	68ac      	ldr	r4, [r5, #8]
 801293e:	e7dc      	b.n	80128fa <_fputs_r+0x1a>
 8012940:	4b19      	ldr	r3, [pc, #100]	; (80129a8 <_fputs_r+0xc8>)
 8012942:	429c      	cmp	r4, r3
 8012944:	bf08      	it	eq
 8012946:	68ec      	ldreq	r4, [r5, #12]
 8012948:	e7d7      	b.n	80128fa <_fputs_r+0x1a>
 801294a:	4621      	mov	r1, r4
 801294c:	4628      	mov	r0, r5
 801294e:	f000 fe43 	bl	80135d8 <__swsetup_r>
 8012952:	2800      	cmp	r0, #0
 8012954:	d0df      	beq.n	8012916 <_fputs_r+0x36>
 8012956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012958:	07da      	lsls	r2, r3, #31
 801295a:	d405      	bmi.n	8012968 <_fputs_r+0x88>
 801295c:	89a3      	ldrh	r3, [r4, #12]
 801295e:	059b      	lsls	r3, r3, #22
 8012960:	d402      	bmi.n	8012968 <_fputs_r+0x88>
 8012962:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012964:	f000 f851 	bl	8012a0a <__retarget_lock_release_recursive>
 8012968:	f04f 35ff 	mov.w	r5, #4294967295
 801296c:	e7e1      	b.n	8012932 <_fputs_r+0x52>
 801296e:	68a3      	ldr	r3, [r4, #8]
 8012970:	3b01      	subs	r3, #1
 8012972:	2b00      	cmp	r3, #0
 8012974:	60a3      	str	r3, [r4, #8]
 8012976:	da04      	bge.n	8012982 <_fputs_r+0xa2>
 8012978:	69a2      	ldr	r2, [r4, #24]
 801297a:	4293      	cmp	r3, r2
 801297c:	db06      	blt.n	801298c <_fputs_r+0xac>
 801297e:	290a      	cmp	r1, #10
 8012980:	d004      	beq.n	801298c <_fputs_r+0xac>
 8012982:	6823      	ldr	r3, [r4, #0]
 8012984:	1c5a      	adds	r2, r3, #1
 8012986:	6022      	str	r2, [r4, #0]
 8012988:	7019      	strb	r1, [r3, #0]
 801298a:	e7c5      	b.n	8012918 <_fputs_r+0x38>
 801298c:	4622      	mov	r2, r4
 801298e:	4628      	mov	r0, r5
 8012990:	f000 fdbe 	bl	8013510 <__swbuf_r>
 8012994:	3001      	adds	r0, #1
 8012996:	d1bf      	bne.n	8012918 <_fputs_r+0x38>
 8012998:	e7dd      	b.n	8012956 <_fputs_r+0x76>
 801299a:	460d      	mov	r5, r1
 801299c:	e7c9      	b.n	8012932 <_fputs_r+0x52>
 801299e:	bf00      	nop
 80129a0:	080162d4 	.word	0x080162d4
 80129a4:	080162f4 	.word	0x080162f4
 80129a8:	080162b4 	.word	0x080162b4

080129ac <fputs>:
 80129ac:	4b02      	ldr	r3, [pc, #8]	; (80129b8 <fputs+0xc>)
 80129ae:	460a      	mov	r2, r1
 80129b0:	4601      	mov	r1, r0
 80129b2:	6818      	ldr	r0, [r3, #0]
 80129b4:	f7ff bf94 	b.w	80128e0 <_fputs_r>
 80129b8:	20000040 	.word	0x20000040

080129bc <__libc_init_array>:
 80129bc:	b570      	push	{r4, r5, r6, lr}
 80129be:	4d0d      	ldr	r5, [pc, #52]	; (80129f4 <__libc_init_array+0x38>)
 80129c0:	4c0d      	ldr	r4, [pc, #52]	; (80129f8 <__libc_init_array+0x3c>)
 80129c2:	1b64      	subs	r4, r4, r5
 80129c4:	10a4      	asrs	r4, r4, #2
 80129c6:	2600      	movs	r6, #0
 80129c8:	42a6      	cmp	r6, r4
 80129ca:	d109      	bne.n	80129e0 <__libc_init_array+0x24>
 80129cc:	4d0b      	ldr	r5, [pc, #44]	; (80129fc <__libc_init_array+0x40>)
 80129ce:	4c0c      	ldr	r4, [pc, #48]	; (8012a00 <__libc_init_array+0x44>)
 80129d0:	f001 ff66 	bl	80148a0 <_init>
 80129d4:	1b64      	subs	r4, r4, r5
 80129d6:	10a4      	asrs	r4, r4, #2
 80129d8:	2600      	movs	r6, #0
 80129da:	42a6      	cmp	r6, r4
 80129dc:	d105      	bne.n	80129ea <__libc_init_array+0x2e>
 80129de:	bd70      	pop	{r4, r5, r6, pc}
 80129e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80129e4:	4798      	blx	r3
 80129e6:	3601      	adds	r6, #1
 80129e8:	e7ee      	b.n	80129c8 <__libc_init_array+0xc>
 80129ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80129ee:	4798      	blx	r3
 80129f0:	3601      	adds	r6, #1
 80129f2:	e7f2      	b.n	80129da <__libc_init_array+0x1e>
 80129f4:	08016438 	.word	0x08016438
 80129f8:	08016438 	.word	0x08016438
 80129fc:	08016438 	.word	0x08016438
 8012a00:	08016458 	.word	0x08016458

08012a04 <__retarget_lock_init_recursive>:
 8012a04:	4770      	bx	lr

08012a06 <__retarget_lock_acquire_recursive>:
 8012a06:	4770      	bx	lr

08012a08 <__retarget_lock_release>:
 8012a08:	4770      	bx	lr

08012a0a <__retarget_lock_release_recursive>:
 8012a0a:	4770      	bx	lr

08012a0c <malloc>:
 8012a0c:	4b02      	ldr	r3, [pc, #8]	; (8012a18 <malloc+0xc>)
 8012a0e:	4601      	mov	r1, r0
 8012a10:	6818      	ldr	r0, [r3, #0]
 8012a12:	f000 b8a7 	b.w	8012b64 <_malloc_r>
 8012a16:	bf00      	nop
 8012a18:	20000040 	.word	0x20000040

08012a1c <free>:
 8012a1c:	4b02      	ldr	r3, [pc, #8]	; (8012a28 <free+0xc>)
 8012a1e:	4601      	mov	r1, r0
 8012a20:	6818      	ldr	r0, [r3, #0]
 8012a22:	f000 b833 	b.w	8012a8c <_free_r>
 8012a26:	bf00      	nop
 8012a28:	20000040 	.word	0x20000040

08012a2c <memcpy>:
 8012a2c:	440a      	add	r2, r1
 8012a2e:	4291      	cmp	r1, r2
 8012a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8012a34:	d100      	bne.n	8012a38 <memcpy+0xc>
 8012a36:	4770      	bx	lr
 8012a38:	b510      	push	{r4, lr}
 8012a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012a42:	4291      	cmp	r1, r2
 8012a44:	d1f9      	bne.n	8012a3a <memcpy+0xe>
 8012a46:	bd10      	pop	{r4, pc}

08012a48 <memmove>:
 8012a48:	4288      	cmp	r0, r1
 8012a4a:	b510      	push	{r4, lr}
 8012a4c:	eb01 0402 	add.w	r4, r1, r2
 8012a50:	d902      	bls.n	8012a58 <memmove+0x10>
 8012a52:	4284      	cmp	r4, r0
 8012a54:	4623      	mov	r3, r4
 8012a56:	d807      	bhi.n	8012a68 <memmove+0x20>
 8012a58:	1e43      	subs	r3, r0, #1
 8012a5a:	42a1      	cmp	r1, r4
 8012a5c:	d008      	beq.n	8012a70 <memmove+0x28>
 8012a5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012a62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012a66:	e7f8      	b.n	8012a5a <memmove+0x12>
 8012a68:	4402      	add	r2, r0
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	428a      	cmp	r2, r1
 8012a6e:	d100      	bne.n	8012a72 <memmove+0x2a>
 8012a70:	bd10      	pop	{r4, pc}
 8012a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012a76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012a7a:	e7f7      	b.n	8012a6c <memmove+0x24>

08012a7c <memset>:
 8012a7c:	4402      	add	r2, r0
 8012a7e:	4603      	mov	r3, r0
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d100      	bne.n	8012a86 <memset+0xa>
 8012a84:	4770      	bx	lr
 8012a86:	f803 1b01 	strb.w	r1, [r3], #1
 8012a8a:	e7f9      	b.n	8012a80 <memset+0x4>

08012a8c <_free_r>:
 8012a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012a8e:	2900      	cmp	r1, #0
 8012a90:	d044      	beq.n	8012b1c <_free_r+0x90>
 8012a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012a96:	9001      	str	r0, [sp, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8012a9e:	bfb8      	it	lt
 8012aa0:	18e4      	addlt	r4, r4, r3
 8012aa2:	f7fb f949 	bl	800dd38 <__malloc_lock>
 8012aa6:	4a1e      	ldr	r2, [pc, #120]	; (8012b20 <_free_r+0x94>)
 8012aa8:	9801      	ldr	r0, [sp, #4]
 8012aaa:	6813      	ldr	r3, [r2, #0]
 8012aac:	b933      	cbnz	r3, 8012abc <_free_r+0x30>
 8012aae:	6063      	str	r3, [r4, #4]
 8012ab0:	6014      	str	r4, [r2, #0]
 8012ab2:	b003      	add	sp, #12
 8012ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012ab8:	f7fb b948 	b.w	800dd4c <__malloc_unlock>
 8012abc:	42a3      	cmp	r3, r4
 8012abe:	d908      	bls.n	8012ad2 <_free_r+0x46>
 8012ac0:	6825      	ldr	r5, [r4, #0]
 8012ac2:	1961      	adds	r1, r4, r5
 8012ac4:	428b      	cmp	r3, r1
 8012ac6:	bf01      	itttt	eq
 8012ac8:	6819      	ldreq	r1, [r3, #0]
 8012aca:	685b      	ldreq	r3, [r3, #4]
 8012acc:	1949      	addeq	r1, r1, r5
 8012ace:	6021      	streq	r1, [r4, #0]
 8012ad0:	e7ed      	b.n	8012aae <_free_r+0x22>
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	b10b      	cbz	r3, 8012adc <_free_r+0x50>
 8012ad8:	42a3      	cmp	r3, r4
 8012ada:	d9fa      	bls.n	8012ad2 <_free_r+0x46>
 8012adc:	6811      	ldr	r1, [r2, #0]
 8012ade:	1855      	adds	r5, r2, r1
 8012ae0:	42a5      	cmp	r5, r4
 8012ae2:	d10b      	bne.n	8012afc <_free_r+0x70>
 8012ae4:	6824      	ldr	r4, [r4, #0]
 8012ae6:	4421      	add	r1, r4
 8012ae8:	1854      	adds	r4, r2, r1
 8012aea:	42a3      	cmp	r3, r4
 8012aec:	6011      	str	r1, [r2, #0]
 8012aee:	d1e0      	bne.n	8012ab2 <_free_r+0x26>
 8012af0:	681c      	ldr	r4, [r3, #0]
 8012af2:	685b      	ldr	r3, [r3, #4]
 8012af4:	6053      	str	r3, [r2, #4]
 8012af6:	4421      	add	r1, r4
 8012af8:	6011      	str	r1, [r2, #0]
 8012afa:	e7da      	b.n	8012ab2 <_free_r+0x26>
 8012afc:	d902      	bls.n	8012b04 <_free_r+0x78>
 8012afe:	230c      	movs	r3, #12
 8012b00:	6003      	str	r3, [r0, #0]
 8012b02:	e7d6      	b.n	8012ab2 <_free_r+0x26>
 8012b04:	6825      	ldr	r5, [r4, #0]
 8012b06:	1961      	adds	r1, r4, r5
 8012b08:	428b      	cmp	r3, r1
 8012b0a:	bf04      	itt	eq
 8012b0c:	6819      	ldreq	r1, [r3, #0]
 8012b0e:	685b      	ldreq	r3, [r3, #4]
 8012b10:	6063      	str	r3, [r4, #4]
 8012b12:	bf04      	itt	eq
 8012b14:	1949      	addeq	r1, r1, r5
 8012b16:	6021      	streq	r1, [r4, #0]
 8012b18:	6054      	str	r4, [r2, #4]
 8012b1a:	e7ca      	b.n	8012ab2 <_free_r+0x26>
 8012b1c:	b003      	add	sp, #12
 8012b1e:	bd30      	pop	{r4, r5, pc}
 8012b20:	20001a3c 	.word	0x20001a3c

08012b24 <sbrk_aligned>:
 8012b24:	b570      	push	{r4, r5, r6, lr}
 8012b26:	4e0e      	ldr	r6, [pc, #56]	; (8012b60 <sbrk_aligned+0x3c>)
 8012b28:	460c      	mov	r4, r1
 8012b2a:	6831      	ldr	r1, [r6, #0]
 8012b2c:	4605      	mov	r5, r0
 8012b2e:	b911      	cbnz	r1, 8012b36 <sbrk_aligned+0x12>
 8012b30:	f000 fc08 	bl	8013344 <_sbrk_r>
 8012b34:	6030      	str	r0, [r6, #0]
 8012b36:	4621      	mov	r1, r4
 8012b38:	4628      	mov	r0, r5
 8012b3a:	f000 fc03 	bl	8013344 <_sbrk_r>
 8012b3e:	1c43      	adds	r3, r0, #1
 8012b40:	d00a      	beq.n	8012b58 <sbrk_aligned+0x34>
 8012b42:	1cc4      	adds	r4, r0, #3
 8012b44:	f024 0403 	bic.w	r4, r4, #3
 8012b48:	42a0      	cmp	r0, r4
 8012b4a:	d007      	beq.n	8012b5c <sbrk_aligned+0x38>
 8012b4c:	1a21      	subs	r1, r4, r0
 8012b4e:	4628      	mov	r0, r5
 8012b50:	f000 fbf8 	bl	8013344 <_sbrk_r>
 8012b54:	3001      	adds	r0, #1
 8012b56:	d101      	bne.n	8012b5c <sbrk_aligned+0x38>
 8012b58:	f04f 34ff 	mov.w	r4, #4294967295
 8012b5c:	4620      	mov	r0, r4
 8012b5e:	bd70      	pop	{r4, r5, r6, pc}
 8012b60:	20001a40 	.word	0x20001a40

08012b64 <_malloc_r>:
 8012b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b68:	1ccd      	adds	r5, r1, #3
 8012b6a:	f025 0503 	bic.w	r5, r5, #3
 8012b6e:	3508      	adds	r5, #8
 8012b70:	2d0c      	cmp	r5, #12
 8012b72:	bf38      	it	cc
 8012b74:	250c      	movcc	r5, #12
 8012b76:	2d00      	cmp	r5, #0
 8012b78:	4607      	mov	r7, r0
 8012b7a:	db01      	blt.n	8012b80 <_malloc_r+0x1c>
 8012b7c:	42a9      	cmp	r1, r5
 8012b7e:	d905      	bls.n	8012b8c <_malloc_r+0x28>
 8012b80:	230c      	movs	r3, #12
 8012b82:	603b      	str	r3, [r7, #0]
 8012b84:	2600      	movs	r6, #0
 8012b86:	4630      	mov	r0, r6
 8012b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b8c:	4e2e      	ldr	r6, [pc, #184]	; (8012c48 <_malloc_r+0xe4>)
 8012b8e:	f7fb f8d3 	bl	800dd38 <__malloc_lock>
 8012b92:	6833      	ldr	r3, [r6, #0]
 8012b94:	461c      	mov	r4, r3
 8012b96:	bb34      	cbnz	r4, 8012be6 <_malloc_r+0x82>
 8012b98:	4629      	mov	r1, r5
 8012b9a:	4638      	mov	r0, r7
 8012b9c:	f7ff ffc2 	bl	8012b24 <sbrk_aligned>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	4604      	mov	r4, r0
 8012ba4:	d14d      	bne.n	8012c42 <_malloc_r+0xde>
 8012ba6:	6834      	ldr	r4, [r6, #0]
 8012ba8:	4626      	mov	r6, r4
 8012baa:	2e00      	cmp	r6, #0
 8012bac:	d140      	bne.n	8012c30 <_malloc_r+0xcc>
 8012bae:	6823      	ldr	r3, [r4, #0]
 8012bb0:	4631      	mov	r1, r6
 8012bb2:	4638      	mov	r0, r7
 8012bb4:	eb04 0803 	add.w	r8, r4, r3
 8012bb8:	f000 fbc4 	bl	8013344 <_sbrk_r>
 8012bbc:	4580      	cmp	r8, r0
 8012bbe:	d13a      	bne.n	8012c36 <_malloc_r+0xd2>
 8012bc0:	6821      	ldr	r1, [r4, #0]
 8012bc2:	3503      	adds	r5, #3
 8012bc4:	1a6d      	subs	r5, r5, r1
 8012bc6:	f025 0503 	bic.w	r5, r5, #3
 8012bca:	3508      	adds	r5, #8
 8012bcc:	2d0c      	cmp	r5, #12
 8012bce:	bf38      	it	cc
 8012bd0:	250c      	movcc	r5, #12
 8012bd2:	4629      	mov	r1, r5
 8012bd4:	4638      	mov	r0, r7
 8012bd6:	f7ff ffa5 	bl	8012b24 <sbrk_aligned>
 8012bda:	3001      	adds	r0, #1
 8012bdc:	d02b      	beq.n	8012c36 <_malloc_r+0xd2>
 8012bde:	6823      	ldr	r3, [r4, #0]
 8012be0:	442b      	add	r3, r5
 8012be2:	6023      	str	r3, [r4, #0]
 8012be4:	e00e      	b.n	8012c04 <_malloc_r+0xa0>
 8012be6:	6822      	ldr	r2, [r4, #0]
 8012be8:	1b52      	subs	r2, r2, r5
 8012bea:	d41e      	bmi.n	8012c2a <_malloc_r+0xc6>
 8012bec:	2a0b      	cmp	r2, #11
 8012bee:	d916      	bls.n	8012c1e <_malloc_r+0xba>
 8012bf0:	1961      	adds	r1, r4, r5
 8012bf2:	42a3      	cmp	r3, r4
 8012bf4:	6025      	str	r5, [r4, #0]
 8012bf6:	bf18      	it	ne
 8012bf8:	6059      	strne	r1, [r3, #4]
 8012bfa:	6863      	ldr	r3, [r4, #4]
 8012bfc:	bf08      	it	eq
 8012bfe:	6031      	streq	r1, [r6, #0]
 8012c00:	5162      	str	r2, [r4, r5]
 8012c02:	604b      	str	r3, [r1, #4]
 8012c04:	4638      	mov	r0, r7
 8012c06:	f104 060b 	add.w	r6, r4, #11
 8012c0a:	f7fb f89f 	bl	800dd4c <__malloc_unlock>
 8012c0e:	f026 0607 	bic.w	r6, r6, #7
 8012c12:	1d23      	adds	r3, r4, #4
 8012c14:	1af2      	subs	r2, r6, r3
 8012c16:	d0b6      	beq.n	8012b86 <_malloc_r+0x22>
 8012c18:	1b9b      	subs	r3, r3, r6
 8012c1a:	50a3      	str	r3, [r4, r2]
 8012c1c:	e7b3      	b.n	8012b86 <_malloc_r+0x22>
 8012c1e:	6862      	ldr	r2, [r4, #4]
 8012c20:	42a3      	cmp	r3, r4
 8012c22:	bf0c      	ite	eq
 8012c24:	6032      	streq	r2, [r6, #0]
 8012c26:	605a      	strne	r2, [r3, #4]
 8012c28:	e7ec      	b.n	8012c04 <_malloc_r+0xa0>
 8012c2a:	4623      	mov	r3, r4
 8012c2c:	6864      	ldr	r4, [r4, #4]
 8012c2e:	e7b2      	b.n	8012b96 <_malloc_r+0x32>
 8012c30:	4634      	mov	r4, r6
 8012c32:	6876      	ldr	r6, [r6, #4]
 8012c34:	e7b9      	b.n	8012baa <_malloc_r+0x46>
 8012c36:	230c      	movs	r3, #12
 8012c38:	603b      	str	r3, [r7, #0]
 8012c3a:	4638      	mov	r0, r7
 8012c3c:	f7fb f886 	bl	800dd4c <__malloc_unlock>
 8012c40:	e7a1      	b.n	8012b86 <_malloc_r+0x22>
 8012c42:	6025      	str	r5, [r4, #0]
 8012c44:	e7de      	b.n	8012c04 <_malloc_r+0xa0>
 8012c46:	bf00      	nop
 8012c48:	20001a3c 	.word	0x20001a3c

08012c4c <__sfputc_r>:
 8012c4c:	6893      	ldr	r3, [r2, #8]
 8012c4e:	3b01      	subs	r3, #1
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	b410      	push	{r4}
 8012c54:	6093      	str	r3, [r2, #8]
 8012c56:	da08      	bge.n	8012c6a <__sfputc_r+0x1e>
 8012c58:	6994      	ldr	r4, [r2, #24]
 8012c5a:	42a3      	cmp	r3, r4
 8012c5c:	db01      	blt.n	8012c62 <__sfputc_r+0x16>
 8012c5e:	290a      	cmp	r1, #10
 8012c60:	d103      	bne.n	8012c6a <__sfputc_r+0x1e>
 8012c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c66:	f000 bc53 	b.w	8013510 <__swbuf_r>
 8012c6a:	6813      	ldr	r3, [r2, #0]
 8012c6c:	1c58      	adds	r0, r3, #1
 8012c6e:	6010      	str	r0, [r2, #0]
 8012c70:	7019      	strb	r1, [r3, #0]
 8012c72:	4608      	mov	r0, r1
 8012c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c78:	4770      	bx	lr

08012c7a <__sfputs_r>:
 8012c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	460f      	mov	r7, r1
 8012c80:	4614      	mov	r4, r2
 8012c82:	18d5      	adds	r5, r2, r3
 8012c84:	42ac      	cmp	r4, r5
 8012c86:	d101      	bne.n	8012c8c <__sfputs_r+0x12>
 8012c88:	2000      	movs	r0, #0
 8012c8a:	e007      	b.n	8012c9c <__sfputs_r+0x22>
 8012c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c90:	463a      	mov	r2, r7
 8012c92:	4630      	mov	r0, r6
 8012c94:	f7ff ffda 	bl	8012c4c <__sfputc_r>
 8012c98:	1c43      	adds	r3, r0, #1
 8012c9a:	d1f3      	bne.n	8012c84 <__sfputs_r+0xa>
 8012c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012ca0 <_vfiprintf_r>:
 8012ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ca4:	460d      	mov	r5, r1
 8012ca6:	b09d      	sub	sp, #116	; 0x74
 8012ca8:	4614      	mov	r4, r2
 8012caa:	4698      	mov	r8, r3
 8012cac:	4606      	mov	r6, r0
 8012cae:	b118      	cbz	r0, 8012cb8 <_vfiprintf_r+0x18>
 8012cb0:	6983      	ldr	r3, [r0, #24]
 8012cb2:	b90b      	cbnz	r3, 8012cb8 <_vfiprintf_r+0x18>
 8012cb4:	f000 fe8a 	bl	80139cc <__sinit>
 8012cb8:	4b89      	ldr	r3, [pc, #548]	; (8012ee0 <_vfiprintf_r+0x240>)
 8012cba:	429d      	cmp	r5, r3
 8012cbc:	d11b      	bne.n	8012cf6 <_vfiprintf_r+0x56>
 8012cbe:	6875      	ldr	r5, [r6, #4]
 8012cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012cc2:	07d9      	lsls	r1, r3, #31
 8012cc4:	d405      	bmi.n	8012cd2 <_vfiprintf_r+0x32>
 8012cc6:	89ab      	ldrh	r3, [r5, #12]
 8012cc8:	059a      	lsls	r2, r3, #22
 8012cca:	d402      	bmi.n	8012cd2 <_vfiprintf_r+0x32>
 8012ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012cce:	f7ff fe9a 	bl	8012a06 <__retarget_lock_acquire_recursive>
 8012cd2:	89ab      	ldrh	r3, [r5, #12]
 8012cd4:	071b      	lsls	r3, r3, #28
 8012cd6:	d501      	bpl.n	8012cdc <_vfiprintf_r+0x3c>
 8012cd8:	692b      	ldr	r3, [r5, #16]
 8012cda:	b9eb      	cbnz	r3, 8012d18 <_vfiprintf_r+0x78>
 8012cdc:	4629      	mov	r1, r5
 8012cde:	4630      	mov	r0, r6
 8012ce0:	f000 fc7a 	bl	80135d8 <__swsetup_r>
 8012ce4:	b1c0      	cbz	r0, 8012d18 <_vfiprintf_r+0x78>
 8012ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012ce8:	07dc      	lsls	r4, r3, #31
 8012cea:	d50e      	bpl.n	8012d0a <_vfiprintf_r+0x6a>
 8012cec:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf0:	b01d      	add	sp, #116	; 0x74
 8012cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf6:	4b7b      	ldr	r3, [pc, #492]	; (8012ee4 <_vfiprintf_r+0x244>)
 8012cf8:	429d      	cmp	r5, r3
 8012cfa:	d101      	bne.n	8012d00 <_vfiprintf_r+0x60>
 8012cfc:	68b5      	ldr	r5, [r6, #8]
 8012cfe:	e7df      	b.n	8012cc0 <_vfiprintf_r+0x20>
 8012d00:	4b79      	ldr	r3, [pc, #484]	; (8012ee8 <_vfiprintf_r+0x248>)
 8012d02:	429d      	cmp	r5, r3
 8012d04:	bf08      	it	eq
 8012d06:	68f5      	ldreq	r5, [r6, #12]
 8012d08:	e7da      	b.n	8012cc0 <_vfiprintf_r+0x20>
 8012d0a:	89ab      	ldrh	r3, [r5, #12]
 8012d0c:	0598      	lsls	r0, r3, #22
 8012d0e:	d4ed      	bmi.n	8012cec <_vfiprintf_r+0x4c>
 8012d10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012d12:	f7ff fe7a 	bl	8012a0a <__retarget_lock_release_recursive>
 8012d16:	e7e9      	b.n	8012cec <_vfiprintf_r+0x4c>
 8012d18:	2300      	movs	r3, #0
 8012d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8012d1c:	2320      	movs	r3, #32
 8012d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d22:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d26:	2330      	movs	r3, #48	; 0x30
 8012d28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012eec <_vfiprintf_r+0x24c>
 8012d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d30:	f04f 0901 	mov.w	r9, #1
 8012d34:	4623      	mov	r3, r4
 8012d36:	469a      	mov	sl, r3
 8012d38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d3c:	b10a      	cbz	r2, 8012d42 <_vfiprintf_r+0xa2>
 8012d3e:	2a25      	cmp	r2, #37	; 0x25
 8012d40:	d1f9      	bne.n	8012d36 <_vfiprintf_r+0x96>
 8012d42:	ebba 0b04 	subs.w	fp, sl, r4
 8012d46:	d00b      	beq.n	8012d60 <_vfiprintf_r+0xc0>
 8012d48:	465b      	mov	r3, fp
 8012d4a:	4622      	mov	r2, r4
 8012d4c:	4629      	mov	r1, r5
 8012d4e:	4630      	mov	r0, r6
 8012d50:	f7ff ff93 	bl	8012c7a <__sfputs_r>
 8012d54:	3001      	adds	r0, #1
 8012d56:	f000 80aa 	beq.w	8012eae <_vfiprintf_r+0x20e>
 8012d5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012d5c:	445a      	add	r2, fp
 8012d5e:	9209      	str	r2, [sp, #36]	; 0x24
 8012d60:	f89a 3000 	ldrb.w	r3, [sl]
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	f000 80a2 	beq.w	8012eae <_vfiprintf_r+0x20e>
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8012d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d74:	f10a 0a01 	add.w	sl, sl, #1
 8012d78:	9304      	str	r3, [sp, #16]
 8012d7a:	9307      	str	r3, [sp, #28]
 8012d7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012d80:	931a      	str	r3, [sp, #104]	; 0x68
 8012d82:	4654      	mov	r4, sl
 8012d84:	2205      	movs	r2, #5
 8012d86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d8a:	4858      	ldr	r0, [pc, #352]	; (8012eec <_vfiprintf_r+0x24c>)
 8012d8c:	f7ed fa20 	bl	80001d0 <memchr>
 8012d90:	9a04      	ldr	r2, [sp, #16]
 8012d92:	b9d8      	cbnz	r0, 8012dcc <_vfiprintf_r+0x12c>
 8012d94:	06d1      	lsls	r1, r2, #27
 8012d96:	bf44      	itt	mi
 8012d98:	2320      	movmi	r3, #32
 8012d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012d9e:	0713      	lsls	r3, r2, #28
 8012da0:	bf44      	itt	mi
 8012da2:	232b      	movmi	r3, #43	; 0x2b
 8012da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012da8:	f89a 3000 	ldrb.w	r3, [sl]
 8012dac:	2b2a      	cmp	r3, #42	; 0x2a
 8012dae:	d015      	beq.n	8012ddc <_vfiprintf_r+0x13c>
 8012db0:	9a07      	ldr	r2, [sp, #28]
 8012db2:	4654      	mov	r4, sl
 8012db4:	2000      	movs	r0, #0
 8012db6:	f04f 0c0a 	mov.w	ip, #10
 8012dba:	4621      	mov	r1, r4
 8012dbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dc0:	3b30      	subs	r3, #48	; 0x30
 8012dc2:	2b09      	cmp	r3, #9
 8012dc4:	d94e      	bls.n	8012e64 <_vfiprintf_r+0x1c4>
 8012dc6:	b1b0      	cbz	r0, 8012df6 <_vfiprintf_r+0x156>
 8012dc8:	9207      	str	r2, [sp, #28]
 8012dca:	e014      	b.n	8012df6 <_vfiprintf_r+0x156>
 8012dcc:	eba0 0308 	sub.w	r3, r0, r8
 8012dd0:	fa09 f303 	lsl.w	r3, r9, r3
 8012dd4:	4313      	orrs	r3, r2
 8012dd6:	9304      	str	r3, [sp, #16]
 8012dd8:	46a2      	mov	sl, r4
 8012dda:	e7d2      	b.n	8012d82 <_vfiprintf_r+0xe2>
 8012ddc:	9b03      	ldr	r3, [sp, #12]
 8012dde:	1d19      	adds	r1, r3, #4
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	9103      	str	r1, [sp, #12]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	bfbb      	ittet	lt
 8012de8:	425b      	neglt	r3, r3
 8012dea:	f042 0202 	orrlt.w	r2, r2, #2
 8012dee:	9307      	strge	r3, [sp, #28]
 8012df0:	9307      	strlt	r3, [sp, #28]
 8012df2:	bfb8      	it	lt
 8012df4:	9204      	strlt	r2, [sp, #16]
 8012df6:	7823      	ldrb	r3, [r4, #0]
 8012df8:	2b2e      	cmp	r3, #46	; 0x2e
 8012dfa:	d10c      	bne.n	8012e16 <_vfiprintf_r+0x176>
 8012dfc:	7863      	ldrb	r3, [r4, #1]
 8012dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8012e00:	d135      	bne.n	8012e6e <_vfiprintf_r+0x1ce>
 8012e02:	9b03      	ldr	r3, [sp, #12]
 8012e04:	1d1a      	adds	r2, r3, #4
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	9203      	str	r2, [sp, #12]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	bfb8      	it	lt
 8012e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e12:	3402      	adds	r4, #2
 8012e14:	9305      	str	r3, [sp, #20]
 8012e16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012efc <_vfiprintf_r+0x25c>
 8012e1a:	7821      	ldrb	r1, [r4, #0]
 8012e1c:	2203      	movs	r2, #3
 8012e1e:	4650      	mov	r0, sl
 8012e20:	f7ed f9d6 	bl	80001d0 <memchr>
 8012e24:	b140      	cbz	r0, 8012e38 <_vfiprintf_r+0x198>
 8012e26:	2340      	movs	r3, #64	; 0x40
 8012e28:	eba0 000a 	sub.w	r0, r0, sl
 8012e2c:	fa03 f000 	lsl.w	r0, r3, r0
 8012e30:	9b04      	ldr	r3, [sp, #16]
 8012e32:	4303      	orrs	r3, r0
 8012e34:	3401      	adds	r4, #1
 8012e36:	9304      	str	r3, [sp, #16]
 8012e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e3c:	482c      	ldr	r0, [pc, #176]	; (8012ef0 <_vfiprintf_r+0x250>)
 8012e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e42:	2206      	movs	r2, #6
 8012e44:	f7ed f9c4 	bl	80001d0 <memchr>
 8012e48:	2800      	cmp	r0, #0
 8012e4a:	d03f      	beq.n	8012ecc <_vfiprintf_r+0x22c>
 8012e4c:	4b29      	ldr	r3, [pc, #164]	; (8012ef4 <_vfiprintf_r+0x254>)
 8012e4e:	bb1b      	cbnz	r3, 8012e98 <_vfiprintf_r+0x1f8>
 8012e50:	9b03      	ldr	r3, [sp, #12]
 8012e52:	3307      	adds	r3, #7
 8012e54:	f023 0307 	bic.w	r3, r3, #7
 8012e58:	3308      	adds	r3, #8
 8012e5a:	9303      	str	r3, [sp, #12]
 8012e5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e5e:	443b      	add	r3, r7
 8012e60:	9309      	str	r3, [sp, #36]	; 0x24
 8012e62:	e767      	b.n	8012d34 <_vfiprintf_r+0x94>
 8012e64:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e68:	460c      	mov	r4, r1
 8012e6a:	2001      	movs	r0, #1
 8012e6c:	e7a5      	b.n	8012dba <_vfiprintf_r+0x11a>
 8012e6e:	2300      	movs	r3, #0
 8012e70:	3401      	adds	r4, #1
 8012e72:	9305      	str	r3, [sp, #20]
 8012e74:	4619      	mov	r1, r3
 8012e76:	f04f 0c0a 	mov.w	ip, #10
 8012e7a:	4620      	mov	r0, r4
 8012e7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e80:	3a30      	subs	r2, #48	; 0x30
 8012e82:	2a09      	cmp	r2, #9
 8012e84:	d903      	bls.n	8012e8e <_vfiprintf_r+0x1ee>
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d0c5      	beq.n	8012e16 <_vfiprintf_r+0x176>
 8012e8a:	9105      	str	r1, [sp, #20]
 8012e8c:	e7c3      	b.n	8012e16 <_vfiprintf_r+0x176>
 8012e8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012e92:	4604      	mov	r4, r0
 8012e94:	2301      	movs	r3, #1
 8012e96:	e7f0      	b.n	8012e7a <_vfiprintf_r+0x1da>
 8012e98:	ab03      	add	r3, sp, #12
 8012e9a:	9300      	str	r3, [sp, #0]
 8012e9c:	462a      	mov	r2, r5
 8012e9e:	4b16      	ldr	r3, [pc, #88]	; (8012ef8 <_vfiprintf_r+0x258>)
 8012ea0:	a904      	add	r1, sp, #16
 8012ea2:	4630      	mov	r0, r6
 8012ea4:	f3af 8000 	nop.w
 8012ea8:	4607      	mov	r7, r0
 8012eaa:	1c78      	adds	r0, r7, #1
 8012eac:	d1d6      	bne.n	8012e5c <_vfiprintf_r+0x1bc>
 8012eae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012eb0:	07d9      	lsls	r1, r3, #31
 8012eb2:	d405      	bmi.n	8012ec0 <_vfiprintf_r+0x220>
 8012eb4:	89ab      	ldrh	r3, [r5, #12]
 8012eb6:	059a      	lsls	r2, r3, #22
 8012eb8:	d402      	bmi.n	8012ec0 <_vfiprintf_r+0x220>
 8012eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012ebc:	f7ff fda5 	bl	8012a0a <__retarget_lock_release_recursive>
 8012ec0:	89ab      	ldrh	r3, [r5, #12]
 8012ec2:	065b      	lsls	r3, r3, #25
 8012ec4:	f53f af12 	bmi.w	8012cec <_vfiprintf_r+0x4c>
 8012ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012eca:	e711      	b.n	8012cf0 <_vfiprintf_r+0x50>
 8012ecc:	ab03      	add	r3, sp, #12
 8012ece:	9300      	str	r3, [sp, #0]
 8012ed0:	462a      	mov	r2, r5
 8012ed2:	4b09      	ldr	r3, [pc, #36]	; (8012ef8 <_vfiprintf_r+0x258>)
 8012ed4:	a904      	add	r1, sp, #16
 8012ed6:	4630      	mov	r0, r6
 8012ed8:	f000 f880 	bl	8012fdc <_printf_i>
 8012edc:	e7e4      	b.n	8012ea8 <_vfiprintf_r+0x208>
 8012ede:	bf00      	nop
 8012ee0:	080162d4 	.word	0x080162d4
 8012ee4:	080162f4 	.word	0x080162f4
 8012ee8:	080162b4 	.word	0x080162b4
 8012eec:	08016280 	.word	0x08016280
 8012ef0:	0801628a 	.word	0x0801628a
 8012ef4:	00000000 	.word	0x00000000
 8012ef8:	08012c7b 	.word	0x08012c7b
 8012efc:	08016286 	.word	0x08016286

08012f00 <_printf_common>:
 8012f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f04:	4616      	mov	r6, r2
 8012f06:	4699      	mov	r9, r3
 8012f08:	688a      	ldr	r2, [r1, #8]
 8012f0a:	690b      	ldr	r3, [r1, #16]
 8012f0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f10:	4293      	cmp	r3, r2
 8012f12:	bfb8      	it	lt
 8012f14:	4613      	movlt	r3, r2
 8012f16:	6033      	str	r3, [r6, #0]
 8012f18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f1c:	4607      	mov	r7, r0
 8012f1e:	460c      	mov	r4, r1
 8012f20:	b10a      	cbz	r2, 8012f26 <_printf_common+0x26>
 8012f22:	3301      	adds	r3, #1
 8012f24:	6033      	str	r3, [r6, #0]
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	0699      	lsls	r1, r3, #26
 8012f2a:	bf42      	ittt	mi
 8012f2c:	6833      	ldrmi	r3, [r6, #0]
 8012f2e:	3302      	addmi	r3, #2
 8012f30:	6033      	strmi	r3, [r6, #0]
 8012f32:	6825      	ldr	r5, [r4, #0]
 8012f34:	f015 0506 	ands.w	r5, r5, #6
 8012f38:	d106      	bne.n	8012f48 <_printf_common+0x48>
 8012f3a:	f104 0a19 	add.w	sl, r4, #25
 8012f3e:	68e3      	ldr	r3, [r4, #12]
 8012f40:	6832      	ldr	r2, [r6, #0]
 8012f42:	1a9b      	subs	r3, r3, r2
 8012f44:	42ab      	cmp	r3, r5
 8012f46:	dc26      	bgt.n	8012f96 <_printf_common+0x96>
 8012f48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012f4c:	1e13      	subs	r3, r2, #0
 8012f4e:	6822      	ldr	r2, [r4, #0]
 8012f50:	bf18      	it	ne
 8012f52:	2301      	movne	r3, #1
 8012f54:	0692      	lsls	r2, r2, #26
 8012f56:	d42b      	bmi.n	8012fb0 <_printf_common+0xb0>
 8012f58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012f5c:	4649      	mov	r1, r9
 8012f5e:	4638      	mov	r0, r7
 8012f60:	47c0      	blx	r8
 8012f62:	3001      	adds	r0, #1
 8012f64:	d01e      	beq.n	8012fa4 <_printf_common+0xa4>
 8012f66:	6823      	ldr	r3, [r4, #0]
 8012f68:	68e5      	ldr	r5, [r4, #12]
 8012f6a:	6832      	ldr	r2, [r6, #0]
 8012f6c:	f003 0306 	and.w	r3, r3, #6
 8012f70:	2b04      	cmp	r3, #4
 8012f72:	bf08      	it	eq
 8012f74:	1aad      	subeq	r5, r5, r2
 8012f76:	68a3      	ldr	r3, [r4, #8]
 8012f78:	6922      	ldr	r2, [r4, #16]
 8012f7a:	bf0c      	ite	eq
 8012f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012f80:	2500      	movne	r5, #0
 8012f82:	4293      	cmp	r3, r2
 8012f84:	bfc4      	itt	gt
 8012f86:	1a9b      	subgt	r3, r3, r2
 8012f88:	18ed      	addgt	r5, r5, r3
 8012f8a:	2600      	movs	r6, #0
 8012f8c:	341a      	adds	r4, #26
 8012f8e:	42b5      	cmp	r5, r6
 8012f90:	d11a      	bne.n	8012fc8 <_printf_common+0xc8>
 8012f92:	2000      	movs	r0, #0
 8012f94:	e008      	b.n	8012fa8 <_printf_common+0xa8>
 8012f96:	2301      	movs	r3, #1
 8012f98:	4652      	mov	r2, sl
 8012f9a:	4649      	mov	r1, r9
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	47c0      	blx	r8
 8012fa0:	3001      	adds	r0, #1
 8012fa2:	d103      	bne.n	8012fac <_printf_common+0xac>
 8012fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8012fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fac:	3501      	adds	r5, #1
 8012fae:	e7c6      	b.n	8012f3e <_printf_common+0x3e>
 8012fb0:	18e1      	adds	r1, r4, r3
 8012fb2:	1c5a      	adds	r2, r3, #1
 8012fb4:	2030      	movs	r0, #48	; 0x30
 8012fb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012fba:	4422      	add	r2, r4
 8012fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012fc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012fc4:	3302      	adds	r3, #2
 8012fc6:	e7c7      	b.n	8012f58 <_printf_common+0x58>
 8012fc8:	2301      	movs	r3, #1
 8012fca:	4622      	mov	r2, r4
 8012fcc:	4649      	mov	r1, r9
 8012fce:	4638      	mov	r0, r7
 8012fd0:	47c0      	blx	r8
 8012fd2:	3001      	adds	r0, #1
 8012fd4:	d0e6      	beq.n	8012fa4 <_printf_common+0xa4>
 8012fd6:	3601      	adds	r6, #1
 8012fd8:	e7d9      	b.n	8012f8e <_printf_common+0x8e>
	...

08012fdc <_printf_i>:
 8012fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012fe0:	7e0f      	ldrb	r7, [r1, #24]
 8012fe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012fe4:	2f78      	cmp	r7, #120	; 0x78
 8012fe6:	4691      	mov	r9, r2
 8012fe8:	4680      	mov	r8, r0
 8012fea:	460c      	mov	r4, r1
 8012fec:	469a      	mov	sl, r3
 8012fee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012ff2:	d807      	bhi.n	8013004 <_printf_i+0x28>
 8012ff4:	2f62      	cmp	r7, #98	; 0x62
 8012ff6:	d80a      	bhi.n	801300e <_printf_i+0x32>
 8012ff8:	2f00      	cmp	r7, #0
 8012ffa:	f000 80d8 	beq.w	80131ae <_printf_i+0x1d2>
 8012ffe:	2f58      	cmp	r7, #88	; 0x58
 8013000:	f000 80a3 	beq.w	801314a <_printf_i+0x16e>
 8013004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801300c:	e03a      	b.n	8013084 <_printf_i+0xa8>
 801300e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013012:	2b15      	cmp	r3, #21
 8013014:	d8f6      	bhi.n	8013004 <_printf_i+0x28>
 8013016:	a101      	add	r1, pc, #4	; (adr r1, 801301c <_printf_i+0x40>)
 8013018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801301c:	08013075 	.word	0x08013075
 8013020:	08013089 	.word	0x08013089
 8013024:	08013005 	.word	0x08013005
 8013028:	08013005 	.word	0x08013005
 801302c:	08013005 	.word	0x08013005
 8013030:	08013005 	.word	0x08013005
 8013034:	08013089 	.word	0x08013089
 8013038:	08013005 	.word	0x08013005
 801303c:	08013005 	.word	0x08013005
 8013040:	08013005 	.word	0x08013005
 8013044:	08013005 	.word	0x08013005
 8013048:	08013195 	.word	0x08013195
 801304c:	080130b9 	.word	0x080130b9
 8013050:	08013177 	.word	0x08013177
 8013054:	08013005 	.word	0x08013005
 8013058:	08013005 	.word	0x08013005
 801305c:	080131b7 	.word	0x080131b7
 8013060:	08013005 	.word	0x08013005
 8013064:	080130b9 	.word	0x080130b9
 8013068:	08013005 	.word	0x08013005
 801306c:	08013005 	.word	0x08013005
 8013070:	0801317f 	.word	0x0801317f
 8013074:	682b      	ldr	r3, [r5, #0]
 8013076:	1d1a      	adds	r2, r3, #4
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	602a      	str	r2, [r5, #0]
 801307c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013084:	2301      	movs	r3, #1
 8013086:	e0a3      	b.n	80131d0 <_printf_i+0x1f4>
 8013088:	6820      	ldr	r0, [r4, #0]
 801308a:	6829      	ldr	r1, [r5, #0]
 801308c:	0606      	lsls	r6, r0, #24
 801308e:	f101 0304 	add.w	r3, r1, #4
 8013092:	d50a      	bpl.n	80130aa <_printf_i+0xce>
 8013094:	680e      	ldr	r6, [r1, #0]
 8013096:	602b      	str	r3, [r5, #0]
 8013098:	2e00      	cmp	r6, #0
 801309a:	da03      	bge.n	80130a4 <_printf_i+0xc8>
 801309c:	232d      	movs	r3, #45	; 0x2d
 801309e:	4276      	negs	r6, r6
 80130a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80130a4:	485e      	ldr	r0, [pc, #376]	; (8013220 <_printf_i+0x244>)
 80130a6:	230a      	movs	r3, #10
 80130a8:	e019      	b.n	80130de <_printf_i+0x102>
 80130aa:	680e      	ldr	r6, [r1, #0]
 80130ac:	602b      	str	r3, [r5, #0]
 80130ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80130b2:	bf18      	it	ne
 80130b4:	b236      	sxthne	r6, r6
 80130b6:	e7ef      	b.n	8013098 <_printf_i+0xbc>
 80130b8:	682b      	ldr	r3, [r5, #0]
 80130ba:	6820      	ldr	r0, [r4, #0]
 80130bc:	1d19      	adds	r1, r3, #4
 80130be:	6029      	str	r1, [r5, #0]
 80130c0:	0601      	lsls	r1, r0, #24
 80130c2:	d501      	bpl.n	80130c8 <_printf_i+0xec>
 80130c4:	681e      	ldr	r6, [r3, #0]
 80130c6:	e002      	b.n	80130ce <_printf_i+0xf2>
 80130c8:	0646      	lsls	r6, r0, #25
 80130ca:	d5fb      	bpl.n	80130c4 <_printf_i+0xe8>
 80130cc:	881e      	ldrh	r6, [r3, #0]
 80130ce:	4854      	ldr	r0, [pc, #336]	; (8013220 <_printf_i+0x244>)
 80130d0:	2f6f      	cmp	r7, #111	; 0x6f
 80130d2:	bf0c      	ite	eq
 80130d4:	2308      	moveq	r3, #8
 80130d6:	230a      	movne	r3, #10
 80130d8:	2100      	movs	r1, #0
 80130da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80130de:	6865      	ldr	r5, [r4, #4]
 80130e0:	60a5      	str	r5, [r4, #8]
 80130e2:	2d00      	cmp	r5, #0
 80130e4:	bfa2      	ittt	ge
 80130e6:	6821      	ldrge	r1, [r4, #0]
 80130e8:	f021 0104 	bicge.w	r1, r1, #4
 80130ec:	6021      	strge	r1, [r4, #0]
 80130ee:	b90e      	cbnz	r6, 80130f4 <_printf_i+0x118>
 80130f0:	2d00      	cmp	r5, #0
 80130f2:	d04d      	beq.n	8013190 <_printf_i+0x1b4>
 80130f4:	4615      	mov	r5, r2
 80130f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80130fa:	fb03 6711 	mls	r7, r3, r1, r6
 80130fe:	5dc7      	ldrb	r7, [r0, r7]
 8013100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013104:	4637      	mov	r7, r6
 8013106:	42bb      	cmp	r3, r7
 8013108:	460e      	mov	r6, r1
 801310a:	d9f4      	bls.n	80130f6 <_printf_i+0x11a>
 801310c:	2b08      	cmp	r3, #8
 801310e:	d10b      	bne.n	8013128 <_printf_i+0x14c>
 8013110:	6823      	ldr	r3, [r4, #0]
 8013112:	07de      	lsls	r6, r3, #31
 8013114:	d508      	bpl.n	8013128 <_printf_i+0x14c>
 8013116:	6923      	ldr	r3, [r4, #16]
 8013118:	6861      	ldr	r1, [r4, #4]
 801311a:	4299      	cmp	r1, r3
 801311c:	bfde      	ittt	le
 801311e:	2330      	movle	r3, #48	; 0x30
 8013120:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013124:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013128:	1b52      	subs	r2, r2, r5
 801312a:	6122      	str	r2, [r4, #16]
 801312c:	f8cd a000 	str.w	sl, [sp]
 8013130:	464b      	mov	r3, r9
 8013132:	aa03      	add	r2, sp, #12
 8013134:	4621      	mov	r1, r4
 8013136:	4640      	mov	r0, r8
 8013138:	f7ff fee2 	bl	8012f00 <_printf_common>
 801313c:	3001      	adds	r0, #1
 801313e:	d14c      	bne.n	80131da <_printf_i+0x1fe>
 8013140:	f04f 30ff 	mov.w	r0, #4294967295
 8013144:	b004      	add	sp, #16
 8013146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801314a:	4835      	ldr	r0, [pc, #212]	; (8013220 <_printf_i+0x244>)
 801314c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013150:	6829      	ldr	r1, [r5, #0]
 8013152:	6823      	ldr	r3, [r4, #0]
 8013154:	f851 6b04 	ldr.w	r6, [r1], #4
 8013158:	6029      	str	r1, [r5, #0]
 801315a:	061d      	lsls	r5, r3, #24
 801315c:	d514      	bpl.n	8013188 <_printf_i+0x1ac>
 801315e:	07df      	lsls	r7, r3, #31
 8013160:	bf44      	itt	mi
 8013162:	f043 0320 	orrmi.w	r3, r3, #32
 8013166:	6023      	strmi	r3, [r4, #0]
 8013168:	b91e      	cbnz	r6, 8013172 <_printf_i+0x196>
 801316a:	6823      	ldr	r3, [r4, #0]
 801316c:	f023 0320 	bic.w	r3, r3, #32
 8013170:	6023      	str	r3, [r4, #0]
 8013172:	2310      	movs	r3, #16
 8013174:	e7b0      	b.n	80130d8 <_printf_i+0xfc>
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	f043 0320 	orr.w	r3, r3, #32
 801317c:	6023      	str	r3, [r4, #0]
 801317e:	2378      	movs	r3, #120	; 0x78
 8013180:	4828      	ldr	r0, [pc, #160]	; (8013224 <_printf_i+0x248>)
 8013182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013186:	e7e3      	b.n	8013150 <_printf_i+0x174>
 8013188:	0659      	lsls	r1, r3, #25
 801318a:	bf48      	it	mi
 801318c:	b2b6      	uxthmi	r6, r6
 801318e:	e7e6      	b.n	801315e <_printf_i+0x182>
 8013190:	4615      	mov	r5, r2
 8013192:	e7bb      	b.n	801310c <_printf_i+0x130>
 8013194:	682b      	ldr	r3, [r5, #0]
 8013196:	6826      	ldr	r6, [r4, #0]
 8013198:	6961      	ldr	r1, [r4, #20]
 801319a:	1d18      	adds	r0, r3, #4
 801319c:	6028      	str	r0, [r5, #0]
 801319e:	0635      	lsls	r5, r6, #24
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	d501      	bpl.n	80131a8 <_printf_i+0x1cc>
 80131a4:	6019      	str	r1, [r3, #0]
 80131a6:	e002      	b.n	80131ae <_printf_i+0x1d2>
 80131a8:	0670      	lsls	r0, r6, #25
 80131aa:	d5fb      	bpl.n	80131a4 <_printf_i+0x1c8>
 80131ac:	8019      	strh	r1, [r3, #0]
 80131ae:	2300      	movs	r3, #0
 80131b0:	6123      	str	r3, [r4, #16]
 80131b2:	4615      	mov	r5, r2
 80131b4:	e7ba      	b.n	801312c <_printf_i+0x150>
 80131b6:	682b      	ldr	r3, [r5, #0]
 80131b8:	1d1a      	adds	r2, r3, #4
 80131ba:	602a      	str	r2, [r5, #0]
 80131bc:	681d      	ldr	r5, [r3, #0]
 80131be:	6862      	ldr	r2, [r4, #4]
 80131c0:	2100      	movs	r1, #0
 80131c2:	4628      	mov	r0, r5
 80131c4:	f7ed f804 	bl	80001d0 <memchr>
 80131c8:	b108      	cbz	r0, 80131ce <_printf_i+0x1f2>
 80131ca:	1b40      	subs	r0, r0, r5
 80131cc:	6060      	str	r0, [r4, #4]
 80131ce:	6863      	ldr	r3, [r4, #4]
 80131d0:	6123      	str	r3, [r4, #16]
 80131d2:	2300      	movs	r3, #0
 80131d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131d8:	e7a8      	b.n	801312c <_printf_i+0x150>
 80131da:	6923      	ldr	r3, [r4, #16]
 80131dc:	462a      	mov	r2, r5
 80131de:	4649      	mov	r1, r9
 80131e0:	4640      	mov	r0, r8
 80131e2:	47d0      	blx	sl
 80131e4:	3001      	adds	r0, #1
 80131e6:	d0ab      	beq.n	8013140 <_printf_i+0x164>
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	079b      	lsls	r3, r3, #30
 80131ec:	d413      	bmi.n	8013216 <_printf_i+0x23a>
 80131ee:	68e0      	ldr	r0, [r4, #12]
 80131f0:	9b03      	ldr	r3, [sp, #12]
 80131f2:	4298      	cmp	r0, r3
 80131f4:	bfb8      	it	lt
 80131f6:	4618      	movlt	r0, r3
 80131f8:	e7a4      	b.n	8013144 <_printf_i+0x168>
 80131fa:	2301      	movs	r3, #1
 80131fc:	4632      	mov	r2, r6
 80131fe:	4649      	mov	r1, r9
 8013200:	4640      	mov	r0, r8
 8013202:	47d0      	blx	sl
 8013204:	3001      	adds	r0, #1
 8013206:	d09b      	beq.n	8013140 <_printf_i+0x164>
 8013208:	3501      	adds	r5, #1
 801320a:	68e3      	ldr	r3, [r4, #12]
 801320c:	9903      	ldr	r1, [sp, #12]
 801320e:	1a5b      	subs	r3, r3, r1
 8013210:	42ab      	cmp	r3, r5
 8013212:	dcf2      	bgt.n	80131fa <_printf_i+0x21e>
 8013214:	e7eb      	b.n	80131ee <_printf_i+0x212>
 8013216:	2500      	movs	r5, #0
 8013218:	f104 0619 	add.w	r6, r4, #25
 801321c:	e7f5      	b.n	801320a <_printf_i+0x22e>
 801321e:	bf00      	nop
 8013220:	08016291 	.word	0x08016291
 8013224:	080162a2 	.word	0x080162a2

08013228 <iprintf>:
 8013228:	b40f      	push	{r0, r1, r2, r3}
 801322a:	4b0a      	ldr	r3, [pc, #40]	; (8013254 <iprintf+0x2c>)
 801322c:	b513      	push	{r0, r1, r4, lr}
 801322e:	681c      	ldr	r4, [r3, #0]
 8013230:	b124      	cbz	r4, 801323c <iprintf+0x14>
 8013232:	69a3      	ldr	r3, [r4, #24]
 8013234:	b913      	cbnz	r3, 801323c <iprintf+0x14>
 8013236:	4620      	mov	r0, r4
 8013238:	f000 fbc8 	bl	80139cc <__sinit>
 801323c:	ab05      	add	r3, sp, #20
 801323e:	9a04      	ldr	r2, [sp, #16]
 8013240:	68a1      	ldr	r1, [r4, #8]
 8013242:	9301      	str	r3, [sp, #4]
 8013244:	4620      	mov	r0, r4
 8013246:	f7ff fd2b 	bl	8012ca0 <_vfiprintf_r>
 801324a:	b002      	add	sp, #8
 801324c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013250:	b004      	add	sp, #16
 8013252:	4770      	bx	lr
 8013254:	20000040 	.word	0x20000040

08013258 <_puts_r>:
 8013258:	b570      	push	{r4, r5, r6, lr}
 801325a:	460e      	mov	r6, r1
 801325c:	4605      	mov	r5, r0
 801325e:	b118      	cbz	r0, 8013268 <_puts_r+0x10>
 8013260:	6983      	ldr	r3, [r0, #24]
 8013262:	b90b      	cbnz	r3, 8013268 <_puts_r+0x10>
 8013264:	f000 fbb2 	bl	80139cc <__sinit>
 8013268:	69ab      	ldr	r3, [r5, #24]
 801326a:	68ac      	ldr	r4, [r5, #8]
 801326c:	b913      	cbnz	r3, 8013274 <_puts_r+0x1c>
 801326e:	4628      	mov	r0, r5
 8013270:	f000 fbac 	bl	80139cc <__sinit>
 8013274:	4b2c      	ldr	r3, [pc, #176]	; (8013328 <_puts_r+0xd0>)
 8013276:	429c      	cmp	r4, r3
 8013278:	d120      	bne.n	80132bc <_puts_r+0x64>
 801327a:	686c      	ldr	r4, [r5, #4]
 801327c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801327e:	07db      	lsls	r3, r3, #31
 8013280:	d405      	bmi.n	801328e <_puts_r+0x36>
 8013282:	89a3      	ldrh	r3, [r4, #12]
 8013284:	0598      	lsls	r0, r3, #22
 8013286:	d402      	bmi.n	801328e <_puts_r+0x36>
 8013288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801328a:	f7ff fbbc 	bl	8012a06 <__retarget_lock_acquire_recursive>
 801328e:	89a3      	ldrh	r3, [r4, #12]
 8013290:	0719      	lsls	r1, r3, #28
 8013292:	d51d      	bpl.n	80132d0 <_puts_r+0x78>
 8013294:	6923      	ldr	r3, [r4, #16]
 8013296:	b1db      	cbz	r3, 80132d0 <_puts_r+0x78>
 8013298:	3e01      	subs	r6, #1
 801329a:	68a3      	ldr	r3, [r4, #8]
 801329c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80132a0:	3b01      	subs	r3, #1
 80132a2:	60a3      	str	r3, [r4, #8]
 80132a4:	bb39      	cbnz	r1, 80132f6 <_puts_r+0x9e>
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	da38      	bge.n	801331c <_puts_r+0xc4>
 80132aa:	4622      	mov	r2, r4
 80132ac:	210a      	movs	r1, #10
 80132ae:	4628      	mov	r0, r5
 80132b0:	f000 f92e 	bl	8013510 <__swbuf_r>
 80132b4:	3001      	adds	r0, #1
 80132b6:	d011      	beq.n	80132dc <_puts_r+0x84>
 80132b8:	250a      	movs	r5, #10
 80132ba:	e011      	b.n	80132e0 <_puts_r+0x88>
 80132bc:	4b1b      	ldr	r3, [pc, #108]	; (801332c <_puts_r+0xd4>)
 80132be:	429c      	cmp	r4, r3
 80132c0:	d101      	bne.n	80132c6 <_puts_r+0x6e>
 80132c2:	68ac      	ldr	r4, [r5, #8]
 80132c4:	e7da      	b.n	801327c <_puts_r+0x24>
 80132c6:	4b1a      	ldr	r3, [pc, #104]	; (8013330 <_puts_r+0xd8>)
 80132c8:	429c      	cmp	r4, r3
 80132ca:	bf08      	it	eq
 80132cc:	68ec      	ldreq	r4, [r5, #12]
 80132ce:	e7d5      	b.n	801327c <_puts_r+0x24>
 80132d0:	4621      	mov	r1, r4
 80132d2:	4628      	mov	r0, r5
 80132d4:	f000 f980 	bl	80135d8 <__swsetup_r>
 80132d8:	2800      	cmp	r0, #0
 80132da:	d0dd      	beq.n	8013298 <_puts_r+0x40>
 80132dc:	f04f 35ff 	mov.w	r5, #4294967295
 80132e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132e2:	07da      	lsls	r2, r3, #31
 80132e4:	d405      	bmi.n	80132f2 <_puts_r+0x9a>
 80132e6:	89a3      	ldrh	r3, [r4, #12]
 80132e8:	059b      	lsls	r3, r3, #22
 80132ea:	d402      	bmi.n	80132f2 <_puts_r+0x9a>
 80132ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132ee:	f7ff fb8c 	bl	8012a0a <__retarget_lock_release_recursive>
 80132f2:	4628      	mov	r0, r5
 80132f4:	bd70      	pop	{r4, r5, r6, pc}
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	da04      	bge.n	8013304 <_puts_r+0xac>
 80132fa:	69a2      	ldr	r2, [r4, #24]
 80132fc:	429a      	cmp	r2, r3
 80132fe:	dc06      	bgt.n	801330e <_puts_r+0xb6>
 8013300:	290a      	cmp	r1, #10
 8013302:	d004      	beq.n	801330e <_puts_r+0xb6>
 8013304:	6823      	ldr	r3, [r4, #0]
 8013306:	1c5a      	adds	r2, r3, #1
 8013308:	6022      	str	r2, [r4, #0]
 801330a:	7019      	strb	r1, [r3, #0]
 801330c:	e7c5      	b.n	801329a <_puts_r+0x42>
 801330e:	4622      	mov	r2, r4
 8013310:	4628      	mov	r0, r5
 8013312:	f000 f8fd 	bl	8013510 <__swbuf_r>
 8013316:	3001      	adds	r0, #1
 8013318:	d1bf      	bne.n	801329a <_puts_r+0x42>
 801331a:	e7df      	b.n	80132dc <_puts_r+0x84>
 801331c:	6823      	ldr	r3, [r4, #0]
 801331e:	250a      	movs	r5, #10
 8013320:	1c5a      	adds	r2, r3, #1
 8013322:	6022      	str	r2, [r4, #0]
 8013324:	701d      	strb	r5, [r3, #0]
 8013326:	e7db      	b.n	80132e0 <_puts_r+0x88>
 8013328:	080162d4 	.word	0x080162d4
 801332c:	080162f4 	.word	0x080162f4
 8013330:	080162b4 	.word	0x080162b4

08013334 <puts>:
 8013334:	4b02      	ldr	r3, [pc, #8]	; (8013340 <puts+0xc>)
 8013336:	4601      	mov	r1, r0
 8013338:	6818      	ldr	r0, [r3, #0]
 801333a:	f7ff bf8d 	b.w	8013258 <_puts_r>
 801333e:	bf00      	nop
 8013340:	20000040 	.word	0x20000040

08013344 <_sbrk_r>:
 8013344:	b538      	push	{r3, r4, r5, lr}
 8013346:	4d06      	ldr	r5, [pc, #24]	; (8013360 <_sbrk_r+0x1c>)
 8013348:	2300      	movs	r3, #0
 801334a:	4604      	mov	r4, r0
 801334c:	4608      	mov	r0, r1
 801334e:	602b      	str	r3, [r5, #0]
 8013350:	f7ee ffec 	bl	800232c <_sbrk>
 8013354:	1c43      	adds	r3, r0, #1
 8013356:	d102      	bne.n	801335e <_sbrk_r+0x1a>
 8013358:	682b      	ldr	r3, [r5, #0]
 801335a:	b103      	cbz	r3, 801335e <_sbrk_r+0x1a>
 801335c:	6023      	str	r3, [r4, #0]
 801335e:	bd38      	pop	{r3, r4, r5, pc}
 8013360:	20001ad4 	.word	0x20001ad4

08013364 <_raise_r>:
 8013364:	291f      	cmp	r1, #31
 8013366:	b538      	push	{r3, r4, r5, lr}
 8013368:	4604      	mov	r4, r0
 801336a:	460d      	mov	r5, r1
 801336c:	d904      	bls.n	8013378 <_raise_r+0x14>
 801336e:	2316      	movs	r3, #22
 8013370:	6003      	str	r3, [r0, #0]
 8013372:	f04f 30ff 	mov.w	r0, #4294967295
 8013376:	bd38      	pop	{r3, r4, r5, pc}
 8013378:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801337a:	b112      	cbz	r2, 8013382 <_raise_r+0x1e>
 801337c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013380:	b94b      	cbnz	r3, 8013396 <_raise_r+0x32>
 8013382:	4620      	mov	r0, r4
 8013384:	f000 f830 	bl	80133e8 <_getpid_r>
 8013388:	462a      	mov	r2, r5
 801338a:	4601      	mov	r1, r0
 801338c:	4620      	mov	r0, r4
 801338e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013392:	f000 b817 	b.w	80133c4 <_kill_r>
 8013396:	2b01      	cmp	r3, #1
 8013398:	d00a      	beq.n	80133b0 <_raise_r+0x4c>
 801339a:	1c59      	adds	r1, r3, #1
 801339c:	d103      	bne.n	80133a6 <_raise_r+0x42>
 801339e:	2316      	movs	r3, #22
 80133a0:	6003      	str	r3, [r0, #0]
 80133a2:	2001      	movs	r0, #1
 80133a4:	e7e7      	b.n	8013376 <_raise_r+0x12>
 80133a6:	2400      	movs	r4, #0
 80133a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80133ac:	4628      	mov	r0, r5
 80133ae:	4798      	blx	r3
 80133b0:	2000      	movs	r0, #0
 80133b2:	e7e0      	b.n	8013376 <_raise_r+0x12>

080133b4 <raise>:
 80133b4:	4b02      	ldr	r3, [pc, #8]	; (80133c0 <raise+0xc>)
 80133b6:	4601      	mov	r1, r0
 80133b8:	6818      	ldr	r0, [r3, #0]
 80133ba:	f7ff bfd3 	b.w	8013364 <_raise_r>
 80133be:	bf00      	nop
 80133c0:	20000040 	.word	0x20000040

080133c4 <_kill_r>:
 80133c4:	b538      	push	{r3, r4, r5, lr}
 80133c6:	4d07      	ldr	r5, [pc, #28]	; (80133e4 <_kill_r+0x20>)
 80133c8:	2300      	movs	r3, #0
 80133ca:	4604      	mov	r4, r0
 80133cc:	4608      	mov	r0, r1
 80133ce:	4611      	mov	r1, r2
 80133d0:	602b      	str	r3, [r5, #0]
 80133d2:	f7ee ff5d 	bl	8002290 <_kill>
 80133d6:	1c43      	adds	r3, r0, #1
 80133d8:	d102      	bne.n	80133e0 <_kill_r+0x1c>
 80133da:	682b      	ldr	r3, [r5, #0]
 80133dc:	b103      	cbz	r3, 80133e0 <_kill_r+0x1c>
 80133de:	6023      	str	r3, [r4, #0]
 80133e0:	bd38      	pop	{r3, r4, r5, pc}
 80133e2:	bf00      	nop
 80133e4:	20001ad4 	.word	0x20001ad4

080133e8 <_getpid_r>:
 80133e8:	f7ee bf4a 	b.w	8002280 <_getpid>

080133ec <siprintf>:
 80133ec:	b40e      	push	{r1, r2, r3}
 80133ee:	b500      	push	{lr}
 80133f0:	b09c      	sub	sp, #112	; 0x70
 80133f2:	ab1d      	add	r3, sp, #116	; 0x74
 80133f4:	9002      	str	r0, [sp, #8]
 80133f6:	9006      	str	r0, [sp, #24]
 80133f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133fc:	4809      	ldr	r0, [pc, #36]	; (8013424 <siprintf+0x38>)
 80133fe:	9107      	str	r1, [sp, #28]
 8013400:	9104      	str	r1, [sp, #16]
 8013402:	4909      	ldr	r1, [pc, #36]	; (8013428 <siprintf+0x3c>)
 8013404:	f853 2b04 	ldr.w	r2, [r3], #4
 8013408:	9105      	str	r1, [sp, #20]
 801340a:	6800      	ldr	r0, [r0, #0]
 801340c:	9301      	str	r3, [sp, #4]
 801340e:	a902      	add	r1, sp, #8
 8013410:	f000 fc7c 	bl	8013d0c <_svfiprintf_r>
 8013414:	9b02      	ldr	r3, [sp, #8]
 8013416:	2200      	movs	r2, #0
 8013418:	701a      	strb	r2, [r3, #0]
 801341a:	b01c      	add	sp, #112	; 0x70
 801341c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013420:	b003      	add	sp, #12
 8013422:	4770      	bx	lr
 8013424:	20000040 	.word	0x20000040
 8013428:	ffff0208 	.word	0xffff0208

0801342c <siscanf>:
 801342c:	b40e      	push	{r1, r2, r3}
 801342e:	b510      	push	{r4, lr}
 8013430:	b09f      	sub	sp, #124	; 0x7c
 8013432:	ac21      	add	r4, sp, #132	; 0x84
 8013434:	f44f 7101 	mov.w	r1, #516	; 0x204
 8013438:	f854 2b04 	ldr.w	r2, [r4], #4
 801343c:	9201      	str	r2, [sp, #4]
 801343e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013442:	9004      	str	r0, [sp, #16]
 8013444:	9008      	str	r0, [sp, #32]
 8013446:	f7ec ff1d 	bl	8000284 <strlen>
 801344a:	4b0c      	ldr	r3, [pc, #48]	; (801347c <siscanf+0x50>)
 801344c:	9005      	str	r0, [sp, #20]
 801344e:	9009      	str	r0, [sp, #36]	; 0x24
 8013450:	930d      	str	r3, [sp, #52]	; 0x34
 8013452:	480b      	ldr	r0, [pc, #44]	; (8013480 <siscanf+0x54>)
 8013454:	9a01      	ldr	r2, [sp, #4]
 8013456:	6800      	ldr	r0, [r0, #0]
 8013458:	9403      	str	r4, [sp, #12]
 801345a:	2300      	movs	r3, #0
 801345c:	9311      	str	r3, [sp, #68]	; 0x44
 801345e:	9316      	str	r3, [sp, #88]	; 0x58
 8013460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013464:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013468:	a904      	add	r1, sp, #16
 801346a:	4623      	mov	r3, r4
 801346c:	f000 fda8 	bl	8013fc0 <__ssvfiscanf_r>
 8013470:	b01f      	add	sp, #124	; 0x7c
 8013472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013476:	b003      	add	sp, #12
 8013478:	4770      	bx	lr
 801347a:	bf00      	nop
 801347c:	080134a7 	.word	0x080134a7
 8013480:	20000040 	.word	0x20000040

08013484 <__sread>:
 8013484:	b510      	push	{r4, lr}
 8013486:	460c      	mov	r4, r1
 8013488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801348c:	f001 f862 	bl	8014554 <_read_r>
 8013490:	2800      	cmp	r0, #0
 8013492:	bfab      	itete	ge
 8013494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013496:	89a3      	ldrhlt	r3, [r4, #12]
 8013498:	181b      	addge	r3, r3, r0
 801349a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801349e:	bfac      	ite	ge
 80134a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80134a2:	81a3      	strhlt	r3, [r4, #12]
 80134a4:	bd10      	pop	{r4, pc}

080134a6 <__seofread>:
 80134a6:	2000      	movs	r0, #0
 80134a8:	4770      	bx	lr

080134aa <__swrite>:
 80134aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ae:	461f      	mov	r7, r3
 80134b0:	898b      	ldrh	r3, [r1, #12]
 80134b2:	05db      	lsls	r3, r3, #23
 80134b4:	4605      	mov	r5, r0
 80134b6:	460c      	mov	r4, r1
 80134b8:	4616      	mov	r6, r2
 80134ba:	d505      	bpl.n	80134c8 <__swrite+0x1e>
 80134bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134c0:	2302      	movs	r3, #2
 80134c2:	2200      	movs	r2, #0
 80134c4:	f000 fb20 	bl	8013b08 <_lseek_r>
 80134c8:	89a3      	ldrh	r3, [r4, #12]
 80134ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80134ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80134d2:	81a3      	strh	r3, [r4, #12]
 80134d4:	4632      	mov	r2, r6
 80134d6:	463b      	mov	r3, r7
 80134d8:	4628      	mov	r0, r5
 80134da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80134de:	f000 b869 	b.w	80135b4 <_write_r>

080134e2 <__sseek>:
 80134e2:	b510      	push	{r4, lr}
 80134e4:	460c      	mov	r4, r1
 80134e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80134ea:	f000 fb0d 	bl	8013b08 <_lseek_r>
 80134ee:	1c43      	adds	r3, r0, #1
 80134f0:	89a3      	ldrh	r3, [r4, #12]
 80134f2:	bf15      	itete	ne
 80134f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80134f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80134fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80134fe:	81a3      	strheq	r3, [r4, #12]
 8013500:	bf18      	it	ne
 8013502:	81a3      	strhne	r3, [r4, #12]
 8013504:	bd10      	pop	{r4, pc}

08013506 <__sclose>:
 8013506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801350a:	f000 b935 	b.w	8013778 <_close_r>
	...

08013510 <__swbuf_r>:
 8013510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013512:	460e      	mov	r6, r1
 8013514:	4614      	mov	r4, r2
 8013516:	4605      	mov	r5, r0
 8013518:	b118      	cbz	r0, 8013522 <__swbuf_r+0x12>
 801351a:	6983      	ldr	r3, [r0, #24]
 801351c:	b90b      	cbnz	r3, 8013522 <__swbuf_r+0x12>
 801351e:	f000 fa55 	bl	80139cc <__sinit>
 8013522:	4b21      	ldr	r3, [pc, #132]	; (80135a8 <__swbuf_r+0x98>)
 8013524:	429c      	cmp	r4, r3
 8013526:	d12b      	bne.n	8013580 <__swbuf_r+0x70>
 8013528:	686c      	ldr	r4, [r5, #4]
 801352a:	69a3      	ldr	r3, [r4, #24]
 801352c:	60a3      	str	r3, [r4, #8]
 801352e:	89a3      	ldrh	r3, [r4, #12]
 8013530:	071a      	lsls	r2, r3, #28
 8013532:	d52f      	bpl.n	8013594 <__swbuf_r+0x84>
 8013534:	6923      	ldr	r3, [r4, #16]
 8013536:	b36b      	cbz	r3, 8013594 <__swbuf_r+0x84>
 8013538:	6923      	ldr	r3, [r4, #16]
 801353a:	6820      	ldr	r0, [r4, #0]
 801353c:	1ac0      	subs	r0, r0, r3
 801353e:	6963      	ldr	r3, [r4, #20]
 8013540:	b2f6      	uxtb	r6, r6
 8013542:	4283      	cmp	r3, r0
 8013544:	4637      	mov	r7, r6
 8013546:	dc04      	bgt.n	8013552 <__swbuf_r+0x42>
 8013548:	4621      	mov	r1, r4
 801354a:	4628      	mov	r0, r5
 801354c:	f000 f9aa 	bl	80138a4 <_fflush_r>
 8013550:	bb30      	cbnz	r0, 80135a0 <__swbuf_r+0x90>
 8013552:	68a3      	ldr	r3, [r4, #8]
 8013554:	3b01      	subs	r3, #1
 8013556:	60a3      	str	r3, [r4, #8]
 8013558:	6823      	ldr	r3, [r4, #0]
 801355a:	1c5a      	adds	r2, r3, #1
 801355c:	6022      	str	r2, [r4, #0]
 801355e:	701e      	strb	r6, [r3, #0]
 8013560:	6963      	ldr	r3, [r4, #20]
 8013562:	3001      	adds	r0, #1
 8013564:	4283      	cmp	r3, r0
 8013566:	d004      	beq.n	8013572 <__swbuf_r+0x62>
 8013568:	89a3      	ldrh	r3, [r4, #12]
 801356a:	07db      	lsls	r3, r3, #31
 801356c:	d506      	bpl.n	801357c <__swbuf_r+0x6c>
 801356e:	2e0a      	cmp	r6, #10
 8013570:	d104      	bne.n	801357c <__swbuf_r+0x6c>
 8013572:	4621      	mov	r1, r4
 8013574:	4628      	mov	r0, r5
 8013576:	f000 f995 	bl	80138a4 <_fflush_r>
 801357a:	b988      	cbnz	r0, 80135a0 <__swbuf_r+0x90>
 801357c:	4638      	mov	r0, r7
 801357e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013580:	4b0a      	ldr	r3, [pc, #40]	; (80135ac <__swbuf_r+0x9c>)
 8013582:	429c      	cmp	r4, r3
 8013584:	d101      	bne.n	801358a <__swbuf_r+0x7a>
 8013586:	68ac      	ldr	r4, [r5, #8]
 8013588:	e7cf      	b.n	801352a <__swbuf_r+0x1a>
 801358a:	4b09      	ldr	r3, [pc, #36]	; (80135b0 <__swbuf_r+0xa0>)
 801358c:	429c      	cmp	r4, r3
 801358e:	bf08      	it	eq
 8013590:	68ec      	ldreq	r4, [r5, #12]
 8013592:	e7ca      	b.n	801352a <__swbuf_r+0x1a>
 8013594:	4621      	mov	r1, r4
 8013596:	4628      	mov	r0, r5
 8013598:	f000 f81e 	bl	80135d8 <__swsetup_r>
 801359c:	2800      	cmp	r0, #0
 801359e:	d0cb      	beq.n	8013538 <__swbuf_r+0x28>
 80135a0:	f04f 37ff 	mov.w	r7, #4294967295
 80135a4:	e7ea      	b.n	801357c <__swbuf_r+0x6c>
 80135a6:	bf00      	nop
 80135a8:	080162d4 	.word	0x080162d4
 80135ac:	080162f4 	.word	0x080162f4
 80135b0:	080162b4 	.word	0x080162b4

080135b4 <_write_r>:
 80135b4:	b538      	push	{r3, r4, r5, lr}
 80135b6:	4d07      	ldr	r5, [pc, #28]	; (80135d4 <_write_r+0x20>)
 80135b8:	4604      	mov	r4, r0
 80135ba:	4608      	mov	r0, r1
 80135bc:	4611      	mov	r1, r2
 80135be:	2200      	movs	r2, #0
 80135c0:	602a      	str	r2, [r5, #0]
 80135c2:	461a      	mov	r2, r3
 80135c4:	f7ee fbf0 	bl	8001da8 <_write>
 80135c8:	1c43      	adds	r3, r0, #1
 80135ca:	d102      	bne.n	80135d2 <_write_r+0x1e>
 80135cc:	682b      	ldr	r3, [r5, #0]
 80135ce:	b103      	cbz	r3, 80135d2 <_write_r+0x1e>
 80135d0:	6023      	str	r3, [r4, #0]
 80135d2:	bd38      	pop	{r3, r4, r5, pc}
 80135d4:	20001ad4 	.word	0x20001ad4

080135d8 <__swsetup_r>:
 80135d8:	4b32      	ldr	r3, [pc, #200]	; (80136a4 <__swsetup_r+0xcc>)
 80135da:	b570      	push	{r4, r5, r6, lr}
 80135dc:	681d      	ldr	r5, [r3, #0]
 80135de:	4606      	mov	r6, r0
 80135e0:	460c      	mov	r4, r1
 80135e2:	b125      	cbz	r5, 80135ee <__swsetup_r+0x16>
 80135e4:	69ab      	ldr	r3, [r5, #24]
 80135e6:	b913      	cbnz	r3, 80135ee <__swsetup_r+0x16>
 80135e8:	4628      	mov	r0, r5
 80135ea:	f000 f9ef 	bl	80139cc <__sinit>
 80135ee:	4b2e      	ldr	r3, [pc, #184]	; (80136a8 <__swsetup_r+0xd0>)
 80135f0:	429c      	cmp	r4, r3
 80135f2:	d10f      	bne.n	8013614 <__swsetup_r+0x3c>
 80135f4:	686c      	ldr	r4, [r5, #4]
 80135f6:	89a3      	ldrh	r3, [r4, #12]
 80135f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80135fc:	0719      	lsls	r1, r3, #28
 80135fe:	d42c      	bmi.n	801365a <__swsetup_r+0x82>
 8013600:	06dd      	lsls	r5, r3, #27
 8013602:	d411      	bmi.n	8013628 <__swsetup_r+0x50>
 8013604:	2309      	movs	r3, #9
 8013606:	6033      	str	r3, [r6, #0]
 8013608:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801360c:	81a3      	strh	r3, [r4, #12]
 801360e:	f04f 30ff 	mov.w	r0, #4294967295
 8013612:	e03e      	b.n	8013692 <__swsetup_r+0xba>
 8013614:	4b25      	ldr	r3, [pc, #148]	; (80136ac <__swsetup_r+0xd4>)
 8013616:	429c      	cmp	r4, r3
 8013618:	d101      	bne.n	801361e <__swsetup_r+0x46>
 801361a:	68ac      	ldr	r4, [r5, #8]
 801361c:	e7eb      	b.n	80135f6 <__swsetup_r+0x1e>
 801361e:	4b24      	ldr	r3, [pc, #144]	; (80136b0 <__swsetup_r+0xd8>)
 8013620:	429c      	cmp	r4, r3
 8013622:	bf08      	it	eq
 8013624:	68ec      	ldreq	r4, [r5, #12]
 8013626:	e7e6      	b.n	80135f6 <__swsetup_r+0x1e>
 8013628:	0758      	lsls	r0, r3, #29
 801362a:	d512      	bpl.n	8013652 <__swsetup_r+0x7a>
 801362c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801362e:	b141      	cbz	r1, 8013642 <__swsetup_r+0x6a>
 8013630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013634:	4299      	cmp	r1, r3
 8013636:	d002      	beq.n	801363e <__swsetup_r+0x66>
 8013638:	4630      	mov	r0, r6
 801363a:	f7ff fa27 	bl	8012a8c <_free_r>
 801363e:	2300      	movs	r3, #0
 8013640:	6363      	str	r3, [r4, #52]	; 0x34
 8013642:	89a3      	ldrh	r3, [r4, #12]
 8013644:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013648:	81a3      	strh	r3, [r4, #12]
 801364a:	2300      	movs	r3, #0
 801364c:	6063      	str	r3, [r4, #4]
 801364e:	6923      	ldr	r3, [r4, #16]
 8013650:	6023      	str	r3, [r4, #0]
 8013652:	89a3      	ldrh	r3, [r4, #12]
 8013654:	f043 0308 	orr.w	r3, r3, #8
 8013658:	81a3      	strh	r3, [r4, #12]
 801365a:	6923      	ldr	r3, [r4, #16]
 801365c:	b94b      	cbnz	r3, 8013672 <__swsetup_r+0x9a>
 801365e:	89a3      	ldrh	r3, [r4, #12]
 8013660:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013668:	d003      	beq.n	8013672 <__swsetup_r+0x9a>
 801366a:	4621      	mov	r1, r4
 801366c:	4630      	mov	r0, r6
 801366e:	f000 fa83 	bl	8013b78 <__smakebuf_r>
 8013672:	89a0      	ldrh	r0, [r4, #12]
 8013674:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013678:	f010 0301 	ands.w	r3, r0, #1
 801367c:	d00a      	beq.n	8013694 <__swsetup_r+0xbc>
 801367e:	2300      	movs	r3, #0
 8013680:	60a3      	str	r3, [r4, #8]
 8013682:	6963      	ldr	r3, [r4, #20]
 8013684:	425b      	negs	r3, r3
 8013686:	61a3      	str	r3, [r4, #24]
 8013688:	6923      	ldr	r3, [r4, #16]
 801368a:	b943      	cbnz	r3, 801369e <__swsetup_r+0xc6>
 801368c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013690:	d1ba      	bne.n	8013608 <__swsetup_r+0x30>
 8013692:	bd70      	pop	{r4, r5, r6, pc}
 8013694:	0781      	lsls	r1, r0, #30
 8013696:	bf58      	it	pl
 8013698:	6963      	ldrpl	r3, [r4, #20]
 801369a:	60a3      	str	r3, [r4, #8]
 801369c:	e7f4      	b.n	8013688 <__swsetup_r+0xb0>
 801369e:	2000      	movs	r0, #0
 80136a0:	e7f7      	b.n	8013692 <__swsetup_r+0xba>
 80136a2:	bf00      	nop
 80136a4:	20000040 	.word	0x20000040
 80136a8:	080162d4 	.word	0x080162d4
 80136ac:	080162f4 	.word	0x080162f4
 80136b0:	080162b4 	.word	0x080162b4

080136b4 <__register_exitproc>:
 80136b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8013774 <__register_exitproc+0xc0>
 80136bc:	4606      	mov	r6, r0
 80136be:	f8d8 0000 	ldr.w	r0, [r8]
 80136c2:	461f      	mov	r7, r3
 80136c4:	460d      	mov	r5, r1
 80136c6:	4691      	mov	r9, r2
 80136c8:	f7ff f99d 	bl	8012a06 <__retarget_lock_acquire_recursive>
 80136cc:	4b25      	ldr	r3, [pc, #148]	; (8013764 <__register_exitproc+0xb0>)
 80136ce:	681c      	ldr	r4, [r3, #0]
 80136d0:	b934      	cbnz	r4, 80136e0 <__register_exitproc+0x2c>
 80136d2:	4c25      	ldr	r4, [pc, #148]	; (8013768 <__register_exitproc+0xb4>)
 80136d4:	601c      	str	r4, [r3, #0]
 80136d6:	4b25      	ldr	r3, [pc, #148]	; (801376c <__register_exitproc+0xb8>)
 80136d8:	b113      	cbz	r3, 80136e0 <__register_exitproc+0x2c>
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80136e0:	6863      	ldr	r3, [r4, #4]
 80136e2:	2b1f      	cmp	r3, #31
 80136e4:	dd07      	ble.n	80136f6 <__register_exitproc+0x42>
 80136e6:	f8d8 0000 	ldr.w	r0, [r8]
 80136ea:	f7ff f98e 	bl	8012a0a <__retarget_lock_release_recursive>
 80136ee:	f04f 30ff 	mov.w	r0, #4294967295
 80136f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136f6:	b34e      	cbz	r6, 801374c <__register_exitproc+0x98>
 80136f8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80136fc:	b988      	cbnz	r0, 8013722 <__register_exitproc+0x6e>
 80136fe:	4b1c      	ldr	r3, [pc, #112]	; (8013770 <__register_exitproc+0xbc>)
 8013700:	b923      	cbnz	r3, 801370c <__register_exitproc+0x58>
 8013702:	f8d8 0000 	ldr.w	r0, [r8]
 8013706:	f7ff f97f 	bl	8012a08 <__retarget_lock_release>
 801370a:	e7f0      	b.n	80136ee <__register_exitproc+0x3a>
 801370c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013710:	f7ff f97c 	bl	8012a0c <malloc>
 8013714:	2800      	cmp	r0, #0
 8013716:	d0f4      	beq.n	8013702 <__register_exitproc+0x4e>
 8013718:	2300      	movs	r3, #0
 801371a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801371e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8013722:	6863      	ldr	r3, [r4, #4]
 8013724:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8013728:	2201      	movs	r2, #1
 801372a:	409a      	lsls	r2, r3
 801372c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013730:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8013734:	4313      	orrs	r3, r2
 8013736:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801373a:	2e02      	cmp	r6, #2
 801373c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8013740:	bf02      	ittt	eq
 8013742:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8013746:	4313      	orreq	r3, r2
 8013748:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801374c:	6863      	ldr	r3, [r4, #4]
 801374e:	f8d8 0000 	ldr.w	r0, [r8]
 8013752:	1c5a      	adds	r2, r3, #1
 8013754:	3302      	adds	r3, #2
 8013756:	6062      	str	r2, [r4, #4]
 8013758:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801375c:	f7ff f955 	bl	8012a0a <__retarget_lock_release_recursive>
 8013760:	2000      	movs	r0, #0
 8013762:	e7c6      	b.n	80136f2 <__register_exitproc+0x3e>
 8013764:	20001ad0 	.word	0x20001ad0
 8013768:	20001a44 	.word	0x20001a44
 801376c:	00000000 	.word	0x00000000
 8013770:	08012a0d 	.word	0x08012a0d
 8013774:	200000a4 	.word	0x200000a4

08013778 <_close_r>:
 8013778:	b538      	push	{r3, r4, r5, lr}
 801377a:	4d06      	ldr	r5, [pc, #24]	; (8013794 <_close_r+0x1c>)
 801377c:	2300      	movs	r3, #0
 801377e:	4604      	mov	r4, r0
 8013780:	4608      	mov	r0, r1
 8013782:	602b      	str	r3, [r5, #0]
 8013784:	f7ee fd9e 	bl	80022c4 <_close>
 8013788:	1c43      	adds	r3, r0, #1
 801378a:	d102      	bne.n	8013792 <_close_r+0x1a>
 801378c:	682b      	ldr	r3, [r5, #0]
 801378e:	b103      	cbz	r3, 8013792 <_close_r+0x1a>
 8013790:	6023      	str	r3, [r4, #0]
 8013792:	bd38      	pop	{r3, r4, r5, pc}
 8013794:	20001ad4 	.word	0x20001ad4

08013798 <__sflush_r>:
 8013798:	898a      	ldrh	r2, [r1, #12]
 801379a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801379e:	4605      	mov	r5, r0
 80137a0:	0710      	lsls	r0, r2, #28
 80137a2:	460c      	mov	r4, r1
 80137a4:	d458      	bmi.n	8013858 <__sflush_r+0xc0>
 80137a6:	684b      	ldr	r3, [r1, #4]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	dc05      	bgt.n	80137b8 <__sflush_r+0x20>
 80137ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	dc02      	bgt.n	80137b8 <__sflush_r+0x20>
 80137b2:	2000      	movs	r0, #0
 80137b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137ba:	2e00      	cmp	r6, #0
 80137bc:	d0f9      	beq.n	80137b2 <__sflush_r+0x1a>
 80137be:	2300      	movs	r3, #0
 80137c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80137c4:	682f      	ldr	r7, [r5, #0]
 80137c6:	602b      	str	r3, [r5, #0]
 80137c8:	d032      	beq.n	8013830 <__sflush_r+0x98>
 80137ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80137cc:	89a3      	ldrh	r3, [r4, #12]
 80137ce:	075a      	lsls	r2, r3, #29
 80137d0:	d505      	bpl.n	80137de <__sflush_r+0x46>
 80137d2:	6863      	ldr	r3, [r4, #4]
 80137d4:	1ac0      	subs	r0, r0, r3
 80137d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80137d8:	b10b      	cbz	r3, 80137de <__sflush_r+0x46>
 80137da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80137dc:	1ac0      	subs	r0, r0, r3
 80137de:	2300      	movs	r3, #0
 80137e0:	4602      	mov	r2, r0
 80137e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80137e4:	6a21      	ldr	r1, [r4, #32]
 80137e6:	4628      	mov	r0, r5
 80137e8:	47b0      	blx	r6
 80137ea:	1c43      	adds	r3, r0, #1
 80137ec:	89a3      	ldrh	r3, [r4, #12]
 80137ee:	d106      	bne.n	80137fe <__sflush_r+0x66>
 80137f0:	6829      	ldr	r1, [r5, #0]
 80137f2:	291d      	cmp	r1, #29
 80137f4:	d82c      	bhi.n	8013850 <__sflush_r+0xb8>
 80137f6:	4a2a      	ldr	r2, [pc, #168]	; (80138a0 <__sflush_r+0x108>)
 80137f8:	40ca      	lsrs	r2, r1
 80137fa:	07d6      	lsls	r6, r2, #31
 80137fc:	d528      	bpl.n	8013850 <__sflush_r+0xb8>
 80137fe:	2200      	movs	r2, #0
 8013800:	6062      	str	r2, [r4, #4]
 8013802:	04d9      	lsls	r1, r3, #19
 8013804:	6922      	ldr	r2, [r4, #16]
 8013806:	6022      	str	r2, [r4, #0]
 8013808:	d504      	bpl.n	8013814 <__sflush_r+0x7c>
 801380a:	1c42      	adds	r2, r0, #1
 801380c:	d101      	bne.n	8013812 <__sflush_r+0x7a>
 801380e:	682b      	ldr	r3, [r5, #0]
 8013810:	b903      	cbnz	r3, 8013814 <__sflush_r+0x7c>
 8013812:	6560      	str	r0, [r4, #84]	; 0x54
 8013814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013816:	602f      	str	r7, [r5, #0]
 8013818:	2900      	cmp	r1, #0
 801381a:	d0ca      	beq.n	80137b2 <__sflush_r+0x1a>
 801381c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013820:	4299      	cmp	r1, r3
 8013822:	d002      	beq.n	801382a <__sflush_r+0x92>
 8013824:	4628      	mov	r0, r5
 8013826:	f7ff f931 	bl	8012a8c <_free_r>
 801382a:	2000      	movs	r0, #0
 801382c:	6360      	str	r0, [r4, #52]	; 0x34
 801382e:	e7c1      	b.n	80137b4 <__sflush_r+0x1c>
 8013830:	6a21      	ldr	r1, [r4, #32]
 8013832:	2301      	movs	r3, #1
 8013834:	4628      	mov	r0, r5
 8013836:	47b0      	blx	r6
 8013838:	1c41      	adds	r1, r0, #1
 801383a:	d1c7      	bne.n	80137cc <__sflush_r+0x34>
 801383c:	682b      	ldr	r3, [r5, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d0c4      	beq.n	80137cc <__sflush_r+0x34>
 8013842:	2b1d      	cmp	r3, #29
 8013844:	d001      	beq.n	801384a <__sflush_r+0xb2>
 8013846:	2b16      	cmp	r3, #22
 8013848:	d101      	bne.n	801384e <__sflush_r+0xb6>
 801384a:	602f      	str	r7, [r5, #0]
 801384c:	e7b1      	b.n	80137b2 <__sflush_r+0x1a>
 801384e:	89a3      	ldrh	r3, [r4, #12]
 8013850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013854:	81a3      	strh	r3, [r4, #12]
 8013856:	e7ad      	b.n	80137b4 <__sflush_r+0x1c>
 8013858:	690f      	ldr	r7, [r1, #16]
 801385a:	2f00      	cmp	r7, #0
 801385c:	d0a9      	beq.n	80137b2 <__sflush_r+0x1a>
 801385e:	0793      	lsls	r3, r2, #30
 8013860:	680e      	ldr	r6, [r1, #0]
 8013862:	bf08      	it	eq
 8013864:	694b      	ldreq	r3, [r1, #20]
 8013866:	600f      	str	r7, [r1, #0]
 8013868:	bf18      	it	ne
 801386a:	2300      	movne	r3, #0
 801386c:	eba6 0807 	sub.w	r8, r6, r7
 8013870:	608b      	str	r3, [r1, #8]
 8013872:	f1b8 0f00 	cmp.w	r8, #0
 8013876:	dd9c      	ble.n	80137b2 <__sflush_r+0x1a>
 8013878:	6a21      	ldr	r1, [r4, #32]
 801387a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801387c:	4643      	mov	r3, r8
 801387e:	463a      	mov	r2, r7
 8013880:	4628      	mov	r0, r5
 8013882:	47b0      	blx	r6
 8013884:	2800      	cmp	r0, #0
 8013886:	dc06      	bgt.n	8013896 <__sflush_r+0xfe>
 8013888:	89a3      	ldrh	r3, [r4, #12]
 801388a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801388e:	81a3      	strh	r3, [r4, #12]
 8013890:	f04f 30ff 	mov.w	r0, #4294967295
 8013894:	e78e      	b.n	80137b4 <__sflush_r+0x1c>
 8013896:	4407      	add	r7, r0
 8013898:	eba8 0800 	sub.w	r8, r8, r0
 801389c:	e7e9      	b.n	8013872 <__sflush_r+0xda>
 801389e:	bf00      	nop
 80138a0:	20400001 	.word	0x20400001

080138a4 <_fflush_r>:
 80138a4:	b538      	push	{r3, r4, r5, lr}
 80138a6:	690b      	ldr	r3, [r1, #16]
 80138a8:	4605      	mov	r5, r0
 80138aa:	460c      	mov	r4, r1
 80138ac:	b913      	cbnz	r3, 80138b4 <_fflush_r+0x10>
 80138ae:	2500      	movs	r5, #0
 80138b0:	4628      	mov	r0, r5
 80138b2:	bd38      	pop	{r3, r4, r5, pc}
 80138b4:	b118      	cbz	r0, 80138be <_fflush_r+0x1a>
 80138b6:	6983      	ldr	r3, [r0, #24]
 80138b8:	b90b      	cbnz	r3, 80138be <_fflush_r+0x1a>
 80138ba:	f000 f887 	bl	80139cc <__sinit>
 80138be:	4b14      	ldr	r3, [pc, #80]	; (8013910 <_fflush_r+0x6c>)
 80138c0:	429c      	cmp	r4, r3
 80138c2:	d11b      	bne.n	80138fc <_fflush_r+0x58>
 80138c4:	686c      	ldr	r4, [r5, #4]
 80138c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d0ef      	beq.n	80138ae <_fflush_r+0xa>
 80138ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80138d0:	07d0      	lsls	r0, r2, #31
 80138d2:	d404      	bmi.n	80138de <_fflush_r+0x3a>
 80138d4:	0599      	lsls	r1, r3, #22
 80138d6:	d402      	bmi.n	80138de <_fflush_r+0x3a>
 80138d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138da:	f7ff f894 	bl	8012a06 <__retarget_lock_acquire_recursive>
 80138de:	4628      	mov	r0, r5
 80138e0:	4621      	mov	r1, r4
 80138e2:	f7ff ff59 	bl	8013798 <__sflush_r>
 80138e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80138e8:	07da      	lsls	r2, r3, #31
 80138ea:	4605      	mov	r5, r0
 80138ec:	d4e0      	bmi.n	80138b0 <_fflush_r+0xc>
 80138ee:	89a3      	ldrh	r3, [r4, #12]
 80138f0:	059b      	lsls	r3, r3, #22
 80138f2:	d4dd      	bmi.n	80138b0 <_fflush_r+0xc>
 80138f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80138f6:	f7ff f888 	bl	8012a0a <__retarget_lock_release_recursive>
 80138fa:	e7d9      	b.n	80138b0 <_fflush_r+0xc>
 80138fc:	4b05      	ldr	r3, [pc, #20]	; (8013914 <_fflush_r+0x70>)
 80138fe:	429c      	cmp	r4, r3
 8013900:	d101      	bne.n	8013906 <_fflush_r+0x62>
 8013902:	68ac      	ldr	r4, [r5, #8]
 8013904:	e7df      	b.n	80138c6 <_fflush_r+0x22>
 8013906:	4b04      	ldr	r3, [pc, #16]	; (8013918 <_fflush_r+0x74>)
 8013908:	429c      	cmp	r4, r3
 801390a:	bf08      	it	eq
 801390c:	68ec      	ldreq	r4, [r5, #12]
 801390e:	e7da      	b.n	80138c6 <_fflush_r+0x22>
 8013910:	080162d4 	.word	0x080162d4
 8013914:	080162f4 	.word	0x080162f4
 8013918:	080162b4 	.word	0x080162b4

0801391c <std>:
 801391c:	2300      	movs	r3, #0
 801391e:	b510      	push	{r4, lr}
 8013920:	4604      	mov	r4, r0
 8013922:	e9c0 3300 	strd	r3, r3, [r0]
 8013926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801392a:	6083      	str	r3, [r0, #8]
 801392c:	8181      	strh	r1, [r0, #12]
 801392e:	6643      	str	r3, [r0, #100]	; 0x64
 8013930:	81c2      	strh	r2, [r0, #14]
 8013932:	6183      	str	r3, [r0, #24]
 8013934:	4619      	mov	r1, r3
 8013936:	2208      	movs	r2, #8
 8013938:	305c      	adds	r0, #92	; 0x5c
 801393a:	f7ff f89f 	bl	8012a7c <memset>
 801393e:	4b05      	ldr	r3, [pc, #20]	; (8013954 <std+0x38>)
 8013940:	6263      	str	r3, [r4, #36]	; 0x24
 8013942:	4b05      	ldr	r3, [pc, #20]	; (8013958 <std+0x3c>)
 8013944:	62a3      	str	r3, [r4, #40]	; 0x28
 8013946:	4b05      	ldr	r3, [pc, #20]	; (801395c <std+0x40>)
 8013948:	62e3      	str	r3, [r4, #44]	; 0x2c
 801394a:	4b05      	ldr	r3, [pc, #20]	; (8013960 <std+0x44>)
 801394c:	6224      	str	r4, [r4, #32]
 801394e:	6323      	str	r3, [r4, #48]	; 0x30
 8013950:	bd10      	pop	{r4, pc}
 8013952:	bf00      	nop
 8013954:	08013485 	.word	0x08013485
 8013958:	080134ab 	.word	0x080134ab
 801395c:	080134e3 	.word	0x080134e3
 8013960:	08013507 	.word	0x08013507

08013964 <_cleanup_r>:
 8013964:	4901      	ldr	r1, [pc, #4]	; (801396c <_cleanup_r+0x8>)
 8013966:	f000 b8af 	b.w	8013ac8 <_fwalk_reent>
 801396a:	bf00      	nop
 801396c:	080138a5 	.word	0x080138a5

08013970 <__sfmoreglue>:
 8013970:	b570      	push	{r4, r5, r6, lr}
 8013972:	2268      	movs	r2, #104	; 0x68
 8013974:	1e4d      	subs	r5, r1, #1
 8013976:	4355      	muls	r5, r2
 8013978:	460e      	mov	r6, r1
 801397a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801397e:	f7ff f8f1 	bl	8012b64 <_malloc_r>
 8013982:	4604      	mov	r4, r0
 8013984:	b140      	cbz	r0, 8013998 <__sfmoreglue+0x28>
 8013986:	2100      	movs	r1, #0
 8013988:	e9c0 1600 	strd	r1, r6, [r0]
 801398c:	300c      	adds	r0, #12
 801398e:	60a0      	str	r0, [r4, #8]
 8013990:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013994:	f7ff f872 	bl	8012a7c <memset>
 8013998:	4620      	mov	r0, r4
 801399a:	bd70      	pop	{r4, r5, r6, pc}

0801399c <__sfp_lock_acquire>:
 801399c:	4801      	ldr	r0, [pc, #4]	; (80139a4 <__sfp_lock_acquire+0x8>)
 801399e:	f7ff b832 	b.w	8012a06 <__retarget_lock_acquire_recursive>
 80139a2:	bf00      	nop
 80139a4:	20001a39 	.word	0x20001a39

080139a8 <__sfp_lock_release>:
 80139a8:	4801      	ldr	r0, [pc, #4]	; (80139b0 <__sfp_lock_release+0x8>)
 80139aa:	f7ff b82e 	b.w	8012a0a <__retarget_lock_release_recursive>
 80139ae:	bf00      	nop
 80139b0:	20001a39 	.word	0x20001a39

080139b4 <__sinit_lock_acquire>:
 80139b4:	4801      	ldr	r0, [pc, #4]	; (80139bc <__sinit_lock_acquire+0x8>)
 80139b6:	f7ff b826 	b.w	8012a06 <__retarget_lock_acquire_recursive>
 80139ba:	bf00      	nop
 80139bc:	20001a3a 	.word	0x20001a3a

080139c0 <__sinit_lock_release>:
 80139c0:	4801      	ldr	r0, [pc, #4]	; (80139c8 <__sinit_lock_release+0x8>)
 80139c2:	f7ff b822 	b.w	8012a0a <__retarget_lock_release_recursive>
 80139c6:	bf00      	nop
 80139c8:	20001a3a 	.word	0x20001a3a

080139cc <__sinit>:
 80139cc:	b510      	push	{r4, lr}
 80139ce:	4604      	mov	r4, r0
 80139d0:	f7ff fff0 	bl	80139b4 <__sinit_lock_acquire>
 80139d4:	69a3      	ldr	r3, [r4, #24]
 80139d6:	b11b      	cbz	r3, 80139e0 <__sinit+0x14>
 80139d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139dc:	f7ff bff0 	b.w	80139c0 <__sinit_lock_release>
 80139e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80139e4:	6523      	str	r3, [r4, #80]	; 0x50
 80139e6:	4b13      	ldr	r3, [pc, #76]	; (8013a34 <__sinit+0x68>)
 80139e8:	4a13      	ldr	r2, [pc, #76]	; (8013a38 <__sinit+0x6c>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80139ee:	42a3      	cmp	r3, r4
 80139f0:	bf04      	itt	eq
 80139f2:	2301      	moveq	r3, #1
 80139f4:	61a3      	streq	r3, [r4, #24]
 80139f6:	4620      	mov	r0, r4
 80139f8:	f000 f820 	bl	8013a3c <__sfp>
 80139fc:	6060      	str	r0, [r4, #4]
 80139fe:	4620      	mov	r0, r4
 8013a00:	f000 f81c 	bl	8013a3c <__sfp>
 8013a04:	60a0      	str	r0, [r4, #8]
 8013a06:	4620      	mov	r0, r4
 8013a08:	f000 f818 	bl	8013a3c <__sfp>
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	60e0      	str	r0, [r4, #12]
 8013a10:	2104      	movs	r1, #4
 8013a12:	6860      	ldr	r0, [r4, #4]
 8013a14:	f7ff ff82 	bl	801391c <std>
 8013a18:	68a0      	ldr	r0, [r4, #8]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	2109      	movs	r1, #9
 8013a1e:	f7ff ff7d 	bl	801391c <std>
 8013a22:	68e0      	ldr	r0, [r4, #12]
 8013a24:	2202      	movs	r2, #2
 8013a26:	2112      	movs	r1, #18
 8013a28:	f7ff ff78 	bl	801391c <std>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	61a3      	str	r3, [r4, #24]
 8013a30:	e7d2      	b.n	80139d8 <__sinit+0xc>
 8013a32:	bf00      	nop
 8013a34:	0801627c 	.word	0x0801627c
 8013a38:	08013965 	.word	0x08013965

08013a3c <__sfp>:
 8013a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3e:	4607      	mov	r7, r0
 8013a40:	f7ff ffac 	bl	801399c <__sfp_lock_acquire>
 8013a44:	4b1e      	ldr	r3, [pc, #120]	; (8013ac0 <__sfp+0x84>)
 8013a46:	681e      	ldr	r6, [r3, #0]
 8013a48:	69b3      	ldr	r3, [r6, #24]
 8013a4a:	b913      	cbnz	r3, 8013a52 <__sfp+0x16>
 8013a4c:	4630      	mov	r0, r6
 8013a4e:	f7ff ffbd 	bl	80139cc <__sinit>
 8013a52:	3648      	adds	r6, #72	; 0x48
 8013a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013a58:	3b01      	subs	r3, #1
 8013a5a:	d503      	bpl.n	8013a64 <__sfp+0x28>
 8013a5c:	6833      	ldr	r3, [r6, #0]
 8013a5e:	b30b      	cbz	r3, 8013aa4 <__sfp+0x68>
 8013a60:	6836      	ldr	r6, [r6, #0]
 8013a62:	e7f7      	b.n	8013a54 <__sfp+0x18>
 8013a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013a68:	b9d5      	cbnz	r5, 8013aa0 <__sfp+0x64>
 8013a6a:	4b16      	ldr	r3, [pc, #88]	; (8013ac4 <__sfp+0x88>)
 8013a6c:	60e3      	str	r3, [r4, #12]
 8013a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013a72:	6665      	str	r5, [r4, #100]	; 0x64
 8013a74:	f7fe ffc6 	bl	8012a04 <__retarget_lock_init_recursive>
 8013a78:	f7ff ff96 	bl	80139a8 <__sfp_lock_release>
 8013a7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013a80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013a84:	6025      	str	r5, [r4, #0]
 8013a86:	61a5      	str	r5, [r4, #24]
 8013a88:	2208      	movs	r2, #8
 8013a8a:	4629      	mov	r1, r5
 8013a8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013a90:	f7fe fff4 	bl	8012a7c <memset>
 8013a94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013a98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013aa0:	3468      	adds	r4, #104	; 0x68
 8013aa2:	e7d9      	b.n	8013a58 <__sfp+0x1c>
 8013aa4:	2104      	movs	r1, #4
 8013aa6:	4638      	mov	r0, r7
 8013aa8:	f7ff ff62 	bl	8013970 <__sfmoreglue>
 8013aac:	4604      	mov	r4, r0
 8013aae:	6030      	str	r0, [r6, #0]
 8013ab0:	2800      	cmp	r0, #0
 8013ab2:	d1d5      	bne.n	8013a60 <__sfp+0x24>
 8013ab4:	f7ff ff78 	bl	80139a8 <__sfp_lock_release>
 8013ab8:	230c      	movs	r3, #12
 8013aba:	603b      	str	r3, [r7, #0]
 8013abc:	e7ee      	b.n	8013a9c <__sfp+0x60>
 8013abe:	bf00      	nop
 8013ac0:	0801627c 	.word	0x0801627c
 8013ac4:	ffff0001 	.word	0xffff0001

08013ac8 <_fwalk_reent>:
 8013ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013acc:	4606      	mov	r6, r0
 8013ace:	4688      	mov	r8, r1
 8013ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013ad4:	2700      	movs	r7, #0
 8013ad6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ada:	f1b9 0901 	subs.w	r9, r9, #1
 8013ade:	d505      	bpl.n	8013aec <_fwalk_reent+0x24>
 8013ae0:	6824      	ldr	r4, [r4, #0]
 8013ae2:	2c00      	cmp	r4, #0
 8013ae4:	d1f7      	bne.n	8013ad6 <_fwalk_reent+0xe>
 8013ae6:	4638      	mov	r0, r7
 8013ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013aec:	89ab      	ldrh	r3, [r5, #12]
 8013aee:	2b01      	cmp	r3, #1
 8013af0:	d907      	bls.n	8013b02 <_fwalk_reent+0x3a>
 8013af2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013af6:	3301      	adds	r3, #1
 8013af8:	d003      	beq.n	8013b02 <_fwalk_reent+0x3a>
 8013afa:	4629      	mov	r1, r5
 8013afc:	4630      	mov	r0, r6
 8013afe:	47c0      	blx	r8
 8013b00:	4307      	orrs	r7, r0
 8013b02:	3568      	adds	r5, #104	; 0x68
 8013b04:	e7e9      	b.n	8013ada <_fwalk_reent+0x12>
	...

08013b08 <_lseek_r>:
 8013b08:	b538      	push	{r3, r4, r5, lr}
 8013b0a:	4d07      	ldr	r5, [pc, #28]	; (8013b28 <_lseek_r+0x20>)
 8013b0c:	4604      	mov	r4, r0
 8013b0e:	4608      	mov	r0, r1
 8013b10:	4611      	mov	r1, r2
 8013b12:	2200      	movs	r2, #0
 8013b14:	602a      	str	r2, [r5, #0]
 8013b16:	461a      	mov	r2, r3
 8013b18:	f7ee fbfb 	bl	8002312 <_lseek>
 8013b1c:	1c43      	adds	r3, r0, #1
 8013b1e:	d102      	bne.n	8013b26 <_lseek_r+0x1e>
 8013b20:	682b      	ldr	r3, [r5, #0]
 8013b22:	b103      	cbz	r3, 8013b26 <_lseek_r+0x1e>
 8013b24:	6023      	str	r3, [r4, #0]
 8013b26:	bd38      	pop	{r3, r4, r5, pc}
 8013b28:	20001ad4 	.word	0x20001ad4

08013b2c <__swhatbuf_r>:
 8013b2c:	b570      	push	{r4, r5, r6, lr}
 8013b2e:	460e      	mov	r6, r1
 8013b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b34:	2900      	cmp	r1, #0
 8013b36:	b096      	sub	sp, #88	; 0x58
 8013b38:	4614      	mov	r4, r2
 8013b3a:	461d      	mov	r5, r3
 8013b3c:	da08      	bge.n	8013b50 <__swhatbuf_r+0x24>
 8013b3e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013b42:	2200      	movs	r2, #0
 8013b44:	602a      	str	r2, [r5, #0]
 8013b46:	061a      	lsls	r2, r3, #24
 8013b48:	d410      	bmi.n	8013b6c <__swhatbuf_r+0x40>
 8013b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013b4e:	e00e      	b.n	8013b6e <__swhatbuf_r+0x42>
 8013b50:	466a      	mov	r2, sp
 8013b52:	f000 fe7b 	bl	801484c <_fstat_r>
 8013b56:	2800      	cmp	r0, #0
 8013b58:	dbf1      	blt.n	8013b3e <__swhatbuf_r+0x12>
 8013b5a:	9a01      	ldr	r2, [sp, #4]
 8013b5c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013b60:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013b64:	425a      	negs	r2, r3
 8013b66:	415a      	adcs	r2, r3
 8013b68:	602a      	str	r2, [r5, #0]
 8013b6a:	e7ee      	b.n	8013b4a <__swhatbuf_r+0x1e>
 8013b6c:	2340      	movs	r3, #64	; 0x40
 8013b6e:	2000      	movs	r0, #0
 8013b70:	6023      	str	r3, [r4, #0]
 8013b72:	b016      	add	sp, #88	; 0x58
 8013b74:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b78 <__smakebuf_r>:
 8013b78:	898b      	ldrh	r3, [r1, #12]
 8013b7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013b7c:	079d      	lsls	r5, r3, #30
 8013b7e:	4606      	mov	r6, r0
 8013b80:	460c      	mov	r4, r1
 8013b82:	d507      	bpl.n	8013b94 <__smakebuf_r+0x1c>
 8013b84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013b88:	6023      	str	r3, [r4, #0]
 8013b8a:	6123      	str	r3, [r4, #16]
 8013b8c:	2301      	movs	r3, #1
 8013b8e:	6163      	str	r3, [r4, #20]
 8013b90:	b002      	add	sp, #8
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
 8013b94:	ab01      	add	r3, sp, #4
 8013b96:	466a      	mov	r2, sp
 8013b98:	f7ff ffc8 	bl	8013b2c <__swhatbuf_r>
 8013b9c:	9900      	ldr	r1, [sp, #0]
 8013b9e:	4605      	mov	r5, r0
 8013ba0:	4630      	mov	r0, r6
 8013ba2:	f7fe ffdf 	bl	8012b64 <_malloc_r>
 8013ba6:	b948      	cbnz	r0, 8013bbc <__smakebuf_r+0x44>
 8013ba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013bac:	059a      	lsls	r2, r3, #22
 8013bae:	d4ef      	bmi.n	8013b90 <__smakebuf_r+0x18>
 8013bb0:	f023 0303 	bic.w	r3, r3, #3
 8013bb4:	f043 0302 	orr.w	r3, r3, #2
 8013bb8:	81a3      	strh	r3, [r4, #12]
 8013bba:	e7e3      	b.n	8013b84 <__smakebuf_r+0xc>
 8013bbc:	4b0d      	ldr	r3, [pc, #52]	; (8013bf4 <__smakebuf_r+0x7c>)
 8013bbe:	62b3      	str	r3, [r6, #40]	; 0x28
 8013bc0:	89a3      	ldrh	r3, [r4, #12]
 8013bc2:	6020      	str	r0, [r4, #0]
 8013bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bc8:	81a3      	strh	r3, [r4, #12]
 8013bca:	9b00      	ldr	r3, [sp, #0]
 8013bcc:	6163      	str	r3, [r4, #20]
 8013bce:	9b01      	ldr	r3, [sp, #4]
 8013bd0:	6120      	str	r0, [r4, #16]
 8013bd2:	b15b      	cbz	r3, 8013bec <__smakebuf_r+0x74>
 8013bd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bd8:	4630      	mov	r0, r6
 8013bda:	f000 fe49 	bl	8014870 <_isatty_r>
 8013bde:	b128      	cbz	r0, 8013bec <__smakebuf_r+0x74>
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	f023 0303 	bic.w	r3, r3, #3
 8013be6:	f043 0301 	orr.w	r3, r3, #1
 8013bea:	81a3      	strh	r3, [r4, #12]
 8013bec:	89a0      	ldrh	r0, [r4, #12]
 8013bee:	4305      	orrs	r5, r0
 8013bf0:	81a5      	strh	r5, [r4, #12]
 8013bf2:	e7cd      	b.n	8013b90 <__smakebuf_r+0x18>
 8013bf4:	08013965 	.word	0x08013965

08013bf8 <_realloc_r>:
 8013bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfc:	4680      	mov	r8, r0
 8013bfe:	4614      	mov	r4, r2
 8013c00:	460e      	mov	r6, r1
 8013c02:	b921      	cbnz	r1, 8013c0e <_realloc_r+0x16>
 8013c04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013c08:	4611      	mov	r1, r2
 8013c0a:	f7fe bfab 	b.w	8012b64 <_malloc_r>
 8013c0e:	b92a      	cbnz	r2, 8013c1c <_realloc_r+0x24>
 8013c10:	f7fe ff3c 	bl	8012a8c <_free_r>
 8013c14:	4625      	mov	r5, r4
 8013c16:	4628      	mov	r0, r5
 8013c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c1c:	f000 fe38 	bl	8014890 <_malloc_usable_size_r>
 8013c20:	4284      	cmp	r4, r0
 8013c22:	4607      	mov	r7, r0
 8013c24:	d802      	bhi.n	8013c2c <_realloc_r+0x34>
 8013c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013c2a:	d812      	bhi.n	8013c52 <_realloc_r+0x5a>
 8013c2c:	4621      	mov	r1, r4
 8013c2e:	4640      	mov	r0, r8
 8013c30:	f7fe ff98 	bl	8012b64 <_malloc_r>
 8013c34:	4605      	mov	r5, r0
 8013c36:	2800      	cmp	r0, #0
 8013c38:	d0ed      	beq.n	8013c16 <_realloc_r+0x1e>
 8013c3a:	42bc      	cmp	r4, r7
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	4631      	mov	r1, r6
 8013c40:	bf28      	it	cs
 8013c42:	463a      	movcs	r2, r7
 8013c44:	f7fe fef2 	bl	8012a2c <memcpy>
 8013c48:	4631      	mov	r1, r6
 8013c4a:	4640      	mov	r0, r8
 8013c4c:	f7fe ff1e 	bl	8012a8c <_free_r>
 8013c50:	e7e1      	b.n	8013c16 <_realloc_r+0x1e>
 8013c52:	4635      	mov	r5, r6
 8013c54:	e7df      	b.n	8013c16 <_realloc_r+0x1e>

08013c56 <__ssputs_r>:
 8013c56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c5a:	688e      	ldr	r6, [r1, #8]
 8013c5c:	429e      	cmp	r6, r3
 8013c5e:	4682      	mov	sl, r0
 8013c60:	460c      	mov	r4, r1
 8013c62:	4690      	mov	r8, r2
 8013c64:	461f      	mov	r7, r3
 8013c66:	d838      	bhi.n	8013cda <__ssputs_r+0x84>
 8013c68:	898a      	ldrh	r2, [r1, #12]
 8013c6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013c6e:	d032      	beq.n	8013cd6 <__ssputs_r+0x80>
 8013c70:	6825      	ldr	r5, [r4, #0]
 8013c72:	6909      	ldr	r1, [r1, #16]
 8013c74:	eba5 0901 	sub.w	r9, r5, r1
 8013c78:	6965      	ldr	r5, [r4, #20]
 8013c7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c82:	3301      	adds	r3, #1
 8013c84:	444b      	add	r3, r9
 8013c86:	106d      	asrs	r5, r5, #1
 8013c88:	429d      	cmp	r5, r3
 8013c8a:	bf38      	it	cc
 8013c8c:	461d      	movcc	r5, r3
 8013c8e:	0553      	lsls	r3, r2, #21
 8013c90:	d531      	bpl.n	8013cf6 <__ssputs_r+0xa0>
 8013c92:	4629      	mov	r1, r5
 8013c94:	f7fe ff66 	bl	8012b64 <_malloc_r>
 8013c98:	4606      	mov	r6, r0
 8013c9a:	b950      	cbnz	r0, 8013cb2 <__ssputs_r+0x5c>
 8013c9c:	230c      	movs	r3, #12
 8013c9e:	f8ca 3000 	str.w	r3, [sl]
 8013ca2:	89a3      	ldrh	r3, [r4, #12]
 8013ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ca8:	81a3      	strh	r3, [r4, #12]
 8013caa:	f04f 30ff 	mov.w	r0, #4294967295
 8013cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013cb2:	6921      	ldr	r1, [r4, #16]
 8013cb4:	464a      	mov	r2, r9
 8013cb6:	f7fe feb9 	bl	8012a2c <memcpy>
 8013cba:	89a3      	ldrh	r3, [r4, #12]
 8013cbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cc4:	81a3      	strh	r3, [r4, #12]
 8013cc6:	6126      	str	r6, [r4, #16]
 8013cc8:	6165      	str	r5, [r4, #20]
 8013cca:	444e      	add	r6, r9
 8013ccc:	eba5 0509 	sub.w	r5, r5, r9
 8013cd0:	6026      	str	r6, [r4, #0]
 8013cd2:	60a5      	str	r5, [r4, #8]
 8013cd4:	463e      	mov	r6, r7
 8013cd6:	42be      	cmp	r6, r7
 8013cd8:	d900      	bls.n	8013cdc <__ssputs_r+0x86>
 8013cda:	463e      	mov	r6, r7
 8013cdc:	6820      	ldr	r0, [r4, #0]
 8013cde:	4632      	mov	r2, r6
 8013ce0:	4641      	mov	r1, r8
 8013ce2:	f7fe feb1 	bl	8012a48 <memmove>
 8013ce6:	68a3      	ldr	r3, [r4, #8]
 8013ce8:	1b9b      	subs	r3, r3, r6
 8013cea:	60a3      	str	r3, [r4, #8]
 8013cec:	6823      	ldr	r3, [r4, #0]
 8013cee:	4433      	add	r3, r6
 8013cf0:	6023      	str	r3, [r4, #0]
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	e7db      	b.n	8013cae <__ssputs_r+0x58>
 8013cf6:	462a      	mov	r2, r5
 8013cf8:	f7ff ff7e 	bl	8013bf8 <_realloc_r>
 8013cfc:	4606      	mov	r6, r0
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d1e1      	bne.n	8013cc6 <__ssputs_r+0x70>
 8013d02:	6921      	ldr	r1, [r4, #16]
 8013d04:	4650      	mov	r0, sl
 8013d06:	f7fe fec1 	bl	8012a8c <_free_r>
 8013d0a:	e7c7      	b.n	8013c9c <__ssputs_r+0x46>

08013d0c <_svfiprintf_r>:
 8013d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d10:	4698      	mov	r8, r3
 8013d12:	898b      	ldrh	r3, [r1, #12]
 8013d14:	061b      	lsls	r3, r3, #24
 8013d16:	b09d      	sub	sp, #116	; 0x74
 8013d18:	4607      	mov	r7, r0
 8013d1a:	460d      	mov	r5, r1
 8013d1c:	4614      	mov	r4, r2
 8013d1e:	d50e      	bpl.n	8013d3e <_svfiprintf_r+0x32>
 8013d20:	690b      	ldr	r3, [r1, #16]
 8013d22:	b963      	cbnz	r3, 8013d3e <_svfiprintf_r+0x32>
 8013d24:	2140      	movs	r1, #64	; 0x40
 8013d26:	f7fe ff1d 	bl	8012b64 <_malloc_r>
 8013d2a:	6028      	str	r0, [r5, #0]
 8013d2c:	6128      	str	r0, [r5, #16]
 8013d2e:	b920      	cbnz	r0, 8013d3a <_svfiprintf_r+0x2e>
 8013d30:	230c      	movs	r3, #12
 8013d32:	603b      	str	r3, [r7, #0]
 8013d34:	f04f 30ff 	mov.w	r0, #4294967295
 8013d38:	e0d1      	b.n	8013ede <_svfiprintf_r+0x1d2>
 8013d3a:	2340      	movs	r3, #64	; 0x40
 8013d3c:	616b      	str	r3, [r5, #20]
 8013d3e:	2300      	movs	r3, #0
 8013d40:	9309      	str	r3, [sp, #36]	; 0x24
 8013d42:	2320      	movs	r3, #32
 8013d44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d48:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d4c:	2330      	movs	r3, #48	; 0x30
 8013d4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013ef8 <_svfiprintf_r+0x1ec>
 8013d52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d56:	f04f 0901 	mov.w	r9, #1
 8013d5a:	4623      	mov	r3, r4
 8013d5c:	469a      	mov	sl, r3
 8013d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d62:	b10a      	cbz	r2, 8013d68 <_svfiprintf_r+0x5c>
 8013d64:	2a25      	cmp	r2, #37	; 0x25
 8013d66:	d1f9      	bne.n	8013d5c <_svfiprintf_r+0x50>
 8013d68:	ebba 0b04 	subs.w	fp, sl, r4
 8013d6c:	d00b      	beq.n	8013d86 <_svfiprintf_r+0x7a>
 8013d6e:	465b      	mov	r3, fp
 8013d70:	4622      	mov	r2, r4
 8013d72:	4629      	mov	r1, r5
 8013d74:	4638      	mov	r0, r7
 8013d76:	f7ff ff6e 	bl	8013c56 <__ssputs_r>
 8013d7a:	3001      	adds	r0, #1
 8013d7c:	f000 80aa 	beq.w	8013ed4 <_svfiprintf_r+0x1c8>
 8013d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013d82:	445a      	add	r2, fp
 8013d84:	9209      	str	r2, [sp, #36]	; 0x24
 8013d86:	f89a 3000 	ldrb.w	r3, [sl]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	f000 80a2 	beq.w	8013ed4 <_svfiprintf_r+0x1c8>
 8013d90:	2300      	movs	r3, #0
 8013d92:	f04f 32ff 	mov.w	r2, #4294967295
 8013d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d9a:	f10a 0a01 	add.w	sl, sl, #1
 8013d9e:	9304      	str	r3, [sp, #16]
 8013da0:	9307      	str	r3, [sp, #28]
 8013da2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013da6:	931a      	str	r3, [sp, #104]	; 0x68
 8013da8:	4654      	mov	r4, sl
 8013daa:	2205      	movs	r2, #5
 8013dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013db0:	4851      	ldr	r0, [pc, #324]	; (8013ef8 <_svfiprintf_r+0x1ec>)
 8013db2:	f7ec fa0d 	bl	80001d0 <memchr>
 8013db6:	9a04      	ldr	r2, [sp, #16]
 8013db8:	b9d8      	cbnz	r0, 8013df2 <_svfiprintf_r+0xe6>
 8013dba:	06d0      	lsls	r0, r2, #27
 8013dbc:	bf44      	itt	mi
 8013dbe:	2320      	movmi	r3, #32
 8013dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dc4:	0711      	lsls	r1, r2, #28
 8013dc6:	bf44      	itt	mi
 8013dc8:	232b      	movmi	r3, #43	; 0x2b
 8013dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013dce:	f89a 3000 	ldrb.w	r3, [sl]
 8013dd2:	2b2a      	cmp	r3, #42	; 0x2a
 8013dd4:	d015      	beq.n	8013e02 <_svfiprintf_r+0xf6>
 8013dd6:	9a07      	ldr	r2, [sp, #28]
 8013dd8:	4654      	mov	r4, sl
 8013dda:	2000      	movs	r0, #0
 8013ddc:	f04f 0c0a 	mov.w	ip, #10
 8013de0:	4621      	mov	r1, r4
 8013de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013de6:	3b30      	subs	r3, #48	; 0x30
 8013de8:	2b09      	cmp	r3, #9
 8013dea:	d94e      	bls.n	8013e8a <_svfiprintf_r+0x17e>
 8013dec:	b1b0      	cbz	r0, 8013e1c <_svfiprintf_r+0x110>
 8013dee:	9207      	str	r2, [sp, #28]
 8013df0:	e014      	b.n	8013e1c <_svfiprintf_r+0x110>
 8013df2:	eba0 0308 	sub.w	r3, r0, r8
 8013df6:	fa09 f303 	lsl.w	r3, r9, r3
 8013dfa:	4313      	orrs	r3, r2
 8013dfc:	9304      	str	r3, [sp, #16]
 8013dfe:	46a2      	mov	sl, r4
 8013e00:	e7d2      	b.n	8013da8 <_svfiprintf_r+0x9c>
 8013e02:	9b03      	ldr	r3, [sp, #12]
 8013e04:	1d19      	adds	r1, r3, #4
 8013e06:	681b      	ldr	r3, [r3, #0]
 8013e08:	9103      	str	r1, [sp, #12]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	bfbb      	ittet	lt
 8013e0e:	425b      	neglt	r3, r3
 8013e10:	f042 0202 	orrlt.w	r2, r2, #2
 8013e14:	9307      	strge	r3, [sp, #28]
 8013e16:	9307      	strlt	r3, [sp, #28]
 8013e18:	bfb8      	it	lt
 8013e1a:	9204      	strlt	r2, [sp, #16]
 8013e1c:	7823      	ldrb	r3, [r4, #0]
 8013e1e:	2b2e      	cmp	r3, #46	; 0x2e
 8013e20:	d10c      	bne.n	8013e3c <_svfiprintf_r+0x130>
 8013e22:	7863      	ldrb	r3, [r4, #1]
 8013e24:	2b2a      	cmp	r3, #42	; 0x2a
 8013e26:	d135      	bne.n	8013e94 <_svfiprintf_r+0x188>
 8013e28:	9b03      	ldr	r3, [sp, #12]
 8013e2a:	1d1a      	adds	r2, r3, #4
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	9203      	str	r2, [sp, #12]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	bfb8      	it	lt
 8013e34:	f04f 33ff 	movlt.w	r3, #4294967295
 8013e38:	3402      	adds	r4, #2
 8013e3a:	9305      	str	r3, [sp, #20]
 8013e3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013f08 <_svfiprintf_r+0x1fc>
 8013e40:	7821      	ldrb	r1, [r4, #0]
 8013e42:	2203      	movs	r2, #3
 8013e44:	4650      	mov	r0, sl
 8013e46:	f7ec f9c3 	bl	80001d0 <memchr>
 8013e4a:	b140      	cbz	r0, 8013e5e <_svfiprintf_r+0x152>
 8013e4c:	2340      	movs	r3, #64	; 0x40
 8013e4e:	eba0 000a 	sub.w	r0, r0, sl
 8013e52:	fa03 f000 	lsl.w	r0, r3, r0
 8013e56:	9b04      	ldr	r3, [sp, #16]
 8013e58:	4303      	orrs	r3, r0
 8013e5a:	3401      	adds	r4, #1
 8013e5c:	9304      	str	r3, [sp, #16]
 8013e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e62:	4826      	ldr	r0, [pc, #152]	; (8013efc <_svfiprintf_r+0x1f0>)
 8013e64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013e68:	2206      	movs	r2, #6
 8013e6a:	f7ec f9b1 	bl	80001d0 <memchr>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	d038      	beq.n	8013ee4 <_svfiprintf_r+0x1d8>
 8013e72:	4b23      	ldr	r3, [pc, #140]	; (8013f00 <_svfiprintf_r+0x1f4>)
 8013e74:	bb1b      	cbnz	r3, 8013ebe <_svfiprintf_r+0x1b2>
 8013e76:	9b03      	ldr	r3, [sp, #12]
 8013e78:	3307      	adds	r3, #7
 8013e7a:	f023 0307 	bic.w	r3, r3, #7
 8013e7e:	3308      	adds	r3, #8
 8013e80:	9303      	str	r3, [sp, #12]
 8013e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e84:	4433      	add	r3, r6
 8013e86:	9309      	str	r3, [sp, #36]	; 0x24
 8013e88:	e767      	b.n	8013d5a <_svfiprintf_r+0x4e>
 8013e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e8e:	460c      	mov	r4, r1
 8013e90:	2001      	movs	r0, #1
 8013e92:	e7a5      	b.n	8013de0 <_svfiprintf_r+0xd4>
 8013e94:	2300      	movs	r3, #0
 8013e96:	3401      	adds	r4, #1
 8013e98:	9305      	str	r3, [sp, #20]
 8013e9a:	4619      	mov	r1, r3
 8013e9c:	f04f 0c0a 	mov.w	ip, #10
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ea6:	3a30      	subs	r2, #48	; 0x30
 8013ea8:	2a09      	cmp	r2, #9
 8013eaa:	d903      	bls.n	8013eb4 <_svfiprintf_r+0x1a8>
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d0c5      	beq.n	8013e3c <_svfiprintf_r+0x130>
 8013eb0:	9105      	str	r1, [sp, #20]
 8013eb2:	e7c3      	b.n	8013e3c <_svfiprintf_r+0x130>
 8013eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8013eb8:	4604      	mov	r4, r0
 8013eba:	2301      	movs	r3, #1
 8013ebc:	e7f0      	b.n	8013ea0 <_svfiprintf_r+0x194>
 8013ebe:	ab03      	add	r3, sp, #12
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	462a      	mov	r2, r5
 8013ec4:	4b0f      	ldr	r3, [pc, #60]	; (8013f04 <_svfiprintf_r+0x1f8>)
 8013ec6:	a904      	add	r1, sp, #16
 8013ec8:	4638      	mov	r0, r7
 8013eca:	f3af 8000 	nop.w
 8013ece:	1c42      	adds	r2, r0, #1
 8013ed0:	4606      	mov	r6, r0
 8013ed2:	d1d6      	bne.n	8013e82 <_svfiprintf_r+0x176>
 8013ed4:	89ab      	ldrh	r3, [r5, #12]
 8013ed6:	065b      	lsls	r3, r3, #25
 8013ed8:	f53f af2c 	bmi.w	8013d34 <_svfiprintf_r+0x28>
 8013edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ede:	b01d      	add	sp, #116	; 0x74
 8013ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ee4:	ab03      	add	r3, sp, #12
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	462a      	mov	r2, r5
 8013eea:	4b06      	ldr	r3, [pc, #24]	; (8013f04 <_svfiprintf_r+0x1f8>)
 8013eec:	a904      	add	r1, sp, #16
 8013eee:	4638      	mov	r0, r7
 8013ef0:	f7ff f874 	bl	8012fdc <_printf_i>
 8013ef4:	e7eb      	b.n	8013ece <_svfiprintf_r+0x1c2>
 8013ef6:	bf00      	nop
 8013ef8:	08016280 	.word	0x08016280
 8013efc:	0801628a 	.word	0x0801628a
 8013f00:	00000000 	.word	0x00000000
 8013f04:	08013c57 	.word	0x08013c57
 8013f08:	08016286 	.word	0x08016286

08013f0c <_sungetc_r>:
 8013f0c:	b538      	push	{r3, r4, r5, lr}
 8013f0e:	1c4b      	adds	r3, r1, #1
 8013f10:	4614      	mov	r4, r2
 8013f12:	d103      	bne.n	8013f1c <_sungetc_r+0x10>
 8013f14:	f04f 35ff 	mov.w	r5, #4294967295
 8013f18:	4628      	mov	r0, r5
 8013f1a:	bd38      	pop	{r3, r4, r5, pc}
 8013f1c:	8993      	ldrh	r3, [r2, #12]
 8013f1e:	f023 0320 	bic.w	r3, r3, #32
 8013f22:	8193      	strh	r3, [r2, #12]
 8013f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f26:	6852      	ldr	r2, [r2, #4]
 8013f28:	b2cd      	uxtb	r5, r1
 8013f2a:	b18b      	cbz	r3, 8013f50 <_sungetc_r+0x44>
 8013f2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013f2e:	4293      	cmp	r3, r2
 8013f30:	dd08      	ble.n	8013f44 <_sungetc_r+0x38>
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	1e5a      	subs	r2, r3, #1
 8013f36:	6022      	str	r2, [r4, #0]
 8013f38:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013f3c:	6863      	ldr	r3, [r4, #4]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	6063      	str	r3, [r4, #4]
 8013f42:	e7e9      	b.n	8013f18 <_sungetc_r+0xc>
 8013f44:	4621      	mov	r1, r4
 8013f46:	f000 fc47 	bl	80147d8 <__submore>
 8013f4a:	2800      	cmp	r0, #0
 8013f4c:	d0f1      	beq.n	8013f32 <_sungetc_r+0x26>
 8013f4e:	e7e1      	b.n	8013f14 <_sungetc_r+0x8>
 8013f50:	6921      	ldr	r1, [r4, #16]
 8013f52:	6823      	ldr	r3, [r4, #0]
 8013f54:	b151      	cbz	r1, 8013f6c <_sungetc_r+0x60>
 8013f56:	4299      	cmp	r1, r3
 8013f58:	d208      	bcs.n	8013f6c <_sungetc_r+0x60>
 8013f5a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8013f5e:	42a9      	cmp	r1, r5
 8013f60:	d104      	bne.n	8013f6c <_sungetc_r+0x60>
 8013f62:	3b01      	subs	r3, #1
 8013f64:	3201      	adds	r2, #1
 8013f66:	6023      	str	r3, [r4, #0]
 8013f68:	6062      	str	r2, [r4, #4]
 8013f6a:	e7d5      	b.n	8013f18 <_sungetc_r+0xc>
 8013f6c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8013f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f74:	6363      	str	r3, [r4, #52]	; 0x34
 8013f76:	2303      	movs	r3, #3
 8013f78:	63a3      	str	r3, [r4, #56]	; 0x38
 8013f7a:	4623      	mov	r3, r4
 8013f7c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f80:	6023      	str	r3, [r4, #0]
 8013f82:	2301      	movs	r3, #1
 8013f84:	e7dc      	b.n	8013f40 <_sungetc_r+0x34>

08013f86 <__ssrefill_r>:
 8013f86:	b510      	push	{r4, lr}
 8013f88:	460c      	mov	r4, r1
 8013f8a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8013f8c:	b169      	cbz	r1, 8013faa <__ssrefill_r+0x24>
 8013f8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013f92:	4299      	cmp	r1, r3
 8013f94:	d001      	beq.n	8013f9a <__ssrefill_r+0x14>
 8013f96:	f7fe fd79 	bl	8012a8c <_free_r>
 8013f9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f9c:	6063      	str	r3, [r4, #4]
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	6360      	str	r0, [r4, #52]	; 0x34
 8013fa2:	b113      	cbz	r3, 8013faa <__ssrefill_r+0x24>
 8013fa4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013fa6:	6023      	str	r3, [r4, #0]
 8013fa8:	bd10      	pop	{r4, pc}
 8013faa:	6923      	ldr	r3, [r4, #16]
 8013fac:	6023      	str	r3, [r4, #0]
 8013fae:	2300      	movs	r3, #0
 8013fb0:	6063      	str	r3, [r4, #4]
 8013fb2:	89a3      	ldrh	r3, [r4, #12]
 8013fb4:	f043 0320 	orr.w	r3, r3, #32
 8013fb8:	81a3      	strh	r3, [r4, #12]
 8013fba:	f04f 30ff 	mov.w	r0, #4294967295
 8013fbe:	e7f3      	b.n	8013fa8 <__ssrefill_r+0x22>

08013fc0 <__ssvfiscanf_r>:
 8013fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fc4:	460c      	mov	r4, r1
 8013fc6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013fca:	2100      	movs	r1, #0
 8013fcc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8013fd0:	49a6      	ldr	r1, [pc, #664]	; (801426c <__ssvfiscanf_r+0x2ac>)
 8013fd2:	91a0      	str	r1, [sp, #640]	; 0x280
 8013fd4:	f10d 0804 	add.w	r8, sp, #4
 8013fd8:	49a5      	ldr	r1, [pc, #660]	; (8014270 <__ssvfiscanf_r+0x2b0>)
 8013fda:	4fa6      	ldr	r7, [pc, #664]	; (8014274 <__ssvfiscanf_r+0x2b4>)
 8013fdc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014278 <__ssvfiscanf_r+0x2b8>
 8013fe0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8013fe4:	4606      	mov	r6, r0
 8013fe6:	91a1      	str	r1, [sp, #644]	; 0x284
 8013fe8:	9300      	str	r3, [sp, #0]
 8013fea:	7813      	ldrb	r3, [r2, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	f000 815a 	beq.w	80142a6 <__ssvfiscanf_r+0x2e6>
 8013ff2:	5dd9      	ldrb	r1, [r3, r7]
 8013ff4:	f011 0108 	ands.w	r1, r1, #8
 8013ff8:	f102 0501 	add.w	r5, r2, #1
 8013ffc:	d019      	beq.n	8014032 <__ssvfiscanf_r+0x72>
 8013ffe:	6863      	ldr	r3, [r4, #4]
 8014000:	2b00      	cmp	r3, #0
 8014002:	dd0f      	ble.n	8014024 <__ssvfiscanf_r+0x64>
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	781a      	ldrb	r2, [r3, #0]
 8014008:	5cba      	ldrb	r2, [r7, r2]
 801400a:	0712      	lsls	r2, r2, #28
 801400c:	d401      	bmi.n	8014012 <__ssvfiscanf_r+0x52>
 801400e:	462a      	mov	r2, r5
 8014010:	e7eb      	b.n	8013fea <__ssvfiscanf_r+0x2a>
 8014012:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014014:	3201      	adds	r2, #1
 8014016:	9245      	str	r2, [sp, #276]	; 0x114
 8014018:	6862      	ldr	r2, [r4, #4]
 801401a:	3301      	adds	r3, #1
 801401c:	3a01      	subs	r2, #1
 801401e:	6062      	str	r2, [r4, #4]
 8014020:	6023      	str	r3, [r4, #0]
 8014022:	e7ec      	b.n	8013ffe <__ssvfiscanf_r+0x3e>
 8014024:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014026:	4621      	mov	r1, r4
 8014028:	4630      	mov	r0, r6
 801402a:	4798      	blx	r3
 801402c:	2800      	cmp	r0, #0
 801402e:	d0e9      	beq.n	8014004 <__ssvfiscanf_r+0x44>
 8014030:	e7ed      	b.n	801400e <__ssvfiscanf_r+0x4e>
 8014032:	2b25      	cmp	r3, #37	; 0x25
 8014034:	d012      	beq.n	801405c <__ssvfiscanf_r+0x9c>
 8014036:	469a      	mov	sl, r3
 8014038:	6863      	ldr	r3, [r4, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	f340 8091 	ble.w	8014162 <__ssvfiscanf_r+0x1a2>
 8014040:	6822      	ldr	r2, [r4, #0]
 8014042:	7813      	ldrb	r3, [r2, #0]
 8014044:	4553      	cmp	r3, sl
 8014046:	f040 812e 	bne.w	80142a6 <__ssvfiscanf_r+0x2e6>
 801404a:	6863      	ldr	r3, [r4, #4]
 801404c:	3b01      	subs	r3, #1
 801404e:	6063      	str	r3, [r4, #4]
 8014050:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014052:	3201      	adds	r2, #1
 8014054:	3301      	adds	r3, #1
 8014056:	6022      	str	r2, [r4, #0]
 8014058:	9345      	str	r3, [sp, #276]	; 0x114
 801405a:	e7d8      	b.n	801400e <__ssvfiscanf_r+0x4e>
 801405c:	9141      	str	r1, [sp, #260]	; 0x104
 801405e:	9143      	str	r1, [sp, #268]	; 0x10c
 8014060:	7853      	ldrb	r3, [r2, #1]
 8014062:	2b2a      	cmp	r3, #42	; 0x2a
 8014064:	bf02      	ittt	eq
 8014066:	2310      	moveq	r3, #16
 8014068:	1c95      	addeq	r5, r2, #2
 801406a:	9341      	streq	r3, [sp, #260]	; 0x104
 801406c:	220a      	movs	r2, #10
 801406e:	46aa      	mov	sl, r5
 8014070:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014074:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014078:	2b09      	cmp	r3, #9
 801407a:	d91d      	bls.n	80140b8 <__ssvfiscanf_r+0xf8>
 801407c:	487e      	ldr	r0, [pc, #504]	; (8014278 <__ssvfiscanf_r+0x2b8>)
 801407e:	2203      	movs	r2, #3
 8014080:	f7ec f8a6 	bl	80001d0 <memchr>
 8014084:	b140      	cbz	r0, 8014098 <__ssvfiscanf_r+0xd8>
 8014086:	2301      	movs	r3, #1
 8014088:	eba0 0009 	sub.w	r0, r0, r9
 801408c:	fa03 f000 	lsl.w	r0, r3, r0
 8014090:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014092:	4318      	orrs	r0, r3
 8014094:	9041      	str	r0, [sp, #260]	; 0x104
 8014096:	4655      	mov	r5, sl
 8014098:	f815 3b01 	ldrb.w	r3, [r5], #1
 801409c:	2b78      	cmp	r3, #120	; 0x78
 801409e:	d806      	bhi.n	80140ae <__ssvfiscanf_r+0xee>
 80140a0:	2b57      	cmp	r3, #87	; 0x57
 80140a2:	d810      	bhi.n	80140c6 <__ssvfiscanf_r+0x106>
 80140a4:	2b25      	cmp	r3, #37	; 0x25
 80140a6:	d0c6      	beq.n	8014036 <__ssvfiscanf_r+0x76>
 80140a8:	d856      	bhi.n	8014158 <__ssvfiscanf_r+0x198>
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d064      	beq.n	8014178 <__ssvfiscanf_r+0x1b8>
 80140ae:	2303      	movs	r3, #3
 80140b0:	9347      	str	r3, [sp, #284]	; 0x11c
 80140b2:	230a      	movs	r3, #10
 80140b4:	9342      	str	r3, [sp, #264]	; 0x108
 80140b6:	e071      	b.n	801419c <__ssvfiscanf_r+0x1dc>
 80140b8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80140ba:	fb02 1103 	mla	r1, r2, r3, r1
 80140be:	3930      	subs	r1, #48	; 0x30
 80140c0:	9143      	str	r1, [sp, #268]	; 0x10c
 80140c2:	4655      	mov	r5, sl
 80140c4:	e7d3      	b.n	801406e <__ssvfiscanf_r+0xae>
 80140c6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80140ca:	2a20      	cmp	r2, #32
 80140cc:	d8ef      	bhi.n	80140ae <__ssvfiscanf_r+0xee>
 80140ce:	a101      	add	r1, pc, #4	; (adr r1, 80140d4 <__ssvfiscanf_r+0x114>)
 80140d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80140d4:	08014187 	.word	0x08014187
 80140d8:	080140af 	.word	0x080140af
 80140dc:	080140af 	.word	0x080140af
 80140e0:	080141e5 	.word	0x080141e5
 80140e4:	080140af 	.word	0x080140af
 80140e8:	080140af 	.word	0x080140af
 80140ec:	080140af 	.word	0x080140af
 80140f0:	080140af 	.word	0x080140af
 80140f4:	080140af 	.word	0x080140af
 80140f8:	080140af 	.word	0x080140af
 80140fc:	080140af 	.word	0x080140af
 8014100:	080141fb 	.word	0x080141fb
 8014104:	080141d1 	.word	0x080141d1
 8014108:	0801415f 	.word	0x0801415f
 801410c:	0801415f 	.word	0x0801415f
 8014110:	0801415f 	.word	0x0801415f
 8014114:	080140af 	.word	0x080140af
 8014118:	080141d5 	.word	0x080141d5
 801411c:	080140af 	.word	0x080140af
 8014120:	080140af 	.word	0x080140af
 8014124:	080140af 	.word	0x080140af
 8014128:	080140af 	.word	0x080140af
 801412c:	0801420b 	.word	0x0801420b
 8014130:	080141dd 	.word	0x080141dd
 8014134:	0801417f 	.word	0x0801417f
 8014138:	080140af 	.word	0x080140af
 801413c:	080140af 	.word	0x080140af
 8014140:	08014207 	.word	0x08014207
 8014144:	080140af 	.word	0x080140af
 8014148:	080141d1 	.word	0x080141d1
 801414c:	080140af 	.word	0x080140af
 8014150:	080140af 	.word	0x080140af
 8014154:	08014187 	.word	0x08014187
 8014158:	3b45      	subs	r3, #69	; 0x45
 801415a:	2b02      	cmp	r3, #2
 801415c:	d8a7      	bhi.n	80140ae <__ssvfiscanf_r+0xee>
 801415e:	2305      	movs	r3, #5
 8014160:	e01b      	b.n	801419a <__ssvfiscanf_r+0x1da>
 8014162:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014164:	4621      	mov	r1, r4
 8014166:	4630      	mov	r0, r6
 8014168:	4798      	blx	r3
 801416a:	2800      	cmp	r0, #0
 801416c:	f43f af68 	beq.w	8014040 <__ssvfiscanf_r+0x80>
 8014170:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014172:	2800      	cmp	r0, #0
 8014174:	f040 808d 	bne.w	8014292 <__ssvfiscanf_r+0x2d2>
 8014178:	f04f 30ff 	mov.w	r0, #4294967295
 801417c:	e08f      	b.n	801429e <__ssvfiscanf_r+0x2de>
 801417e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014180:	f042 0220 	orr.w	r2, r2, #32
 8014184:	9241      	str	r2, [sp, #260]	; 0x104
 8014186:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801418c:	9241      	str	r2, [sp, #260]	; 0x104
 801418e:	2210      	movs	r2, #16
 8014190:	2b6f      	cmp	r3, #111	; 0x6f
 8014192:	9242      	str	r2, [sp, #264]	; 0x108
 8014194:	bf34      	ite	cc
 8014196:	2303      	movcc	r3, #3
 8014198:	2304      	movcs	r3, #4
 801419a:	9347      	str	r3, [sp, #284]	; 0x11c
 801419c:	6863      	ldr	r3, [r4, #4]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	dd42      	ble.n	8014228 <__ssvfiscanf_r+0x268>
 80141a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80141a4:	0659      	lsls	r1, r3, #25
 80141a6:	d404      	bmi.n	80141b2 <__ssvfiscanf_r+0x1f2>
 80141a8:	6823      	ldr	r3, [r4, #0]
 80141aa:	781a      	ldrb	r2, [r3, #0]
 80141ac:	5cba      	ldrb	r2, [r7, r2]
 80141ae:	0712      	lsls	r2, r2, #28
 80141b0:	d441      	bmi.n	8014236 <__ssvfiscanf_r+0x276>
 80141b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80141b4:	2b02      	cmp	r3, #2
 80141b6:	dc50      	bgt.n	801425a <__ssvfiscanf_r+0x29a>
 80141b8:	466b      	mov	r3, sp
 80141ba:	4622      	mov	r2, r4
 80141bc:	a941      	add	r1, sp, #260	; 0x104
 80141be:	4630      	mov	r0, r6
 80141c0:	f000 f876 	bl	80142b0 <_scanf_chars>
 80141c4:	2801      	cmp	r0, #1
 80141c6:	d06e      	beq.n	80142a6 <__ssvfiscanf_r+0x2e6>
 80141c8:	2802      	cmp	r0, #2
 80141ca:	f47f af20 	bne.w	801400e <__ssvfiscanf_r+0x4e>
 80141ce:	e7cf      	b.n	8014170 <__ssvfiscanf_r+0x1b0>
 80141d0:	220a      	movs	r2, #10
 80141d2:	e7dd      	b.n	8014190 <__ssvfiscanf_r+0x1d0>
 80141d4:	2300      	movs	r3, #0
 80141d6:	9342      	str	r3, [sp, #264]	; 0x108
 80141d8:	2303      	movs	r3, #3
 80141da:	e7de      	b.n	801419a <__ssvfiscanf_r+0x1da>
 80141dc:	2308      	movs	r3, #8
 80141de:	9342      	str	r3, [sp, #264]	; 0x108
 80141e0:	2304      	movs	r3, #4
 80141e2:	e7da      	b.n	801419a <__ssvfiscanf_r+0x1da>
 80141e4:	4629      	mov	r1, r5
 80141e6:	4640      	mov	r0, r8
 80141e8:	f000 f9c6 	bl	8014578 <__sccl>
 80141ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80141ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141f2:	9341      	str	r3, [sp, #260]	; 0x104
 80141f4:	4605      	mov	r5, r0
 80141f6:	2301      	movs	r3, #1
 80141f8:	e7cf      	b.n	801419a <__ssvfiscanf_r+0x1da>
 80141fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80141fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014200:	9341      	str	r3, [sp, #260]	; 0x104
 8014202:	2300      	movs	r3, #0
 8014204:	e7c9      	b.n	801419a <__ssvfiscanf_r+0x1da>
 8014206:	2302      	movs	r3, #2
 8014208:	e7c7      	b.n	801419a <__ssvfiscanf_r+0x1da>
 801420a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801420c:	06c3      	lsls	r3, r0, #27
 801420e:	f53f aefe 	bmi.w	801400e <__ssvfiscanf_r+0x4e>
 8014212:	9b00      	ldr	r3, [sp, #0]
 8014214:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014216:	1d19      	adds	r1, r3, #4
 8014218:	9100      	str	r1, [sp, #0]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	f010 0f01 	tst.w	r0, #1
 8014220:	bf14      	ite	ne
 8014222:	801a      	strhne	r2, [r3, #0]
 8014224:	601a      	streq	r2, [r3, #0]
 8014226:	e6f2      	b.n	801400e <__ssvfiscanf_r+0x4e>
 8014228:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801422a:	4621      	mov	r1, r4
 801422c:	4630      	mov	r0, r6
 801422e:	4798      	blx	r3
 8014230:	2800      	cmp	r0, #0
 8014232:	d0b6      	beq.n	80141a2 <__ssvfiscanf_r+0x1e2>
 8014234:	e79c      	b.n	8014170 <__ssvfiscanf_r+0x1b0>
 8014236:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8014238:	3201      	adds	r2, #1
 801423a:	9245      	str	r2, [sp, #276]	; 0x114
 801423c:	6862      	ldr	r2, [r4, #4]
 801423e:	3a01      	subs	r2, #1
 8014240:	2a00      	cmp	r2, #0
 8014242:	6062      	str	r2, [r4, #4]
 8014244:	dd02      	ble.n	801424c <__ssvfiscanf_r+0x28c>
 8014246:	3301      	adds	r3, #1
 8014248:	6023      	str	r3, [r4, #0]
 801424a:	e7ad      	b.n	80141a8 <__ssvfiscanf_r+0x1e8>
 801424c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801424e:	4621      	mov	r1, r4
 8014250:	4630      	mov	r0, r6
 8014252:	4798      	blx	r3
 8014254:	2800      	cmp	r0, #0
 8014256:	d0a7      	beq.n	80141a8 <__ssvfiscanf_r+0x1e8>
 8014258:	e78a      	b.n	8014170 <__ssvfiscanf_r+0x1b0>
 801425a:	2b04      	cmp	r3, #4
 801425c:	dc0e      	bgt.n	801427c <__ssvfiscanf_r+0x2bc>
 801425e:	466b      	mov	r3, sp
 8014260:	4622      	mov	r2, r4
 8014262:	a941      	add	r1, sp, #260	; 0x104
 8014264:	4630      	mov	r0, r6
 8014266:	f000 f87d 	bl	8014364 <_scanf_i>
 801426a:	e7ab      	b.n	80141c4 <__ssvfiscanf_r+0x204>
 801426c:	08013f0d 	.word	0x08013f0d
 8014270:	08013f87 	.word	0x08013f87
 8014274:	08016330 	.word	0x08016330
 8014278:	08016286 	.word	0x08016286
 801427c:	4b0b      	ldr	r3, [pc, #44]	; (80142ac <__ssvfiscanf_r+0x2ec>)
 801427e:	2b00      	cmp	r3, #0
 8014280:	f43f aec5 	beq.w	801400e <__ssvfiscanf_r+0x4e>
 8014284:	466b      	mov	r3, sp
 8014286:	4622      	mov	r2, r4
 8014288:	a941      	add	r1, sp, #260	; 0x104
 801428a:	4630      	mov	r0, r6
 801428c:	f3af 8000 	nop.w
 8014290:	e798      	b.n	80141c4 <__ssvfiscanf_r+0x204>
 8014292:	89a3      	ldrh	r3, [r4, #12]
 8014294:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014298:	bf18      	it	ne
 801429a:	f04f 30ff 	movne.w	r0, #4294967295
 801429e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80142a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142a6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80142a8:	e7f9      	b.n	801429e <__ssvfiscanf_r+0x2de>
 80142aa:	bf00      	nop
 80142ac:	00000000 	.word	0x00000000

080142b0 <_scanf_chars>:
 80142b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142b4:	4615      	mov	r5, r2
 80142b6:	688a      	ldr	r2, [r1, #8]
 80142b8:	4680      	mov	r8, r0
 80142ba:	460c      	mov	r4, r1
 80142bc:	b932      	cbnz	r2, 80142cc <_scanf_chars+0x1c>
 80142be:	698a      	ldr	r2, [r1, #24]
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	bf0c      	ite	eq
 80142c4:	2201      	moveq	r2, #1
 80142c6:	f04f 32ff 	movne.w	r2, #4294967295
 80142ca:	608a      	str	r2, [r1, #8]
 80142cc:	6822      	ldr	r2, [r4, #0]
 80142ce:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014360 <_scanf_chars+0xb0>
 80142d2:	06d1      	lsls	r1, r2, #27
 80142d4:	bf5f      	itttt	pl
 80142d6:	681a      	ldrpl	r2, [r3, #0]
 80142d8:	1d11      	addpl	r1, r2, #4
 80142da:	6019      	strpl	r1, [r3, #0]
 80142dc:	6816      	ldrpl	r6, [r2, #0]
 80142de:	2700      	movs	r7, #0
 80142e0:	69a0      	ldr	r0, [r4, #24]
 80142e2:	b188      	cbz	r0, 8014308 <_scanf_chars+0x58>
 80142e4:	2801      	cmp	r0, #1
 80142e6:	d107      	bne.n	80142f8 <_scanf_chars+0x48>
 80142e8:	682a      	ldr	r2, [r5, #0]
 80142ea:	7811      	ldrb	r1, [r2, #0]
 80142ec:	6962      	ldr	r2, [r4, #20]
 80142ee:	5c52      	ldrb	r2, [r2, r1]
 80142f0:	b952      	cbnz	r2, 8014308 <_scanf_chars+0x58>
 80142f2:	2f00      	cmp	r7, #0
 80142f4:	d031      	beq.n	801435a <_scanf_chars+0xaa>
 80142f6:	e022      	b.n	801433e <_scanf_chars+0x8e>
 80142f8:	2802      	cmp	r0, #2
 80142fa:	d120      	bne.n	801433e <_scanf_chars+0x8e>
 80142fc:	682b      	ldr	r3, [r5, #0]
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	f813 3009 	ldrb.w	r3, [r3, r9]
 8014304:	071b      	lsls	r3, r3, #28
 8014306:	d41a      	bmi.n	801433e <_scanf_chars+0x8e>
 8014308:	6823      	ldr	r3, [r4, #0]
 801430a:	06da      	lsls	r2, r3, #27
 801430c:	bf5e      	ittt	pl
 801430e:	682b      	ldrpl	r3, [r5, #0]
 8014310:	781b      	ldrbpl	r3, [r3, #0]
 8014312:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014316:	682a      	ldr	r2, [r5, #0]
 8014318:	686b      	ldr	r3, [r5, #4]
 801431a:	3201      	adds	r2, #1
 801431c:	602a      	str	r2, [r5, #0]
 801431e:	68a2      	ldr	r2, [r4, #8]
 8014320:	3b01      	subs	r3, #1
 8014322:	3a01      	subs	r2, #1
 8014324:	606b      	str	r3, [r5, #4]
 8014326:	3701      	adds	r7, #1
 8014328:	60a2      	str	r2, [r4, #8]
 801432a:	b142      	cbz	r2, 801433e <_scanf_chars+0x8e>
 801432c:	2b00      	cmp	r3, #0
 801432e:	dcd7      	bgt.n	80142e0 <_scanf_chars+0x30>
 8014330:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014334:	4629      	mov	r1, r5
 8014336:	4640      	mov	r0, r8
 8014338:	4798      	blx	r3
 801433a:	2800      	cmp	r0, #0
 801433c:	d0d0      	beq.n	80142e0 <_scanf_chars+0x30>
 801433e:	6823      	ldr	r3, [r4, #0]
 8014340:	f013 0310 	ands.w	r3, r3, #16
 8014344:	d105      	bne.n	8014352 <_scanf_chars+0xa2>
 8014346:	68e2      	ldr	r2, [r4, #12]
 8014348:	3201      	adds	r2, #1
 801434a:	60e2      	str	r2, [r4, #12]
 801434c:	69a2      	ldr	r2, [r4, #24]
 801434e:	b102      	cbz	r2, 8014352 <_scanf_chars+0xa2>
 8014350:	7033      	strb	r3, [r6, #0]
 8014352:	6923      	ldr	r3, [r4, #16]
 8014354:	443b      	add	r3, r7
 8014356:	6123      	str	r3, [r4, #16]
 8014358:	2000      	movs	r0, #0
 801435a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801435e:	bf00      	nop
 8014360:	08016330 	.word	0x08016330

08014364 <_scanf_i>:
 8014364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014368:	4698      	mov	r8, r3
 801436a:	4b76      	ldr	r3, [pc, #472]	; (8014544 <_scanf_i+0x1e0>)
 801436c:	460c      	mov	r4, r1
 801436e:	4682      	mov	sl, r0
 8014370:	4616      	mov	r6, r2
 8014372:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014376:	b087      	sub	sp, #28
 8014378:	ab03      	add	r3, sp, #12
 801437a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801437e:	4b72      	ldr	r3, [pc, #456]	; (8014548 <_scanf_i+0x1e4>)
 8014380:	69a1      	ldr	r1, [r4, #24]
 8014382:	4a72      	ldr	r2, [pc, #456]	; (801454c <_scanf_i+0x1e8>)
 8014384:	2903      	cmp	r1, #3
 8014386:	bf18      	it	ne
 8014388:	461a      	movne	r2, r3
 801438a:	68a3      	ldr	r3, [r4, #8]
 801438c:	9201      	str	r2, [sp, #4]
 801438e:	1e5a      	subs	r2, r3, #1
 8014390:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014394:	bf88      	it	hi
 8014396:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801439a:	4627      	mov	r7, r4
 801439c:	bf82      	ittt	hi
 801439e:	eb03 0905 	addhi.w	r9, r3, r5
 80143a2:	f240 135d 	movwhi	r3, #349	; 0x15d
 80143a6:	60a3      	strhi	r3, [r4, #8]
 80143a8:	f857 3b1c 	ldr.w	r3, [r7], #28
 80143ac:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80143b0:	bf98      	it	ls
 80143b2:	f04f 0900 	movls.w	r9, #0
 80143b6:	6023      	str	r3, [r4, #0]
 80143b8:	463d      	mov	r5, r7
 80143ba:	f04f 0b00 	mov.w	fp, #0
 80143be:	6831      	ldr	r1, [r6, #0]
 80143c0:	ab03      	add	r3, sp, #12
 80143c2:	7809      	ldrb	r1, [r1, #0]
 80143c4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80143c8:	2202      	movs	r2, #2
 80143ca:	f7eb ff01 	bl	80001d0 <memchr>
 80143ce:	b328      	cbz	r0, 801441c <_scanf_i+0xb8>
 80143d0:	f1bb 0f01 	cmp.w	fp, #1
 80143d4:	d159      	bne.n	801448a <_scanf_i+0x126>
 80143d6:	6862      	ldr	r2, [r4, #4]
 80143d8:	b92a      	cbnz	r2, 80143e6 <_scanf_i+0x82>
 80143da:	6822      	ldr	r2, [r4, #0]
 80143dc:	2308      	movs	r3, #8
 80143de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80143e2:	6063      	str	r3, [r4, #4]
 80143e4:	6022      	str	r2, [r4, #0]
 80143e6:	6822      	ldr	r2, [r4, #0]
 80143e8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80143ec:	6022      	str	r2, [r4, #0]
 80143ee:	68a2      	ldr	r2, [r4, #8]
 80143f0:	1e51      	subs	r1, r2, #1
 80143f2:	60a1      	str	r1, [r4, #8]
 80143f4:	b192      	cbz	r2, 801441c <_scanf_i+0xb8>
 80143f6:	6832      	ldr	r2, [r6, #0]
 80143f8:	1c51      	adds	r1, r2, #1
 80143fa:	6031      	str	r1, [r6, #0]
 80143fc:	7812      	ldrb	r2, [r2, #0]
 80143fe:	f805 2b01 	strb.w	r2, [r5], #1
 8014402:	6872      	ldr	r2, [r6, #4]
 8014404:	3a01      	subs	r2, #1
 8014406:	2a00      	cmp	r2, #0
 8014408:	6072      	str	r2, [r6, #4]
 801440a:	dc07      	bgt.n	801441c <_scanf_i+0xb8>
 801440c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8014410:	4631      	mov	r1, r6
 8014412:	4650      	mov	r0, sl
 8014414:	4790      	blx	r2
 8014416:	2800      	cmp	r0, #0
 8014418:	f040 8085 	bne.w	8014526 <_scanf_i+0x1c2>
 801441c:	f10b 0b01 	add.w	fp, fp, #1
 8014420:	f1bb 0f03 	cmp.w	fp, #3
 8014424:	d1cb      	bne.n	80143be <_scanf_i+0x5a>
 8014426:	6863      	ldr	r3, [r4, #4]
 8014428:	b90b      	cbnz	r3, 801442e <_scanf_i+0xca>
 801442a:	230a      	movs	r3, #10
 801442c:	6063      	str	r3, [r4, #4]
 801442e:	6863      	ldr	r3, [r4, #4]
 8014430:	4947      	ldr	r1, [pc, #284]	; (8014550 <_scanf_i+0x1ec>)
 8014432:	6960      	ldr	r0, [r4, #20]
 8014434:	1ac9      	subs	r1, r1, r3
 8014436:	f000 f89f 	bl	8014578 <__sccl>
 801443a:	f04f 0b00 	mov.w	fp, #0
 801443e:	68a3      	ldr	r3, [r4, #8]
 8014440:	6822      	ldr	r2, [r4, #0]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d03d      	beq.n	80144c2 <_scanf_i+0x15e>
 8014446:	6831      	ldr	r1, [r6, #0]
 8014448:	6960      	ldr	r0, [r4, #20]
 801444a:	f891 c000 	ldrb.w	ip, [r1]
 801444e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014452:	2800      	cmp	r0, #0
 8014454:	d035      	beq.n	80144c2 <_scanf_i+0x15e>
 8014456:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801445a:	d124      	bne.n	80144a6 <_scanf_i+0x142>
 801445c:	0510      	lsls	r0, r2, #20
 801445e:	d522      	bpl.n	80144a6 <_scanf_i+0x142>
 8014460:	f10b 0b01 	add.w	fp, fp, #1
 8014464:	f1b9 0f00 	cmp.w	r9, #0
 8014468:	d003      	beq.n	8014472 <_scanf_i+0x10e>
 801446a:	3301      	adds	r3, #1
 801446c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014470:	60a3      	str	r3, [r4, #8]
 8014472:	6873      	ldr	r3, [r6, #4]
 8014474:	3b01      	subs	r3, #1
 8014476:	2b00      	cmp	r3, #0
 8014478:	6073      	str	r3, [r6, #4]
 801447a:	dd1b      	ble.n	80144b4 <_scanf_i+0x150>
 801447c:	6833      	ldr	r3, [r6, #0]
 801447e:	3301      	adds	r3, #1
 8014480:	6033      	str	r3, [r6, #0]
 8014482:	68a3      	ldr	r3, [r4, #8]
 8014484:	3b01      	subs	r3, #1
 8014486:	60a3      	str	r3, [r4, #8]
 8014488:	e7d9      	b.n	801443e <_scanf_i+0xda>
 801448a:	f1bb 0f02 	cmp.w	fp, #2
 801448e:	d1ae      	bne.n	80143ee <_scanf_i+0x8a>
 8014490:	6822      	ldr	r2, [r4, #0]
 8014492:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014496:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801449a:	d1bf      	bne.n	801441c <_scanf_i+0xb8>
 801449c:	2310      	movs	r3, #16
 801449e:	6063      	str	r3, [r4, #4]
 80144a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80144a4:	e7a2      	b.n	80143ec <_scanf_i+0x88>
 80144a6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80144aa:	6022      	str	r2, [r4, #0]
 80144ac:	780b      	ldrb	r3, [r1, #0]
 80144ae:	f805 3b01 	strb.w	r3, [r5], #1
 80144b2:	e7de      	b.n	8014472 <_scanf_i+0x10e>
 80144b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80144b8:	4631      	mov	r1, r6
 80144ba:	4650      	mov	r0, sl
 80144bc:	4798      	blx	r3
 80144be:	2800      	cmp	r0, #0
 80144c0:	d0df      	beq.n	8014482 <_scanf_i+0x11e>
 80144c2:	6823      	ldr	r3, [r4, #0]
 80144c4:	05db      	lsls	r3, r3, #23
 80144c6:	d50d      	bpl.n	80144e4 <_scanf_i+0x180>
 80144c8:	42bd      	cmp	r5, r7
 80144ca:	d909      	bls.n	80144e0 <_scanf_i+0x17c>
 80144cc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80144d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80144d4:	4632      	mov	r2, r6
 80144d6:	4650      	mov	r0, sl
 80144d8:	4798      	blx	r3
 80144da:	f105 39ff 	add.w	r9, r5, #4294967295
 80144de:	464d      	mov	r5, r9
 80144e0:	42bd      	cmp	r5, r7
 80144e2:	d02d      	beq.n	8014540 <_scanf_i+0x1dc>
 80144e4:	6822      	ldr	r2, [r4, #0]
 80144e6:	f012 0210 	ands.w	r2, r2, #16
 80144ea:	d113      	bne.n	8014514 <_scanf_i+0x1b0>
 80144ec:	702a      	strb	r2, [r5, #0]
 80144ee:	6863      	ldr	r3, [r4, #4]
 80144f0:	9e01      	ldr	r6, [sp, #4]
 80144f2:	4639      	mov	r1, r7
 80144f4:	4650      	mov	r0, sl
 80144f6:	47b0      	blx	r6
 80144f8:	6821      	ldr	r1, [r4, #0]
 80144fa:	f8d8 3000 	ldr.w	r3, [r8]
 80144fe:	f011 0f20 	tst.w	r1, #32
 8014502:	d013      	beq.n	801452c <_scanf_i+0x1c8>
 8014504:	1d1a      	adds	r2, r3, #4
 8014506:	f8c8 2000 	str.w	r2, [r8]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	6018      	str	r0, [r3, #0]
 801450e:	68e3      	ldr	r3, [r4, #12]
 8014510:	3301      	adds	r3, #1
 8014512:	60e3      	str	r3, [r4, #12]
 8014514:	1bed      	subs	r5, r5, r7
 8014516:	44ab      	add	fp, r5
 8014518:	6925      	ldr	r5, [r4, #16]
 801451a:	445d      	add	r5, fp
 801451c:	6125      	str	r5, [r4, #16]
 801451e:	2000      	movs	r0, #0
 8014520:	b007      	add	sp, #28
 8014522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014526:	f04f 0b00 	mov.w	fp, #0
 801452a:	e7ca      	b.n	80144c2 <_scanf_i+0x15e>
 801452c:	1d1a      	adds	r2, r3, #4
 801452e:	f8c8 2000 	str.w	r2, [r8]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	f011 0f01 	tst.w	r1, #1
 8014538:	bf14      	ite	ne
 801453a:	8018      	strhne	r0, [r3, #0]
 801453c:	6018      	streq	r0, [r3, #0]
 801453e:	e7e6      	b.n	801450e <_scanf_i+0x1aa>
 8014540:	2001      	movs	r0, #1
 8014542:	e7ed      	b.n	8014520 <_scanf_i+0x1bc>
 8014544:	08015dac 	.word	0x08015dac
 8014548:	080147d5 	.word	0x080147d5
 801454c:	080146ed 	.word	0x080146ed
 8014550:	0801632d 	.word	0x0801632d

08014554 <_read_r>:
 8014554:	b538      	push	{r3, r4, r5, lr}
 8014556:	4d07      	ldr	r5, [pc, #28]	; (8014574 <_read_r+0x20>)
 8014558:	4604      	mov	r4, r0
 801455a:	4608      	mov	r0, r1
 801455c:	4611      	mov	r1, r2
 801455e:	2200      	movs	r2, #0
 8014560:	602a      	str	r2, [r5, #0]
 8014562:	461a      	mov	r2, r3
 8014564:	f7ed fc36 	bl	8001dd4 <_read>
 8014568:	1c43      	adds	r3, r0, #1
 801456a:	d102      	bne.n	8014572 <_read_r+0x1e>
 801456c:	682b      	ldr	r3, [r5, #0]
 801456e:	b103      	cbz	r3, 8014572 <_read_r+0x1e>
 8014570:	6023      	str	r3, [r4, #0]
 8014572:	bd38      	pop	{r3, r4, r5, pc}
 8014574:	20001ad4 	.word	0x20001ad4

08014578 <__sccl>:
 8014578:	b570      	push	{r4, r5, r6, lr}
 801457a:	780b      	ldrb	r3, [r1, #0]
 801457c:	4604      	mov	r4, r0
 801457e:	2b5e      	cmp	r3, #94	; 0x5e
 8014580:	bf0b      	itete	eq
 8014582:	784b      	ldrbeq	r3, [r1, #1]
 8014584:	1c48      	addne	r0, r1, #1
 8014586:	1c88      	addeq	r0, r1, #2
 8014588:	2200      	movne	r2, #0
 801458a:	bf08      	it	eq
 801458c:	2201      	moveq	r2, #1
 801458e:	1e61      	subs	r1, r4, #1
 8014590:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014594:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014598:	42a9      	cmp	r1, r5
 801459a:	d1fb      	bne.n	8014594 <__sccl+0x1c>
 801459c:	b90b      	cbnz	r3, 80145a2 <__sccl+0x2a>
 801459e:	3801      	subs	r0, #1
 80145a0:	bd70      	pop	{r4, r5, r6, pc}
 80145a2:	f082 0201 	eor.w	r2, r2, #1
 80145a6:	54e2      	strb	r2, [r4, r3]
 80145a8:	4605      	mov	r5, r0
 80145aa:	4628      	mov	r0, r5
 80145ac:	f810 1b01 	ldrb.w	r1, [r0], #1
 80145b0:	292d      	cmp	r1, #45	; 0x2d
 80145b2:	d006      	beq.n	80145c2 <__sccl+0x4a>
 80145b4:	295d      	cmp	r1, #93	; 0x5d
 80145b6:	d0f3      	beq.n	80145a0 <__sccl+0x28>
 80145b8:	b909      	cbnz	r1, 80145be <__sccl+0x46>
 80145ba:	4628      	mov	r0, r5
 80145bc:	e7f0      	b.n	80145a0 <__sccl+0x28>
 80145be:	460b      	mov	r3, r1
 80145c0:	e7f1      	b.n	80145a6 <__sccl+0x2e>
 80145c2:	786e      	ldrb	r6, [r5, #1]
 80145c4:	2e5d      	cmp	r6, #93	; 0x5d
 80145c6:	d0fa      	beq.n	80145be <__sccl+0x46>
 80145c8:	42b3      	cmp	r3, r6
 80145ca:	dcf8      	bgt.n	80145be <__sccl+0x46>
 80145cc:	3502      	adds	r5, #2
 80145ce:	4619      	mov	r1, r3
 80145d0:	3101      	adds	r1, #1
 80145d2:	428e      	cmp	r6, r1
 80145d4:	5462      	strb	r2, [r4, r1]
 80145d6:	dcfb      	bgt.n	80145d0 <__sccl+0x58>
 80145d8:	1af1      	subs	r1, r6, r3
 80145da:	3901      	subs	r1, #1
 80145dc:	1c58      	adds	r0, r3, #1
 80145de:	42b3      	cmp	r3, r6
 80145e0:	bfa8      	it	ge
 80145e2:	2100      	movge	r1, #0
 80145e4:	1843      	adds	r3, r0, r1
 80145e6:	e7e0      	b.n	80145aa <__sccl+0x32>

080145e8 <_strtol_l.constprop.0>:
 80145e8:	2b01      	cmp	r3, #1
 80145ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145ee:	d001      	beq.n	80145f4 <_strtol_l.constprop.0+0xc>
 80145f0:	2b24      	cmp	r3, #36	; 0x24
 80145f2:	d906      	bls.n	8014602 <_strtol_l.constprop.0+0x1a>
 80145f4:	f7fe f95c 	bl	80128b0 <__errno>
 80145f8:	2316      	movs	r3, #22
 80145fa:	6003      	str	r3, [r0, #0]
 80145fc:	2000      	movs	r0, #0
 80145fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014602:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80146e8 <_strtol_l.constprop.0+0x100>
 8014606:	460d      	mov	r5, r1
 8014608:	462e      	mov	r6, r5
 801460a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801460e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014612:	f017 0708 	ands.w	r7, r7, #8
 8014616:	d1f7      	bne.n	8014608 <_strtol_l.constprop.0+0x20>
 8014618:	2c2d      	cmp	r4, #45	; 0x2d
 801461a:	d132      	bne.n	8014682 <_strtol_l.constprop.0+0x9a>
 801461c:	782c      	ldrb	r4, [r5, #0]
 801461e:	2701      	movs	r7, #1
 8014620:	1cb5      	adds	r5, r6, #2
 8014622:	2b00      	cmp	r3, #0
 8014624:	d05b      	beq.n	80146de <_strtol_l.constprop.0+0xf6>
 8014626:	2b10      	cmp	r3, #16
 8014628:	d109      	bne.n	801463e <_strtol_l.constprop.0+0x56>
 801462a:	2c30      	cmp	r4, #48	; 0x30
 801462c:	d107      	bne.n	801463e <_strtol_l.constprop.0+0x56>
 801462e:	782c      	ldrb	r4, [r5, #0]
 8014630:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014634:	2c58      	cmp	r4, #88	; 0x58
 8014636:	d14d      	bne.n	80146d4 <_strtol_l.constprop.0+0xec>
 8014638:	786c      	ldrb	r4, [r5, #1]
 801463a:	2310      	movs	r3, #16
 801463c:	3502      	adds	r5, #2
 801463e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014642:	f108 38ff 	add.w	r8, r8, #4294967295
 8014646:	f04f 0c00 	mov.w	ip, #0
 801464a:	fbb8 f9f3 	udiv	r9, r8, r3
 801464e:	4666      	mov	r6, ip
 8014650:	fb03 8a19 	mls	sl, r3, r9, r8
 8014654:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014658:	f1be 0f09 	cmp.w	lr, #9
 801465c:	d816      	bhi.n	801468c <_strtol_l.constprop.0+0xa4>
 801465e:	4674      	mov	r4, lr
 8014660:	42a3      	cmp	r3, r4
 8014662:	dd24      	ble.n	80146ae <_strtol_l.constprop.0+0xc6>
 8014664:	f1bc 0f00 	cmp.w	ip, #0
 8014668:	db1e      	blt.n	80146a8 <_strtol_l.constprop.0+0xc0>
 801466a:	45b1      	cmp	r9, r6
 801466c:	d31c      	bcc.n	80146a8 <_strtol_l.constprop.0+0xc0>
 801466e:	d101      	bne.n	8014674 <_strtol_l.constprop.0+0x8c>
 8014670:	45a2      	cmp	sl, r4
 8014672:	db19      	blt.n	80146a8 <_strtol_l.constprop.0+0xc0>
 8014674:	fb06 4603 	mla	r6, r6, r3, r4
 8014678:	f04f 0c01 	mov.w	ip, #1
 801467c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014680:	e7e8      	b.n	8014654 <_strtol_l.constprop.0+0x6c>
 8014682:	2c2b      	cmp	r4, #43	; 0x2b
 8014684:	bf04      	itt	eq
 8014686:	782c      	ldrbeq	r4, [r5, #0]
 8014688:	1cb5      	addeq	r5, r6, #2
 801468a:	e7ca      	b.n	8014622 <_strtol_l.constprop.0+0x3a>
 801468c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014690:	f1be 0f19 	cmp.w	lr, #25
 8014694:	d801      	bhi.n	801469a <_strtol_l.constprop.0+0xb2>
 8014696:	3c37      	subs	r4, #55	; 0x37
 8014698:	e7e2      	b.n	8014660 <_strtol_l.constprop.0+0x78>
 801469a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801469e:	f1be 0f19 	cmp.w	lr, #25
 80146a2:	d804      	bhi.n	80146ae <_strtol_l.constprop.0+0xc6>
 80146a4:	3c57      	subs	r4, #87	; 0x57
 80146a6:	e7db      	b.n	8014660 <_strtol_l.constprop.0+0x78>
 80146a8:	f04f 3cff 	mov.w	ip, #4294967295
 80146ac:	e7e6      	b.n	801467c <_strtol_l.constprop.0+0x94>
 80146ae:	f1bc 0f00 	cmp.w	ip, #0
 80146b2:	da05      	bge.n	80146c0 <_strtol_l.constprop.0+0xd8>
 80146b4:	2322      	movs	r3, #34	; 0x22
 80146b6:	6003      	str	r3, [r0, #0]
 80146b8:	4646      	mov	r6, r8
 80146ba:	b942      	cbnz	r2, 80146ce <_strtol_l.constprop.0+0xe6>
 80146bc:	4630      	mov	r0, r6
 80146be:	e79e      	b.n	80145fe <_strtol_l.constprop.0+0x16>
 80146c0:	b107      	cbz	r7, 80146c4 <_strtol_l.constprop.0+0xdc>
 80146c2:	4276      	negs	r6, r6
 80146c4:	2a00      	cmp	r2, #0
 80146c6:	d0f9      	beq.n	80146bc <_strtol_l.constprop.0+0xd4>
 80146c8:	f1bc 0f00 	cmp.w	ip, #0
 80146cc:	d000      	beq.n	80146d0 <_strtol_l.constprop.0+0xe8>
 80146ce:	1e69      	subs	r1, r5, #1
 80146d0:	6011      	str	r1, [r2, #0]
 80146d2:	e7f3      	b.n	80146bc <_strtol_l.constprop.0+0xd4>
 80146d4:	2430      	movs	r4, #48	; 0x30
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d1b1      	bne.n	801463e <_strtol_l.constprop.0+0x56>
 80146da:	2308      	movs	r3, #8
 80146dc:	e7af      	b.n	801463e <_strtol_l.constprop.0+0x56>
 80146de:	2c30      	cmp	r4, #48	; 0x30
 80146e0:	d0a5      	beq.n	801462e <_strtol_l.constprop.0+0x46>
 80146e2:	230a      	movs	r3, #10
 80146e4:	e7ab      	b.n	801463e <_strtol_l.constprop.0+0x56>
 80146e6:	bf00      	nop
 80146e8:	08016330 	.word	0x08016330

080146ec <_strtol_r>:
 80146ec:	f7ff bf7c 	b.w	80145e8 <_strtol_l.constprop.0>

080146f0 <_strtoul_l.constprop.0>:
 80146f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80146f4:	4f36      	ldr	r7, [pc, #216]	; (80147d0 <_strtoul_l.constprop.0+0xe0>)
 80146f6:	4686      	mov	lr, r0
 80146f8:	460d      	mov	r5, r1
 80146fa:	4628      	mov	r0, r5
 80146fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014700:	5de6      	ldrb	r6, [r4, r7]
 8014702:	f016 0608 	ands.w	r6, r6, #8
 8014706:	d1f8      	bne.n	80146fa <_strtoul_l.constprop.0+0xa>
 8014708:	2c2d      	cmp	r4, #45	; 0x2d
 801470a:	d12f      	bne.n	801476c <_strtoul_l.constprop.0+0x7c>
 801470c:	782c      	ldrb	r4, [r5, #0]
 801470e:	2601      	movs	r6, #1
 8014710:	1c85      	adds	r5, r0, #2
 8014712:	2b00      	cmp	r3, #0
 8014714:	d057      	beq.n	80147c6 <_strtoul_l.constprop.0+0xd6>
 8014716:	2b10      	cmp	r3, #16
 8014718:	d109      	bne.n	801472e <_strtoul_l.constprop.0+0x3e>
 801471a:	2c30      	cmp	r4, #48	; 0x30
 801471c:	d107      	bne.n	801472e <_strtoul_l.constprop.0+0x3e>
 801471e:	7828      	ldrb	r0, [r5, #0]
 8014720:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014724:	2858      	cmp	r0, #88	; 0x58
 8014726:	d149      	bne.n	80147bc <_strtoul_l.constprop.0+0xcc>
 8014728:	786c      	ldrb	r4, [r5, #1]
 801472a:	2310      	movs	r3, #16
 801472c:	3502      	adds	r5, #2
 801472e:	f04f 38ff 	mov.w	r8, #4294967295
 8014732:	2700      	movs	r7, #0
 8014734:	fbb8 f8f3 	udiv	r8, r8, r3
 8014738:	fb03 f908 	mul.w	r9, r3, r8
 801473c:	ea6f 0909 	mvn.w	r9, r9
 8014740:	4638      	mov	r0, r7
 8014742:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014746:	f1bc 0f09 	cmp.w	ip, #9
 801474a:	d814      	bhi.n	8014776 <_strtoul_l.constprop.0+0x86>
 801474c:	4664      	mov	r4, ip
 801474e:	42a3      	cmp	r3, r4
 8014750:	dd22      	ble.n	8014798 <_strtoul_l.constprop.0+0xa8>
 8014752:	2f00      	cmp	r7, #0
 8014754:	db1d      	blt.n	8014792 <_strtoul_l.constprop.0+0xa2>
 8014756:	4580      	cmp	r8, r0
 8014758:	d31b      	bcc.n	8014792 <_strtoul_l.constprop.0+0xa2>
 801475a:	d101      	bne.n	8014760 <_strtoul_l.constprop.0+0x70>
 801475c:	45a1      	cmp	r9, r4
 801475e:	db18      	blt.n	8014792 <_strtoul_l.constprop.0+0xa2>
 8014760:	fb00 4003 	mla	r0, r0, r3, r4
 8014764:	2701      	movs	r7, #1
 8014766:	f815 4b01 	ldrb.w	r4, [r5], #1
 801476a:	e7ea      	b.n	8014742 <_strtoul_l.constprop.0+0x52>
 801476c:	2c2b      	cmp	r4, #43	; 0x2b
 801476e:	bf04      	itt	eq
 8014770:	782c      	ldrbeq	r4, [r5, #0]
 8014772:	1c85      	addeq	r5, r0, #2
 8014774:	e7cd      	b.n	8014712 <_strtoul_l.constprop.0+0x22>
 8014776:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801477a:	f1bc 0f19 	cmp.w	ip, #25
 801477e:	d801      	bhi.n	8014784 <_strtoul_l.constprop.0+0x94>
 8014780:	3c37      	subs	r4, #55	; 0x37
 8014782:	e7e4      	b.n	801474e <_strtoul_l.constprop.0+0x5e>
 8014784:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014788:	f1bc 0f19 	cmp.w	ip, #25
 801478c:	d804      	bhi.n	8014798 <_strtoul_l.constprop.0+0xa8>
 801478e:	3c57      	subs	r4, #87	; 0x57
 8014790:	e7dd      	b.n	801474e <_strtoul_l.constprop.0+0x5e>
 8014792:	f04f 37ff 	mov.w	r7, #4294967295
 8014796:	e7e6      	b.n	8014766 <_strtoul_l.constprop.0+0x76>
 8014798:	2f00      	cmp	r7, #0
 801479a:	da07      	bge.n	80147ac <_strtoul_l.constprop.0+0xbc>
 801479c:	2322      	movs	r3, #34	; 0x22
 801479e:	f8ce 3000 	str.w	r3, [lr]
 80147a2:	f04f 30ff 	mov.w	r0, #4294967295
 80147a6:	b932      	cbnz	r2, 80147b6 <_strtoul_l.constprop.0+0xc6>
 80147a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80147ac:	b106      	cbz	r6, 80147b0 <_strtoul_l.constprop.0+0xc0>
 80147ae:	4240      	negs	r0, r0
 80147b0:	2a00      	cmp	r2, #0
 80147b2:	d0f9      	beq.n	80147a8 <_strtoul_l.constprop.0+0xb8>
 80147b4:	b107      	cbz	r7, 80147b8 <_strtoul_l.constprop.0+0xc8>
 80147b6:	1e69      	subs	r1, r5, #1
 80147b8:	6011      	str	r1, [r2, #0]
 80147ba:	e7f5      	b.n	80147a8 <_strtoul_l.constprop.0+0xb8>
 80147bc:	2430      	movs	r4, #48	; 0x30
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d1b5      	bne.n	801472e <_strtoul_l.constprop.0+0x3e>
 80147c2:	2308      	movs	r3, #8
 80147c4:	e7b3      	b.n	801472e <_strtoul_l.constprop.0+0x3e>
 80147c6:	2c30      	cmp	r4, #48	; 0x30
 80147c8:	d0a9      	beq.n	801471e <_strtoul_l.constprop.0+0x2e>
 80147ca:	230a      	movs	r3, #10
 80147cc:	e7af      	b.n	801472e <_strtoul_l.constprop.0+0x3e>
 80147ce:	bf00      	nop
 80147d0:	08016330 	.word	0x08016330

080147d4 <_strtoul_r>:
 80147d4:	f7ff bf8c 	b.w	80146f0 <_strtoul_l.constprop.0>

080147d8 <__submore>:
 80147d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147dc:	460c      	mov	r4, r1
 80147de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80147e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147e4:	4299      	cmp	r1, r3
 80147e6:	d11d      	bne.n	8014824 <__submore+0x4c>
 80147e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80147ec:	f7fe f9ba 	bl	8012b64 <_malloc_r>
 80147f0:	b918      	cbnz	r0, 80147fa <__submore+0x22>
 80147f2:	f04f 30ff 	mov.w	r0, #4294967295
 80147f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80147fe:	63a3      	str	r3, [r4, #56]	; 0x38
 8014800:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8014804:	6360      	str	r0, [r4, #52]	; 0x34
 8014806:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801480a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801480e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8014812:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014816:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801481a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801481e:	6020      	str	r0, [r4, #0]
 8014820:	2000      	movs	r0, #0
 8014822:	e7e8      	b.n	80147f6 <__submore+0x1e>
 8014824:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8014826:	0077      	lsls	r7, r6, #1
 8014828:	463a      	mov	r2, r7
 801482a:	f7ff f9e5 	bl	8013bf8 <_realloc_r>
 801482e:	4605      	mov	r5, r0
 8014830:	2800      	cmp	r0, #0
 8014832:	d0de      	beq.n	80147f2 <__submore+0x1a>
 8014834:	eb00 0806 	add.w	r8, r0, r6
 8014838:	4601      	mov	r1, r0
 801483a:	4632      	mov	r2, r6
 801483c:	4640      	mov	r0, r8
 801483e:	f7fe f8f5 	bl	8012a2c <memcpy>
 8014842:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8014846:	f8c4 8000 	str.w	r8, [r4]
 801484a:	e7e9      	b.n	8014820 <__submore+0x48>

0801484c <_fstat_r>:
 801484c:	b538      	push	{r3, r4, r5, lr}
 801484e:	4d07      	ldr	r5, [pc, #28]	; (801486c <_fstat_r+0x20>)
 8014850:	2300      	movs	r3, #0
 8014852:	4604      	mov	r4, r0
 8014854:	4608      	mov	r0, r1
 8014856:	4611      	mov	r1, r2
 8014858:	602b      	str	r3, [r5, #0]
 801485a:	f7ed fd3f 	bl	80022dc <_fstat>
 801485e:	1c43      	adds	r3, r0, #1
 8014860:	d102      	bne.n	8014868 <_fstat_r+0x1c>
 8014862:	682b      	ldr	r3, [r5, #0]
 8014864:	b103      	cbz	r3, 8014868 <_fstat_r+0x1c>
 8014866:	6023      	str	r3, [r4, #0]
 8014868:	bd38      	pop	{r3, r4, r5, pc}
 801486a:	bf00      	nop
 801486c:	20001ad4 	.word	0x20001ad4

08014870 <_isatty_r>:
 8014870:	b538      	push	{r3, r4, r5, lr}
 8014872:	4d06      	ldr	r5, [pc, #24]	; (801488c <_isatty_r+0x1c>)
 8014874:	2300      	movs	r3, #0
 8014876:	4604      	mov	r4, r0
 8014878:	4608      	mov	r0, r1
 801487a:	602b      	str	r3, [r5, #0]
 801487c:	f7ed fd3e 	bl	80022fc <_isatty>
 8014880:	1c43      	adds	r3, r0, #1
 8014882:	d102      	bne.n	801488a <_isatty_r+0x1a>
 8014884:	682b      	ldr	r3, [r5, #0]
 8014886:	b103      	cbz	r3, 801488a <_isatty_r+0x1a>
 8014888:	6023      	str	r3, [r4, #0]
 801488a:	bd38      	pop	{r3, r4, r5, pc}
 801488c:	20001ad4 	.word	0x20001ad4

08014890 <_malloc_usable_size_r>:
 8014890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014894:	1f18      	subs	r0, r3, #4
 8014896:	2b00      	cmp	r3, #0
 8014898:	bfbc      	itt	lt
 801489a:	580b      	ldrlt	r3, [r1, r0]
 801489c:	18c0      	addlt	r0, r0, r3
 801489e:	4770      	bx	lr

080148a0 <_init>:
 80148a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148a2:	bf00      	nop
 80148a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148a6:	bc08      	pop	{r3}
 80148a8:	469e      	mov	lr, r3
 80148aa:	4770      	bx	lr

080148ac <_fini>:
 80148ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ae:	bf00      	nop
 80148b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80148b2:	bc08      	pop	{r3}
 80148b4:	469e      	mov	lr, r3
 80148b6:	4770      	bx	lr
